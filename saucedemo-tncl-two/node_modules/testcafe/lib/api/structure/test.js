"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const testing_unit_1 = __importDefault(require("./testing-unit"));
const unit_type_1 = __importDefault(require("./unit-type"));
const type_assertions_1 = require("../../errors/runtime/type-assertions");
const wrap_test_function_1 = __importDefault(require("../wrap-test-function"));
const assert_type_1 = __importDefault(require("../request-hooks/assert-type"));
const assert_type_2 = __importDefault(require("../../custom-client-scripts/assert-type"));
const types_1 = require("../../errors/types");
const runtime_1 = require("../../errors/runtime");
const option_names_1 = __importDefault(require("../../configuration/option-names"));
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
class Test extends testing_unit_1.default {
    constructor(testFile) {
        // NOTE: 'fixture' directive can be missing
        const fixture = testFile.currentFixture;
        const pageUrl = fixture && fixture.pageUrl || testcafe_hammerhead_1.SPECIAL_BLANK_PAGE;
        super(testFile, unit_type_1.default.test, pageUrl);
        this.fixture = fixture;
        this.fn = null;
        this.beforeFn = null;
        this.afterFn = null;
        this.timeouts = null;
        if (this.fixture) {
            this.requestHooks = this.fixture.requestHooks.slice();
            this.clientScripts = this.fixture.clientScripts.slice();
        }
        return this.apiOrigin;
    }
    _add(name, fn) {
        type_assertions_1.assertType(type_assertions_1.is.string, 'apiOrigin', 'The test name', name);
        type_assertions_1.assertType(type_assertions_1.is.function, 'apiOrigin', 'The test body', fn);
        type_assertions_1.assertType(type_assertions_1.is.nonNullObject, 'apiOrigin', `The fixture of '${name}' test`, this.fixture);
        this.name = name;
        this.fn = wrap_test_function_1.default(fn);
        if (!this.testFile.collectedTests.includes(this))
            this.testFile.collectedTests.push(this);
        return this.apiOrigin;
    }
    _before$(fn) {
        type_assertions_1.assertType(type_assertions_1.is.function, 'before', 'test.before hook', fn);
        this.beforeFn = wrap_test_function_1.default(fn);
        return this.apiOrigin;
    }
    _after$(fn) {
        type_assertions_1.assertType(type_assertions_1.is.function, 'after', 'test.after hook', fn);
        this.afterFn = wrap_test_function_1.default(fn);
        return this.apiOrigin;
    }
    _requestHooks$(...hooks) {
        if (this.apiMethodWasCalled.requestHooks)
            throw new runtime_1.APIError(option_names_1.default.requestHooks, types_1.RUNTIME_ERRORS.multipleAPIMethodCallForbidden, option_names_1.default.requestHooks);
        hooks = lodash_1.flattenDeep(hooks);
        assert_type_1.default(hooks);
        this.requestHooks = lodash_1.union(this.requestHooks, hooks);
        this.apiMethodWasCalled.requestHooks = true;
        return this.apiOrigin;
    }
    _clientScripts$(...scripts) {
        if (this.apiMethodWasCalled.clientScripts)
            throw new runtime_1.APIError(option_names_1.default.clientScripts, types_1.RUNTIME_ERRORS.multipleAPIMethodCallForbidden, option_names_1.default.clientScripts);
        scripts = lodash_1.flattenDeep(scripts);
        assert_type_2.default(scripts);
        this.clientScripts = lodash_1.union(this.clientScripts, scripts);
        this.apiMethodWasCalled.clientScripts = true;
        return this.apiOrigin;
    }
    _timeouts$(timeouts) {
        type_assertions_1.assertType(type_assertions_1.is.testTimeouts, 'timeouts', 'test.timeouts', timeouts);
        this.timeouts = timeouts;
        return this.apiOrigin;
    }
}
exports.default = Test;
testing_unit_1.default.makeAPIListForChildClass(Test);
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,
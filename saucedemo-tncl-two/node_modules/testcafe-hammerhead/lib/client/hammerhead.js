(function initHammerheadClient () {
    // This file was generated by modules-webmake (modules for web) project.
// See: https://github.com/medikoo/modules-webmake

(function (modules) {
	'use strict';

	var resolve, getRequire, wmRequire, notFoundError, findFile
	  , extensions = {".js":[],".json":[],".css":[],".html":[]}
	  , envRequire = typeof require === 'function' ? require : null;

	notFoundError = function (path) {
		var error = new Error("Could not find module '" + path + "'");
		error.code = 'MODULE_NOT_FOUND';
		return error;
	};
	findFile = function (scope, name, extName) {
		var i, ext;
		if (typeof scope[name + extName] === 'function') return name + extName;
		for (i = 0; (ext = extensions[extName][i]); ++i) {
			if (typeof scope[name + ext] === 'function') return name + ext;
		}
		return null;
	};
	resolve = function (scope, tree, path, fullPath, state, id) {
		var name, dir, exports, module, fn, found, ext;
		path = path.split(/[\\/]/);
		name = path.pop();
		if ((name === '.') || (name === '..')) {
			path.push(name);
			name = '';
		}
		while ((dir = path.shift()) != null)  {
			if (!dir || (dir === '.')) continue;
			if (dir === '..') {
				scope = tree.pop();
				id = id.slice(0, id.lastIndexOf('/'));
			} else {
				tree.push(scope);
				scope = scope[dir];
				id += '/' + dir;
			}
			if (!scope) throw notFoundError(fullPath);
		}
		if (name && (typeof scope[name] !== 'function')) {
			found = findFile(scope, name, '.js');
			if (!found) found = findFile(scope, name, '.json');
			if (!found) found = findFile(scope, name, '.css');
			if (!found) found = findFile(scope, name, '.html');
			if (found) {
				name = found;
			} else if ((state !== 2) && (typeof scope[name] === 'object')) {
				tree.push(scope);
				scope = scope[name];
				id += '/' + name;
				name = '';
			}
		}
		if (!name) {
			if ((state !== 1) && scope[':mainpath:']) {
				return resolve(scope, tree, scope[':mainpath:'], fullPath, 1, id);
			}
			return resolve(scope, tree, 'index', fullPath, 2, id);
		}
		fn = scope[name];
		if (!fn) throw notFoundError(fullPath);
		if (fn.hasOwnProperty('module')) return fn.module.exports;
		exports = {};
		fn.module = module = { exports: exports, id: id + '/' + name };
		fn.call(exports, exports, module, getRequire(scope, tree, id));
		return module.exports;
	};
	wmRequire = function (scope, tree, fullPath, id) {
		var name, path = fullPath, t = fullPath.charAt(0), state = 0;
		if (t === '/') {
			path = path.slice(1);
			scope = modules['/'];
			if (!scope) {
				if (envRequire) return envRequire(fullPath);
				throw notFoundError(fullPath);
			}
			id = '/';
			tree = [];
		} else if (t !== '.') {
			name = path.indexOf('@') === 0 ? path.split('/', 2).join("/") : path.split('/', 1)[0];
			scope = modules[name];
			if (!scope) {
				if (envRequire) return envRequire(fullPath);
				throw notFoundError(fullPath);
			}
			id = name;
			tree = [];
			path = path.slice(name.length + 1);
			if (!path) {
				path = scope[':mainpath:'];
				if (path) {
					state = 1;
				} else {
					path = 'index';
					state = 2;
				}
			}
		}
		return resolve(scope, tree, path, fullPath, state, id);
	};
	getRequire = function (scope, tree, id) {
		var localRequire = function (path) {
			return wmRequire(scope, [].concat(tree), path, id);
		};
		if (envRequire) localRequire.fromParentEnvironment = envRequire;
		return localRequire
	};
	return getRequire(modules, [], '');
})
({
	"acorn-hammerhead": {
		":mainpath:": "lib/index.js",
		"lib": {
			"expression.js": function (exports, module, require) {
				

				var _tokentype = require("./tokentype");

				var _state = require("./state");

				var _parseutil = require("./parseutil");

				var _whitespace = require("./whitespace");

				var _scopeflags = require("./scopeflags");

				var pp = _state.Parser.prototype; // Check if property name clashes with already added.
				// Object/class getters and setters are not allowed to clash —
				// either with each other or with an init property — and in
				// strict mode, init properties are also not allowed to be repeated.
				// A recursive descent parser operates by defining functions for all
				// syntactic elements, and recursively calling those, each function
				// advancing the input stream and returning an AST node. Precedence
				// of constructs (for example, the fact that `!x[1]` means `!(x[1])`
				// instead of `(!x)[1]` is handled by the fact that the parser
				// function that parses unary prefix operators is called first, and
				// in turn calls the function that parses `[]` subscripts — that
				// way, it'll receive the node for `x[1]` already parsed, and wraps
				// *that* in the unary operator node.
				//
				// Acorn uses an [operator precedence parser][opp] to handle binary
				// operator precedence, because it is much more compact than using
				// the technique outlined above, which uses different, nesting
				// functions to specify precedence, for all of the ten binary
				// precedence levels that JavaScript defines.
				//
				// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser

				pp.checkPropClash = function (prop, propHash, refDestructuringErrors) {
				  if (this.options.ecmaVersion >= 9 && prop.type === "SpreadElement") return;
				  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) return;
				  var key = prop.key,
				      name;

				  switch (key.type) {
				    case "Identifier":
				      name = key.name;
				      break;

				    case "Literal":
				      name = String(key.value);
				      break;

				    default:
				      return;
				  }

				  var kind = prop.kind;

				  if (this.options.ecmaVersion >= 6) {
				    if (name === "__proto__" && kind === "init") {
				      if (propHash.proto) {
				        if (refDestructuringErrors && refDestructuringErrors.doubleProto < 0) refDestructuringErrors.doubleProto = key.start; // Backwards-compat kludge. Can be removed in version 6.0
				        else this.raiseRecoverable(key.start, "Redefinition of __proto__ property");
				      }

				      propHash.proto = true;
				    }

				    return;
				  }

				  name = "$" + name;
				  var other = propHash[name];

				  if (other) {
				    var redefinition;

				    if (kind === "init") {
				      redefinition = this.strict && other.init || other.get || other.set;
				    } else {
				      redefinition = other.init || other[kind];
				    }

				    if (redefinition) this.raiseRecoverable(key.start, "Redefinition of property");
				  } else {
				    other = propHash[name] = {
				      init: false,
				      get: false,
				      set: false
				    };
				  }

				  other[kind] = true;
				}; // ### Expression parsing
				// These nest, from the most general expression type at the top to
				// 'atomic', nondivisible expression types at the bottom. Most of
				// the functions will simply let the function(s) below them parse,
				// and, *if* the syntactic construct they handle is present, wrap
				// the AST node that the inner parser gave them in another node.
				// Parse a full expression. The optional arguments are used to
				// forbid the `in` operator (in for loops initalization expressions)
				// and provide reference for storing '=' operator inside shorthand
				// property assignment in contexts where both object expression
				// and object pattern might appear (so it's possible to raise
				// delayed syntax error at correct position).


				pp.parseExpression = function (noIn, refDestructuringErrors) {
				  var startPos = this.start,
				      startLoc = this.startLoc;
				  var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);

				  if (this.type === _tokentype.types.comma) {
				    var node = this.startNodeAt(startPos, startLoc);
				    node.expressions = [expr];

				    while (this.eat(_tokentype.types.comma)) {
				      node.expressions.push(this.parseMaybeAssign(noIn, refDestructuringErrors));
				    }

				    return this.finishNode(node, "SequenceExpression");
				  }

				  return expr;
				}; // Parse an assignment expression. This includes applications of
				// operators like `+=`.


				pp.parseMaybeAssign = function (noIn, refDestructuringErrors, afterLeftParse) {
				  if (this.isContextual("yield")) {
				    if (this.inGenerator) return this.parseYield(noIn); // The tokenizer will assume an expression is allowed after
				    // `yield`, but this isn't that kind of yield
				    else this.exprAllowed = false;
				  }

				  var ownDestructuringErrors = false,
				      oldParenAssign = -1,
				      oldTrailingComma = -1,
				      oldShorthandAssign = -1;

				  if (refDestructuringErrors) {
				    oldParenAssign = refDestructuringErrors.parenthesizedAssign;
				    oldTrailingComma = refDestructuringErrors.trailingComma;
				    oldShorthandAssign = refDestructuringErrors.shorthandAssign;
				    refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.shorthandAssign = -1;
				  } else {
				    refDestructuringErrors = new _parseutil.DestructuringErrors();
				    ownDestructuringErrors = true;
				  }

				  var startPos = this.start,
				      startLoc = this.startLoc;
				  if (this.type === _tokentype.types.parenL || this.type === _tokentype.types.name) this.potentialArrowAt = this.start;
				  var left = this.parseMaybeConditional(noIn, refDestructuringErrors);
				  if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc);

				  if (this.type.isAssign) {
				    var node = this.startNodeAt(startPos, startLoc);
				    node.operator = this.value;
				    node.left = this.type === _tokentype.types.eq ? this.toAssignable(left, false, refDestructuringErrors) : left;
				    if (!ownDestructuringErrors) _parseutil.DestructuringErrors.call(refDestructuringErrors);
				    refDestructuringErrors.shorthandAssign = -1; // reset because shorthand default was used correctly

				    this.checkLVal(left);
				    this.next();
				    node.right = this.parseMaybeAssign(noIn);
				    return this.finishNode(node, "AssignmentExpression");
				  } else {
				    if (ownDestructuringErrors) this.checkExpressionErrors(refDestructuringErrors, true);
				  }

				  if (oldParenAssign > -1) refDestructuringErrors.parenthesizedAssign = oldParenAssign;
				  if (oldTrailingComma > -1) refDestructuringErrors.trailingComma = oldTrailingComma;
				  if (oldShorthandAssign > -1) refDestructuringErrors.shorthandAssign = oldShorthandAssign;
				  return left;
				}; // Parse a ternary conditional (`?:`) operator.


				pp.parseMaybeConditional = function (noIn, refDestructuringErrors) {
				  var startPos = this.start,
				      startLoc = this.startLoc;
				  var expr = this.parseExprOps(noIn, refDestructuringErrors);
				  if (this.checkExpressionErrors(refDestructuringErrors)) return expr;

				  if (this.eat(_tokentype.types.question)) {
				    var node = this.startNodeAt(startPos, startLoc);
				    node.test = expr;
				    node.consequent = this.parseMaybeAssign();
				    this.expect(_tokentype.types.colon);
				    node.alternate = this.parseMaybeAssign(noIn);
				    return this.finishNode(node, "ConditionalExpression");
				  }

				  return expr;
				}; // Start the precedence parser.


				pp.parseExprOps = function (noIn, refDestructuringErrors) {
				  var startPos = this.start,
				      startLoc = this.startLoc;
				  var expr = this.parseMaybeUnary(refDestructuringErrors, false);
				  if (this.checkExpressionErrors(refDestructuringErrors)) return expr;
				  return expr.start === startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn);
				}; // Parse binary operators with the operator precedence parsing
				// algorithm. `left` is the left-hand side of the operator.
				// `minPrec` provides context that allows the function to stop and
				// defer further parser to one of its callers when it encounters an
				// operator that has a lower precedence than the set it is parsing.


				pp.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {
				  var prec = this.type.binop;

				  if (prec != null && (!noIn || this.type !== _tokentype.types._in)) {
				    if (prec > minPrec) {
				      var logical = this.type === _tokentype.types.logicalOR || this.type === _tokentype.types.logicalAND;
				      var op = this.value;
				      this.next();
				      var startPos = this.start,
				          startLoc = this.startLoc;
				      var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);
				      var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);
				      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);
				    }
				  }

				  return left;
				};

				pp.buildBinary = function (startPos, startLoc, left, right, op, logical) {
				  var node = this.startNodeAt(startPos, startLoc);
				  node.left = left;
				  node.operator = op;
				  node.right = right;
				  return this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression");
				}; // Parse unary operators, both prefix and postfix.


				pp.parseMaybeUnary = function (refDestructuringErrors, sawUnary) {
				  var startPos = this.start,
				      startLoc = this.startLoc,
				      expr;

				  if (this.isContextual("await") && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction)) {
				    expr = this.parseAwait();
				    sawUnary = true;
				  } else if (this.type.prefix) {
				    var node = this.startNode(),
				        update = this.type === _tokentype.types.incDec;
				    node.operator = this.value;
				    node.prefix = true;
				    this.next();
				    node.argument = this.parseMaybeUnary(null, true);
				    this.checkExpressionErrors(refDestructuringErrors, true);
				    if (update) this.checkLVal(node.argument);else if (this.strict && node.operator === "delete" && node.argument.type === "Identifier") this.raiseRecoverable(node.start, "Deleting local variable in strict mode");else sawUnary = true;
				    expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
				  } else {
				    expr = this.parseExprSubscripts(refDestructuringErrors);
				    if (this.checkExpressionErrors(refDestructuringErrors)) return expr;

				    while (this.type.postfix && !this.canInsertSemicolon()) {
				      var _node = this.startNodeAt(startPos, startLoc);

				      _node.operator = this.value;
				      _node.prefix = false;
				      _node.argument = expr;
				      this.checkLVal(expr);
				      this.next();
				      expr = this.finishNode(_node, "UpdateExpression");
				    }
				  }

				  if (!sawUnary && this.eat(_tokentype.types.starstar)) return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), "**", false);else return expr;
				}; // Parse call, dot, and `[]`-subscript expressions.


				pp.parseExprSubscripts = function (refDestructuringErrors) {
				  var startPos = this.start,
				      startLoc = this.startLoc;
				  var expr = this.parseExprAtom(refDestructuringErrors);
				  var skipArrowSubscripts = expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")";
				  if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) return expr;
				  var result = this.parseSubscripts(expr, startPos, startLoc);

				  if (refDestructuringErrors && result.type === "MemberExpression") {
				    if (refDestructuringErrors.parenthesizedAssign >= result.start) refDestructuringErrors.parenthesizedAssign = -1;
				    if (refDestructuringErrors.parenthesizedBind >= result.start) refDestructuringErrors.parenthesizedBind = -1;
				  }

				  return result;
				};

				pp.parseSubscripts = function (base, startPos, startLoc, noCalls) {
				  var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" && this.lastTokEnd === base.end && !this.canInsertSemicolon() && this.input.slice(base.start, base.end) === "async";

				  while (true) {
				    var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow);
				    if (element === base || element.type === "ArrowFunctionExpression") return element;
				    base = element;
				  }
				};

				pp.parseSubscript = function (base, startPos, startLoc, noCalls, maybeAsyncArrow) {
				  var computed = this.eat(_tokentype.types.bracketL);

				  if (computed || this.eat(_tokentype.types.dot)) {
				    var node = this.startNodeAt(startPos, startLoc);
				    node.object = base;
				    node.property = computed ? this.parseExpression() : this.parseIdent(true);
				    node.computed = !!computed;
				    if (computed) this.expect(_tokentype.types.bracketR);
				    base = this.finishNode(node, "MemberExpression");
				  } else if (!noCalls && this.eat(_tokentype.types.parenL)) {
				    var refDestructuringErrors = new _parseutil.DestructuringErrors(),
				        oldYieldPos = this.yieldPos,
				        oldAwaitPos = this.awaitPos,
				        oldAwaitIdentPos = this.awaitIdentPos;
				    this.yieldPos = 0;
				    this.awaitPos = 0;
				    this.awaitIdentPos = 0;
				    var exprList = this.parseExprList(_tokentype.types.parenR, this.options.ecmaVersion >= 8 && base.type !== "Import", false, refDestructuringErrors);

				    if (maybeAsyncArrow && !this.canInsertSemicolon() && this.eat(_tokentype.types.arrow)) {
				      this.checkPatternErrors(refDestructuringErrors, false);
				      this.checkYieldAwaitInDefaultParams();
				      if (this.awaitIdentPos > 0) this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function");
				      this.yieldPos = oldYieldPos;
				      this.awaitPos = oldAwaitPos;
				      this.awaitIdentPos = oldAwaitIdentPos;
				      return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true);
				    }

				    this.checkExpressionErrors(refDestructuringErrors, true);
				    this.yieldPos = oldYieldPos || this.yieldPos;
				    this.awaitPos = oldAwaitPos || this.awaitPos;
				    this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;

				    var _node2 = this.startNodeAt(startPos, startLoc);

				    _node2.callee = base;
				    _node2.arguments = exprList;

				    if (_node2.callee.type === "Import") {
				      if (_node2.arguments.length !== 1) {
				        this.raise(_node2.start, "import() requires exactly one argument");
				      }

				      var importArg = _node2.arguments[0];

				      if (importArg && importArg.type === "SpreadElement") {
				        this.raise(importArg.start, "... is not allowed in import()");
				      }
				    }

				    base = this.finishNode(_node2, "CallExpression");
				  } else if (this.type === _tokentype.types.backQuote) {
				    var _node3 = this.startNodeAt(startPos, startLoc);

				    _node3.tag = base;
				    _node3.quasi = this.parseTemplate({
				      isTagged: true
				    });
				    base = this.finishNode(_node3, "TaggedTemplateExpression");
				  }

				  return base;
				}; // Parse an atomic expression — either a single token that is an
				// expression, an expression started by a keyword like `function` or
				// `new`, or an expression wrapped in punctuation like `()`, `[]`,
				// or `{}`.


				pp.parseExprAtom = function (refDestructuringErrors) {
				  // If a division operator appears in an expression position, the
				  // tokenizer got confused, and we force it to read a regexp instead.
				  if (this.type === _tokentype.types.slash) this.readRegexp();
				  var node,
				      canBeArrow = this.potentialArrowAt === this.start;

				  switch (this.type) {
				    case _tokentype.types._super:
				      if (!this.allowSuper) this.raise(this.start, "'super' keyword outside a method");
				      node = this.startNode();
				      this.next();
				      if (this.type === _tokentype.types.parenL && !this.allowDirectSuper) this.raise(node.start, "super() call outside constructor of a subclass"); // The `super` keyword can appear at below:
				      // SuperProperty:
				      //     super [ Expression ]
				      //     super . IdentifierName
				      // SuperCall:
				      //     super Arguments

				      if (this.type !== _tokentype.types.dot && this.type !== _tokentype.types.bracketL && this.type !== _tokentype.types.parenL) this.unexpected();
				      return this.finishNode(node, "Super");

				    case _tokentype.types._this:
				      node = this.startNode();
				      this.next();
				      return this.finishNode(node, "ThisExpression");

				    case _tokentype.types.name:
				      var startPos = this.start,
				          startLoc = this.startLoc,
				          containsEsc = this.containsEsc;
				      var id = this.parseIdent(false);
				      if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === "async" && !this.canInsertSemicolon() && this.eat(_tokentype.types._function)) return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true);

				      if (canBeArrow && !this.canInsertSemicolon()) {
				        if (this.eat(_tokentype.types.arrow)) return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false);

				        if (this.options.ecmaVersion >= 8 && id.name === "async" && this.type === _tokentype.types.name && !containsEsc) {
				          id = this.parseIdent(false);
				          if (this.canInsertSemicolon() || !this.eat(_tokentype.types.arrow)) this.unexpected();
				          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true);
				        }
				      }

				      return id;

				    case _tokentype.types.regexp:
				      var value = this.value;
				      node = this.parseLiteral(value.value);
				      node.regex = {
				        pattern: value.pattern,
				        flags: value.flags
				      };
				      return node;

				    case _tokentype.types.num:
				    case _tokentype.types.string:
				      return this.parseLiteral(this.value);

				    case _tokentype.types._null:
				    case _tokentype.types._true:
				    case _tokentype.types._false:
				      node = this.startNode();
				      node.value = this.type === _tokentype.types._null ? null : this.type === _tokentype.types._true;
				      node.raw = this.type.keyword;
				      this.next();
				      return this.finishNode(node, "Literal");

				    case _tokentype.types.parenL:
				      var start = this.start,
				          expr = this.parseParenAndDistinguishExpression(canBeArrow);

				      if (refDestructuringErrors) {
				        if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr)) refDestructuringErrors.parenthesizedAssign = start;
				        if (refDestructuringErrors.parenthesizedBind < 0) refDestructuringErrors.parenthesizedBind = start;
				      }

				      return expr;

				    case _tokentype.types.bracketL:
				      node = this.startNode();
				      this.next();
				      node.elements = this.parseExprList(_tokentype.types.bracketR, true, true, refDestructuringErrors);
				      return this.finishNode(node, "ArrayExpression");

				    case _tokentype.types.braceL:
				      return this.parseObj(false, refDestructuringErrors);

				    case _tokentype.types._function:
				      node = this.startNode();
				      this.next();
				      return this.parseFunction(node, 0);

				    case _tokentype.types._class:
				      return this.parseClass(this.startNode(), false);

				    case _tokentype.types._new:
				      return this.parseNew();

				    case _tokentype.types.backQuote:
				      return this.parseTemplate();

				    case _tokentype.types._import:
				      if (this.options.ecmaVersion > 10) {
				        return this.parseDynamicImport();
				      } else {
				        return this.unexpected();
				      }

				    default:
				      this.unexpected();
				  }
				};

				pp.parseDynamicImport = function () {
				  var node = this.startNode();
				  this.next();

				  if (this.type !== _tokentype.types.parenL) {
				    this.unexpected();
				  }

				  return this.finishNode(node, "Import");
				};

				pp.parseLiteral = function (value) {
				  var node = this.startNode();
				  node.value = value;
				  node.raw = this.input.slice(this.start, this.end);
				  if (node.raw.charCodeAt(node.raw.length - 1) === 110) node.bigint = node.raw.slice(0, -1);
				  this.next();
				  return this.finishNode(node, "Literal");
				};

				pp.parseParenExpression = function () {
				  this.expect(_tokentype.types.parenL);
				  var val = this.parseExpression();
				  this.expect(_tokentype.types.parenR);
				  return val;
				};

				pp.parseParenAndDistinguishExpression = function (canBeArrow) {
				  var startPos = this.start,
				      startLoc = this.startLoc,
				      val,
				      allowTrailingComma = this.options.ecmaVersion >= 8;

				  if (this.options.ecmaVersion >= 6) {
				    this.next();
				    var innerStartPos = this.start,
				        innerStartLoc = this.startLoc;
				    var exprList = [],
				        first = true,
				        lastIsComma = false;
				    var refDestructuringErrors = new _parseutil.DestructuringErrors(),
				        oldYieldPos = this.yieldPos,
				        oldAwaitPos = this.awaitPos,
				        spreadStart;
				    this.yieldPos = 0;
				    this.awaitPos = 0; // Do not save awaitIdentPos to allow checking awaits nested in parameters

				    while (this.type !== _tokentype.types.parenR) {
				      first ? first = false : this.expect(_tokentype.types.comma);

				      if (allowTrailingComma && this.afterTrailingComma(_tokentype.types.parenR, true)) {
				        lastIsComma = true;
				        break;
				      } else if (this.type === _tokentype.types.ellipsis) {
				        spreadStart = this.start;
				        exprList.push(this.parseParenItem(this.parseRestBinding()));
				        if (this.type === _tokentype.types.comma) this.raise(this.start, "Comma is not permitted after the rest element");
				        break;
				      } else {
				        exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
				      }
				    }

				    var innerEndPos = this.start,
				        innerEndLoc = this.startLoc;
				    this.expect(_tokentype.types.parenR);

				    if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokentype.types.arrow)) {
				      this.checkPatternErrors(refDestructuringErrors, false);
				      this.checkYieldAwaitInDefaultParams();
				      this.yieldPos = oldYieldPos;
				      this.awaitPos = oldAwaitPos;
				      return this.parseParenArrowList(startPos, startLoc, exprList);
				    }

				    if (!exprList.length || lastIsComma) this.unexpected(this.lastTokStart);
				    if (spreadStart) this.unexpected(spreadStart);
				    this.checkExpressionErrors(refDestructuringErrors, true);
				    this.yieldPos = oldYieldPos || this.yieldPos;
				    this.awaitPos = oldAwaitPos || this.awaitPos;

				    if (exprList.length > 1) {
				      val = this.startNodeAt(innerStartPos, innerStartLoc);
				      val.expressions = exprList;
				      this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
				    } else {
				      val = exprList[0];
				    }
				  } else {
				    val = this.parseParenExpression();
				  }

				  if (this.options.preserveParens) {
				    var par = this.startNodeAt(startPos, startLoc);
				    par.expression = val;
				    return this.finishNode(par, "ParenthesizedExpression");
				  } else {
				    return val;
				  }
				};

				pp.parseParenItem = function (item) {
				  return item;
				};

				pp.parseParenArrowList = function (startPos, startLoc, exprList) {
				  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList);
				}; // New's precedence is slightly tricky. It must allow its argument to
				// be a `[]` or dot subscript expression, but not a call — at least,
				// not without wrapping it in parentheses. Thus, it uses the noCalls
				// argument to parseSubscripts to prevent it from consuming the
				// argument list.


				var empty = [];

				pp.parseNew = function () {
				  var node = this.startNode();
				  var meta = this.parseIdent(true);

				  if (this.options.ecmaVersion >= 6 && this.eat(_tokentype.types.dot)) {
				    node.meta = meta;
				    var containsEsc = this.containsEsc;
				    node.property = this.parseIdent(true);
				    if (node.property.name !== "target" || containsEsc) this.raiseRecoverable(node.property.start, "The only valid meta property for new is new.target");
				    if (!this.inNonArrowFunction()) this.raiseRecoverable(node.start, "new.target can only be used in functions");
				    return this.finishNode(node, "MetaProperty");
				  }

				  var startPos = this.start,
				      startLoc = this.startLoc;
				  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);

				  if (this.options.ecmaVersion > 10 && node.callee.type === "Import") {
				    this.raise(node.callee.start, "Cannot use new with import(...)");
				  }

				  if (this.eat(_tokentype.types.parenL)) node.arguments = this.parseExprList(_tokentype.types.parenR, this.options.ecmaVersion >= 8 && node.callee.type !== "Import", false);else node.arguments = empty;
				  return this.finishNode(node, "NewExpression");
				}; // Parse template expression.


				pp.parseTemplateElement = function (_ref3) {
				  var isTagged = _ref3.isTagged;
				  var elem = this.startNode();

				  if (this.type === _tokentype.types.invalidTemplate) {
				    if (!isTagged) {
				      this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal");
				    }

				    elem.value = {
				      raw: this.value,
				      cooked: null
				    };
				  } else {
				    elem.value = {
				      raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
				      cooked: this.value
				    };
				  }

				  this.next();
				  elem.tail = this.type === _tokentype.types.backQuote;
				  return this.finishNode(elem, "TemplateElement");
				};

				pp.parseTemplate = function (_temp) {
				  var _ref4 = _temp === void 0 ? {} : _temp,
				      _ref4$isTagged = _ref4.isTagged,
				      isTagged = _ref4$isTagged === void 0 ? false : _ref4$isTagged;

				  var node = this.startNode();
				  this.next();
				  node.expressions = [];
				  var curElt = this.parseTemplateElement({
				    isTagged: isTagged
				  });
				  node.quasis = [curElt];

				  while (!curElt.tail) {
				    if (this.type === _tokentype.types.eof) this.raise(this.pos, "Unterminated template literal");
				    this.expect(_tokentype.types.dollarBraceL);
				    node.expressions.push(this.parseExpression());
				    this.expect(_tokentype.types.braceR);
				    node.quasis.push(curElt = this.parseTemplateElement({
				      isTagged: isTagged
				    }));
				  }

				  this.next();
				  return this.finishNode(node, "TemplateLiteral");
				};

				pp.isAsyncProp = function (prop) {
				  return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" && (this.type === _tokentype.types.name || this.type === _tokentype.types.num || this.type === _tokentype.types.string || this.type === _tokentype.types.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === _tokentype.types.star) && !_whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
				}; // Parse an object literal or binding pattern.


				pp.parseObj = function (isPattern, refDestructuringErrors) {
				  var node = this.startNode(),
				      first = true,
				      propHash = {};
				  node.properties = [];
				  this.next();

				  while (!this.eat(_tokentype.types.braceR)) {
				    if (!first) {
				      this.expect(_tokentype.types.comma);
				      if (this.afterTrailingComma(_tokentype.types.braceR)) break;
				    } else first = false;

				    var prop = this.parseProperty(isPattern, refDestructuringErrors);
				    if (!isPattern) this.checkPropClash(prop, propHash, refDestructuringErrors);
				    node.properties.push(prop);
				  }

				  return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
				};

				pp.parseProperty = function (isPattern, refDestructuringErrors) {
				  var prop = this.startNode(),
				      isGenerator,
				      isAsync,
				      startPos,
				      startLoc;

				  if (this.options.ecmaVersion >= 9 && this.eat(_tokentype.types.ellipsis)) {
				    if (isPattern) {
				      prop.argument = this.parseIdent(false);

				      if (this.type === _tokentype.types.comma) {
				        this.raise(this.start, "Comma is not permitted after the rest element");
				      }

				      return this.finishNode(prop, "RestElement");
				    } // To disallow parenthesized identifier via `this.toAssignable()`.


				    if (this.type === _tokentype.types.parenL && refDestructuringErrors) {
				      if (refDestructuringErrors.parenthesizedAssign < 0) {
				        refDestructuringErrors.parenthesizedAssign = this.start;
				      }

				      if (refDestructuringErrors.parenthesizedBind < 0) {
				        refDestructuringErrors.parenthesizedBind = this.start;
				      }
				    } // Parse argument.


				    prop.argument = this.parseMaybeAssign(false, refDestructuringErrors); // To disallow trailing comma via `this.toAssignable()`.

				    if (this.type === _tokentype.types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {
				      refDestructuringErrors.trailingComma = this.start;
				    } // Finish


				    return this.finishNode(prop, "SpreadElement");
				  }

				  if (this.options.ecmaVersion >= 6) {
				    prop.method = false;
				    prop.shorthand = false;

				    if (isPattern || refDestructuringErrors) {
				      startPos = this.start;
				      startLoc = this.startLoc;
				    }

				    if (!isPattern) isGenerator = this.eat(_tokentype.types.star);
				  }

				  var containsEsc = this.containsEsc;
				  this.parsePropertyName(prop);

				  if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {
				    isAsync = true;
				    isGenerator = this.options.ecmaVersion >= 9 && this.eat(_tokentype.types.star);
				    this.parsePropertyName(prop, refDestructuringErrors);
				  } else {
				    isAsync = false;
				  }

				  this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);
				  return this.finishNode(prop, "Property");
				};

				pp.parsePropertyValue = function (prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
				  if ((isGenerator || isAsync) && this.type === _tokentype.types.colon) this.unexpected();

				  if (this.eat(_tokentype.types.colon)) {
				    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
				    prop.kind = "init";
				  } else if (this.options.ecmaVersion >= 6 && this.type === _tokentype.types.parenL) {
				    if (isPattern) this.unexpected();
				    prop.kind = "init";
				    prop.method = true;
				    prop.value = this.parseMethod(isGenerator, isAsync);
				  } else if (!isPattern && !containsEsc && this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && this.type !== _tokentype.types.comma && this.type !== _tokentype.types.braceR) {
				    if (isGenerator || isAsync) this.unexpected();
				    prop.kind = prop.key.name;
				    this.parsePropertyName(prop);
				    prop.value = this.parseMethod(false);
				    var paramCount = prop.kind === "get" ? 0 : 1;

				    if (prop.value.params.length !== paramCount) {
				      var start = prop.value.start;
				      if (prop.kind === "get") this.raiseRecoverable(start, "getter should have no params");else this.raiseRecoverable(start, "setter should have exactly one param");
				    } else {
				      if (prop.kind === "set" && prop.value.params[0].type === "RestElement") this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params");
				    }
				  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
				    if (isGenerator || isAsync) this.unexpected();
				    this.checkUnreserved(prop.key);
				    if (prop.key.name === "await" && !this.awaitIdentPos) this.awaitIdentPos = startPos;
				    prop.kind = "init";

				    if (isPattern) {
				      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
				    } else if (this.type === _tokentype.types.eq && refDestructuringErrors) {
				      if (refDestructuringErrors.shorthandAssign < 0) refDestructuringErrors.shorthandAssign = this.start;
				      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
				    } else {
				      prop.value = prop.key;
				    }

				    prop.shorthand = true;
				  } else this.unexpected();
				};

				pp.parsePropertyName = function (prop) {
				  if (this.options.ecmaVersion >= 6) {
				    if (this.eat(_tokentype.types.bracketL)) {
				      prop.computed = true;
				      prop.key = this.parseMaybeAssign();
				      this.expect(_tokentype.types.bracketR);
				      return prop.key;
				    } else {
				      prop.computed = false;
				    }
				  }

				  return prop.key = this.type === _tokentype.types.num || this.type === _tokentype.types.string ? this.parseExprAtom() : this.parseIdent(true);
				}; // Initialize empty function node.


				pp.initFunction = function (node) {
				  node.id = null;
				  if (this.options.ecmaVersion >= 6) node.generator = node.expression = false;
				  if (this.options.ecmaVersion >= 8) node.async = false;
				}; // Parse object or class method.


				pp.parseMethod = function (isGenerator, isAsync, allowDirectSuper) {
				  var node = this.startNode(),
				      oldYieldPos = this.yieldPos,
				      oldAwaitPos = this.awaitPos,
				      oldAwaitIdentPos = this.awaitIdentPos;
				  this.initFunction(node);
				  if (this.options.ecmaVersion >= 6) node.generator = isGenerator;
				  if (this.options.ecmaVersion >= 8) node.async = !!isAsync;
				  this.yieldPos = 0;
				  this.awaitPos = 0;
				  this.awaitIdentPos = 0;
				  this.enterScope((0, _scopeflags.functionFlags)(isAsync, node.generator) | _scopeflags.SCOPE_SUPER | (allowDirectSuper ? _scopeflags.SCOPE_DIRECT_SUPER : 0));
				  this.expect(_tokentype.types.parenL);
				  node.params = this.parseBindingList(_tokentype.types.parenR, false, this.options.ecmaVersion >= 8);
				  this.checkYieldAwaitInDefaultParams();
				  this.parseFunctionBody(node, false, true);
				  this.yieldPos = oldYieldPos;
				  this.awaitPos = oldAwaitPos;
				  this.awaitIdentPos = oldAwaitIdentPos;
				  return this.finishNode(node, "FunctionExpression");
				}; // Parse arrow function expression with given parameters.


				pp.parseArrowExpression = function (node, params, isAsync) {
				  var oldYieldPos = this.yieldPos,
				      oldAwaitPos = this.awaitPos,
				      oldAwaitIdentPos = this.awaitIdentPos;
				  this.enterScope((0, _scopeflags.functionFlags)(isAsync, false) | _scopeflags.SCOPE_ARROW);
				  this.initFunction(node);
				  if (this.options.ecmaVersion >= 8) node.async = !!isAsync;
				  this.yieldPos = 0;
				  this.awaitPos = 0;
				  this.awaitIdentPos = 0;
				  node.params = this.toAssignableList(params, true);
				  this.parseFunctionBody(node, true, false);
				  this.yieldPos = oldYieldPos;
				  this.awaitPos = oldAwaitPos;
				  this.awaitIdentPos = oldAwaitIdentPos;
				  return this.finishNode(node, "ArrowFunctionExpression");
				}; // Parse function body and check parameters.


				pp.parseFunctionBody = function (node, isArrowFunction, isMethod) {
				  var isExpression = isArrowFunction && this.type !== _tokentype.types.braceL;
				  var oldStrict = this.strict,
				      useStrict = false;

				  if (isExpression) {
				    node.body = this.parseMaybeAssign();
				    node.expression = true;
				    this.checkParams(node, false);
				  } else {
				    var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);

				    if (!oldStrict || nonSimple) {
				      useStrict = this.strictDirective(this.end); // If this is a strict mode function, verify that argument names
				      // are not repeated, and it does not try to bind the words `eval`
				      // or `arguments`.

				      if (useStrict && nonSimple) this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list");
				    } // Start a new scope with regard to labels and the `inFunction`
				    // flag (restore them to their old value afterwards).


				    var oldLabels = this.labels;
				    this.labels = [];
				    if (useStrict) this.strict = true; // Add the params to varDeclaredNames to ensure that an error is thrown
				    // if a let/const declaration in the function clashes with one of the params.

				    this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));
				    node.body = this.parseBlock(false);
				    node.expression = false;
				    this.adaptDirectivePrologue(node.body.body);
				    this.labels = oldLabels;
				  }

				  this.exitScope(); // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'

				  if (this.strict && node.id) this.checkLVal(node.id, _scopeflags.BIND_OUTSIDE);
				  this.strict = oldStrict;
				};

				pp.isSimpleParamList = function (params) {
				  for (var _iterator = params, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
				    var _ref;

				    if (_isArray) {
				      if (_i >= _iterator.length) break;
				      _ref = _iterator[_i++];
				    } else {
				      _i = _iterator.next();
				      if (_i.done) break;
				      _ref = _i.value;
				    }

				    var param = _ref;
				    if (param.type !== "Identifier") return false;
				  }

				  return true;
				}; // Checks function params for various disallowed patterns such as using "eval"
				// or "arguments" and duplicate parameters.


				pp.checkParams = function (node, allowDuplicates) {
				  var nameHash = {};

				  for (var _iterator2 = node.params, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
				    var _ref2;

				    if (_isArray2) {
				      if (_i2 >= _iterator2.length) break;
				      _ref2 = _iterator2[_i2++];
				    } else {
				      _i2 = _iterator2.next();
				      if (_i2.done) break;
				      _ref2 = _i2.value;
				    }

				    var param = _ref2;
				    this.checkLVal(param, _scopeflags.BIND_VAR, allowDuplicates ? null : nameHash);
				  }
				}; // Parses a comma-separated list of expressions, and returns them as
				// an array. `close` is the token type that ends the list, and
				// `allowEmpty` can be turned on to allow subsequent commas with
				// nothing in between them to be parsed as `null` (which is needed
				// for array literals).


				pp.parseExprList = function (close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
				  var elts = [],
				      first = true;

				  while (!this.eat(close)) {
				    if (!first) {
				      this.expect(_tokentype.types.comma);
				      if (allowTrailingComma && this.afterTrailingComma(close)) break;
				    } else first = false;

				    var elt = void 0;
				    if (allowEmpty && this.type === _tokentype.types.comma) elt = null;else if (this.type === _tokentype.types.ellipsis) {
				      elt = this.parseSpread(refDestructuringErrors);
				      if (refDestructuringErrors && this.type === _tokentype.types.comma && refDestructuringErrors.trailingComma < 0) refDestructuringErrors.trailingComma = this.start;
				    } else {
				      elt = this.parseMaybeAssign(false, refDestructuringErrors);
				    }
				    elts.push(elt);
				  }

				  return elts;
				};

				pp.checkUnreserved = function (_ref5) {
				  var start = _ref5.start,
				      end = _ref5.end,
				      name = _ref5.name;
				  if (this.inGenerator && name === "yield") this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator");
				  if (this.inAsync && name === "await") this.raiseRecoverable(start, "Cannot use 'await' as identifier inside an async function");
				  if (this.keywords.test(name)) this.raise(start, "Unexpected keyword '" + name + "'");
				  if (this.options.ecmaVersion < 6 && this.input.slice(start, end).indexOf("\\") !== -1) return;
				  var re = this.strict ? this.reservedWordsStrict : this.reservedWords;

				  if (re.test(name)) {
				    if (!this.inAsync && name === "await") this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function");
				    this.raiseRecoverable(start, "The keyword '" + name + "' is reserved");
				  }
				}; // Parse the next token as an identifier. If `liberal` is true (used
				// when parsing properties), it will also convert keywords into
				// identifiers.


				pp.parseIdent = function (liberal, isBinding) {
				  var node = this.startNode();
				  if (liberal && this.options.allowReserved === "never") liberal = false;

				  if (this.type === _tokentype.types.name) {
				    node.name = this.value;
				  } else if (this.type.keyword) {
				    node.name = this.type.keyword; // To fix https://github.com/acornjs/acorn/issues/575
				    // `class` and `function` keywords push new context into this.context.
				    // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.
				    // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword

				    if ((node.name === "class" || node.name === "function") && (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {
				      this.context.pop();
				    }
				  } else {
				    this.unexpected();
				  }

				  this.next();
				  this.finishNode(node, "Identifier");

				  if (!liberal) {
				    this.checkUnreserved(node);
				    if (node.name === "await" && !this.awaitIdentPos) this.awaitIdentPos = node.start;
				  }

				  return node;
				}; // Parses yield expression inside generator.


				pp.parseYield = function (noIn) {
				  if (!this.yieldPos) this.yieldPos = this.start;
				  var node = this.startNode();
				  this.next();

				  if (this.type === _tokentype.types.semi || this.canInsertSemicolon() || this.type !== _tokentype.types.star && !this.type.startsExpr) {
				    node.delegate = false;
				    node.argument = null;
				  } else {
				    node.delegate = this.eat(_tokentype.types.star);
				    node.argument = this.parseMaybeAssign(noIn);
				  }

				  return this.finishNode(node, "YieldExpression");
				};

				pp.parseAwait = function () {
				  if (!this.awaitPos) this.awaitPos = this.start;
				  var node = this.startNode();
				  this.next();
				  node.argument = this.parseMaybeUnary(null, true);
				  return this.finishNode(node, "AwaitExpression");
				};
			},
			"identifier.js": function (exports, module, require) {
				

				exports.__esModule = true;
				exports.isIdentifierStart = isIdentifierStart;
				exports.isIdentifierChar = isIdentifierChar; // Reserved word lists for various dialects of the language

				var reservedWords = exports.reservedWords = {
				  3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
				  5: "class enum extends super const export import",
				  6: "enum",
				  strict: "implements interface let package private protected public static yield",
				  strictBind: "eval arguments" // And the keywords

				};
				var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";
				var keywords = exports.keywords = {
				  5: ecma5AndLessKeywords,
				  6: ecma5AndLessKeywords + " const class extends export import super"
				};
				var keywordRelationalOperator = exports.keywordRelationalOperator = /^in(stanceof)?$/; // ## Character categories
				// Big ugly regular expressions that match characters in the
				// whitespace, identifier, and identifier-start categories. These
				// are only applied when a character is found to actually have a
				// code point above 128.
				// Generated by `bin/generate-identifier-regex.js`.

				var nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEF\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7C6\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB67\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
				var nonASCIIidentifierChars = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";
				var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
				var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
				nonASCIIidentifierStartChars = nonASCIIidentifierChars = null; // These are a run-length and offset encoded representation of the
				// >0xffff code points that are a valid part of identifiers. The
				// offset starts at 0x10000, and each pair of numbers represents an
				// offset to the next range, and then a size of the range. They were
				// generated by bin/generate-identifier-regex.js
				// eslint-disable-next-line comma-spacing

				var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 477, 28, 11, 0, 9, 21, 155, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 12, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 0, 33, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 0, 161, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 270, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 754, 9486, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541]; // eslint-disable-next-line comma-spacing

				var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 525, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 4, 9, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 232, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 792487, 239]; // This has a complexity linear to the value of the code. The
				// assumption is that looking up astral identifier characters is
				// rare.

				function isInAstralSet(code, set) {
				  var pos = 0x10000;

				  for (var i = 0; i < set.length; i += 2) {
				    pos += set[i];
				    if (pos > code) return false;
				    pos += set[i + 1];
				    if (pos >= code) return true;
				  }
				} // Test whether a given character code starts an identifier.


				function isIdentifierStart(code, astral) {
				  if (code < 65) return code === 36;
				  if (code < 91) return true;
				  if (code < 97) return code === 95;
				  if (code < 123) return true;
				  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
				  if (astral === false) return false;
				  return isInAstralSet(code, astralIdentifierStartCodes);
				} // Test whether a given character is part of an identifier.


				function isIdentifierChar(code, astral) {
				  if (code < 48) return code === 36;
				  if (code < 58) return true;
				  if (code < 65) return false;
				  if (code < 91) return true;
				  if (code < 97) return code === 95;
				  if (code < 123) return true;
				  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
				  if (astral === false) return false;
				  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
				}
			},
			"index.js": function (exports, module, require) {
				

				exports.__esModule = true;
				exports.version = exports.nonASCIIwhitespace = exports.lineBreakG = exports.lineBreak = exports.isNewLine = exports.Token = exports.isIdentifierStart = exports.isIdentifierChar = exports.tokContexts = exports.TokContext = exports.keywordTypes = exports.tokTypes = exports.TokenType = exports.Node = exports.getLineInfo = exports.SourceLocation = exports.Position = exports.defaultOptions = exports.Parser = undefined;

				var _state = require("./state");

				Object.defineProperty(exports, "Parser", {
				  enumerable: true,
				  get: function get() {
				    return _state.Parser;
				  }
				});

				var _options = require("./options");

				Object.defineProperty(exports, "defaultOptions", {
				  enumerable: true,
				  get: function get() {
				    return _options.defaultOptions;
				  }
				});

				var _locutil = require("./locutil");

				Object.defineProperty(exports, "Position", {
				  enumerable: true,
				  get: function get() {
				    return _locutil.Position;
				  }
				});
				Object.defineProperty(exports, "SourceLocation", {
				  enumerable: true,
				  get: function get() {
				    return _locutil.SourceLocation;
				  }
				});
				Object.defineProperty(exports, "getLineInfo", {
				  enumerable: true,
				  get: function get() {
				    return _locutil.getLineInfo;
				  }
				});

				var _node = require("./node");

				Object.defineProperty(exports, "Node", {
				  enumerable: true,
				  get: function get() {
				    return _node.Node;
				  }
				});

				var _tokentype = require("./tokentype");

				Object.defineProperty(exports, "TokenType", {
				  enumerable: true,
				  get: function get() {
				    return _tokentype.TokenType;
				  }
				});
				Object.defineProperty(exports, "tokTypes", {
				  enumerable: true,
				  get: function get() {
				    return _tokentype.types;
				  }
				});
				Object.defineProperty(exports, "keywordTypes", {
				  enumerable: true,
				  get: function get() {
				    return _tokentype.keywords;
				  }
				});

				var _tokencontext = require("./tokencontext");

				Object.defineProperty(exports, "TokContext", {
				  enumerable: true,
				  get: function get() {
				    return _tokencontext.TokContext;
				  }
				});
				Object.defineProperty(exports, "tokContexts", {
				  enumerable: true,
				  get: function get() {
				    return _tokencontext.types;
				  }
				});

				var _identifier = require("./identifier");

				Object.defineProperty(exports, "isIdentifierChar", {
				  enumerable: true,
				  get: function get() {
				    return _identifier.isIdentifierChar;
				  }
				});
				Object.defineProperty(exports, "isIdentifierStart", {
				  enumerable: true,
				  get: function get() {
				    return _identifier.isIdentifierStart;
				  }
				});

				var _tokenize = require("./tokenize");

				Object.defineProperty(exports, "Token", {
				  enumerable: true,
				  get: function get() {
				    return _tokenize.Token;
				  }
				});

				var _whitespace = require("./whitespace");

				Object.defineProperty(exports, "isNewLine", {
				  enumerable: true,
				  get: function get() {
				    return _whitespace.isNewLine;
				  }
				});
				Object.defineProperty(exports, "lineBreak", {
				  enumerable: true,
				  get: function get() {
				    return _whitespace.lineBreak;
				  }
				});
				Object.defineProperty(exports, "lineBreakG", {
				  enumerable: true,
				  get: function get() {
				    return _whitespace.lineBreakG;
				  }
				});
				Object.defineProperty(exports, "nonASCIIwhitespace", {
				  enumerable: true,
				  get: function get() {
				    return _whitespace.nonASCIIwhitespace;
				  }
				});
				exports.parse = parse;
				exports.parseExpressionAt = parseExpressionAt;
				exports.tokenizer = tokenizer;

				require("./parseutil");

				require("./statement");

				require("./lval");

				require("./expression");

				require("./location");

				require("./scope");

				var version = exports.version = "6.2.1"; // The main exported interface (under `self.acorn` when in the
				// browser) is a `parse` function that takes a code string and
				// returns an abstract syntax tree as specified by [Mozilla parser
				// API][api].
				//
				// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API

				function parse(input, options) {
				  return _state.Parser.parse(input, options);
				} // This function tries to parse a single expression at a given
				// offset in a string. Useful for parsing mixed-language formats
				// that embed JavaScript expressions.


				function parseExpressionAt(input, pos, options) {
				  return _state.Parser.parseExpressionAt(input, pos, options);
				} // Acorn is organized as a tokenizer and a recursive-descent parser.
				// The `tokenizer` export provides an interface to the tokenizer.


				function tokenizer(input, options) {
				  return _state.Parser.tokenizer(input, options);
				}
			},
			"location.js": function (exports, module, require) {
				

				var _state = require("./state");

				var _locutil = require("./locutil");

				var pp = _state.Parser.prototype; // This function is used to raise exceptions on parse errors. It
				// takes an offset integer (into the current `input`) to indicate
				// the location of the error, attaches the position to the end
				// of the error message, and then raises a `SyntaxError` with that
				// message.

				pp.raise = function (pos, message) {
				  var loc = (0, _locutil.getLineInfo)(this.input, pos);
				  message += " (" + loc.line + ":" + loc.column + ")";
				  var err = new SyntaxError(message);
				  err.pos = pos;
				  err.loc = loc;
				  err.raisedAt = this.pos;
				  throw err;
				};

				pp.raiseRecoverable = pp.raise;

				pp.curPosition = function () {
				  if (this.options.locations) {
				    return new _locutil.Position(this.curLine, this.pos - this.lineStart);
				  }
				};
			},
			"locutil.js": function (exports, module, require) {
				

				exports.__esModule = true;
				exports.SourceLocation = exports.Position = undefined;
				exports.getLineInfo = getLineInfo;

				var _whitespace = require("./whitespace"); // These are used when `options.locations` is on, for the
				// `startLoc` and `endLoc` properties.


				var Position = /*#__PURE__*/function () {
				  function Position(line, col) {
				    this.line = line;
				    this.column = col;
				  }

				  var _proto = Position.prototype;

				  _proto.offset = function offset(n) {
				    return new Position(this.line, this.column + n);
				  };

				  return Position;
				}();

				exports.Position = Position;

				var SourceLocation = function SourceLocation(p, start, end) {
				  this.start = start;
				  this.end = end;
				  if (p.sourceFile !== null) this.source = p.sourceFile;
				};

				exports.SourceLocation = SourceLocation; // The `getLineInfo` function is mostly useful when the
				// `locations` option is off (for performance reasons) and you
				// want to find the line/column position for a given character
				// offset. `input` should be the code string that the offset refers
				// into.

				function getLineInfo(input, offset) {
				  for (var line = 1, cur = 0;;) {
				    _whitespace.lineBreakG.lastIndex = cur;

				    var match = _whitespace.lineBreakG.exec(input);

				    if (match && match.index < offset) {
				      ++line;
				      cur = match.index + match[0].length;
				    } else {
				      return new Position(line, offset - cur);
				    }
				  }
				}
			},
			"lval.js": function (exports, module, require) {
				

				var _tokentype = require("./tokentype");

				var _state = require("./state");

				var _util = require("./util");

				var _scopeflags = require("./scopeflags");

				var pp = _state.Parser.prototype; // Convert existing expression atom to assignable pattern
				// if possible.

				pp.toAssignable = function (node, isBinding, refDestructuringErrors) {
				  if (this.options.ecmaVersion >= 6 && node) {
				    switch (node.type) {
				      case "Identifier":
				        if (this.inAsync && node.name === "await") this.raise(node.start, "Cannot use 'await' as identifier inside an async function");
				        break;

				      case "ObjectPattern":
				      case "ArrayPattern":
				      case "RestElement":
				        break;

				      case "ObjectExpression":
				        node.type = "ObjectPattern";
				        if (refDestructuringErrors) this.checkPatternErrors(refDestructuringErrors, true);

				        for (var _iterator = node.properties, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
				          var _ref;

				          if (_isArray) {
				            if (_i >= _iterator.length) break;
				            _ref = _iterator[_i++];
				          } else {
				            _i = _iterator.next();
				            if (_i.done) break;
				            _ref = _i.value;
				          }

				          var prop = _ref;
				          this.toAssignable(prop, isBinding); // Early error:
				          //   AssignmentRestProperty[Yield, Await] :
				          //     `...` DestructuringAssignmentTarget[Yield, Await]
				          //
				          //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.

				          if (prop.type === "RestElement" && (prop.argument.type === "ArrayPattern" || prop.argument.type === "ObjectPattern")) {
				            this.raise(prop.argument.start, "Unexpected token");
				          }
				        }

				        break;

				      case "Property":
				        // AssignmentProperty has type === "Property"
				        if (node.kind !== "init") this.raise(node.key.start, "Object pattern can't contain getter or setter");
				        this.toAssignable(node.value, isBinding);
				        break;

				      case "ArrayExpression":
				        node.type = "ArrayPattern";
				        if (refDestructuringErrors) this.checkPatternErrors(refDestructuringErrors, true);
				        this.toAssignableList(node.elements, isBinding);
				        break;

				      case "SpreadElement":
				        node.type = "RestElement";
				        this.toAssignable(node.argument, isBinding);
				        if (node.argument.type === "AssignmentPattern") this.raise(node.argument.start, "Rest elements cannot have a default value");
				        break;

				      case "AssignmentExpression":
				        if (node.operator !== "=") this.raise(node.left.end, "Only '=' operator can be used for specifying default value.");
				        node.type = "AssignmentPattern";
				        delete node.operator;
				        this.toAssignable(node.left, isBinding);
				      // falls through to AssignmentPattern

				      case "AssignmentPattern":
				        break;

				      case "ParenthesizedExpression":
				        this.toAssignable(node.expression, isBinding, refDestructuringErrors);
				        break;

				      case "MemberExpression":
				        if (!isBinding) break;

				      default:
				        this.raise(node.start, "Assigning to rvalue");
				    }
				  } else if (refDestructuringErrors) this.checkPatternErrors(refDestructuringErrors, true);

				  return node;
				}; // Convert list of expression atoms to binding list.


				pp.toAssignableList = function (exprList, isBinding) {
				  var end = exprList.length;

				  for (var i = 0; i < end; i++) {
				    var elt = exprList[i];
				    if (elt) this.toAssignable(elt, isBinding);
				  }

				  if (end) {
				    var last = exprList[end - 1];
				    if (this.options.ecmaVersion === 6 && isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier") this.unexpected(last.argument.start);
				  }

				  return exprList;
				}; // Parses spread element.


				pp.parseSpread = function (refDestructuringErrors) {
				  var node = this.startNode();
				  this.next();
				  node.argument = this.parseMaybeAssign(false, refDestructuringErrors);
				  return this.finishNode(node, "SpreadElement");
				};

				pp.parseRestBinding = function () {
				  var node = this.startNode();
				  this.next(); // RestElement inside of a function parameter must be an identifier

				  if (this.options.ecmaVersion === 6 && this.type !== _tokentype.types.name) this.unexpected();
				  node.argument = this.parseBindingAtom();
				  return this.finishNode(node, "RestElement");
				}; // Parses lvalue (assignable) atom.


				pp.parseBindingAtom = function () {
				  if (this.options.ecmaVersion >= 6) {
				    switch (this.type) {
				      case _tokentype.types.bracketL:
				        var node = this.startNode();
				        this.next();
				        node.elements = this.parseBindingList(_tokentype.types.bracketR, true, true);
				        return this.finishNode(node, "ArrayPattern");

				      case _tokentype.types.braceL:
				        return this.parseObj(true);
				    }
				  }

				  return this.parseIdent();
				};

				pp.parseBindingList = function (close, allowEmpty, allowTrailingComma) {
				  var elts = [],
				      first = true;

				  while (!this.eat(close)) {
				    if (first) first = false;else this.expect(_tokentype.types.comma);

				    if (allowEmpty && this.type === _tokentype.types.comma) {
				      elts.push(null);
				    } else if (allowTrailingComma && this.afterTrailingComma(close)) {
				      break;
				    } else if (this.type === _tokentype.types.ellipsis) {
				      var rest = this.parseRestBinding();
				      this.parseBindingListItem(rest);
				      elts.push(rest);
				      if (this.type === _tokentype.types.comma) this.raise(this.start, "Comma is not permitted after the rest element");
				      this.expect(close);
				      break;
				    } else {
				      var elem = this.parseMaybeDefault(this.start, this.startLoc);
				      this.parseBindingListItem(elem);
				      elts.push(elem);
				    }
				  }

				  return elts;
				};

				pp.parseBindingListItem = function (param) {
				  return param;
				}; // Parses assignment pattern around given atom if possible.


				pp.parseMaybeDefault = function (startPos, startLoc, left) {
				  left = left || this.parseBindingAtom();
				  if (this.options.ecmaVersion < 6 || !this.eat(_tokentype.types.eq)) return left;
				  var node = this.startNodeAt(startPos, startLoc);
				  node.left = left;
				  node.right = this.parseMaybeAssign();
				  return this.finishNode(node, "AssignmentPattern");
				}; // Verify that a node is an lval — something that can be assigned
				// to.
				// bindingType can be either:
				// 'var' indicating that the lval creates a 'var' binding
				// 'let' indicating that the lval creates a lexical ('let' or 'const') binding
				// 'none' indicating that the binding should be checked for illegal identifiers, but not for duplicate references


				pp.checkLVal = function (expr, bindingType, checkClashes) {
				  if (bindingType === void 0) {
				    bindingType = _scopeflags.BIND_NONE;
				  }

				  switch (expr.type) {
				    case "Identifier":
				      if (bindingType === _scopeflags.BIND_LEXICAL && expr.name === "let") this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name");
				      if (this.strict && this.reservedWordsStrictBind.test(expr.name)) this.raiseRecoverable(expr.start, (bindingType ? "Binding " : "Assigning to ") + expr.name + " in strict mode");

				      if (checkClashes) {
				        if ((0, _util.has)(checkClashes, expr.name)) this.raiseRecoverable(expr.start, "Argument name clash");
				        checkClashes[expr.name] = true;
				      }

				      if (bindingType !== _scopeflags.BIND_NONE && bindingType !== _scopeflags.BIND_OUTSIDE) this.declareName(expr.name, bindingType, expr.start);
				      break;

				    case "MemberExpression":
				      if (bindingType) this.raiseRecoverable(expr.start, "Binding member expression");
				      break;

				    case "ObjectPattern":
				      for (var _iterator2 = expr.properties, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
				        var _ref2;

				        if (_isArray2) {
				          if (_i2 >= _iterator2.length) break;
				          _ref2 = _iterator2[_i2++];
				        } else {
				          _i2 = _iterator2.next();
				          if (_i2.done) break;
				          _ref2 = _i2.value;
				        }

				        var prop = _ref2;
				        this.checkLVal(prop, bindingType, checkClashes);
				      }

				      break;

				    case "Property":
				      // AssignmentProperty has type === "Property"
				      this.checkLVal(expr.value, bindingType, checkClashes);
				      break;

				    case "ArrayPattern":
				      for (var _iterator3 = expr.elements, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
				        var _ref3;

				        if (_isArray3) {
				          if (_i3 >= _iterator3.length) break;
				          _ref3 = _iterator3[_i3++];
				        } else {
				          _i3 = _iterator3.next();
				          if (_i3.done) break;
				          _ref3 = _i3.value;
				        }

				        var elem = _ref3;
				        if (elem) this.checkLVal(elem, bindingType, checkClashes);
				      }

				      break;

				    case "AssignmentPattern":
				      this.checkLVal(expr.left, bindingType, checkClashes);
				      break;

				    case "RestElement":
				      this.checkLVal(expr.argument, bindingType, checkClashes);
				      break;

				    case "ParenthesizedExpression":
				      this.checkLVal(expr.expression, bindingType, checkClashes);
				      break;

				    default:
				      this.raise(expr.start, (bindingType ? "Binding" : "Assigning to") + " rvalue");
				  }
				};
			},
			"node.js": function (exports, module, require) {
				

				exports.__esModule = true;
				exports.Node = undefined;

				var _state = require("./state");

				var _locutil = require("./locutil");

				var Node = function Node(parser, pos, loc) {
				  this.type = "";
				  this.start = pos;
				  this.end = 0;
				  if (parser.options.locations) this.loc = new _locutil.SourceLocation(parser, loc);
				  if (parser.options.directSourceFile) this.sourceFile = parser.options.directSourceFile;
				  if (parser.options.ranges) this.range = [pos, 0];
				};

				exports.Node = Node; // Start an AST node, attaching a start offset.

				var pp = _state.Parser.prototype;

				pp.startNode = function () {
				  return new Node(this, this.start, this.startLoc);
				};

				pp.startNodeAt = function (pos, loc) {
				  return new Node(this, pos, loc);
				}; // Finish an AST node, adding `type` and `end` properties.


				function finishNodeAt(node, type, pos, loc) {
				  node.type = type;
				  node.end = pos;
				  if (this.options.locations) node.loc.end = loc;
				  if (this.options.ranges) node.range[1] = pos;
				  return node;
				}

				pp.finishNode = function (node, type) {
				  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);
				}; // Finish node at given position


				pp.finishNodeAt = function (node, type, pos, loc) {
				  return finishNodeAt.call(this, node, type, pos, loc);
				};
			},
			"options.js": function (exports, module, require) {
				

				exports.__esModule = true;
				exports.defaultOptions = undefined;
				exports.getOptions = getOptions;

				var _util = require("./util");

				var _locutil = require("./locutil"); // A second optional argument can be given to further configure
				// the parser process. These options are recognized:


				var defaultOptions = exports.defaultOptions = {
				  // `ecmaVersion` indicates the ECMAScript version to parse. Must be
				  // either 3, 5, 6 (2015), 7 (2016), 8 (2017), 9 (2018), or 10
				  // (2019). This influences support for strict mode, the set of
				  // reserved words, and support for new syntax features. The default
				  // is 9.
				  ecmaVersion: 9,
				  // `sourceType` indicates the mode the code should be parsed in.
				  // Can be either `"script"` or `"module"`. This influences global
				  // strict mode and parsing of `import` and `export` declarations.
				  sourceType: "script",
				  // `onInsertedSemicolon` can be a callback that will be called
				  // when a semicolon is automatically inserted. It will be passed
				  // the position of the comma as an offset, and if `locations` is
				  // enabled, it is given the location as a `{line, column}` object
				  // as second argument.
				  onInsertedSemicolon: null,
				  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for
				  // trailing commas.
				  onTrailingComma: null,
				  // By default, reserved words are only enforced if ecmaVersion >= 5.
				  // Set `allowReserved` to a boolean value to explicitly turn this on
				  // an off. When this option has the value "never", reserved words
				  // and keywords can also not be used as property names.
				  allowReserved: null,
				  // When enabled, a return at the top level is not considered an
				  // error.
				  allowReturnOutsideFunction: false,
				  // When enabled, import/export statements are not constrained to
				  // appearing at the top of the program.
				  allowImportExportEverywhere: false,
				  // When enabled, await identifiers are allowed to appear at the top-level scope,
				  // but they are still not allowed in non-async functions.
				  allowAwaitOutsideFunction: false,
				  // When enabled, hashbang directive in the beginning of file
				  // is allowed and treated as a line comment.
				  allowHashBang: false,
				  // When `locations` is on, `loc` properties holding objects with
				  // `start` and `end` properties in `{line, column}` form (with
				  // line being 1-based and column 0-based) will be attached to the
				  // nodes.
				  locations: false,
				  // A function can be passed as `onToken` option, which will
				  // cause Acorn to call that function with object in the same
				  // format as tokens returned from `tokenizer().getToken()`. Note
				  // that you are not allowed to call the parser from the
				  // callback—that will corrupt its internal state.
				  onToken: null,
				  // A function can be passed as `onComment` option, which will
				  // cause Acorn to call that function with `(block, text, start,
				  // end)` parameters whenever a comment is skipped. `block` is a
				  // boolean indicating whether this is a block (`/* */`) comment,
				  // `text` is the content of the comment, and `start` and `end` are
				  // character offsets that denote the start and end of the comment.
				  // When the `locations` option is on, two more parameters are
				  // passed, the full `{line, column}` locations of the start and
				  // end of the comments. Note that you are not allowed to call the
				  // parser from the callback—that will corrupt its internal state.
				  onComment: null,
				  // Nodes have their start and end characters offsets recorded in
				  // `start` and `end` properties (directly on the node, rather than
				  // the `loc` object, which holds line/column data. To also add a
				  // [semi-standardized][range] `range` property holding a `[start,
				  // end]` array with the same numbers, set the `ranges` option to
				  // `true`.
				  //
				  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678
				  ranges: false,
				  // It is possible to parse multiple files into a single AST by
				  // passing the tree produced by parsing the first file as
				  // `program` option in subsequent parses. This will add the
				  // toplevel forms of the parsed file to the `Program` (top) node
				  // of an existing parse tree.
				  program: null,
				  // When `locations` is on, you can pass this to record the source
				  // file in every node's `loc` object.
				  sourceFile: null,
				  // This value, if given, is stored in every node, whether
				  // `locations` is on or off.
				  directSourceFile: null,
				  // When enabled, parenthesized expressions are represented by
				  // (non-standard) ParenthesizedExpression nodes
				  preserveParens: false // Interpret and default an options object

				};

				function getOptions(opts) {
				  var options = {};

				  for (var opt in defaultOptions) {
				    options[opt] = opts && (0, _util.has)(opts, opt) ? opts[opt] : defaultOptions[opt];
				  }

				  if (options.ecmaVersion >= 2015) options.ecmaVersion -= 2009;
				  if (options.allowReserved == null) options.allowReserved = options.ecmaVersion < 5;

				  if ((0, _util.isArray)(options.onToken)) {
				    var tokens = options.onToken;

				    options.onToken = function (token) {
				      return tokens.push(token);
				    };
				  }

				  if ((0, _util.isArray)(options.onComment)) options.onComment = pushComment(options, options.onComment);
				  return options;
				}

				function pushComment(options, array) {
				  return function (block, text, start, end, startLoc, endLoc) {
				    var comment = {
				      type: block ? "Block" : "Line",
				      value: text,
				      start: start,
				      end: end
				    };
				    if (options.locations) comment.loc = new _locutil.SourceLocation(this, startLoc, endLoc);
				    if (options.ranges) comment.range = [start, end];
				    array.push(comment);
				  };
				}
			},
			"parseutil.js": function (exports, module, require) {
				

				exports.__esModule = true;
				exports.DestructuringErrors = DestructuringErrors;

				var _tokentype = require("./tokentype");

				var _state = require("./state");

				var _whitespace = require("./whitespace");

				var pp = _state.Parser.prototype; // ## Parser utilities

				var literal = /^(?:'((?:\\.|[^'])*?)'|"((?:\\.|[^"])*?)")/;

				pp.strictDirective = function (start) {
				  for (;;) {
				    // Try to find string literal.
				    _whitespace.skipWhiteSpace.lastIndex = start;
				    start += _whitespace.skipWhiteSpace.exec(this.input)[0].length;
				    var match = literal.exec(this.input.slice(start));
				    if (!match) return false;
				    if ((match[1] || match[2]) === "use strict") return false;
				    start += match[0].length; // Skip semicolon, if any.

				    _whitespace.skipWhiteSpace.lastIndex = start;
				    start += _whitespace.skipWhiteSpace.exec(this.input)[0].length;
				    if (this.input[start] === ";") start++;
				  }
				}; // Predicate that tests whether the next token is of the given
				// type, and if yes, consumes it as a side effect.


				pp.eat = function (type) {
				  if (this.type === type) {
				    this.next();
				    return true;
				  } else {
				    return false;
				  }
				}; // Tests whether parsed token is a contextual keyword.


				pp.isContextual = function (name) {
				  return this.type === _tokentype.types.name && this.value === name && !this.containsEsc;
				}; // Consumes contextual keyword if possible.


				pp.eatContextual = function (name) {
				  if (!this.isContextual(name)) return false;
				  this.next();
				  return true;
				}; // Asserts that following token is given contextual keyword.


				pp.expectContextual = function (name) {
				  if (!this.eatContextual(name)) this.unexpected();
				}; // Test whether a semicolon can be inserted at the current position.


				pp.canInsertSemicolon = function () {
				  return this.type === _tokentype.types.eof || this.type === _tokentype.types.braceR || _whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
				};

				pp.insertSemicolon = function () {
				  if (this.canInsertSemicolon()) {
				    if (this.options.onInsertedSemicolon) this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);
				    return true;
				  }
				}; // Consume a semicolon, or, failing that, see if we are allowed to
				// pretend that there is a semicolon at this position.


				pp.semicolon = function () {
				  if (!this.eat(_tokentype.types.semi) && !this.insertSemicolon()) this.unexpected();
				};

				pp.afterTrailingComma = function (tokType, notNext) {
				  if (this.type === tokType) {
				    if (this.options.onTrailingComma) this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);
				    if (!notNext) this.next();
				    return true;
				  }
				}; // Expect a token of a given type. If found, consume it, otherwise,
				// raise an unexpected token error.


				pp.expect = function (type) {
				  this.eat(type) || this.unexpected();
				}; // Raise an unexpected token error.


				pp.unexpected = function (pos) {
				  this.raise(pos != null ? pos : this.start, "Unexpected token");
				};

				function DestructuringErrors() {
				  this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
				}

				pp.checkPatternErrors = function (refDestructuringErrors, isAssign) {
				  if (!refDestructuringErrors) return;
				  if (refDestructuringErrors.trailingComma > -1) this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element");
				  var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
				  if (parens > -1) this.raiseRecoverable(parens, "Parenthesized pattern");
				};

				pp.checkExpressionErrors = function (refDestructuringErrors, andThrow) {
				  if (!refDestructuringErrors) return false;
				  var shorthandAssign = refDestructuringErrors.shorthandAssign,
				      doubleProto = refDestructuringErrors.doubleProto;
				  if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;
				  if (shorthandAssign >= 0) this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns");
				  if (doubleProto >= 0) this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property");
				};

				pp.checkYieldAwaitInDefaultParams = function () {
				  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos)) this.raise(this.yieldPos, "Yield expression cannot be a default value");
				  if (this.awaitPos) this.raise(this.awaitPos, "Await expression cannot be a default value");
				};

				pp.isSimpleAssignTarget = function (expr) {
				  if (expr.type === "ParenthesizedExpression") return this.isSimpleAssignTarget(expr.expression);
				  return expr.type === "Identifier" || expr.type === "MemberExpression";
				};
			},
			"regexp.js": function (exports, module, require) {
				

				exports.__esModule = true;
				exports.RegExpValidationState = undefined;

				var _identifier = require("./identifier.js");

				var _state = require("./state.js");

				var _unicodePropertyData = require("./unicode-property-data.js");

				var _unicodePropertyData2 = _interopRequireDefault(_unicodePropertyData);

				var _util = require("./util.js");

				function _interopRequireDefault(obj) {
				  return obj && obj.__esModule ? obj : {
				    default: obj
				  };
				}

				var pp = _state.Parser.prototype;

				var RegExpValidationState = /*#__PURE__*/function () {
				  function RegExpValidationState(parser) {
				    this.parser = parser;
				    this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "");
				    this.unicodeProperties = _unicodePropertyData2.default[parser.options.ecmaVersion >= 11 ? 11 : parser.options.ecmaVersion];
				    this.source = "";
				    this.flags = "";
				    this.start = 0;
				    this.switchU = false;
				    this.switchN = false;
				    this.pos = 0;
				    this.lastIntValue = 0;
				    this.lastStringValue = "";
				    this.lastAssertionIsQuantifiable = false;
				    this.numCapturingParens = 0;
				    this.maxBackReference = 0;
				    this.groupNames = [];
				    this.backReferenceNames = [];
				  }

				  var _proto = RegExpValidationState.prototype;

				  _proto.reset = function reset(start, pattern, flags) {
				    var unicode = flags.indexOf("u") !== -1;
				    this.start = start | 0;
				    this.source = pattern + "";
				    this.flags = flags;
				    this.switchU = unicode && this.parser.options.ecmaVersion >= 6;
				    this.switchN = unicode && this.parser.options.ecmaVersion >= 9;
				  };

				  _proto.raise = function raise(message) {
				    this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + message);
				  } // If u flag is given, this returns the code point at the index (it combines a surrogate pair).
				  // Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).
				  ;

				  _proto.at = function at(i) {
				    var s = this.source;
				    var l = s.length;

				    if (i >= l) {
				      return -1;
				    }

				    var c = s.charCodeAt(i);

				    if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {
				      return c;
				    }

				    return (c << 10) + s.charCodeAt(i + 1) - 0x35FDC00;
				  };

				  _proto.nextIndex = function nextIndex(i) {
				    var s = this.source;
				    var l = s.length;

				    if (i >= l) {
				      return l;
				    }

				    var c = s.charCodeAt(i);

				    if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {
				      return i + 1;
				    }

				    return i + 2;
				  };

				  _proto.current = function current() {
				    return this.at(this.pos);
				  };

				  _proto.lookahead = function lookahead() {
				    return this.at(this.nextIndex(this.pos));
				  };

				  _proto.advance = function advance() {
				    this.pos = this.nextIndex(this.pos);
				  };

				  _proto.eat = function eat(ch) {
				    if (this.current() === ch) {
				      this.advance();
				      return true;
				    }

				    return false;
				  };

				  return RegExpValidationState;
				}();

				exports.RegExpValidationState = RegExpValidationState;

				function codePointToString(ch) {
				  if (ch <= 0xFFFF) return String.fromCharCode(ch);
				  ch -= 0x10000;
				  return String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00);
				}
				/**
				 * Validate the flags part of a given RegExpLiteral.
				 *
				 * @param {RegExpValidationState} state The state to validate RegExp.
				 * @returns {void}
				 */


				pp.validateRegExpFlags = function (state) {
				  var validFlags = state.validFlags;
				  var flags = state.flags;

				  for (var i = 0; i < flags.length; i++) {
				    var flag = flags.charAt(i);

				    if (validFlags.indexOf(flag) === -1) {
				      this.raise(state.start, "Invalid regular expression flag");
				    }

				    if (flags.indexOf(flag, i + 1) > -1) {
				      this.raise(state.start, "Duplicate regular expression flag");
				    }
				  }
				};
				/**
				 * Validate the pattern part of a given RegExpLiteral.
				 *
				 * @param {RegExpValidationState} state The state to validate RegExp.
				 * @returns {void}
				 */


				pp.validateRegExpPattern = function (state) {
				  this.regexp_pattern(state); // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of
				  // parsing contains a |GroupName|, reparse with the goal symbol
				  // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*
				  // exception if _P_ did not conform to the grammar, if any elements of _P_
				  // were not matched by the parse, or if any Early Error conditions exist.

				  if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {
				    state.switchN = true;
				    this.regexp_pattern(state);
				  }
				}; // https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern


				pp.regexp_pattern = function (state) {
				  state.pos = 0;
				  state.lastIntValue = 0;
				  state.lastStringValue = "";
				  state.lastAssertionIsQuantifiable = false;
				  state.numCapturingParens = 0;
				  state.maxBackReference = 0;
				  state.groupNames.length = 0;
				  state.backReferenceNames.length = 0;
				  this.regexp_disjunction(state);

				  if (state.pos !== state.source.length) {
				    // Make the same messages as V8.
				    if (state.eat(0x29
				    /* ) */
				    )) {
				      state.raise("Unmatched ')'");
				    }

				    if (state.eat(0x5D
				    /* [ */
				    ) || state.eat(0x7D
				    /* } */
				    )) {
				      state.raise("Lone quantifier brackets");
				    }
				  }

				  if (state.maxBackReference > state.numCapturingParens) {
				    state.raise("Invalid escape");
				  }

				  for (var _iterator = state.backReferenceNames, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
				    var _ref;

				    if (_isArray) {
				      if (_i >= _iterator.length) break;
				      _ref = _iterator[_i++];
				    } else {
				      _i = _iterator.next();
				      if (_i.done) break;
				      _ref = _i.value;
				    }

				    var name = _ref;

				    if (state.groupNames.indexOf(name) === -1) {
				      state.raise("Invalid named capture referenced");
				    }
				  }
				}; // https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction


				pp.regexp_disjunction = function (state) {
				  this.regexp_alternative(state);

				  while (state.eat(0x7C
				  /* | */
				  )) {
				    this.regexp_alternative(state);
				  } // Make the same message as V8.


				  if (this.regexp_eatQuantifier(state, true)) {
				    state.raise("Nothing to repeat");
				  }

				  if (state.eat(0x7B
				  /* { */
				  )) {
				    state.raise("Lone quantifier brackets");
				  }
				}; // https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative


				pp.regexp_alternative = function (state) {
				  while (state.pos < state.source.length && this.regexp_eatTerm(state)) {
				    ;
				  }
				}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term


				pp.regexp_eatTerm = function (state) {
				  if (this.regexp_eatAssertion(state)) {
				    // Handle `QuantifiableAssertion Quantifier` alternative.
				    // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion
				    // is a QuantifiableAssertion.
				    if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {
				      // Make the same message as V8.
				      if (state.switchU) {
				        state.raise("Invalid quantifier");
				      }
				    }

				    return true;
				  }

				  if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {
				    this.regexp_eatQuantifier(state);
				    return true;
				  }

				  return false;
				}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion


				pp.regexp_eatAssertion = function (state) {
				  var start = state.pos;
				  state.lastAssertionIsQuantifiable = false; // ^, $

				  if (state.eat(0x5E
				  /* ^ */
				  ) || state.eat(0x24
				  /* $ */
				  )) {
				    return true;
				  } // \b \B


				  if (state.eat(0x5C
				  /* \ */
				  )) {
				    if (state.eat(0x42
				    /* B */
				    ) || state.eat(0x62
				    /* b */
				    )) {
				      return true;
				    }

				    state.pos = start;
				  } // Lookahead / Lookbehind


				  if (state.eat(0x28
				  /* ( */
				  ) && state.eat(0x3F
				  /* ? */
				  )) {
				    var lookbehind = false;

				    if (this.options.ecmaVersion >= 9) {
				      lookbehind = state.eat(0x3C
				      /* < */
				      );
				    }

				    if (state.eat(0x3D
				    /* = */
				    ) || state.eat(0x21
				    /* ! */
				    )) {
				      this.regexp_disjunction(state);

				      if (!state.eat(0x29
				      /* ) */
				      )) {
				        state.raise("Unterminated group");
				      }

				      state.lastAssertionIsQuantifiable = !lookbehind;
				      return true;
				    }
				  }

				  state.pos = start;
				  return false;
				}; // https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier


				pp.regexp_eatQuantifier = function (state, noError) {
				  if (noError === void 0) {
				    noError = false;
				  }

				  if (this.regexp_eatQuantifierPrefix(state, noError)) {
				    state.eat(0x3F
				    /* ? */
				    );
				    return true;
				  }

				  return false;
				}; // https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix


				pp.regexp_eatQuantifierPrefix = function (state, noError) {
				  return state.eat(0x2A
				  /* * */
				  ) || state.eat(0x2B
				  /* + */
				  ) || state.eat(0x3F
				  /* ? */
				  ) || this.regexp_eatBracedQuantifier(state, noError);
				};

				pp.regexp_eatBracedQuantifier = function (state, noError) {
				  var start = state.pos;

				  if (state.eat(0x7B
				  /* { */
				  )) {
				    var min = 0,
				        max = -1;

				    if (this.regexp_eatDecimalDigits(state)) {
				      min = state.lastIntValue;

				      if (state.eat(0x2C
				      /* , */
				      ) && this.regexp_eatDecimalDigits(state)) {
				        max = state.lastIntValue;
				      }

				      if (state.eat(0x7D
				      /* } */
				      )) {
				        // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term
				        if (max !== -1 && max < min && !noError) {
				          state.raise("numbers out of order in {} quantifier");
				        }

				        return true;
				      }
				    }

				    if (state.switchU && !noError) {
				      state.raise("Incomplete quantifier");
				    }

				    state.pos = start;
				  }

				  return false;
				}; // https://www.ecma-international.org/ecma-262/8.0/#prod-Atom


				pp.regexp_eatAtom = function (state) {
				  return this.regexp_eatPatternCharacters(state) || state.eat(0x2E
				  /* . */
				  ) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);
				};

				pp.regexp_eatReverseSolidusAtomEscape = function (state) {
				  var start = state.pos;

				  if (state.eat(0x5C
				  /* \ */
				  )) {
				    if (this.regexp_eatAtomEscape(state)) {
				      return true;
				    }

				    state.pos = start;
				  }

				  return false;
				};

				pp.regexp_eatUncapturingGroup = function (state) {
				  var start = state.pos;

				  if (state.eat(0x28
				  /* ( */
				  )) {
				    if (state.eat(0x3F
				    /* ? */
				    ) && state.eat(0x3A
				    /* : */
				    )) {
				      this.regexp_disjunction(state);

				      if (state.eat(0x29
				      /* ) */
				      )) {
				        return true;
				      }

				      state.raise("Unterminated group");
				    }

				    state.pos = start;
				  }

				  return false;
				};

				pp.regexp_eatCapturingGroup = function (state) {
				  if (state.eat(0x28
				  /* ( */
				  )) {
				    if (this.options.ecmaVersion >= 9) {
				      this.regexp_groupSpecifier(state);
				    } else if (state.current() === 0x3F
				    /* ? */
				    ) {
				        state.raise("Invalid group");
				      }

				    this.regexp_disjunction(state);

				    if (state.eat(0x29
				    /* ) */
				    )) {
				      state.numCapturingParens += 1;
				      return true;
				    }

				    state.raise("Unterminated group");
				  }

				  return false;
				}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom


				pp.regexp_eatExtendedAtom = function (state) {
				  return state.eat(0x2E
				  /* . */
				  ) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);
				}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier


				pp.regexp_eatInvalidBracedQuantifier = function (state) {
				  if (this.regexp_eatBracedQuantifier(state, true)) {
				    state.raise("Nothing to repeat");
				  }

				  return false;
				}; // https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter


				pp.regexp_eatSyntaxCharacter = function (state) {
				  var ch = state.current();

				  if (isSyntaxCharacter(ch)) {
				    state.lastIntValue = ch;
				    state.advance();
				    return true;
				  }

				  return false;
				};

				function isSyntaxCharacter(ch) {
				  return ch === 0x24
				  /* $ */
				  || ch >= 0x28
				  /* ( */
				  && ch <= 0x2B
				  /* + */
				  || ch === 0x2E
				  /* . */
				  || ch === 0x3F
				  /* ? */
				  || ch >= 0x5B
				  /* [ */
				  && ch <= 0x5E
				  /* ^ */
				  || ch >= 0x7B
				  /* { */
				  && ch <= 0x7D
				  /* } */
				  ;
				} // https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter
				// But eat eager.


				pp.regexp_eatPatternCharacters = function (state) {
				  var start = state.pos;
				  var ch = 0;

				  while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {
				    state.advance();
				  }

				  return state.pos !== start;
				}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter


				pp.regexp_eatExtendedPatternCharacter = function (state) {
				  var ch = state.current();

				  if (ch !== -1 && ch !== 0x24
				  /* $ */
				  && !(ch >= 0x28
				  /* ( */
				  && ch <= 0x2B
				  /* + */
				  ) && ch !== 0x2E
				  /* . */
				  && ch !== 0x3F
				  /* ? */
				  && ch !== 0x5B
				  /* [ */
				  && ch !== 0x5E
				  /* ^ */
				  && ch !== 0x7C
				  /* | */
				  ) {
				      state.advance();
				      return true;
				    }

				  return false;
				}; // GroupSpecifier[U] ::
				//   [empty]
				//   `?` GroupName[?U]


				pp.regexp_groupSpecifier = function (state) {
				  if (state.eat(0x3F
				  /* ? */
				  )) {
				    if (this.regexp_eatGroupName(state)) {
				      if (state.groupNames.indexOf(state.lastStringValue) !== -1) {
				        state.raise("Duplicate capture group name");
				      }

				      state.groupNames.push(state.lastStringValue);
				      return;
				    }

				    state.raise("Invalid group");
				  }
				}; // GroupName[U] ::
				//   `<` RegExpIdentifierName[?U] `>`
				// Note: this updates `state.lastStringValue` property with the eaten name.


				pp.regexp_eatGroupName = function (state) {
				  state.lastStringValue = "";

				  if (state.eat(0x3C
				  /* < */
				  )) {
				    if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E
				    /* > */
				    )) {
				      return true;
				    }

				    state.raise("Invalid capture group name");
				  }

				  return false;
				}; // RegExpIdentifierName[U] ::
				//   RegExpIdentifierStart[?U]
				//   RegExpIdentifierName[?U] RegExpIdentifierPart[?U]
				// Note: this updates `state.lastStringValue` property with the eaten name.


				pp.regexp_eatRegExpIdentifierName = function (state) {
				  state.lastStringValue = "";

				  if (this.regexp_eatRegExpIdentifierStart(state)) {
				    state.lastStringValue += codePointToString(state.lastIntValue);

				    while (this.regexp_eatRegExpIdentifierPart(state)) {
				      state.lastStringValue += codePointToString(state.lastIntValue);
				    }

				    return true;
				  }

				  return false;
				}; // RegExpIdentifierStart[U] ::
				//   UnicodeIDStart
				//   `$`
				//   `_`
				//   `\` RegExpUnicodeEscapeSequence[?U]


				pp.regexp_eatRegExpIdentifierStart = function (state) {
				  var start = state.pos;
				  var ch = state.current();
				  state.advance();

				  if (ch === 0x5C
				  /* \ */
				  && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {
				    ch = state.lastIntValue;
				  }

				  if (isRegExpIdentifierStart(ch)) {
				    state.lastIntValue = ch;
				    return true;
				  }

				  state.pos = start;
				  return false;
				};

				function isRegExpIdentifierStart(ch) {
				  return (0, _identifier.isIdentifierStart)(ch, true) || ch === 0x24
				  /* $ */
				  || ch === 0x5F;
				  /* _ */
				} // RegExpIdentifierPart[U] ::
				//   UnicodeIDContinue
				//   `$`
				//   `_`
				//   `\` RegExpUnicodeEscapeSequence[?U]
				//   <ZWNJ>
				//   <ZWJ>


				pp.regexp_eatRegExpIdentifierPart = function (state) {
				  var start = state.pos;
				  var ch = state.current();
				  state.advance();

				  if (ch === 0x5C
				  /* \ */
				  && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {
				    ch = state.lastIntValue;
				  }

				  if (isRegExpIdentifierPart(ch)) {
				    state.lastIntValue = ch;
				    return true;
				  }

				  state.pos = start;
				  return false;
				};

				function isRegExpIdentifierPart(ch) {
				  return (0, _identifier.isIdentifierChar)(ch, true) || ch === 0x24
				  /* $ */
				  || ch === 0x5F
				  /* _ */
				  || ch === 0x200C
				  /* <ZWNJ> */
				  || ch === 0x200D;
				  /* <ZWJ> */
				} // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape


				pp.regexp_eatAtomEscape = function (state) {
				  if (this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) {
				    return true;
				  }

				  if (state.switchU) {
				    // Make the same message as V8.
				    if (state.current() === 0x63
				    /* c */
				    ) {
				        state.raise("Invalid unicode escape");
				      }

				    state.raise("Invalid escape");
				  }

				  return false;
				};

				pp.regexp_eatBackReference = function (state) {
				  var start = state.pos;

				  if (this.regexp_eatDecimalEscape(state)) {
				    var n = state.lastIntValue;

				    if (state.switchU) {
				      // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape
				      if (n > state.maxBackReference) {
				        state.maxBackReference = n;
				      }

				      return true;
				    }

				    if (n <= state.numCapturingParens) {
				      return true;
				    }

				    state.pos = start;
				  }

				  return false;
				};

				pp.regexp_eatKGroupName = function (state) {
				  if (state.eat(0x6B
				  /* k */
				  )) {
				    if (this.regexp_eatGroupName(state)) {
				      state.backReferenceNames.push(state.lastStringValue);
				      return true;
				    }

				    state.raise("Invalid named reference");
				  }

				  return false;
				}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape


				pp.regexp_eatCharacterEscape = function (state) {
				  return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);
				};

				pp.regexp_eatCControlLetter = function (state) {
				  var start = state.pos;

				  if (state.eat(0x63
				  /* c */
				  )) {
				    if (this.regexp_eatControlLetter(state)) {
				      return true;
				    }

				    state.pos = start;
				  }

				  return false;
				};

				pp.regexp_eatZero = function (state) {
				  if (state.current() === 0x30
				  /* 0 */
				  && !isDecimalDigit(state.lookahead())) {
				    state.lastIntValue = 0;
				    state.advance();
				    return true;
				  }

				  return false;
				}; // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape


				pp.regexp_eatControlEscape = function (state) {
				  var ch = state.current();

				  if (ch === 0x74
				  /* t */
				  ) {
				      state.lastIntValue = 0x09;
				      /* \t */

				      state.advance();
				      return true;
				    }

				  if (ch === 0x6E
				  /* n */
				  ) {
				      state.lastIntValue = 0x0A;
				      /* \n */

				      state.advance();
				      return true;
				    }

				  if (ch === 0x76
				  /* v */
				  ) {
				      state.lastIntValue = 0x0B;
				      /* \v */

				      state.advance();
				      return true;
				    }

				  if (ch === 0x66
				  /* f */
				  ) {
				      state.lastIntValue = 0x0C;
				      /* \f */

				      state.advance();
				      return true;
				    }

				  if (ch === 0x72
				  /* r */
				  ) {
				      state.lastIntValue = 0x0D;
				      /* \r */

				      state.advance();
				      return true;
				    }

				  return false;
				}; // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter


				pp.regexp_eatControlLetter = function (state) {
				  var ch = state.current();

				  if (isControlLetter(ch)) {
				    state.lastIntValue = ch % 0x20;
				    state.advance();
				    return true;
				  }

				  return false;
				};

				function isControlLetter(ch) {
				  return ch >= 0x41
				  /* A */
				  && ch <= 0x5A
				  /* Z */
				  || ch >= 0x61
				  /* a */
				  && ch <= 0x7A
				  /* z */
				  ;
				} // https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence


				pp.regexp_eatRegExpUnicodeEscapeSequence = function (state) {
				  var start = state.pos;

				  if (state.eat(0x75
				  /* u */
				  )) {
				    if (this.regexp_eatFixedHexDigits(state, 4)) {
				      var lead = state.lastIntValue;

				      if (state.switchU && lead >= 0xD800 && lead <= 0xDBFF) {
				        var leadSurrogateEnd = state.pos;

				        if (state.eat(0x5C
				        /* \ */
				        ) && state.eat(0x75
				        /* u */
				        ) && this.regexp_eatFixedHexDigits(state, 4)) {
				          var trail = state.lastIntValue;

				          if (trail >= 0xDC00 && trail <= 0xDFFF) {
				            state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
				            return true;
				          }
				        }

				        state.pos = leadSurrogateEnd;
				        state.lastIntValue = lead;
				      }

				      return true;
				    }

				    if (state.switchU && state.eat(0x7B
				    /* { */
				    ) && this.regexp_eatHexDigits(state) && state.eat(0x7D
				    /* } */
				    ) && isValidUnicode(state.lastIntValue)) {
				      return true;
				    }

				    if (state.switchU) {
				      state.raise("Invalid unicode escape");
				    }

				    state.pos = start;
				  }

				  return false;
				};

				function isValidUnicode(ch) {
				  return ch >= 0 && ch <= 0x10FFFF;
				} // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape


				pp.regexp_eatIdentityEscape = function (state) {
				  if (state.switchU) {
				    if (this.regexp_eatSyntaxCharacter(state)) {
				      return true;
				    }

				    if (state.eat(0x2F
				    /* / */
				    )) {
				      state.lastIntValue = 0x2F;
				      /* / */

				      return true;
				    }

				    return false;
				  }

				  var ch = state.current();

				  if (ch !== 0x63
				  /* c */
				  && (!state.switchN || ch !== 0x6B
				  /* k */
				  )) {
				    state.lastIntValue = ch;
				    state.advance();
				    return true;
				  }

				  return false;
				}; // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape


				pp.regexp_eatDecimalEscape = function (state) {
				  state.lastIntValue = 0;
				  var ch = state.current();

				  if (ch >= 0x31
				  /* 1 */
				  && ch <= 0x39
				  /* 9 */
				  ) {
				      do {
				        state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30
				        /* 0 */
				        );
				        state.advance();
				      } while ((ch = state.current()) >= 0x30
				      /* 0 */
				      && ch <= 0x39
				      /* 9 */
				      );

				      return true;
				    }

				  return false;
				}; // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape


				pp.regexp_eatCharacterClassEscape = function (state) {
				  var ch = state.current();

				  if (isCharacterClassEscape(ch)) {
				    state.lastIntValue = -1;
				    state.advance();
				    return true;
				  }

				  if (state.switchU && this.options.ecmaVersion >= 9 && (ch === 0x50
				  /* P */
				  || ch === 0x70
				  /* p */
				  )) {
				    state.lastIntValue = -1;
				    state.advance();

				    if (state.eat(0x7B
				    /* { */
				    ) && this.regexp_eatUnicodePropertyValueExpression(state) && state.eat(0x7D
				    /* } */
				    )) {
				      return true;
				    }

				    state.raise("Invalid property name");
				  }

				  return false;
				};

				function isCharacterClassEscape(ch) {
				  return ch === 0x64
				  /* d */
				  || ch === 0x44
				  /* D */
				  || ch === 0x73
				  /* s */
				  || ch === 0x53
				  /* S */
				  || ch === 0x77
				  /* w */
				  || ch === 0x57
				  /* W */
				  ;
				} // UnicodePropertyValueExpression ::
				//   UnicodePropertyName `=` UnicodePropertyValue
				//   LoneUnicodePropertyNameOrValue


				pp.regexp_eatUnicodePropertyValueExpression = function (state) {
				  var start = state.pos; // UnicodePropertyName `=` UnicodePropertyValue

				  if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D
				  /* = */
				  )) {
				    var name = state.lastStringValue;

				    if (this.regexp_eatUnicodePropertyValue(state)) {
				      var value = state.lastStringValue;
				      this.regexp_validateUnicodePropertyNameAndValue(state, name, value);
				      return true;
				    }
				  }

				  state.pos = start; // LoneUnicodePropertyNameOrValue

				  if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
				    var nameOrValue = state.lastStringValue;
				    this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
				    return true;
				  }

				  return false;
				};

				pp.regexp_validateUnicodePropertyNameAndValue = function (state, name, value) {
				  if (!(0, _util.has)(state.unicodeProperties.nonBinary, name)) state.raise("Invalid property name");
				  if (!state.unicodeProperties.nonBinary[name].test(value)) state.raise("Invalid property value");
				};

				pp.regexp_validateUnicodePropertyNameOrValue = function (state, nameOrValue) {
				  if (!state.unicodeProperties.binary.test(nameOrValue)) state.raise("Invalid property name");
				}; // UnicodePropertyName ::
				//   UnicodePropertyNameCharacters


				pp.regexp_eatUnicodePropertyName = function (state) {
				  var ch = 0;
				  state.lastStringValue = "";

				  while (isUnicodePropertyNameCharacter(ch = state.current())) {
				    state.lastStringValue += codePointToString(ch);
				    state.advance();
				  }

				  return state.lastStringValue !== "";
				};

				function isUnicodePropertyNameCharacter(ch) {
				  return isControlLetter(ch) || ch === 0x5F;
				  /* _ */
				} // UnicodePropertyValue ::
				//   UnicodePropertyValueCharacters


				pp.regexp_eatUnicodePropertyValue = function (state) {
				  var ch = 0;
				  state.lastStringValue = "";

				  while (isUnicodePropertyValueCharacter(ch = state.current())) {
				    state.lastStringValue += codePointToString(ch);
				    state.advance();
				  }

				  return state.lastStringValue !== "";
				};

				function isUnicodePropertyValueCharacter(ch) {
				  return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch);
				} // LoneUnicodePropertyNameOrValue ::
				//   UnicodePropertyValueCharacters


				pp.regexp_eatLoneUnicodePropertyNameOrValue = function (state) {
				  return this.regexp_eatUnicodePropertyValue(state);
				}; // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass


				pp.regexp_eatCharacterClass = function (state) {
				  if (state.eat(0x5B
				  /* [ */
				  )) {
				    state.eat(0x5E
				    /* ^ */
				    );
				    this.regexp_classRanges(state);

				    if (state.eat(0x5D
				    /* [ */
				    )) {
				      return true;
				    } // Unreachable since it threw "unterminated regular expression" error before.


				    state.raise("Unterminated character class");
				  }

				  return false;
				}; // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges
				// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges
				// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash


				pp.regexp_classRanges = function (state) {
				  while (this.regexp_eatClassAtom(state)) {
				    var left = state.lastIntValue;

				    if (state.eat(0x2D
				    /* - */
				    ) && this.regexp_eatClassAtom(state)) {
				      var right = state.lastIntValue;

				      if (state.switchU && (left === -1 || right === -1)) {
				        state.raise("Invalid character class");
				      }

				      if (left !== -1 && right !== -1 && left > right) {
				        state.raise("Range out of order in character class");
				      }
				    }
				  }
				}; // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom
				// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash


				pp.regexp_eatClassAtom = function (state) {
				  var start = state.pos;

				  if (state.eat(0x5C
				  /* \ */
				  )) {
				    if (this.regexp_eatClassEscape(state)) {
				      return true;
				    }

				    if (state.switchU) {
				      // Make the same message as V8.
				      var _ch = state.current();

				      if (_ch === 0x63
				      /* c */
				      || isOctalDigit(_ch)) {
				        state.raise("Invalid class escape");
				      }

				      state.raise("Invalid escape");
				    }

				    state.pos = start;
				  }

				  var ch = state.current();

				  if (ch !== 0x5D
				  /* [ */
				  ) {
				      state.lastIntValue = ch;
				      state.advance();
				      return true;
				    }

				  return false;
				}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape


				pp.regexp_eatClassEscape = function (state) {
				  var start = state.pos;

				  if (state.eat(0x62
				  /* b */
				  )) {
				    state.lastIntValue = 0x08;
				    /* <BS> */

				    return true;
				  }

				  if (state.switchU && state.eat(0x2D
				  /* - */
				  )) {
				    state.lastIntValue = 0x2D;
				    /* - */

				    return true;
				  }

				  if (!state.switchU && state.eat(0x63
				  /* c */
				  )) {
				    if (this.regexp_eatClassControlLetter(state)) {
				      return true;
				    }

				    state.pos = start;
				  }

				  return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);
				}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter


				pp.regexp_eatClassControlLetter = function (state) {
				  var ch = state.current();

				  if (isDecimalDigit(ch) || ch === 0x5F
				  /* _ */
				  ) {
				      state.lastIntValue = ch % 0x20;
				      state.advance();
				      return true;
				    }

				  return false;
				}; // https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence


				pp.regexp_eatHexEscapeSequence = function (state) {
				  var start = state.pos;

				  if (state.eat(0x78
				  /* x */
				  )) {
				    if (this.regexp_eatFixedHexDigits(state, 2)) {
				      return true;
				    }

				    if (state.switchU) {
				      state.raise("Invalid escape");
				    }

				    state.pos = start;
				  }

				  return false;
				}; // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits


				pp.regexp_eatDecimalDigits = function (state) {
				  var start = state.pos;
				  var ch = 0;
				  state.lastIntValue = 0;

				  while (isDecimalDigit(ch = state.current())) {
				    state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30
				    /* 0 */
				    );
				    state.advance();
				  }

				  return state.pos !== start;
				};

				function isDecimalDigit(ch) {
				  return ch >= 0x30
				  /* 0 */
				  && ch <= 0x39;
				  /* 9 */
				} // https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits


				pp.regexp_eatHexDigits = function (state) {
				  var start = state.pos;
				  var ch = 0;
				  state.lastIntValue = 0;

				  while (isHexDigit(ch = state.current())) {
				    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
				    state.advance();
				  }

				  return state.pos !== start;
				};

				function isHexDigit(ch) {
				  return ch >= 0x30
				  /* 0 */
				  && ch <= 0x39
				  /* 9 */
				  || ch >= 0x41
				  /* A */
				  && ch <= 0x46
				  /* F */
				  || ch >= 0x61
				  /* a */
				  && ch <= 0x66
				  /* f */
				  ;
				}

				function hexToInt(ch) {
				  if (ch >= 0x41
				  /* A */
				  && ch <= 0x46
				  /* F */
				  ) {
				      return 10 + (ch - 0x41
				      /* A */
				      );
				    }

				  if (ch >= 0x61
				  /* a */
				  && ch <= 0x66
				  /* f */
				  ) {
				      return 10 + (ch - 0x61
				      /* a */
				      );
				    }

				  return ch - 0x30;
				  /* 0 */
				} // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence
				// Allows only 0-377(octal) i.e. 0-255(decimal).


				pp.regexp_eatLegacyOctalEscapeSequence = function (state) {
				  if (this.regexp_eatOctalDigit(state)) {
				    var n1 = state.lastIntValue;

				    if (this.regexp_eatOctalDigit(state)) {
				      var n2 = state.lastIntValue;

				      if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {
				        state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;
				      } else {
				        state.lastIntValue = n1 * 8 + n2;
				      }
				    } else {
				      state.lastIntValue = n1;
				    }

				    return true;
				  }

				  return false;
				}; // https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit


				pp.regexp_eatOctalDigit = function (state) {
				  var ch = state.current();

				  if (isOctalDigit(ch)) {
				    state.lastIntValue = ch - 0x30;
				    /* 0 */

				    state.advance();
				    return true;
				  }

				  state.lastIntValue = 0;
				  return false;
				};

				function isOctalDigit(ch) {
				  return ch >= 0x30
				  /* 0 */
				  && ch <= 0x37;
				  /* 7 */
				} // https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits
				// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit
				// And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence


				pp.regexp_eatFixedHexDigits = function (state, length) {
				  var start = state.pos;
				  state.lastIntValue = 0;

				  for (var i = 0; i < length; ++i) {
				    var ch = state.current();

				    if (!isHexDigit(ch)) {
				      state.pos = start;
				      return false;
				    }

				    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
				    state.advance();
				  }

				  return true;
				};
			},
			"scope.js": function (exports, module, require) {
				

				var _state = require("./state");

				var _scopeflags = require("./scopeflags");

				var pp = _state.Parser.prototype;

				var Scope = function Scope(flags) {
				  this.flags = flags; // A list of var-declared names in the current lexical scope

				  this.var = []; // A list of lexically-declared names in the current lexical scope

				  this.lexical = []; // A list of lexically-declared FunctionDeclaration names in the current lexical scope

				  this.functions = [];
				}; // The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.


				pp.enterScope = function (flags) {
				  this.scopeStack.push(new Scope(flags));
				};

				pp.exitScope = function () {
				  this.scopeStack.pop();
				}; // The spec says:
				// > At the top level of a function, or script, function declarations are
				// > treated like var declarations rather than like lexical declarations.


				pp.treatFunctionsAsVarInScope = function (scope) {
				  return scope.flags & _scopeflags.SCOPE_FUNCTION || !this.inModule && scope.flags & _scopeflags.SCOPE_TOP;
				};

				pp.declareName = function (name, bindingType, pos) {
				  var redeclared = false;

				  if (bindingType === _scopeflags.BIND_LEXICAL) {
				    var scope = this.currentScope();
				    redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;
				    scope.lexical.push(name);
				    if (this.inModule && scope.flags & _scopeflags.SCOPE_TOP) delete this.undefinedExports[name];
				  } else if (bindingType === _scopeflags.BIND_SIMPLE_CATCH) {
				    var _scope = this.currentScope();

				    _scope.lexical.push(name);
				  } else if (bindingType === _scopeflags.BIND_FUNCTION) {
				    var _scope2 = this.currentScope();

				    if (this.treatFunctionsAsVar) redeclared = _scope2.lexical.indexOf(name) > -1;else redeclared = _scope2.lexical.indexOf(name) > -1 || _scope2.var.indexOf(name) > -1;

				    _scope2.functions.push(name);
				  } else {
				    for (var i = this.scopeStack.length - 1; i >= 0; --i) {
				      var _scope3 = this.scopeStack[i];

				      if (_scope3.lexical.indexOf(name) > -1 && !(_scope3.flags & _scopeflags.SCOPE_SIMPLE_CATCH && _scope3.lexical[0] === name) || !this.treatFunctionsAsVarInScope(_scope3) && _scope3.functions.indexOf(name) > -1) {
				        redeclared = true;
				        break;
				      }

				      _scope3.var.push(name);

				      if (this.inModule && _scope3.flags & _scopeflags.SCOPE_TOP) delete this.undefinedExports[name];
				      if (_scope3.flags & _scopeflags.SCOPE_VAR) break;
				    }
				  }

				  if (redeclared) this.raiseRecoverable(pos, "Identifier '" + name + "' has already been declared");
				};

				pp.checkLocalExport = function (id) {
				  // scope.functions must be empty as Module code is always strict.
				  if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1) {
				    this.undefinedExports[id.name] = id;
				  }
				};

				pp.currentScope = function () {
				  return this.scopeStack[this.scopeStack.length - 1];
				};

				pp.currentVarScope = function () {
				  for (var i = this.scopeStack.length - 1;; i--) {
				    var scope = this.scopeStack[i];
				    if (scope.flags & _scopeflags.SCOPE_VAR) return scope;
				  }
				}; // Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.


				pp.currentThisScope = function () {
				  for (var i = this.scopeStack.length - 1;; i--) {
				    var scope = this.scopeStack[i];
				    if (scope.flags & _scopeflags.SCOPE_VAR && !(scope.flags & _scopeflags.SCOPE_ARROW)) return scope;
				  }
				};
			},
			"scopeflags.js": function (exports, module, require) {
				

				exports.__esModule = true;
				exports.functionFlags = functionFlags; // Each scope gets a bitset that may contain these flags

				var SCOPE_TOP = exports.SCOPE_TOP = 1,
				    SCOPE_FUNCTION = exports.SCOPE_FUNCTION = 2,
				    SCOPE_VAR = exports.SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION,
				    SCOPE_ASYNC = exports.SCOPE_ASYNC = 4,
				    SCOPE_GENERATOR = exports.SCOPE_GENERATOR = 8,
				    SCOPE_ARROW = exports.SCOPE_ARROW = 16,
				    SCOPE_SIMPLE_CATCH = exports.SCOPE_SIMPLE_CATCH = 32,
				    SCOPE_SUPER = exports.SCOPE_SUPER = 64,
				    SCOPE_DIRECT_SUPER = exports.SCOPE_DIRECT_SUPER = 128;

				function functionFlags(async, generator) {
				  return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0);
				} // Used in checkLVal and declareName to determine the type of a binding


				var BIND_NONE = exports.BIND_NONE = 0,
				    // Not a binding
				BIND_VAR = exports.BIND_VAR = 1,
				    // Var-style binding
				BIND_LEXICAL = exports.BIND_LEXICAL = 2,
				    // Let- or const-style binding
				BIND_FUNCTION = exports.BIND_FUNCTION = 3,
				    // Function declaration
				BIND_SIMPLE_CATCH = exports.BIND_SIMPLE_CATCH = 4,
				    // Simple (identifier pattern) catch binding
				BIND_OUTSIDE = exports.BIND_OUTSIDE = 5; // Special case for function names as bound inside the function
			},
			"state.js": function (exports, module, require) {
				

				function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

				function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

				exports.__esModule = true;
				exports.Parser = undefined;

				var _identifier = require("./identifier");

				var _tokentype = require("./tokentype");

				var _whitespace = require("./whitespace");

				var _options = require("./options");

				var _util = require("./util");

				var _scopeflags = require("./scopeflags");

				var Parser = /*#__PURE__*/function () {
				  function Parser(options, input, startPos) {
				    this.options = options = (0, _options.getOptions)(options);
				    this.sourceFile = options.sourceFile;
				    this.keywords = (0, _util.wordsRegexp)(_identifier.keywords[options.ecmaVersion >= 6 ? 6 : 5]);
				    var reserved = "";

				    if (options.allowReserved !== true) {
				      for (var v = options.ecmaVersion;; v--) {
				        if (reserved = _identifier.reservedWords[v]) break;
				      }

				      if (options.sourceType === "module") reserved += " await";
				    }

				    this.reservedWords = (0, _util.wordsRegexp)(reserved);
				    var reservedStrict = (reserved ? reserved + " " : "") + _identifier.reservedWords.strict;
				    this.reservedWordsStrict = (0, _util.wordsRegexp)(reservedStrict);
				    this.reservedWordsStrictBind = (0, _util.wordsRegexp)(reservedStrict + " " + _identifier.reservedWords.strictBind);
				    this.input = String(input); // Used to signal to callers of `readWord1` whether the word
				    // contained any escape sequences. This is needed because words with
				    // escape sequences must not be interpreted as keywords.

				    this.containsEsc = false; // Set up token state
				    // The current position of the tokenizer in the input.

				    if (startPos) {
				      this.pos = startPos;
				      this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1;
				      this.curLine = this.input.slice(0, this.lineStart).split(_whitespace.lineBreak).length;
				    } else {
				      this.pos = this.lineStart = 0;
				      this.curLine = 1;
				    } // Properties of the current token:
				    // Its type


				    this.type = _tokentype.types.eof; // For tokens that include more information than their type, the value

				    this.value = null; // Its start and end offset

				    this.start = this.end = this.pos; // And, if locations are used, the {line, column} object
				    // corresponding to those offsets

				    this.startLoc = this.endLoc = this.curPosition(); // Position information for the previous token

				    this.lastTokEndLoc = this.lastTokStartLoc = null;
				    this.lastTokStart = this.lastTokEnd = this.pos; // The context stack is used to superficially track syntactic
				    // context to predict whether a regular expression is allowed in a
				    // given position.

				    this.context = this.initialContext();
				    this.exprAllowed = true; // Figure out if it's a module code.

				    this.inModule = options.sourceType === "module";
				    this.strict = this.inModule || this.strictDirective(this.pos); // Used to signify the start of a potential arrow function

				    this.potentialArrowAt = -1; // Positions to delayed-check that yield/await does not exist in default parameters.

				    this.yieldPos = this.awaitPos = this.awaitIdentPos = 0; // Labels in scope.

				    this.labels = []; // Thus-far undefined exports.

				    this.undefinedExports = {}; // If enabled, skip leading hashbang line.

				    if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!") this.skipLineComment(2); // Scope tracking for duplicate variable names (see scope.js)

				    this.scopeStack = [];
				    this.enterScope(_scopeflags.SCOPE_TOP); // For RegExp validation

				    this.regexpState = null;
				  }

				  var _proto = Parser.prototype;

				  _proto.parse = function parse() {
				    var node = this.options.program || this.startNode();
				    this.nextToken();
				    return this.parseTopLevel(node);
				  };

				  // Switch to a getter for 7.0.0.
				  _proto.inNonArrowFunction = function inNonArrowFunction() {
				    return (this.currentThisScope().flags & _scopeflags.SCOPE_FUNCTION) > 0;
				  };

				  Parser.extend = function extend() {
				    var cls = this;

				    for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {
				      plugins[_key] = arguments[_key];
				    }

				    for (var i = 0; i < plugins.length; i++) {
				      cls = plugins[i](cls);
				    }

				    return cls;
				  };

				  Parser.parse = function parse(input, options) {
				    return new this(options, input).parse();
				  };

				  Parser.parseExpressionAt = function parseExpressionAt(input, pos, options) {
				    var parser = new this(options, input, pos);
				    parser.nextToken();
				    return parser.parseExpression();
				  };

				  Parser.tokenizer = function tokenizer(input, options) {
				    return new this(options, input);
				  };

				  _createClass(Parser, [{
				    key: "inFunction",
				    get: function get() {
				      return (this.currentVarScope().flags & _scopeflags.SCOPE_FUNCTION) > 0;
				    }
				  }, {
				    key: "inGenerator",
				    get: function get() {
				      return (this.currentVarScope().flags & _scopeflags.SCOPE_GENERATOR) > 0;
				    }
				  }, {
				    key: "inAsync",
				    get: function get() {
				      return (this.currentVarScope().flags & _scopeflags.SCOPE_ASYNC) > 0;
				    }
				  }, {
				    key: "allowSuper",
				    get: function get() {
				      return (this.currentThisScope().flags & _scopeflags.SCOPE_SUPER) > 0;
				    }
				  }, {
				    key: "allowDirectSuper",
				    get: function get() {
				      return (this.currentThisScope().flags & _scopeflags.SCOPE_DIRECT_SUPER) > 0;
				    }
				  }, {
				    key: "treatFunctionsAsVar",
				    get: function get() {
				      return this.treatFunctionsAsVarInScope(this.currentScope());
				    }
				  }]);

				  return Parser;
				}();

				exports.Parser = Parser;
			},
			"statement.js": function (exports, module, require) {
				

				var _tokentype = require("./tokentype");

				var _state = require("./state");

				var _whitespace = require("./whitespace");

				var _identifier = require("./identifier");

				var _util = require("./util");

				var _parseutil = require("./parseutil");

				var _scopeflags = require("./scopeflags");

				var pp = _state.Parser.prototype; // ### Statement parsing
				// Parse a program. Initializes the parser, reads any number of
				// statements, and wraps them in a Program node.  Optionally takes a
				// `program` argument.  If present, the statements will be appended
				// to its body instead of creating a new node.

				pp.parseTopLevel = function (node) {
				  var exports = {};
				  if (!node.body) node.body = [];

				  while (this.type !== _tokentype.types.eof) {
				    var stmt = this.parseStatement(null, true, exports);
				    node.body.push(stmt);
				  }

				  if (this.inModule) {
				    for (var _iterator = Object.keys(this.undefinedExports), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
				      var _ref;

				      if (_isArray) {
				        if (_i >= _iterator.length) break;
				        _ref = _iterator[_i++];
				      } else {
				        _i = _iterator.next();
				        if (_i.done) break;
				        _ref = _i.value;
				      }

				      var name = _ref;
				      this.raiseRecoverable(this.undefinedExports[name].start, "Export '" + name + "' is not defined");
				    }
				  }

				  this.adaptDirectivePrologue(node.body);
				  this.next();

				  if (this.options.ecmaVersion >= 6) {
				    node.sourceType = this.options.sourceType;
				  }

				  return this.finishNode(node, "Program");
				};

				var loopLabel = {
				  kind: "loop"
				},
				    switchLabel = {
				  kind: "switch"
				};

				pp.isLet = function (context) {
				  if (this.options.ecmaVersion < 6 || !this.isContextual("let")) return false;
				  _whitespace.skipWhiteSpace.lastIndex = this.pos;

				  var skip = _whitespace.skipWhiteSpace.exec(this.input);

				  var next = this.pos + skip[0].length,
				      nextCh = this.input.charCodeAt(next); // For ambiguous cases, determine if a LexicalDeclaration (or only a
				  // Statement) is allowed here. If context is not empty then only a Statement
				  // is allowed. However, `let [` is an explicit negative lookahead for
				  // ExpressionStatement, so special-case it first.

				  if (nextCh === 91) return true; // '['

				  if (context) return false;
				  if (nextCh === 123) return true; // '{'

				  if ((0, _identifier.isIdentifierStart)(nextCh, true)) {
				    var pos = next + 1;

				    while ((0, _identifier.isIdentifierChar)(this.input.charCodeAt(pos), true)) {
				      ++pos;
				    }

				    var ident = this.input.slice(next, pos);
				    if (!_identifier.keywordRelationalOperator.test(ident)) return true;
				  }

				  return false;
				}; // check 'async [no LineTerminator here] function'
				// - 'async /*foo*/ function' is OK.
				// - 'async /*\n*/ function' is invalid.


				pp.isAsyncFunction = function () {
				  if (this.options.ecmaVersion < 8 || !this.isContextual("async")) return false;
				  _whitespace.skipWhiteSpace.lastIndex = this.pos;

				  var skip = _whitespace.skipWhiteSpace.exec(this.input);

				  var next = this.pos + skip[0].length;
				  return !_whitespace.lineBreak.test(this.input.slice(this.pos, next)) && this.input.slice(next, next + 8) === "function" && (next + 8 === this.input.length || !(0, _identifier.isIdentifierChar)(this.input.charAt(next + 8)));
				}; // Parse a single statement.
				//
				// If expecting a statement and finding a slash operator, parse a
				// regular expression literal. This is to handle cases like
				// `if (foo) /blah/.exec(foo)`, where looking at the previous token
				// does not help.


				pp.parseStatement = function (context, topLevel, exports) {
				  var starttype = this.type,
				      node = this.startNode(),
				      kind;

				  if (this.isLet(context)) {
				    starttype = _tokentype.types._var;
				    kind = "let";
				  } // Most types of statements are recognized by the keyword they
				  // start with. Many are trivial to parse, some require a bit of
				  // complexity.


				  switch (starttype) {
				    case _tokentype.types._break:
				    case _tokentype.types._continue:
				      return this.parseBreakContinueStatement(node, starttype.keyword);

				    case _tokentype.types._debugger:
				      return this.parseDebuggerStatement(node);

				    case _tokentype.types._do:
				      return this.parseDoStatement(node);

				    case _tokentype.types._for:
				      return this.parseForStatement(node);

				    case _tokentype.types._function:
				      // Function as sole body of either an if statement or a labeled statement
				      // works, but not when it is part of a labeled statement that is the sole
				      // body of an if statement.
				      if (context && (this.strict || context !== "if" && context !== "label") && this.options.ecmaVersion >= 6) this.unexpected();
				      return this.parseFunctionStatement(node, false, !context);

				    case _tokentype.types._class:
				      if (context) this.unexpected();
				      return this.parseClass(node, true);

				    case _tokentype.types._if:
				      return this.parseIfStatement(node);

				    case _tokentype.types._return:
				      return this.parseReturnStatement(node);

				    case _tokentype.types._switch:
				      return this.parseSwitchStatement(node);

				    case _tokentype.types._throw:
				      return this.parseThrowStatement(node);

				    case _tokentype.types._try:
				      return this.parseTryStatement(node);

				    case _tokentype.types._const:
				    case _tokentype.types._var:
				      kind = kind || this.value;
				      if (context && kind !== "var") this.unexpected();
				      return this.parseVarStatement(node, kind);

				    case _tokentype.types._while:
				      return this.parseWhileStatement(node);

				    case _tokentype.types._with:
				      return this.parseWithStatement(node);

				    case _tokentype.types.braceL:
				      return this.parseBlock(true, node);

				    case _tokentype.types.semi:
				      return this.parseEmptyStatement(node);

				    case _tokentype.types._export:
				    case _tokentype.types._import:
				      if (this.options.ecmaVersion > 10 && starttype === _tokentype.types._import) {
				        _whitespace.skipWhiteSpace.lastIndex = this.pos;

				        var skip = _whitespace.skipWhiteSpace.exec(this.input);

				        var next = this.pos + skip[0].length,
				            nextCh = this.input.charCodeAt(next);
				        if (nextCh === 40) // '('
				          return this.parseExpressionStatement(node, this.parseExpression());
				      }

				      if (!this.options.allowImportExportEverywhere) {
				        if (!topLevel) this.raise(this.start, "'import' and 'export' may only appear at the top level");
				        if (!this.inModule) this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'");
				      }

				      return starttype === _tokentype.types._import ? this.parseImport(node) : this.parseExport(node, exports);
				    // If the statement does not start with a statement keyword or a
				    // brace, it's an ExpressionStatement or LabeledStatement. We
				    // simply start parsing an expression, and afterwards, if the
				    // next token is a colon and the expression was a simple
				    // Identifier node, we switch to interpreting it as a label.

				    default:
				      if (this.isAsyncFunction()) {
				        if (context) this.unexpected();
				        this.next();
				        return this.parseFunctionStatement(node, true, !context);
				      }

				      var maybeName = this.value,
				          expr = this.parseExpression();
				      if (starttype === _tokentype.types.name && expr.type === "Identifier" && this.eat(_tokentype.types.colon)) return this.parseLabeledStatement(node, maybeName, expr, context);else return this.parseExpressionStatement(node, expr);
				  }
				};

				pp.parseBreakContinueStatement = function (node, keyword) {
				  var isBreak = keyword === "break";
				  this.next();
				  if (this.eat(_tokentype.types.semi) || this.insertSemicolon()) node.label = null;else if (this.type !== _tokentype.types.name) this.unexpected();else {
				    node.label = this.parseIdent();
				    this.semicolon();
				  } // Verify that there is an actual destination to break or
				  // continue to.

				  var i = 0;

				  for (; i < this.labels.length; ++i) {
				    var lab = this.labels[i];

				    if (node.label == null || lab.name === node.label.name) {
				      if (lab.kind != null && (isBreak || lab.kind === "loop")) break;
				      if (node.label && isBreak) break;
				    }
				  }

				  if (i === this.labels.length) this.raise(node.start, "Unsyntactic " + keyword);
				  return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
				};

				pp.parseDebuggerStatement = function (node) {
				  this.next();
				  this.semicolon();
				  return this.finishNode(node, "DebuggerStatement");
				};

				pp.parseDoStatement = function (node) {
				  this.next();
				  this.labels.push(loopLabel);
				  node.body = this.parseStatement("do");
				  this.labels.pop();
				  this.expect(_tokentype.types._while);
				  node.test = this.parseParenExpression();
				  if (this.options.ecmaVersion >= 6) this.eat(_tokentype.types.semi);else this.semicolon();
				  return this.finishNode(node, "DoWhileStatement");
				}; // Disambiguating between a `for` and a `for`/`in` or `for`/`of`
				// loop is non-trivial. Basically, we have to parse the init `var`
				// statement or expression, disallowing the `in` operator (see
				// the second parameter to `parseExpression`), and then check
				// whether the next token is `in` or `of`. When there is no init
				// part (semicolon immediately after the opening parenthesis), it
				// is a regular `for` loop.


				pp.parseForStatement = function (node) {
				  this.next();
				  var awaitAt = this.options.ecmaVersion >= 9 && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction) && this.eatContextual("await") ? this.lastTokStart : -1;
				  this.labels.push(loopLabel);
				  this.enterScope(0);
				  this.expect(_tokentype.types.parenL);

				  if (this.type === _tokentype.types.semi) {
				    if (awaitAt > -1) this.unexpected(awaitAt);
				    return this.parseFor(node, null);
				  }

				  var isLet = this.isLet();

				  if (this.type === _tokentype.types._var || this.type === _tokentype.types._const || isLet) {
				    var _init = this.startNode(),
				        kind = isLet ? "let" : this.value;

				    this.next();
				    this.parseVar(_init, true, kind);
				    this.finishNode(_init, "VariableDeclaration");

				    if ((this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && _init.declarations.length === 1) {
				      if (this.options.ecmaVersion >= 9) {
				        if (this.type === _tokentype.types._in) {
				          if (awaitAt > -1) this.unexpected(awaitAt);
				        } else node.await = awaitAt > -1;
				      }

				      return this.parseForIn(node, _init);
				    }

				    if (awaitAt > -1) this.unexpected(awaitAt);
				    return this.parseFor(node, _init);
				  }

				  var refDestructuringErrors = new _parseutil.DestructuringErrors();
				  var init = this.parseExpression(true, refDestructuringErrors);

				  if (this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) {
				    if (this.options.ecmaVersion >= 9) {
				      if (this.type === _tokentype.types._in) {
				        if (awaitAt > -1) this.unexpected(awaitAt);
				      } else node.await = awaitAt > -1;
				    }

				    this.toAssignable(init, false, refDestructuringErrors);
				    this.checkLVal(init);
				    return this.parseForIn(node, init);
				  } else {
				    this.checkExpressionErrors(refDestructuringErrors, true);
				  }

				  if (awaitAt > -1) this.unexpected(awaitAt);
				  return this.parseFor(node, init);
				};

				pp.parseFunctionStatement = function (node, isAsync, declarationPosition) {
				  this.next();
				  return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync);
				};

				pp.parseIfStatement = function (node) {
				  this.next();
				  node.test = this.parseParenExpression(); // allow function declarations in branches, but only in non-strict mode

				  node.consequent = this.parseStatement("if");
				  node.alternate = this.eat(_tokentype.types._else) ? this.parseStatement("if") : null;
				  return this.finishNode(node, "IfStatement");
				};

				pp.parseReturnStatement = function (node) {
				  if (!this.inFunction && !this.options.allowReturnOutsideFunction) this.raise(this.start, "'return' outside of function");
				  this.next(); // In `return` (and `break`/`continue`), the keywords with
				  // optional arguments, we eagerly look for a semicolon or the
				  // possibility to insert one.

				  if (this.eat(_tokentype.types.semi) || this.insertSemicolon()) node.argument = null;else {
				    node.argument = this.parseExpression();
				    this.semicolon();
				  }
				  return this.finishNode(node, "ReturnStatement");
				};

				pp.parseSwitchStatement = function (node) {
				  this.next();
				  node.discriminant = this.parseParenExpression();
				  node.cases = [];
				  this.expect(_tokentype.types.braceL);
				  this.labels.push(switchLabel);
				  this.enterScope(0); // Statements under must be grouped (by label) in SwitchCase
				  // nodes. `cur` is used to keep the node that we are currently
				  // adding statements to.

				  var cur;

				  for (var sawDefault = false; this.type !== _tokentype.types.braceR;) {
				    if (this.type === _tokentype.types._case || this.type === _tokentype.types._default) {
				      var isCase = this.type === _tokentype.types._case;
				      if (cur) this.finishNode(cur, "SwitchCase");
				      node.cases.push(cur = this.startNode());
				      cur.consequent = [];
				      this.next();

				      if (isCase) {
				        cur.test = this.parseExpression();
				      } else {
				        if (sawDefault) this.raiseRecoverable(this.lastTokStart, "Multiple default clauses");
				        sawDefault = true;
				        cur.test = null;
				      }

				      this.expect(_tokentype.types.colon);
				    } else {
				      if (!cur) this.unexpected();
				      cur.consequent.push(this.parseStatement(null));
				    }
				  }

				  this.exitScope();
				  if (cur) this.finishNode(cur, "SwitchCase");
				  this.next(); // Closing brace

				  this.labels.pop();
				  return this.finishNode(node, "SwitchStatement");
				};

				pp.parseThrowStatement = function (node) {
				  this.next();
				  if (_whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) this.raise(this.lastTokEnd, "Illegal newline after throw");
				  node.argument = this.parseExpression();
				  this.semicolon();
				  return this.finishNode(node, "ThrowStatement");
				}; // Reused empty array added for node fields that are always empty.


				var empty = [];

				pp.parseTryStatement = function (node) {
				  this.next();
				  node.block = this.parseBlock();
				  node.handler = null;

				  if (this.type === _tokentype.types._catch) {
				    var clause = this.startNode();
				    this.next();

				    if (this.eat(_tokentype.types.parenL)) {
				      clause.param = this.parseBindingAtom();
				      var simple = clause.param.type === "Identifier";
				      this.enterScope(simple ? _scopeflags.SCOPE_SIMPLE_CATCH : 0);
				      this.checkLVal(clause.param, simple ? _scopeflags.BIND_SIMPLE_CATCH : _scopeflags.BIND_LEXICAL);
				      this.expect(_tokentype.types.parenR);
				    } else {
				      if (this.options.ecmaVersion < 10) this.unexpected();
				      clause.param = null;
				      this.enterScope(0);
				    }

				    clause.body = this.parseBlock(false);
				    this.exitScope();
				    node.handler = this.finishNode(clause, "CatchClause");
				  }

				  node.finalizer = this.eat(_tokentype.types._finally) ? this.parseBlock() : null;
				  if (!node.handler && !node.finalizer) this.raise(node.start, "Missing catch or finally clause");
				  return this.finishNode(node, "TryStatement");
				};

				pp.parseVarStatement = function (node, kind) {
				  this.next();
				  this.parseVar(node, false, kind);
				  this.semicolon();
				  return this.finishNode(node, "VariableDeclaration");
				};

				pp.parseWhileStatement = function (node) {
				  this.next();
				  node.test = this.parseParenExpression();
				  this.labels.push(loopLabel);
				  node.body = this.parseStatement("while");
				  this.labels.pop();
				  return this.finishNode(node, "WhileStatement");
				};

				pp.parseWithStatement = function (node) {
				  if (this.strict) this.raise(this.start, "'with' in strict mode");
				  this.next();
				  node.object = this.parseParenExpression();
				  node.body = this.parseStatement("with");
				  return this.finishNode(node, "WithStatement");
				};

				pp.parseEmptyStatement = function (node) {
				  this.next();
				  return this.finishNode(node, "EmptyStatement");
				};

				pp.parseLabeledStatement = function (node, maybeName, expr, context) {
				  for (var _iterator2 = this.labels, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
				    var _ref2;

				    if (_isArray2) {
				      if (_i2 >= _iterator2.length) break;
				      _ref2 = _iterator2[_i2++];
				    } else {
				      _i2 = _iterator2.next();
				      if (_i2.done) break;
				      _ref2 = _i2.value;
				    }

				    var label = _ref2;
				    if (label.name === maybeName) this.raise(expr.start, "Label '" + maybeName + "' is already declared");
				  }

				  var kind = this.type.isLoop ? "loop" : this.type === _tokentype.types._switch ? "switch" : null;

				  for (var i = this.labels.length - 1; i >= 0; i--) {
				    var _label = this.labels[i];

				    if (_label.statementStart === node.start) {
				      // Update information about previous labels on this node
				      _label.statementStart = this.start;
				      _label.kind = kind;
				    } else break;
				  }

				  this.labels.push({
				    name: maybeName,
				    kind: kind,
				    statementStart: this.start
				  });
				  node.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");
				  this.labels.pop();
				  node.label = expr;
				  return this.finishNode(node, "LabeledStatement");
				};

				pp.parseExpressionStatement = function (node, expr) {
				  node.expression = expr;
				  this.semicolon();
				  return this.finishNode(node, "ExpressionStatement");
				}; // Parse a semicolon-enclosed block of statements, handling `"use
				// strict"` declarations when `allowStrict` is true (used for
				// function bodies).


				pp.parseBlock = function (createNewLexicalScope, node) {
				  if (createNewLexicalScope === void 0) {
				    createNewLexicalScope = true;
				  }

				  if (node === void 0) {
				    node = this.startNode();
				  }

				  node.body = [];
				  this.expect(_tokentype.types.braceL);
				  if (createNewLexicalScope) this.enterScope(0);

				  while (!this.eat(_tokentype.types.braceR)) {
				    var stmt = this.parseStatement(null);
				    node.body.push(stmt);
				  }

				  if (createNewLexicalScope) this.exitScope();
				  return this.finishNode(node, "BlockStatement");
				}; // Parse a regular `for` loop. The disambiguation code in
				// `parseStatement` will already have parsed the init statement or
				// expression.


				pp.parseFor = function (node, init) {
				  node.init = init;
				  this.expect(_tokentype.types.semi);
				  node.test = this.type === _tokentype.types.semi ? null : this.parseExpression();
				  this.expect(_tokentype.types.semi);
				  node.update = this.type === _tokentype.types.parenR ? null : this.parseExpression();
				  this.expect(_tokentype.types.parenR);
				  node.body = this.parseStatement("for");
				  this.exitScope();
				  this.labels.pop();
				  return this.finishNode(node, "ForStatement");
				}; // Parse a `for`/`in` and `for`/`of` loop, which are almost
				// same from parser's perspective.


				pp.parseForIn = function (node, init) {
				  var isForIn = this.type === _tokentype.types._in;
				  this.next();

				  if (init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || this.options.ecmaVersion < 8 || this.strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier")) {
				    this.raise(init.start, (isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer");
				  } else if (init.type === "AssignmentPattern") {
				    this.raise(init.start, "Invalid left-hand side in for-loop");
				  }

				  node.left = init;
				  node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();
				  this.expect(_tokentype.types.parenR);
				  node.body = this.parseStatement("for");
				  this.exitScope();
				  this.labels.pop();
				  return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
				}; // Parse a list of variable declarations.


				pp.parseVar = function (node, isFor, kind) {
				  node.declarations = [];
				  node.kind = kind;

				  for (;;) {
				    var decl = this.startNode();
				    this.parseVarId(decl, kind);

				    if (this.eat(_tokentype.types.eq)) {
				      decl.init = this.parseMaybeAssign(isFor);
				    } else if (kind === "const" && !(this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
				      this.unexpected();
				    } else if (decl.id.type !== "Identifier" && !(isFor && (this.type === _tokentype.types._in || this.isContextual("of")))) {
				      this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value");
				    } else {
				      decl.init = null;
				    }

				    node.declarations.push(this.finishNode(decl, "VariableDeclarator"));
				    if (!this.eat(_tokentype.types.comma)) break;
				  }

				  return node;
				};

				pp.parseVarId = function (decl, kind) {
				  decl.id = this.parseBindingAtom();
				  this.checkLVal(decl.id, kind === "var" ? _scopeflags.BIND_VAR : _scopeflags.BIND_LEXICAL, false);
				};

				var FUNC_STATEMENT = 1,
				    FUNC_HANGING_STATEMENT = 2,
				    FUNC_NULLABLE_ID = 4; // Parse a function declaration or literal (depending on the
				// `statement & FUNC_STATEMENT`).
				// Remove `allowExpressionBody` for 7.0.0, as it is only called with false

				pp.parseFunction = function (node, statement, allowExpressionBody, isAsync) {
				  this.initFunction(node);

				  if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {
				    if (this.type === _tokentype.types.star && statement & FUNC_HANGING_STATEMENT) this.unexpected();
				    node.generator = this.eat(_tokentype.types.star);
				  }

				  if (this.options.ecmaVersion >= 8) node.async = !!isAsync;

				  if (statement & FUNC_STATEMENT) {
				    node.id = statement & FUNC_NULLABLE_ID && this.type !== _tokentype.types.name ? null : this.parseIdent();
				    if (node.id && !(statement & FUNC_HANGING_STATEMENT)) // If it is a regular function declaration in sloppy mode, then it is
				      // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding
				      // mode depends on properties of the current scope (see
				      // treatFunctionsAsVar).
				      this.checkLVal(node.id, this.strict || node.generator || node.async ? this.treatFunctionsAsVar ? _scopeflags.BIND_VAR : _scopeflags.BIND_LEXICAL : _scopeflags.BIND_FUNCTION);
				  }

				  var oldYieldPos = this.yieldPos,
				      oldAwaitPos = this.awaitPos,
				      oldAwaitIdentPos = this.awaitIdentPos;
				  this.yieldPos = 0;
				  this.awaitPos = 0;
				  this.awaitIdentPos = 0;
				  this.enterScope((0, _scopeflags.functionFlags)(node.async, node.generator));
				  if (!(statement & FUNC_STATEMENT)) node.id = this.type === _tokentype.types.name ? this.parseIdent() : null;
				  this.parseFunctionParams(node);
				  this.parseFunctionBody(node, allowExpressionBody, false);
				  this.yieldPos = oldYieldPos;
				  this.awaitPos = oldAwaitPos;
				  this.awaitIdentPos = oldAwaitIdentPos;
				  return this.finishNode(node, statement & FUNC_STATEMENT ? "FunctionDeclaration" : "FunctionExpression");
				};

				pp.parseFunctionParams = function (node) {
				  this.expect(_tokentype.types.parenL);
				  node.params = this.parseBindingList(_tokentype.types.parenR, false, this.options.ecmaVersion >= 8);
				  this.checkYieldAwaitInDefaultParams();
				}; // Parse a class declaration or literal (depending on the
				// `isStatement` parameter).


				pp.parseClass = function (node, isStatement) {
				  this.next(); // ecma-262 14.6 Class Definitions
				  // A class definition is always strict mode code.

				  var oldStrict = this.strict;
				  this.strict = true;
				  this.parseClassId(node, isStatement);
				  this.parseClassSuper(node);
				  var classBody = this.startNode();
				  var hadConstructor = false;
				  classBody.body = [];
				  this.expect(_tokentype.types.braceL);

				  while (!this.eat(_tokentype.types.braceR)) {
				    var element = this.parseClassElement(node.superClass !== null);

				    if (element) {
				      classBody.body.push(element);

				      if (element.type === "MethodDefinition" && element.kind === "constructor") {
				        if (hadConstructor) this.raise(element.start, "Duplicate constructor in the same class");
				        hadConstructor = true;
				      }
				    }
				  }

				  node.body = this.finishNode(classBody, "ClassBody");
				  this.strict = oldStrict;
				  return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
				};

				pp.parseClassElement = function (constructorAllowsSuper) {
				  var _this = this;

				  if (this.eat(_tokentype.types.semi)) return null;
				  var method = this.startNode();

				  var tryContextual = function tryContextual(k, noLineBreak) {
				    if (noLineBreak === void 0) {
				      noLineBreak = false;
				    }

				    var start = _this.start,
				        startLoc = _this.startLoc;
				    if (!_this.eatContextual(k)) return false;
				    if (_this.type !== _tokentype.types.parenL && (!noLineBreak || !_this.canInsertSemicolon())) return true;
				    if (method.key) _this.unexpected();
				    method.computed = false;
				    method.key = _this.startNodeAt(start, startLoc);
				    method.key.name = k;

				    _this.finishNode(method.key, "Identifier");

				    return false;
				  };

				  method.kind = "method";
				  method.static = tryContextual("static");
				  var isGenerator = this.eat(_tokentype.types.star);
				  var isAsync = false;

				  if (!isGenerator) {
				    if (this.options.ecmaVersion >= 8 && tryContextual("async", true)) {
				      isAsync = true;
				      isGenerator = this.options.ecmaVersion >= 9 && this.eat(_tokentype.types.star);
				    } else if (tryContextual("get")) {
				      method.kind = "get";
				    } else if (tryContextual("set")) {
				      method.kind = "set";
				    }
				  }

				  if (!method.key) this.parsePropertyName(method);
				  var key = method.key;
				  var allowsDirectSuper = false;

				  if (!method.computed && !method.static && (key.type === "Identifier" && key.name === "constructor" || key.type === "Literal" && key.value === "constructor")) {
				    if (method.kind !== "method") this.raise(key.start, "Constructor can't have get/set modifier");
				    if (isGenerator) this.raise(key.start, "Constructor can't be a generator");
				    if (isAsync) this.raise(key.start, "Constructor can't be an async method");
				    method.kind = "constructor";
				    allowsDirectSuper = constructorAllowsSuper;
				  } else if (method.static && key.type === "Identifier" && key.name === "prototype") {
				    this.raise(key.start, "Classes may not have a static property named prototype");
				  }

				  this.parseClassMethod(method, isGenerator, isAsync, allowsDirectSuper);
				  if (method.kind === "get" && method.value.params.length !== 0) this.raiseRecoverable(method.value.start, "getter should have no params");
				  if (method.kind === "set" && method.value.params.length !== 1) this.raiseRecoverable(method.value.start, "setter should have exactly one param");
				  if (method.kind === "set" && method.value.params[0].type === "RestElement") this.raiseRecoverable(method.value.params[0].start, "Setter cannot use rest params");
				  return method;
				};

				pp.parseClassMethod = function (method, isGenerator, isAsync, allowsDirectSuper) {
				  method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);
				  return this.finishNode(method, "MethodDefinition");
				};

				pp.parseClassId = function (node, isStatement) {
				  if (this.type === _tokentype.types.name) {
				    node.id = this.parseIdent();
				    if (isStatement) this.checkLVal(node.id, _scopeflags.BIND_LEXICAL, false);
				  } else {
				    if (isStatement === true) this.unexpected();
				    node.id = null;
				  }
				};

				pp.parseClassSuper = function (node) {
				  node.superClass = this.eat(_tokentype.types._extends) ? this.parseExprSubscripts() : null;
				}; // Parses module export declaration.


				pp.parseExport = function (node, exports) {
				  this.next(); // export * from '...'

				  if (this.eat(_tokentype.types.star)) {
				    this.expectContextual("from");
				    if (this.type !== _tokentype.types.string) this.unexpected();
				    node.source = this.parseExprAtom();
				    this.semicolon();
				    return this.finishNode(node, "ExportAllDeclaration");
				  }

				  if (this.eat(_tokentype.types._default)) {
				    // export default ...
				    this.checkExport(exports, "default", this.lastTokStart);
				    var isAsync;

				    if (this.type === _tokentype.types._function || (isAsync = this.isAsyncFunction())) {
				      var fNode = this.startNode();
				      this.next();
				      if (isAsync) this.next();
				      node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);
				    } else if (this.type === _tokentype.types._class) {
				      var cNode = this.startNode();
				      node.declaration = this.parseClass(cNode, "nullableID");
				    } else {
				      node.declaration = this.parseMaybeAssign();
				      this.semicolon();
				    }

				    return this.finishNode(node, "ExportDefaultDeclaration");
				  } // export var|const|let|function|class ...


				  if (this.shouldParseExportStatement()) {
				    node.declaration = this.parseStatement(null);
				    if (node.declaration.type === "VariableDeclaration") this.checkVariableExport(exports, node.declaration.declarations);else this.checkExport(exports, node.declaration.id.name, node.declaration.id.start);
				    node.specifiers = [];
				    node.source = null;
				  } else {
				    // export { x, y as z } [from '...']
				    node.declaration = null;
				    node.specifiers = this.parseExportSpecifiers(exports);

				    if (this.eatContextual("from")) {
				      if (this.type !== _tokentype.types.string) this.unexpected();
				      node.source = this.parseExprAtom();
				    } else {
				      for (var _iterator3 = node.specifiers, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
				        var _ref3;

				        if (_isArray3) {
				          if (_i3 >= _iterator3.length) break;
				          _ref3 = _iterator3[_i3++];
				        } else {
				          _i3 = _iterator3.next();
				          if (_i3.done) break;
				          _ref3 = _i3.value;
				        }

				        var spec = _ref3; // check for keywords used as local names

				        this.checkUnreserved(spec.local); // check if export is defined

				        this.checkLocalExport(spec.local);
				      }

				      node.source = null;
				    }

				    this.semicolon();
				  }

				  return this.finishNode(node, "ExportNamedDeclaration");
				};

				pp.checkExport = function (exports, name, pos) {
				  if (!exports) return;
				  if ((0, _util.has)(exports, name)) this.raiseRecoverable(pos, "Duplicate export '" + name + "'");
				  exports[name] = true;
				};

				pp.checkPatternExport = function (exports, pat) {
				  var type = pat.type;
				  if (type === "Identifier") this.checkExport(exports, pat.name, pat.start);else if (type === "ObjectPattern") {
				    for (var _iterator4 = pat.properties, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
				      var _ref4;

				      if (_isArray4) {
				        if (_i4 >= _iterator4.length) break;
				        _ref4 = _iterator4[_i4++];
				      } else {
				        _i4 = _iterator4.next();
				        if (_i4.done) break;
				        _ref4 = _i4.value;
				      }

				      var prop = _ref4;
				      this.checkPatternExport(exports, prop);
				    }
				  } else if (type === "ArrayPattern") {
				    for (var _iterator5 = pat.elements, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
				      var _ref5;

				      if (_isArray5) {
				        if (_i5 >= _iterator5.length) break;
				        _ref5 = _iterator5[_i5++];
				      } else {
				        _i5 = _iterator5.next();
				        if (_i5.done) break;
				        _ref5 = _i5.value;
				      }

				      var elt = _ref5;
				      if (elt) this.checkPatternExport(exports, elt);
				    }
				  } else if (type === "Property") this.checkPatternExport(exports, pat.value);else if (type === "AssignmentPattern") this.checkPatternExport(exports, pat.left);else if (type === "RestElement") this.checkPatternExport(exports, pat.argument);else if (type === "ParenthesizedExpression") this.checkPatternExport(exports, pat.expression);
				};

				pp.checkVariableExport = function (exports, decls) {
				  if (!exports) return;

				  for (var _iterator6 = decls, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
				    var _ref6;

				    if (_isArray6) {
				      if (_i6 >= _iterator6.length) break;
				      _ref6 = _iterator6[_i6++];
				    } else {
				      _i6 = _iterator6.next();
				      if (_i6.done) break;
				      _ref6 = _i6.value;
				    }

				    var decl = _ref6;
				    this.checkPatternExport(exports, decl.id);
				  }
				};

				pp.shouldParseExportStatement = function () {
				  return this.type.keyword === "var" || this.type.keyword === "const" || this.type.keyword === "class" || this.type.keyword === "function" || this.isLet() || this.isAsyncFunction();
				}; // Parses a comma-separated list of module exports.


				pp.parseExportSpecifiers = function (exports) {
				  var nodes = [],
				      first = true; // export { x, y as z } [from '...']

				  this.expect(_tokentype.types.braceL);

				  while (!this.eat(_tokentype.types.braceR)) {
				    if (!first) {
				      this.expect(_tokentype.types.comma);
				      if (this.afterTrailingComma(_tokentype.types.braceR)) break;
				    } else first = false;

				    var node = this.startNode();
				    node.local = this.parseIdent(true);
				    node.exported = this.eatContextual("as") ? this.parseIdent(true) : node.local;
				    this.checkExport(exports, node.exported.name, node.exported.start);
				    nodes.push(this.finishNode(node, "ExportSpecifier"));
				  }

				  return nodes;
				}; // Parses import declaration.


				pp.parseImport = function (node) {
				  this.next(); // import '...'

				  if (this.type === _tokentype.types.string) {
				    node.specifiers = empty;
				    node.source = this.parseExprAtom();
				  } else {
				    node.specifiers = this.parseImportSpecifiers();
				    this.expectContextual("from");
				    node.source = this.type === _tokentype.types.string ? this.parseExprAtom() : this.unexpected();
				  }

				  this.semicolon();
				  return this.finishNode(node, "ImportDeclaration");
				}; // Parses a comma-separated list of module imports.


				pp.parseImportSpecifiers = function () {
				  var nodes = [],
				      first = true;

				  if (this.type === _tokentype.types.name) {
				    // import defaultObj, { x, y as z } from '...'
				    var node = this.startNode();
				    node.local = this.parseIdent();
				    this.checkLVal(node.local, _scopeflags.BIND_LEXICAL);
				    nodes.push(this.finishNode(node, "ImportDefaultSpecifier"));
				    if (!this.eat(_tokentype.types.comma)) return nodes;
				  }

				  if (this.type === _tokentype.types.star) {
				    var _node = this.startNode();

				    this.next();
				    this.expectContextual("as");
				    _node.local = this.parseIdent();
				    this.checkLVal(_node.local, _scopeflags.BIND_LEXICAL);
				    nodes.push(this.finishNode(_node, "ImportNamespaceSpecifier"));
				    return nodes;
				  }

				  this.expect(_tokentype.types.braceL);

				  while (!this.eat(_tokentype.types.braceR)) {
				    if (!first) {
				      this.expect(_tokentype.types.comma);
				      if (this.afterTrailingComma(_tokentype.types.braceR)) break;
				    } else first = false;

				    var _node2 = this.startNode();

				    _node2.imported = this.parseIdent(true);

				    if (this.eatContextual("as")) {
				      _node2.local = this.parseIdent();
				    } else {
				      this.checkUnreserved(_node2.imported);
				      _node2.local = _node2.imported;
				    }

				    this.checkLVal(_node2.local, _scopeflags.BIND_LEXICAL);
				    nodes.push(this.finishNode(_node2, "ImportSpecifier"));
				  }

				  return nodes;
				}; // Set `ExpressionStatement#directive` property for directive prologues.


				pp.adaptDirectivePrologue = function (statements) {
				  for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {
				    statements[i].directive = statements[i].expression.raw.slice(1, -1);
				  }
				};

				pp.isDirectiveCandidate = function (statement) {
				  return statement.type === "ExpressionStatement" && statement.expression.type === "Literal" && typeof statement.expression.value === "string" && ( // Reject parenthesized strings.
				  this.input[statement.start] === "\"" || this.input[statement.start] === "'");
				};
			},
			"tokencontext.js": function (exports, module, require) {
				

				exports.__esModule = true;
				exports.types = exports.TokContext = undefined;

				var _state = require("./state");

				var _tokentype = require("./tokentype");

				var _whitespace = require("./whitespace");

				var TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {
				  this.token = token;
				  this.isExpr = !!isExpr;
				  this.preserveSpace = !!preserveSpace;
				  this.override = override;
				  this.generator = !!generator;
				};

				exports.TokContext = TokContext; // The algorithm used to determine whether a regexp can appear at a
				// given point in the program is loosely based on sweet.js' approach.
				// See https://github.com/mozilla/sweet.js/wiki/design

				var types = exports.types = {
				  b_stat: new TokContext("{", false),
				  b_expr: new TokContext("{", true),
				  b_tmpl: new TokContext("${", false),
				  p_stat: new TokContext("(", false),
				  p_expr: new TokContext("(", true),
				  q_tmpl: new TokContext("`", true, true, function (p) {
				    return p.tryReadTemplateToken();
				  }),
				  f_stat: new TokContext("function", false),
				  f_expr: new TokContext("function", true),
				  f_expr_gen: new TokContext("function", true, false, null, true),
				  f_gen: new TokContext("function", false, false, null, true)
				};
				var pp = _state.Parser.prototype;

				pp.initialContext = function () {
				  return [types.b_stat];
				};

				pp.braceIsBlock = function (prevType) {
				  var parent = this.curContext();
				  if (parent === types.f_expr || parent === types.f_stat) return true;
				  if (prevType === _tokentype.types.colon && (parent === types.b_stat || parent === types.b_expr)) return !parent.isExpr; // The check for `tt.name && exprAllowed` detects whether we are
				  // after a `yield` or `of` construct. See the `updateContext` for
				  // `tt.name`.

				  if (prevType === _tokentype.types._return || prevType === _tokentype.types.name && this.exprAllowed) return _whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
				  if (prevType === _tokentype.types._else || prevType === _tokentype.types.semi || prevType === _tokentype.types.eof || prevType === _tokentype.types.parenR || prevType === _tokentype.types.arrow) return true;
				  if (prevType === _tokentype.types.braceL) return parent === types.b_stat;
				  if (prevType === _tokentype.types._var || prevType === _tokentype.types._const || prevType === _tokentype.types.name) return false;
				  return !this.exprAllowed;
				};

				pp.inGeneratorContext = function () {
				  for (var i = this.context.length - 1; i >= 1; i--) {
				    var context = this.context[i];
				    if (context.token === "function") return context.generator;
				  }

				  return false;
				};

				pp.updateContext = function (prevType) {
				  var update,
				      type = this.type;
				  if (type.keyword && prevType === _tokentype.types.dot) this.exprAllowed = false;else if (update = type.updateContext) update.call(this, prevType);else this.exprAllowed = type.beforeExpr;
				}; // Token-specific context update code


				_tokentype.types.parenR.updateContext = _tokentype.types.braceR.updateContext = function () {
				  if (this.context.length === 1) {
				    this.exprAllowed = true;
				    return;
				  }

				  var out = this.context.pop();

				  if (out === types.b_stat && this.curContext().token === "function") {
				    out = this.context.pop();
				  }

				  this.exprAllowed = !out.isExpr;
				};

				_tokentype.types.braceL.updateContext = function (prevType) {
				  this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);
				  this.exprAllowed = true;
				};

				_tokentype.types.dollarBraceL.updateContext = function () {
				  this.context.push(types.b_tmpl);
				  this.exprAllowed = true;
				};

				_tokentype.types.parenL.updateContext = function (prevType) {
				  var statementParens = prevType === _tokentype.types._if || prevType === _tokentype.types._for || prevType === _tokentype.types._with || prevType === _tokentype.types._while;
				  this.context.push(statementParens ? types.p_stat : types.p_expr);
				  this.exprAllowed = true;
				};

				_tokentype.types.incDec.updateContext = function () {// tokExprAllowed stays unchanged
				};

				_tokentype.types._function.updateContext = _tokentype.types._class.updateContext = function (prevType) {
				  if (prevType.beforeExpr && prevType !== _tokentype.types.semi && prevType !== _tokentype.types._else && !(prevType === _tokentype.types._return && _whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) && !((prevType === _tokentype.types.colon || prevType === _tokentype.types.braceL) && this.curContext() === types.b_stat)) this.context.push(types.f_expr);else this.context.push(types.f_stat);
				  this.exprAllowed = false;
				};

				_tokentype.types.backQuote.updateContext = function () {
				  if (this.curContext() === types.q_tmpl) this.context.pop();else this.context.push(types.q_tmpl);
				  this.exprAllowed = false;
				};

				_tokentype.types.star.updateContext = function (prevType) {
				  if (prevType === _tokentype.types._function) {
				    var index = this.context.length - 1;
				    if (this.context[index] === types.f_expr) this.context[index] = types.f_expr_gen;else this.context[index] = types.f_gen;
				  }

				  this.exprAllowed = true;
				};

				_tokentype.types.name.updateContext = function (prevType) {
				  var allowed = false;

				  if (this.options.ecmaVersion >= 6 && prevType !== _tokentype.types.dot) {
				    if (this.value === "of" && !this.exprAllowed || this.value === "yield" && this.inGeneratorContext()) allowed = true;
				  }

				  this.exprAllowed = allowed;
				};
			},
			"tokenize.js": function (exports, module, require) {
				

				exports.__esModule = true;
				exports.Token = undefined;

				var _identifier = require("./identifier");

				var _tokentype = require("./tokentype");

				var _state = require("./state");

				var _locutil = require("./locutil");

				var _regexp = require("./regexp");

				var _whitespace = require("./whitespace"); // Object type used to represent tokens. Note that normally, tokens
				// simply exist as properties on the parser object. This is only
				// used for the onToken callback and the external tokenizer.


				var Token = function Token(p) {
				  this.type = p.type;
				  this.value = p.value;
				  this.start = p.start;
				  this.end = p.end;
				  if (p.options.locations) this.loc = new _locutil.SourceLocation(p, p.startLoc, p.endLoc);
				  if (p.options.ranges) this.range = [p.start, p.end];
				};

				exports.Token = Token; // ## Tokenizer

				var pp = _state.Parser.prototype; // Move to the next token

				pp.next = function () {
				  if (this.options.onToken) this.options.onToken(new Token(this));
				  this.lastTokEnd = this.end;
				  this.lastTokStart = this.start;
				  this.lastTokEndLoc = this.endLoc;
				  this.lastTokStartLoc = this.startLoc;
				  this.nextToken();
				};

				pp.getToken = function () {
				  this.next();
				  return new Token(this);
				}; // If we're in an ES6 environment, make parsers iterable


				if (typeof Symbol !== "undefined") pp[Symbol.iterator] = function () {
				  var _this = this;

				  return {
				    next: function next() {
				      var token = _this.getToken();

				      return {
				        done: token.type === _tokentype.types.eof,
				        value: token
				      };
				    }
				  };
				}; // Toggle strict mode. Re-reads the next number or string to please
				// pedantic tests (`"use strict"; 010;` should fail).

				pp.curContext = function () {
				  return this.context[this.context.length - 1];
				}; // Read a single token, updating the parser object's token-related
				// properties.


				pp.nextToken = function () {
				  var curContext = this.curContext();
				  if (!curContext || !curContext.preserveSpace) this.skipSpace();
				  this.start = this.pos;
				  if (this.options.locations) this.startLoc = this.curPosition();
				  if (this.pos >= this.input.length) return this.finishToken(_tokentype.types.eof);
				  if (curContext.override) return curContext.override(this);else this.readToken(this.fullCharCodeAtPos());
				};

				pp.readToken = function (code) {
				  // Identifier or keyword. '\uXXXX' sequences are allowed in
				  // identifiers, so '\' also dispatches to that.
				  if ((0, _identifier.isIdentifierStart)(code, this.options.ecmaVersion >= 6) || code === 92
				  /* '\' */
				  ) return this.readWord();
				  return this.getTokenFromCode(code);
				};

				pp.fullCharCodeAtPos = function () {
				  var code = this.input.charCodeAt(this.pos);
				  if (code <= 0xd7ff || code >= 0xe000) return code;
				  var next = this.input.charCodeAt(this.pos + 1);
				  return (code << 10) + next - 0x35fdc00;
				};

				pp.skipBlockComment = function () {
				  var startLoc = this.options.onComment && this.curPosition();
				  var start = this.pos,
				      end = this.input.indexOf("*/", this.pos += 2);
				  if (end === -1) this.raise(this.pos - 2, "Unterminated comment");
				  this.pos = end + 2;

				  if (this.options.locations) {
				    _whitespace.lineBreakG.lastIndex = start;
				    var match;

				    while ((match = _whitespace.lineBreakG.exec(this.input)) && match.index < this.pos) {
				      ++this.curLine;
				      this.lineStart = match.index + match[0].length;
				    }
				  }

				  if (this.options.onComment) this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());
				};

				pp.skipLineComment = function (startSkip) {
				  var start = this.pos;
				  var startLoc = this.options.onComment && this.curPosition();
				  var ch = this.input.charCodeAt(this.pos += startSkip);

				  while (this.pos < this.input.length && !(0, _whitespace.isNewLine)(ch)) {
				    ch = this.input.charCodeAt(++this.pos);
				  }

				  if (this.options.onComment) this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());
				}; // Called at the start of the parse and after every token. Skips
				// whitespace and comments, and.


				pp.skipSpace = function () {
				  loop: while (this.pos < this.input.length) {
				    var ch = this.input.charCodeAt(this.pos);

				    switch (ch) {
				      case 32:
				      case 160:
				        // ' '
				        ++this.pos;
				        break;

				      case 13:
				        if (this.input.charCodeAt(this.pos + 1) === 10) {
				          ++this.pos;
				        }

				      case 10:
				      case 8232:
				      case 8233:
				        ++this.pos;

				        if (this.options.locations) {
				          ++this.curLine;
				          this.lineStart = this.pos;
				        }

				        break;

				      case 47:
				        // '/'
				        switch (this.input.charCodeAt(this.pos + 1)) {
				          case 42:
				            // '*'
				            this.skipBlockComment();
				            break;

				          case 47:
				            this.skipLineComment(2);
				            break;

				          default:
				            break loop;
				        }

				        break;

				      default:
				        if (ch > 8 && ch < 14 || ch >= 5760 && _whitespace.nonASCIIwhitespace.test(String.fromCharCode(ch))) {
				          ++this.pos;
				        } else {
				          break loop;
				        }

				    }
				  }
				}; // Called at the end of every token. Sets `end`, `val`, and
				// maintains `context` and `exprAllowed`, and skips the space after
				// the token, so that the next one's `start` will point at the
				// right position.


				pp.finishToken = function (type, val) {
				  this.end = this.pos;
				  if (this.options.locations) this.endLoc = this.curPosition();
				  var prevType = this.type;
				  this.type = type;
				  this.value = val;
				  this.updateContext(prevType);
				}; // ### Token reading
				// This is the function that is called to fetch the next token. It
				// is somewhat obscure, because it works in character codes rather
				// than characters, and because operator parsing has been inlined
				// into it.
				//
				// All in the name of speed.
				//


				pp.readToken_dot = function () {
				  var next = this.input.charCodeAt(this.pos + 1);
				  if (next >= 48 && next <= 57) return this.readNumber(true);
				  var next2 = this.input.charCodeAt(this.pos + 2);

				  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {
				    // 46 = dot '.'
				    this.pos += 3;
				    return this.finishToken(_tokentype.types.ellipsis);
				  } else {
				    ++this.pos;
				    return this.finishToken(_tokentype.types.dot);
				  }
				};

				pp.readToken_slash = function () {
				  // '/'
				  var next = this.input.charCodeAt(this.pos + 1);

				  if (this.exprAllowed) {
				    ++this.pos;
				    return this.readRegexp();
				  }

				  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);
				  return this.finishOp(_tokentype.types.slash, 1);
				};

				pp.readToken_mult_modulo_exp = function (code) {
				  // '%*'
				  var next = this.input.charCodeAt(this.pos + 1);
				  var size = 1;
				  var tokentype = code === 42 ? _tokentype.types.star : _tokentype.types.modulo; // exponentiation operator ** and **=

				  if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {
				    ++size;
				    tokentype = _tokentype.types.starstar;
				    next = this.input.charCodeAt(this.pos + 2);
				  }

				  if (next === 61) return this.finishOp(_tokentype.types.assign, size + 1);
				  return this.finishOp(tokentype, size);
				};

				pp.readToken_pipe_amp = function (code) {
				  // '|&'
				  var next = this.input.charCodeAt(this.pos + 1);
				  if (next === code) return this.finishOp(code === 124 ? _tokentype.types.logicalOR : _tokentype.types.logicalAND, 2);
				  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);
				  return this.finishOp(code === 124 ? _tokentype.types.bitwiseOR : _tokentype.types.bitwiseAND, 1);
				};

				pp.readToken_caret = function () {
				  // '^'
				  var next = this.input.charCodeAt(this.pos + 1);
				  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);
				  return this.finishOp(_tokentype.types.bitwiseXOR, 1);
				};

				pp.readToken_plus_min = function (code) {
				  // '+-'
				  var next = this.input.charCodeAt(this.pos + 1);

				  if (next === code) {
				    if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 && (this.lastTokEnd === 0 || _whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {
				      // A `-->` line comment
				      this.skipLineComment(3);
				      this.skipSpace();
				      return this.nextToken();
				    }

				    return this.finishOp(_tokentype.types.incDec, 2);
				  }

				  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);
				  return this.finishOp(_tokentype.types.plusMin, 1);
				};

				pp.readToken_lt_gt = function (code) {
				  // '<>'
				  var next = this.input.charCodeAt(this.pos + 1);
				  var size = 1;

				  if (next === code) {
				    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;
				    if (this.input.charCodeAt(this.pos + size) === 61) return this.finishOp(_tokentype.types.assign, size + 1);
				    return this.finishOp(_tokentype.types.bitShift, size);
				  }

				  if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 && this.input.charCodeAt(this.pos + 3) === 45) {
				    // `<!--`, an XML-style comment that should be interpreted as a line comment
				    this.skipLineComment(4);
				    this.skipSpace();
				    return this.nextToken();
				  }

				  if (next === 61) size = 2;
				  return this.finishOp(_tokentype.types.relational, size);
				};

				pp.readToken_eq_excl = function (code) {
				  // '=!'
				  var next = this.input.charCodeAt(this.pos + 1);
				  if (next === 61) return this.finishOp(_tokentype.types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);

				  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {
				    // '=>'
				    this.pos += 2;
				    return this.finishToken(_tokentype.types.arrow);
				  }

				  return this.finishOp(code === 61 ? _tokentype.types.eq : _tokentype.types.prefix, 1);
				};

				pp.getTokenFromCode = function (code) {
				  switch (code) {
				    // The interpretation of a dot depends on whether it is followed
				    // by a digit or another two dots.
				    case 46:
				      // '.'
				      return this.readToken_dot();
				    // Punctuation tokens.

				    case 40:
				      ++this.pos;
				      return this.finishToken(_tokentype.types.parenL);

				    case 41:
				      ++this.pos;
				      return this.finishToken(_tokentype.types.parenR);

				    case 59:
				      ++this.pos;
				      return this.finishToken(_tokentype.types.semi);

				    case 44:
				      ++this.pos;
				      return this.finishToken(_tokentype.types.comma);

				    case 91:
				      ++this.pos;
				      return this.finishToken(_tokentype.types.bracketL);

				    case 93:
				      ++this.pos;
				      return this.finishToken(_tokentype.types.bracketR);

				    case 123:
				      ++this.pos;
				      return this.finishToken(_tokentype.types.braceL);

				    case 125:
				      ++this.pos;
				      return this.finishToken(_tokentype.types.braceR);

				    case 58:
				      ++this.pos;
				      return this.finishToken(_tokentype.types.colon);

				    case 63:
				      ++this.pos;
				      return this.finishToken(_tokentype.types.question);

				    case 96:
				      // '`'
				      if (this.options.ecmaVersion < 6) break;
				      ++this.pos;
				      return this.finishToken(_tokentype.types.backQuote);

				    case 48:
				      // '0'
				      var next = this.input.charCodeAt(this.pos + 1);
				      if (next === 120 || next === 88) return this.readRadixNumber(16); // '0x', '0X' - hex number

				      if (this.options.ecmaVersion >= 6) {
				        if (next === 111 || next === 79) return this.readRadixNumber(8); // '0o', '0O' - octal number

				        if (next === 98 || next === 66) return this.readRadixNumber(2); // '0b', '0B' - binary number
				      }

				    // Anything else beginning with a digit is an integer, octal
				    // number, or float.

				    case 49:
				    case 50:
				    case 51:
				    case 52:
				    case 53:
				    case 54:
				    case 55:
				    case 56:
				    case 57:
				      // 1-9
				      return this.readNumber(false);
				    // Quotes produce strings.

				    case 34:
				    case 39:
				      // '"', "'"
				      return this.readString(code);
				    // Operators are parsed inline in tiny state machines. '=' (61) is
				    // often referred to. `finishOp` simply skips the amount of
				    // characters it is given as second argument, and returns a token
				    // of the type given by its first argument.

				    case 47:
				      // '/'
				      return this.readToken_slash();

				    case 37:
				    case 42:
				      // '%*'
				      return this.readToken_mult_modulo_exp(code);

				    case 124:
				    case 38:
				      // '|&'
				      return this.readToken_pipe_amp(code);

				    case 94:
				      // '^'
				      return this.readToken_caret();

				    case 43:
				    case 45:
				      // '+-'
				      return this.readToken_plus_min(code);

				    case 60:
				    case 62:
				      // '<>'
				      return this.readToken_lt_gt(code);

				    case 61:
				    case 33:
				      // '=!'
				      return this.readToken_eq_excl(code);

				    case 126:
				      // '~'
				      return this.finishOp(_tokentype.types.prefix, 1);
				  }

				  this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
				};

				pp.finishOp = function (type, size) {
				  var str = this.input.slice(this.pos, this.pos + size);
				  this.pos += size;
				  return this.finishToken(type, str);
				};

				pp.readRegexp = function () {
				  var escaped,
				      inClass,
				      start = this.pos;

				  for (;;) {
				    if (this.pos >= this.input.length) this.raise(start, "Unterminated regular expression");
				    var ch = this.input.charAt(this.pos);
				    if (_whitespace.lineBreak.test(ch)) this.raise(start, "Unterminated regular expression");

				    if (!escaped) {
				      if (ch === "[") inClass = true;else if (ch === "]" && inClass) inClass = false;else if (ch === "/" && !inClass) break;
				      escaped = ch === "\\";
				    } else escaped = false;

				    ++this.pos;
				  }

				  var pattern = this.input.slice(start, this.pos);
				  ++this.pos;
				  var flagsStart = this.pos;
				  var flags = this.readWord1();
				  if (this.containsEsc) this.unexpected(flagsStart); // Validate pattern

				  var state = this.regexpState || (this.regexpState = new _regexp.RegExpValidationState(this));
				  state.reset(start, pattern, flags);
				  this.validateRegExpFlags(state);
				  this.validateRegExpPattern(state); // Create Literal#value property value.

				  var value = null;

				  try {
				    value = new RegExp(pattern, flags);
				  } catch (e) {// ESTree requires null if it failed to instantiate RegExp object.
				    // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral
				  }

				  return this.finishToken(_tokentype.types.regexp, {
				    pattern: pattern,
				    flags: flags,
				    value: value
				  });
				}; // Read an integer in the given radix. Return null if zero digits
				// were read, the integer value otherwise. When `len` is given, this
				// will return `null` unless the integer has exactly `len` digits.


				pp.readInt = function (radix, len) {
				  var start = this.pos,
				      total = 0;

				  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
				    var code = this.input.charCodeAt(this.pos),
				        val = void 0;
				    if (code >= 97) val = code - 97 + 10; // a
				    else if (code >= 65) val = code - 65 + 10; // A
				      else if (code >= 48 && code <= 57) val = code - 48; // 0-9
				        else val = Infinity;
				    if (val >= radix) break;
				    ++this.pos;
				    total = total * radix + val;
				  }

				  if (this.pos === start || len != null && this.pos - start !== len) return null;
				  return total;
				};

				pp.readRadixNumber = function (radix) {
				  var start = this.pos;
				  this.pos += 2; // 0x

				  var val = this.readInt(radix);
				  if (val == null) this.raise(this.start + 2, "Expected number in radix " + radix);

				  if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {
				    val = typeof BigInt !== "undefined" ? BigInt(this.input.slice(start, this.pos)) : null;
				    ++this.pos;
				  } else if ((0, _identifier.isIdentifierStart)(this.fullCharCodeAtPos())) this.raise(this.pos, "Identifier directly after number");

				  return this.finishToken(_tokentype.types.num, val);
				}; // Read an integer, octal integer, or floating-point number.


				pp.readNumber = function (startsWithDot) {
				  var start = this.pos;
				  if (!startsWithDot && this.readInt(10) === null) this.raise(start, "Invalid number");
				  var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;
				  if (octal && this.strict) this.raise(start, "Invalid number");
				  if (octal && /[89]/.test(this.input.slice(start, this.pos))) octal = false;
				  var next = this.input.charCodeAt(this.pos);

				  if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {
				    var _str = this.input.slice(start, this.pos);

				    var _val = typeof BigInt !== "undefined" ? BigInt(_str) : null;

				    ++this.pos;
				    if ((0, _identifier.isIdentifierStart)(this.fullCharCodeAtPos())) this.raise(this.pos, "Identifier directly after number");
				    return this.finishToken(_tokentype.types.num, _val);
				  }

				  if (next === 46 && !octal) {
				    // '.'
				    ++this.pos;
				    this.readInt(10);
				    next = this.input.charCodeAt(this.pos);
				  }

				  if ((next === 69 || next === 101) && !octal) {
				    // 'eE'
				    next = this.input.charCodeAt(++this.pos);
				    if (next === 43 || next === 45) ++this.pos; // '+-'

				    if (this.readInt(10) === null) this.raise(start, "Invalid number");
				  }

				  if ((0, _identifier.isIdentifierStart)(this.fullCharCodeAtPos())) this.raise(this.pos, "Identifier directly after number");
				  var str = this.input.slice(start, this.pos);
				  var val = octal ? parseInt(str, 8) : parseFloat(str);
				  return this.finishToken(_tokentype.types.num, val);
				}; // Read a string value, interpreting backslash-escapes.


				pp.readCodePoint = function () {
				  var ch = this.input.charCodeAt(this.pos),
				      code;

				  if (ch === 123) {
				    // '{'
				    if (this.options.ecmaVersion < 6) this.unexpected();
				    var codePos = ++this.pos;
				    code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos);
				    ++this.pos;
				    if (code > 0x10FFFF) this.invalidStringToken(codePos, "Code point out of bounds");
				  } else {
				    code = this.readHexChar(4);
				  }

				  return code;
				};

				function codePointToString(code) {
				  // UTF-16 Decoding
				  if (code <= 0xFFFF) return String.fromCharCode(code);
				  code -= 0x10000;
				  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00);
				}

				pp.readString = function (quote) {
				  var out = "",
				      chunkStart = ++this.pos;

				  for (;;) {
				    if (this.pos >= this.input.length) this.raise(this.start, "Unterminated string constant");
				    var ch = this.input.charCodeAt(this.pos);
				    if (ch === quote) break;

				    if (ch === 92) {
				      // '\'
				      out += this.input.slice(chunkStart, this.pos);
				      out += this.readEscapedChar(false);
				      chunkStart = this.pos;
				    } else {
				      if ((0, _whitespace.isNewLine)(ch, this.options.ecmaVersion >= 10)) this.raise(this.start, "Unterminated string constant");
				      ++this.pos;
				    }
				  }

				  out += this.input.slice(chunkStart, this.pos++);
				  return this.finishToken(_tokentype.types.string, out);
				}; // Reads template string tokens.


				var INVALID_TEMPLATE_ESCAPE_ERROR = {};

				pp.tryReadTemplateToken = function () {
				  this.inTemplateElement = true;

				  try {
				    this.readTmplToken();
				  } catch (err) {
				    if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {
				      this.readInvalidTemplateToken();
				    } else {
				      throw err;
				    }
				  }

				  this.inTemplateElement = false;
				};

				pp.invalidStringToken = function (position, message) {
				  if (this.inTemplateElement && this.options.ecmaVersion >= 9) {
				    throw INVALID_TEMPLATE_ESCAPE_ERROR;
				  } else {
				    this.raise(position, message);
				  }
				};

				pp.readTmplToken = function () {
				  var out = "",
				      chunkStart = this.pos;

				  for (;;) {
				    if (this.pos >= this.input.length) this.raise(this.start, "Unterminated template");
				    var ch = this.input.charCodeAt(this.pos);

				    if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) {
				      // '`', '${'
				      if (this.pos === this.start && (this.type === _tokentype.types.template || this.type === _tokentype.types.invalidTemplate)) {
				        if (ch === 36) {
				          this.pos += 2;
				          return this.finishToken(_tokentype.types.dollarBraceL);
				        } else {
				          ++this.pos;
				          return this.finishToken(_tokentype.types.backQuote);
				        }
				      }

				      out += this.input.slice(chunkStart, this.pos);
				      return this.finishToken(_tokentype.types.template, out);
				    }

				    if (ch === 92) {
				      // '\'
				      out += this.input.slice(chunkStart, this.pos);
				      out += this.readEscapedChar(true);
				      chunkStart = this.pos;
				    } else if ((0, _whitespace.isNewLine)(ch)) {
				      out += this.input.slice(chunkStart, this.pos);
				      ++this.pos;

				      switch (ch) {
				        case 13:
				          if (this.input.charCodeAt(this.pos) === 10) ++this.pos;

				        case 10:
				          out += "\n";
				          break;

				        default:
				          out += String.fromCharCode(ch);
				          break;
				      }

				      if (this.options.locations) {
				        ++this.curLine;
				        this.lineStart = this.pos;
				      }

				      chunkStart = this.pos;
				    } else {
				      ++this.pos;
				    }
				  }
				}; // Reads a template token to search for the end, without validating any escape sequences


				pp.readInvalidTemplateToken = function () {
				  for (; this.pos < this.input.length; this.pos++) {
				    switch (this.input[this.pos]) {
				      case "\\":
				        ++this.pos;
				        break;

				      case "$":
				        if (this.input[this.pos + 1] !== "{") {
				          break;
				        }

				      // falls through

				      case "`":
				        return this.finishToken(_tokentype.types.invalidTemplate, this.input.slice(this.start, this.pos));
				      // no default
				    }
				  }

				  this.raise(this.start, "Unterminated template");
				}; // Used to read escaped characters


				pp.readEscapedChar = function (inTemplate) {
				  var ch = this.input.charCodeAt(++this.pos);
				  ++this.pos;

				  switch (ch) {
				    case 110:
				      return "\n";
				    // 'n' -> '\n'

				    case 114:
				      return "\r";
				    // 'r' -> '\r'

				    case 120:
				      return String.fromCharCode(this.readHexChar(2));
				    // 'x'

				    case 117:
				      return codePointToString(this.readCodePoint());
				    // 'u'

				    case 116:
				      return "\t";
				    // 't' -> '\t'

				    case 98:
				      return "\b";
				    // 'b' -> '\b'

				    case 118:
				      return "\x0B";
				    // 'v' -> '\u000b'

				    case 102:
				      return "\f";
				    // 'f' -> '\f'

				    case 13:
				      if (this.input.charCodeAt(this.pos) === 10) ++this.pos;
				    // '\r\n'

				    case 10:
				      // ' \n'
				      if (this.options.locations) {
				        this.lineStart = this.pos;
				        ++this.curLine;
				      }

				      return "";

				    default:
				      if (ch >= 48 && ch <= 55) {
				        var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
				        var octal = parseInt(octalStr, 8);

				        if (octal > 255) {
				          octalStr = octalStr.slice(0, -1);
				          octal = parseInt(octalStr, 8);
				        }

				        this.pos += octalStr.length - 1;
				        ch = this.input.charCodeAt(this.pos);

				        if ((octalStr !== "0" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {
				          this.invalidStringToken(this.pos - 1 - octalStr.length, inTemplate ? "Octal literal in template string" : "Octal literal in strict mode");
				        }

				        return String.fromCharCode(octal);
				      }

				      if ((0, _whitespace.isNewLine)(ch)) {
				        // Unicode new line characters after \ get removed from output in both
				        // template literals and strings
				        return "";
				      }

				      return String.fromCharCode(ch);
				  }
				}; // Used to read character escape sequences ('\x', '\u', '\U').


				pp.readHexChar = function (len) {
				  var codePos = this.pos;
				  var n = this.readInt(16, len);
				  if (n === null) this.invalidStringToken(codePos, "Bad character escape sequence");
				  return n;
				}; // Read an identifier, and return it as a string. Sets `this.containsEsc`
				// to whether the word contained a '\u' escape.
				//
				// Incrementally adds only escaped chars, adding other chunks as-is
				// as a micro-optimization.


				pp.readWord1 = function () {
				  this.containsEsc = false;
				  var word = "",
				      first = true,
				      chunkStart = this.pos;
				  var astral = this.options.ecmaVersion >= 6;

				  while (this.pos < this.input.length) {
				    var ch = this.fullCharCodeAtPos();

				    if ((0, _identifier.isIdentifierChar)(ch, astral)) {
				      this.pos += ch <= 0xffff ? 1 : 2;
				    } else if (ch === 92) {
				      // "\"
				      this.containsEsc = true;
				      word += this.input.slice(chunkStart, this.pos);
				      var escStart = this.pos;
				      if (this.input.charCodeAt(++this.pos) !== 117) // "u"
				        this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX");
				      ++this.pos;
				      var esc = this.readCodePoint();
				      if (!(first ? _identifier.isIdentifierStart : _identifier.isIdentifierChar)(esc, astral)) this.invalidStringToken(escStart, "Invalid Unicode escape");
				      word += this.input.substr(this.pos - 6, 6);
				      chunkStart = this.pos;
				    } else {
				      break;
				    }

				    first = false;
				  }

				  return word + this.input.slice(chunkStart, this.pos);
				}; // Read an identifier or keyword token. Will check for reserved
				// words when necessary.


				pp.readWord = function () {
				  var word = this.readWord1();
				  var type = _tokentype.types.name;

				  if (this.keywords.test(word)) {
				    if (this.containsEsc) this.raiseRecoverable(this.start, "Escape sequence in keyword " + word);
				    type = _tokentype.keywords[word];
				  }

				  return this.finishToken(type, word);
				};
			},
			"tokentype.js": function (exports, module, require) {
				

				exports.__esModule = true; // ## Token types
				// The assignment of fine-grained, information-carrying type objects
				// allows the tokenizer to store the information it has about a
				// token in a way that is very cheap for the parser to look up.
				// All token type variables start with an underscore, to make them
				// easy to recognize.
				// The `beforeExpr` property is used to disambiguate between regular
				// expressions and divisions. It is set on all token types that can
				// be followed by an expression (thus, a slash after them would be a
				// regular expression).
				//
				// The `startsExpr` property is used to check if the token ends a
				// `yield` expression. It is set on all token types that either can
				// directly start an expression (like a quotation mark) or can
				// continue an expression (like the body of a string).
				//
				// `isLoop` marks a keyword as starting a loop, which is important
				// to know when parsing a label, in order to allow or disallow
				// continue jumps to that label.

				var TokenType = function TokenType(label, conf) {
				  if (conf === void 0) {
				    conf = {};
				  }

				  this.label = label;
				  this.keyword = conf.keyword;
				  this.beforeExpr = !!conf.beforeExpr;
				  this.startsExpr = !!conf.startsExpr;
				  this.isLoop = !!conf.isLoop;
				  this.isAssign = !!conf.isAssign;
				  this.prefix = !!conf.prefix;
				  this.postfix = !!conf.postfix;
				  this.binop = conf.binop || null;
				  this.updateContext = null;
				};

				exports.TokenType = TokenType;

				function binop(name, prec) {
				  return new TokenType(name, {
				    beforeExpr: true,
				    binop: prec
				  });
				}

				var beforeExpr = {
				  beforeExpr: true
				},
				    startsExpr = {
				  startsExpr: true // Map keyword names to token types.

				};
				var keywords = exports.keywords = {}; // Succinct definitions of keyword token types

				function kw(name, options) {
				  if (options === void 0) {
				    options = {};
				  }

				  options.keyword = name;
				  return keywords[name] = new TokenType(name, options);
				}

				var types = exports.types = {
				  num: new TokenType("num", startsExpr),
				  regexp: new TokenType("regexp", startsExpr),
				  string: new TokenType("string", startsExpr),
				  name: new TokenType("name", startsExpr),
				  eof: new TokenType("eof"),
				  // Punctuation token types.
				  bracketL: new TokenType("[", {
				    beforeExpr: true,
				    startsExpr: true
				  }),
				  bracketR: new TokenType("]"),
				  braceL: new TokenType("{", {
				    beforeExpr: true,
				    startsExpr: true
				  }),
				  braceR: new TokenType("}"),
				  parenL: new TokenType("(", {
				    beforeExpr: true,
				    startsExpr: true
				  }),
				  parenR: new TokenType(")"),
				  comma: new TokenType(",", beforeExpr),
				  semi: new TokenType(";", beforeExpr),
				  colon: new TokenType(":", beforeExpr),
				  dot: new TokenType("."),
				  question: new TokenType("?", beforeExpr),
				  arrow: new TokenType("=>", beforeExpr),
				  template: new TokenType("template"),
				  invalidTemplate: new TokenType("invalidTemplate"),
				  ellipsis: new TokenType("...", beforeExpr),
				  backQuote: new TokenType("`", startsExpr),
				  dollarBraceL: new TokenType("${", {
				    beforeExpr: true,
				    startsExpr: true
				  }),
				  // Operators. These carry several kinds of properties to help the
				  // parser use them properly (the presence of these properties is
				  // what categorizes them as operators).
				  //
				  // `binop`, when present, specifies that this operator is a binary
				  // operator, and will refer to its precedence.
				  //
				  // `prefix` and `postfix` mark the operator as a prefix or postfix
				  // unary operator.
				  //
				  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
				  // binary operators with a very low precedence, that should result
				  // in AssignmentExpression nodes.
				  eq: new TokenType("=", {
				    beforeExpr: true,
				    isAssign: true
				  }),
				  assign: new TokenType("_=", {
				    beforeExpr: true,
				    isAssign: true
				  }),
				  incDec: new TokenType("++/--", {
				    prefix: true,
				    postfix: true,
				    startsExpr: true
				  }),
				  prefix: new TokenType("!/~", {
				    beforeExpr: true,
				    prefix: true,
				    startsExpr: true
				  }),
				  logicalOR: binop("||", 1),
				  logicalAND: binop("&&", 2),
				  bitwiseOR: binop("|", 3),
				  bitwiseXOR: binop("^", 4),
				  bitwiseAND: binop("&", 5),
				  equality: binop("==/!=/===/!==", 6),
				  relational: binop("</>/<=/>=", 7),
				  bitShift: binop("<</>>/>>>", 8),
				  plusMin: new TokenType("+/-", {
				    beforeExpr: true,
				    binop: 9,
				    prefix: true,
				    startsExpr: true
				  }),
				  modulo: binop("%", 10),
				  star: binop("*", 10),
				  slash: binop("/", 10),
				  starstar: new TokenType("**", {
				    beforeExpr: true
				  }),
				  // Keyword token types.
				  _break: kw("break"),
				  _case: kw("case", beforeExpr),
				  _catch: kw("catch"),
				  _continue: kw("continue"),
				  _debugger: kw("debugger"),
				  _default: kw("default", beforeExpr),
				  _do: kw("do", {
				    isLoop: true,
				    beforeExpr: true
				  }),
				  _else: kw("else", beforeExpr),
				  _finally: kw("finally"),
				  _for: kw("for", {
				    isLoop: true
				  }),
				  _function: kw("function", startsExpr),
				  _if: kw("if"),
				  _return: kw("return", beforeExpr),
				  _switch: kw("switch"),
				  _throw: kw("throw", beforeExpr),
				  _try: kw("try"),
				  _var: kw("var"),
				  _const: kw("const"),
				  _while: kw("while", {
				    isLoop: true
				  }),
				  _with: kw("with"),
				  _new: kw("new", {
				    beforeExpr: true,
				    startsExpr: true
				  }),
				  _this: kw("this", startsExpr),
				  _super: kw("super", startsExpr),
				  _class: kw("class", startsExpr),
				  _extends: kw("extends", beforeExpr),
				  _export: kw("export"),
				  _import: kw("import", startsExpr),
				  _null: kw("null", startsExpr),
				  _true: kw("true", startsExpr),
				  _false: kw("false", startsExpr),
				  _in: kw("in", {
				    beforeExpr: true,
				    binop: 7
				  }),
				  _instanceof: kw("instanceof", {
				    beforeExpr: true,
				    binop: 7
				  }),
				  _typeof: kw("typeof", {
				    beforeExpr: true,
				    prefix: true,
				    startsExpr: true
				  }),
				  _void: kw("void", {
				    beforeExpr: true,
				    prefix: true,
				    startsExpr: true
				  }),
				  _delete: kw("delete", {
				    beforeExpr: true,
				    prefix: true,
				    startsExpr: true
				  })
				};
			},
			"unicode-property-data.js": function (exports, module, require) {
				

				exports.__esModule = true;

				var _util = require("./util.js"); // This file contains Unicode properties extracted from the ECMAScript
				// specification. The lists are extracted like so:
				// $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)
				// #table-binary-unicode-properties


				var ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS";
				var ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic";
				var ecma11BinaryProperties = ecma10BinaryProperties;
				var unicodeBinaryProperties = {
				  9: ecma9BinaryProperties,
				  10: ecma10BinaryProperties,
				  11: ecma11BinaryProperties // #table-unicode-general-category-values

				};
				var unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu"; // #table-unicode-script-values

				var ecma9ScriptValues = "Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb";
				var ecma10ScriptValues = ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd";
				var ecma11ScriptValues = ecma10ScriptValues + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho";
				var unicodeScriptValues = {
				  9: ecma9ScriptValues,
				  10: ecma10ScriptValues,
				  11: ecma11ScriptValues
				};
				var data = {};

				function buildUnicodeData(ecmaVersion) {
				  var d = data[ecmaVersion] = {
				    binary: (0, _util.wordsRegexp)(unicodeBinaryProperties[ecmaVersion] + " " + unicodeGeneralCategoryValues),
				    nonBinary: {
				      General_Category: (0, _util.wordsRegexp)(unicodeGeneralCategoryValues),
				      Script: (0, _util.wordsRegexp)(unicodeScriptValues[ecmaVersion])
				    }
				  };
				  d.nonBinary.Script_Extensions = d.nonBinary.Script;
				  d.nonBinary.gc = d.nonBinary.General_Category;
				  d.nonBinary.sc = d.nonBinary.Script;
				  d.nonBinary.scx = d.nonBinary.Script_Extensions;
				}

				buildUnicodeData(9);
				buildUnicodeData(10);
				buildUnicodeData(11);
				exports.default = data;
				module.exports = exports['default'];
			},
			"util.js": function (exports, module, require) {
				

				exports.__esModule = true;
				exports.has = has;
				exports.wordsRegexp = wordsRegexp;
				var _Object$prototype = Object.prototype;
				var hasOwnProperty = _Object$prototype.hasOwnProperty,
				    toString = _Object$prototype.toString; // Checks if an object has a property.

				function has(obj, propName) {
				  return hasOwnProperty.call(obj, propName);
				}

				var isArray = exports.isArray = Array.isArray || function (obj) {
				  return toString.call(obj) === "[object Array]";
				};

				function wordsRegexp(words) {
				  return new RegExp("^(?:" + words.replace(/ /g, "|") + ")$");
				}
			},
			"whitespace.js": function (exports, module, require) {
				

				exports.__esModule = true;
				exports.isNewLine = isNewLine; // Matches a whole line break (where CRLF is considered a single
				// line break). Used to count lines.

				var lineBreak = exports.lineBreak = /\r\n?|\n|\u2028|\u2029/;
				var lineBreakG = exports.lineBreakG = new RegExp(lineBreak.source, "g");

				function isNewLine(code, ecma2019String) {
				  return code === 10 || code === 13 || !ecma2019String && (code === 0x2028 || code === 0x2029);
				}

				var nonASCIIwhitespace = exports.nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
				var skipWhiteSpace = exports.skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
			}
		}
	},
	"bowser": {
		":mainpath:": "./src/bowser.js",
		"src": {
			"bowser.js": function (exports, module, require) {
				

				/*!
				 * Bowser - a browser detector
				 * https://github.com/ded/bowser
				 * MIT License | (c) Dustin Diaz 2015
				 */
				!function (root, name, definition) {
				  if (typeof module != 'undefined' && module.exports) module.exports = definition();else if (typeof define == 'function' && define.amd) define(name, definition);else root[name] = definition();
				}(void 0, 'bowser', function () {
				  /**
				    * See useragents.js for examples of navigator.userAgent
				    */
				  var t = true;

				  function detect(ua) {
				    function getFirstMatch(regex) {
				      var match = ua.match(regex);
				      return match && match.length > 1 && match[1] || '';
				    }

				    function getSecondMatch(regex) {
				      var match = ua.match(regex);
				      return match && match.length > 1 && match[2] || '';
				    }

				    var iosdevice = getFirstMatch(/(ipod|iphone|ipad)/i).toLowerCase(),
				        likeAndroid = /like android/i.test(ua),
				        android = !likeAndroid && /android/i.test(ua),
				        nexusMobile = /nexus\s*[0-6]\s*/i.test(ua),
				        nexusTablet = !nexusMobile && /nexus\s*[0-9]+/i.test(ua),
				        chromeos = /CrOS/.test(ua),
				        silk = /silk/i.test(ua),
				        sailfish = /sailfish/i.test(ua),
				        tizen = /tizen/i.test(ua),
				        webos = /(web|hpw)os/i.test(ua),
				        windowsphone = /windows phone/i.test(ua),
				        samsungBrowser = /SamsungBrowser/i.test(ua),
				        windows = !windowsphone && /windows/i.test(ua),
				        mac = !iosdevice && !silk && /macintosh/i.test(ua),
				        linux = !android && !sailfish && !tizen && !webos && /linux/i.test(ua),
				        edgeVersion = getFirstMatch(/edge\/(\d+(\.\d+)?)/i),
				        versionIdentifier = getFirstMatch(/version\/(\d+(\.\d+)?)/i),
				        tablet = /tablet/i.test(ua),
				        mobile = !tablet && /[^-]mobi/i.test(ua),
				        xbox = /xbox/i.test(ua),
				        result;

				    if (/opera/i.test(ua)) {
				      //  an old Opera
				      result = {
				        name: 'Opera',
				        opera: t,
				        version: versionIdentifier || getFirstMatch(/(?:opera|opr|opios)[\s\/](\d+(\.\d+)?)/i)
				      };
				    } else if (/opr|opios/i.test(ua)) {
				      // a new Opera
				      result = {
				        name: 'Opera',
				        opera: t,
				        version: getFirstMatch(/(?:opr|opios)[\s\/](\d+(\.\d+)?)/i) || versionIdentifier
				      };
				    } else if (/SamsungBrowser/i.test(ua)) {
				      result = {
				        name: 'Samsung Internet for Android',
				        samsungBrowser: t,
				        version: versionIdentifier || getFirstMatch(/(?:SamsungBrowser)[\s\/](\d+(\.\d+)?)/i)
				      };
				    } else if (/coast/i.test(ua)) {
				      result = {
				        name: 'Opera Coast',
				        coast: t,
				        version: versionIdentifier || getFirstMatch(/(?:coast)[\s\/](\d+(\.\d+)?)/i)
				      };
				    } else if (/yabrowser/i.test(ua)) {
				      result = {
				        name: 'Yandex Browser',
				        yandexbrowser: t,
				        version: versionIdentifier || getFirstMatch(/(?:yabrowser)[\s\/](\d+(\.\d+)?)/i)
				      };
				    } else if (/ucbrowser/i.test(ua)) {
				      result = {
				        name: 'UC Browser',
				        ucbrowser: t,
				        version: getFirstMatch(/(?:ucbrowser)[\s\/](\d+(?:\.\d+)+)/i)
				      };
				    } else if (/mxios/i.test(ua)) {
				      result = {
				        name: 'Maxthon',
				        maxthon: t,
				        version: getFirstMatch(/(?:mxios)[\s\/](\d+(?:\.\d+)+)/i)
				      };
				    } else if (/epiphany/i.test(ua)) {
				      result = {
				        name: 'Epiphany',
				        epiphany: t,
				        version: getFirstMatch(/(?:epiphany)[\s\/](\d+(?:\.\d+)+)/i)
				      };
				    } else if (/puffin/i.test(ua)) {
				      result = {
				        name: 'Puffin',
				        puffin: t,
				        version: getFirstMatch(/(?:puffin)[\s\/](\d+(?:\.\d+)?)/i)
				      };
				    } else if (/sleipnir/i.test(ua)) {
				      result = {
				        name: 'Sleipnir',
				        sleipnir: t,
				        version: getFirstMatch(/(?:sleipnir)[\s\/](\d+(?:\.\d+)+)/i)
				      };
				    } else if (/k-meleon/i.test(ua)) {
				      result = {
				        name: 'K-Meleon',
				        kMeleon: t,
				        version: getFirstMatch(/(?:k-meleon)[\s\/](\d+(?:\.\d+)+)/i)
				      };
				    } else if (windowsphone) {
				      result = {
				        name: 'Windows Phone',
				        windowsphone: t
				      };

				      if (edgeVersion) {
				        result.msedge = t;
				        result.version = edgeVersion;
				      } else {
				        result.msie = t;
				        result.version = getFirstMatch(/iemobile\/(\d+(\.\d+)?)/i);
				      }
				    } else if (/msie|trident/i.test(ua)) {
				      result = {
				        name: 'Internet Explorer',
				        msie: t,
				        version: getFirstMatch(/(?:msie |rv:)(\d+(\.\d+)?)/i)
				      };
				    } else if (chromeos) {
				      result = {
				        name: 'Chrome',
				        chromeos: t,
				        chromeBook: t,
				        chrome: t,
				        version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
				      };
				    } else if (/chrome.+? edge/i.test(ua)) {
				      result = {
				        name: 'Microsoft Edge',
				        msedge: t,
				        version: edgeVersion
				      };
				    } else if (/vivaldi/i.test(ua)) {
				      result = {
				        name: 'Vivaldi',
				        vivaldi: t,
				        version: getFirstMatch(/vivaldi\/(\d+(\.\d+)?)/i) || versionIdentifier
				      };
				    } else if (sailfish) {
				      result = {
				        name: 'Sailfish',
				        sailfish: t,
				        version: getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i)
				      };
				    } else if (/seamonkey\//i.test(ua)) {
				      result = {
				        name: 'SeaMonkey',
				        seamonkey: t,
				        version: getFirstMatch(/seamonkey\/(\d+(\.\d+)?)/i)
				      };
				    } else if (/firefox|iceweasel|fxios/i.test(ua)) {
				      result = {
				        name: 'Firefox',
				        firefox: t,
				        version: getFirstMatch(/(?:firefox|iceweasel|fxios)[ \/](\d+(\.\d+)?)/i)
				      };

				      if (/\((mobile|tablet);[^\)]*rv:[\d\.]+\)/i.test(ua)) {
				        result.firefoxos = t;
				      }
				    } else if (silk) {
				      result = {
				        name: 'Amazon Silk',
				        silk: t,
				        version: getFirstMatch(/silk\/(\d+(\.\d+)?)/i)
				      };
				    } else if (/phantom/i.test(ua)) {
				      result = {
				        name: 'PhantomJS',
				        phantom: t,
				        version: getFirstMatch(/phantomjs\/(\d+(\.\d+)?)/i)
				      };
				    } else if (/slimerjs/i.test(ua)) {
				      result = {
				        name: 'SlimerJS',
				        slimer: t,
				        version: getFirstMatch(/slimerjs\/(\d+(\.\d+)?)/i)
				      };
				    } else if (/blackberry|\bbb\d+/i.test(ua) || /rim\stablet/i.test(ua)) {
				      result = {
				        name: 'BlackBerry',
				        blackberry: t,
				        version: versionIdentifier || getFirstMatch(/blackberry[\d]+\/(\d+(\.\d+)?)/i)
				      };
				    } else if (webos) {
				      result = {
				        name: 'WebOS',
				        webos: t,
				        version: versionIdentifier || getFirstMatch(/w(?:eb)?osbrowser\/(\d+(\.\d+)?)/i)
				      };
				      /touchpad\//i.test(ua) && (result.touchpad = t);
				    } else if (/bada/i.test(ua)) {
				      result = {
				        name: 'Bada',
				        bada: t,
				        version: getFirstMatch(/dolfin\/(\d+(\.\d+)?)/i)
				      };
				    } else if (tizen) {
				      result = {
				        name: 'Tizen',
				        tizen: t,
				        version: getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.\d+)?)/i) || versionIdentifier
				      };
				    } else if (/qupzilla/i.test(ua)) {
				      result = {
				        name: 'QupZilla',
				        qupzilla: t,
				        version: getFirstMatch(/(?:qupzilla)[\s\/](\d+(?:\.\d+)+)/i) || versionIdentifier
				      };
				    } else if (/chromium/i.test(ua)) {
				      result = {
				        name: 'Chromium',
				        chromium: t,
				        version: getFirstMatch(/(?:chromium)[\s\/](\d+(?:\.\d+)?)/i) || versionIdentifier
				      };
				    } else if (/chrome|crios|crmo/i.test(ua)) {
				      result = {
				        name: 'Chrome',
				        chrome: t,
				        version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
				      };
				    } else if (android) {
				      result = {
				        name: 'Android',
				        version: versionIdentifier
				      };
				    } else if (/safari|applewebkit/i.test(ua)) {
				      result = {
				        name: 'Safari',
				        safari: t
				      };

				      if (versionIdentifier) {
				        result.version = versionIdentifier;
				      }
				    } else if (iosdevice) {
				      result = {
				        name: iosdevice == 'iphone' ? 'iPhone' : iosdevice == 'ipad' ? 'iPad' : 'iPod'
				      }; // WTF: version is not part of user agent in web apps

				      if (versionIdentifier) {
				        result.version = versionIdentifier;
				      }
				    } else if (/googlebot/i.test(ua)) {
				      result = {
				        name: 'Googlebot',
				        googlebot: t,
				        version: getFirstMatch(/googlebot\/(\d+(\.\d+))/i) || versionIdentifier
				      };
				    } else {
				      result = {
				        name: getFirstMatch(/^(.*)\/(.*) /),
				        version: getSecondMatch(/^(.*)\/(.*) /)
				      };
				    } // set webkit or gecko flag for browsers based on these engines


				    if (!result.msedge && /(apple)?webkit/i.test(ua)) {
				      if (/(apple)?webkit\/537\.36/i.test(ua)) {
				        result.name = result.name || "Blink";
				        result.blink = t;
				      } else {
				        result.name = result.name || "Webkit";
				        result.webkit = t;
				      }

				      if (!result.version && versionIdentifier) {
				        result.version = versionIdentifier;
				      }
				    } else if (!result.opera && /gecko\//i.test(ua)) {
				      result.name = result.name || "Gecko";
				      result.gecko = t;
				      result.version = result.version || getFirstMatch(/gecko\/(\d+(\.\d+)?)/i);
				    } // set OS flags for platforms that have multiple browsers


				    if (!result.windowsphone && !result.msedge && (android || result.silk)) {
				      result.android = t;
				    } else if (!result.windowsphone && !result.msedge && iosdevice) {
				      result[iosdevice] = t;
				      result.ios = t;
				    } else if (mac) {
				      result.mac = t;
				    } else if (xbox) {
				      result.xbox = t;
				    } else if (windows) {
				      result.windows = t;
				    } else if (linux) {
				      result.linux = t;
				    } // OS version extraction


				    var osVersion = '';

				    if (result.windowsphone) {
				      osVersion = getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i);
				    } else if (iosdevice) {
				      osVersion = getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i);
				      osVersion = osVersion.replace(/[_\s]/g, '.');
				    } else if (android) {
				      osVersion = getFirstMatch(/android[ \/-](\d+(\.\d+)*)/i);
				    } else if (result.webos) {
				      osVersion = getFirstMatch(/(?:web|hpw)os\/(\d+(\.\d+)*)/i);
				    } else if (result.blackberry) {
				      osVersion = getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i);
				    } else if (result.bada) {
				      osVersion = getFirstMatch(/bada\/(\d+(\.\d+)*)/i);
				    } else if (result.tizen) {
				      osVersion = getFirstMatch(/tizen[\/\s](\d+(\.\d+)*)/i);
				    }

				    if (osVersion) {
				      result.osversion = osVersion;
				    } // device type extraction


				    var osMajorVersion = osVersion.split('.')[0];

				    if (tablet || nexusTablet || iosdevice == 'ipad' || android && (osMajorVersion == 3 || osMajorVersion >= 4 && !mobile) || result.silk) {
				      result.tablet = t;
				    } else if (mobile || iosdevice == 'iphone' || iosdevice == 'ipod' || android || nexusMobile || result.blackberry || result.webos || result.bada) {
				      result.mobile = t;
				    } // Graded Browser Support
				    // http://developer.yahoo.com/yui/articles/gbs


				    if (result.msedge || result.msie && result.version >= 10 || result.yandexbrowser && result.version >= 15 || result.vivaldi && result.version >= 1.0 || result.chrome && result.version >= 20 || result.samsungBrowser && result.version >= 4 || result.firefox && result.version >= 20.0 || result.safari && result.version >= 6 || result.opera && result.version >= 10.0 || result.ios && result.osversion && result.osversion.split(".")[0] >= 6 || result.blackberry && result.version >= 10.1 || result.chromium && result.version >= 20) {
				      result.a = t;
				    } else if (result.msie && result.version < 10 || result.chrome && result.version < 20 || result.firefox && result.version < 20.0 || result.safari && result.version < 6 || result.opera && result.version < 10.0 || result.ios && result.osversion && result.osversion.split(".")[0] < 6 || result.chromium && result.version < 20) {
				      result.c = t;
				    } else result.x = t;

				    return result;
				  }

				  var bowser = detect(typeof navigator !== 'undefined' ? navigator.userAgent || '' : '');

				  bowser.test = function (browserList) {
				    for (var i = 0; i < browserList.length; ++i) {
				      var browserItem = browserList[i];

				      if (typeof browserItem === 'string') {
				        if (browserItem in bowser) {
				          return true;
				        }
				      }
				    }

				    return false;
				  };
				  /**
				   * Get version precisions count
				   *
				   * @example
				   *   getVersionPrecision("1.10.3") // 3
				   *
				   * @param  {string} version
				   * @return {number}
				   */


				  function getVersionPrecision(version) {
				    return version.split(".").length;
				  }
				  /**
				   * Array::map polyfill
				   *
				   * @param  {Array} arr
				   * @param  {Function} iterator
				   * @return {Array}
				   */


				  function map(arr, iterator) {
				    var result = [],
				        i;

				    if (Array.prototype.map) {
				      return Array.prototype.map.call(arr, iterator);
				    }

				    for (i = 0; i < arr.length; i++) {
				      result.push(iterator(arr[i]));
				    }

				    return result;
				  }
				  /**
				   * Calculate browser version weight
				   *
				   * @example
				   *   compareVersions(['1.10.2.1',  '1.8.2.1.90'])    // 1
				   *   compareVersions(['1.010.2.1', '1.09.2.1.90']);  // 1
				   *   compareVersions(['1.10.2.1',  '1.10.2.1']);     // 0
				   *   compareVersions(['1.10.2.1',  '1.0800.2']);     // -1
				   *
				   * @param  {Array<String>} versions versions to compare
				   * @return {Number} comparison result
				   */


				  function compareVersions(versions) {
				    // 1) get common precision for both versions, for example for "10.0" and "9" it should be 2
				    var precision = Math.max(getVersionPrecision(versions[0]), getVersionPrecision(versions[1]));
				    var chunks = map(versions, function (version) {
				      var delta = precision - getVersionPrecision(version); // 2) "9" -> "9.0" (for precision = 2)

				      version = version + new Array(delta + 1).join(".0"); // 3) "9.0" -> ["000000000"", "000000009"]

				      return map(version.split("."), function (chunk) {
				        return new Array(20 - chunk.length).join("0") + chunk;
				      }).reverse();
				    }); // iterate in reverse order by reversed chunks array

				    while (--precision >= 0) {
				      // 4) compare: "000000009" > "000000010" = false (but "9" > "10" = true)
				      if (chunks[0][precision] > chunks[1][precision]) {
				        return 1;
				      } else if (chunks[0][precision] === chunks[1][precision]) {
				        if (precision === 0) {
				          // all version chunks are same
				          return 0;
				        }
				      } else {
				        return -1;
				      }
				    }
				  }
				  /**
				   * Check if browser is unsupported
				   *
				   * @example
				   *   bowser.isUnsupportedBrowser({
				   *     msie: "10",
				   *     firefox: "23",
				   *     chrome: "29",
				   *     safari: "5.1",
				   *     opera: "16",
				   *     phantom: "534"
				   *   });
				   *
				   * @param  {Object}  minVersions map of minimal version to browser
				   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map
				   * @param  {String}  [ua] user agent string
				   * @return {Boolean}
				   */


				  function isUnsupportedBrowser(minVersions, strictMode, ua) {
				    var _bowser = bowser; // make strictMode param optional with ua param usage

				    if (typeof strictMode === 'string') {
				      ua = strictMode;
				      strictMode = void 0;
				    }

				    if (strictMode === void 0) {
				      strictMode = false;
				    }

				    if (ua) {
				      _bowser = detect(ua);
				    }

				    var version = "" + _bowser.version;

				    for (var browser in minVersions) {
				      if (minVersions.hasOwnProperty(browser)) {
				        if (_bowser[browser]) {
				          if (typeof minVersions[browser] !== 'string') {
				            throw new Error('Browser version in the minVersion map should be a string: ' + browser + ': ' + String(minVersions));
				          } // browser version and min supported version.


				          return compareVersions([version, minVersions[browser]]) < 0;
				        }
				      }
				    }

				    return strictMode; // not found
				  }
				  /**
				   * Check if browser is supported
				   *
				   * @param  {Object} minVersions map of minimal version to browser
				   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map
				   * @param  {String}  [ua] user agent string
				   * @return {Boolean}
				   */


				  function check(minVersions, strictMode, ua) {
				    return !isUnsupportedBrowser(minVersions, strictMode, ua);
				  }

				  bowser.isUnsupportedBrowser = isUnsupportedBrowser;
				  bowser.compareVersions = compareVersions;
				  bowser.check = check;
				  /*
				   * Set our detect method to the main bowser object so we can
				   * reuse it to test other user agents.
				   * This is needed to implement future tests.
				   */

				  bowser._detect = detect;
				  return bowser;
				});
			}
		}
	},
	"esotope-hammerhead": {
		":mainpath:": "esotope.js",
		"esotope.js": function (exports, module, require) {
			// -------------------------------------------------------------
			// WARNING: this file is used by both the client and the server.
			// Do not use any browser or node-specific API!
			// -------------------------------------------------------------

			/*
			 Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>
			 Copyright (C) 2012-2014 Yusuke Suzuki <utatane.tea@gmail.com>
			 Copyright (C) 2012-2013 Michael Ficarra <escodegen.copyright@michael.ficarra.me>
			 Copyright (C) 2012-2013 Mathias Bynens <mathias@qiwi.be>
			 Copyright (C) 2013 Irakli Gozalishvili <rfobic@gmail.com>
			 Copyright (C) 2012 Robert Gust-Bardon <donate@robert.gust-bardon.org>
			 Copyright (C) 2012 John Freeman <jfreeman08@gmail.com>
			 Copyright (C) 2011-2012 Ariya Hidayat <ariya.hidayat@gmail.com>
			 Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
			 Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
			 Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>
			
			 Redistribution and use in source and binary forms, with or without
			 modification, are permitted provided that the following conditions are met:
			
			 * Redistributions of source code must retain the above copyright
			 notice, this list of conditions and the following disclaimer.
			 * Redistributions in binary form must reproduce the above copyright
			 notice, this list of conditions and the following disclaimer in the
			 documentation and/or other materials provided with the distribution.
			
			 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
			 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
			 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
			 ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
			 DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
			 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
			 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
			 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
			 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
			 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
			 */
			'use strict';

			var isArray, json, renumber, hexadecimal, quotes, escapeless, parentheses, semicolons, safeConcatenation, directive, extra, parse;
			var Syntax = {
			  AssignmentExpression: 'AssignmentExpression',
			  AssignmentPattern: 'AssignmentPattern',
			  ArrayExpression: 'ArrayExpression',
			  ArrayPattern: 'ArrayPattern',
			  ArrowFunctionExpression: 'ArrowFunctionExpression',
			  AwaitExpression: 'AwaitExpression',
			  BlockStatement: 'BlockStatement',
			  BinaryExpression: 'BinaryExpression',
			  BreakStatement: 'BreakStatement',
			  CallExpression: 'CallExpression',
			  CatchClause: 'CatchClause',
			  ClassBody: 'ClassBody',
			  ClassDeclaration: 'ClassDeclaration',
			  ClassExpression: 'ClassExpression',
			  ComprehensionBlock: 'ComprehensionBlock',
			  ComprehensionExpression: 'ComprehensionExpression',
			  ConditionalExpression: 'ConditionalExpression',
			  ContinueStatement: 'ContinueStatement',
			  DirectiveStatement: 'DirectiveStatement',
			  DoWhileStatement: 'DoWhileStatement',
			  DebuggerStatement: 'DebuggerStatement',
			  EmptyStatement: 'EmptyStatement',
			  ExportAllDeclaration: 'ExportAllDeclaration',
			  ExportBatchSpecifier: 'ExportBatchSpecifier',
			  ExportDeclaration: 'ExportDeclaration',
			  ExportNamedDeclaration: 'ExportNamedDeclaration',
			  ExportSpecifier: 'ExportSpecifier',
			  ExpressionStatement: 'ExpressionStatement',
			  ForStatement: 'ForStatement',
			  ForInStatement: 'ForInStatement',
			  ForOfStatement: 'ForOfStatement',
			  FunctionDeclaration: 'FunctionDeclaration',
			  FunctionExpression: 'FunctionExpression',
			  GeneratorExpression: 'GeneratorExpression',
			  Identifier: 'Identifier',
			  IfStatement: 'IfStatement',
			  Import: 'Import',
			  ImportSpecifier: 'ImportSpecifier',
			  ImportDeclaration: 'ImportDeclaration',
			  Literal: 'Literal',
			  LabeledStatement: 'LabeledStatement',
			  LogicalExpression: 'LogicalExpression',
			  MemberExpression: 'MemberExpression',
			  MetaProperty: 'MetaProperty',
			  MethodDefinition: 'MethodDefinition',
			  ModuleDeclaration: 'ModuleDeclaration',
			  NewExpression: 'NewExpression',
			  ObjectExpression: 'ObjectExpression',
			  ObjectPattern: 'ObjectPattern',
			  Program: 'Program',
			  Property: 'Property',
			  RestElement: 'RestElement',
			  ReturnStatement: 'ReturnStatement',
			  SequenceExpression: 'SequenceExpression',
			  SpreadElement: 'SpreadElement',
			  Super: 'Super',
			  SwitchStatement: 'SwitchStatement',
			  SwitchCase: 'SwitchCase',
			  TaggedTemplateExpression: 'TaggedTemplateExpression',
			  TemplateElement: 'TemplateElement',
			  TemplateLiteral: 'TemplateLiteral',
			  ThisExpression: 'ThisExpression',
			  ThrowStatement: 'ThrowStatement',
			  TryStatement: 'TryStatement',
			  UnaryExpression: 'UnaryExpression',
			  UpdateExpression: 'UpdateExpression',
			  VariableDeclaration: 'VariableDeclaration',
			  VariableDeclarator: 'VariableDeclarator',
			  WhileStatement: 'WhileStatement',
			  WithStatement: 'WithStatement',
			  YieldExpression: 'YieldExpression'
			};
			exports.Syntax = Syntax;
			var Precedence = {
			  Sequence: 0,
			  Yield: 1,
			  Assignment: 1,
			  Conditional: 2,
			  ArrowFunction: 2,
			  LogicalOR: 3,
			  LogicalAND: 4,
			  BitwiseOR: 5,
			  BitwiseXOR: 6,
			  BitwiseAND: 7,
			  Equality: 8,
			  Relational: 9,
			  BitwiseSHIFT: 10,
			  Additive: 11,
			  Multiplicative: 12,
			  Unary: 13,
			  Postfix: 14,
			  Await: 14,
			  Call: 15,
			  New: 16,
			  TaggedTemplate: 17,
			  Member: 18,
			  Primary: 19
			};
			var BinaryPrecedence = {
			  '||': Precedence.LogicalOR,
			  '&&': Precedence.LogicalAND,
			  '|': Precedence.BitwiseOR,
			  '^': Precedence.BitwiseXOR,
			  '&': Precedence.BitwiseAND,
			  '==': Precedence.Equality,
			  '!=': Precedence.Equality,
			  '===': Precedence.Equality,
			  '!==': Precedence.Equality,
			  'is': Precedence.Equality,
			  'isnt': Precedence.Equality,
			  '<': Precedence.Relational,
			  '>': Precedence.Relational,
			  '<=': Precedence.Relational,
			  '>=': Precedence.Relational,
			  'in': Precedence.Relational,
			  'instanceof': Precedence.Relational,
			  '<<': Precedence.BitwiseSHIFT,
			  '>>': Precedence.BitwiseSHIFT,
			  '>>>': Precedence.BitwiseSHIFT,
			  '+': Precedence.Additive,
			  '-': Precedence.Additive,
			  '*': Precedence.Multiplicative,
			  '%': Precedence.Multiplicative,
			  '/': Precedence.Multiplicative
			};

			function getDefaultOptions() {
			  // default options
			  return {
			    indent: null,
			    base: null,
			    parse: null,
			    format: {
			      indent: {
			        style: '    ',
			        base: 0
			      },
			      newline: '\n',
			      space: ' ',
			      json: false,
			      renumber: false,
			      hexadecimal: false,
			      quotes: 'single',
			      escapeless: false,
			      compact: false,
			      parentheses: true,
			      semicolons: true,
			      safeConcatenation: false
			    },
			    directive: false,
			    raw: true,
			    verbatim: null
			  };
			} //-------------------------------------------------===------------------------------------------------------
			//                                            Lexical utils
			//-------------------------------------------------===------------------------------------------------------
			//Const


			var NON_ASCII_WHITESPACES = [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF]; //Regular expressions

			var NON_ASCII_IDENTIFIER_CHARACTERS_REGEXP = new RegExp("[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376" + "\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-" + "\u0527\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA" + "\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-" + "\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0\u08A2-\u08AC\u08E4-\u08FE\u0900-" + "\u0963\u0966-\u096F\u0971-\u0977\u0979-\u097F\u0981-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-" + "\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-" + "\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38" + "\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83" + "\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9" + "\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-" + "\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-" + "\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E" + "\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-" + "\u0BEF\u0C01-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D-\u0C44\u0C46-" + "\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C82\u0C83\u0C85-\u0C8C\u0C8E-" + "\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE" + "\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D02\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44" + "\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-" + "\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E01-\u0E3A" + "\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-" + "\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9" + "\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84" + "\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-" + "\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5" + "\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-" + "\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-" + "\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD" + "\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191C\u1920-\u192B" + "\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E" + "\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-" + "\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1D00-\u1DE6\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-" + "\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-" + "\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F" + "\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115" + "\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188" + "\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-" + "\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-" + "\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A" + "\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5" + "\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA697" + "\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA827\uA840-\uA873" + "\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-" + "\uA9D9\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7B\uAA80-\uAAC2\uAADB-\uAADD\uAAE0-" + "\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABEA\uABEC" + "\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-" + "\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D" + "\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE26\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74" + "\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-" + "\uFFD7\uFFDA-\uFFDC]"); //Methods

			function isIdentifierCh(cp) {
			  if (cp < 0x80) {
			    return cp >= 97 && cp <= 122 || // a..z
			    cp >= 65 && cp <= 90 || // A..Z
			    cp >= 48 && cp <= 57 || // 0..9
			    cp === 36 || cp === 95 || // $ (dollar) and _ (underscore)
			    cp === 92; // \ (backslash)
			  }

			  var ch = String.fromCharCode(cp);
			  return NON_ASCII_IDENTIFIER_CHARACTERS_REGEXP.test(ch);
			}

			function isLineTerminator(cp) {
			  return cp === 0x0A || cp === 0x0D || cp === 0x2028 || cp === 0x2029;
			}

			function isWhitespace(cp) {
			  return cp === 0x20 || cp === 0x09 || isLineTerminator(cp) || cp === 0x0B || cp === 0x0C || cp === 0xA0 || cp >= 0x1680 && NON_ASCII_WHITESPACES.indexOf(cp) >= 0;
			}

			function isDecimalDigit(cp) {
			  return cp >= 48 && cp <= 57;
			}

			function stringRepeat(str, num) {
			  var result = '';

			  for (num |= 0; num > 0; num >>>= 1, str += str) {
			    if (num & 1) {
			      result += str;
			    }
			  }

			  return result;
			}

			isArray = Array.isArray;

			if (!isArray) {
			  isArray = function isArray(array) {
			    return Object.prototype.toString.call(array) === '[object Array]';
			  };
			}

			function updateDeeply(target, override) {
			  var key, val;

			  function isHashObject(target) {
			    return typeof target === 'object' && target instanceof Object && !(target instanceof RegExp);
			  }

			  for (key in override) {
			    if (override.hasOwnProperty(key)) {
			      val = override[key];

			      if (isHashObject(val)) {
			        if (isHashObject(target[key])) {
			          updateDeeply(target[key], val);
			        } else {
			          target[key] = updateDeeply({}, val);
			        }
			      } else {
			        target[key] = val;
			      }
			    }
			  }

			  return target;
			}

			function generateNumber(value) {
			  var result, point, temp, exponent, pos;

			  if (value === 1 / 0) {
			    return json ? 'null' : renumber ? '1e400' : '1e+400';
			  }

			  result = '' + value;

			  if (!renumber || result.length < 3) {
			    return result;
			  }

			  point = result.indexOf('.'); //NOTE: 0x30 == '0'

			  if (!json && result.charCodeAt(0) === 0x30 && point === 1) {
			    point = 0;
			    result = result.slice(1);
			  }

			  temp = result;
			  result = result.replace('e+', 'e');
			  exponent = 0;

			  if ((pos = temp.indexOf('e')) > 0) {
			    exponent = +temp.slice(pos + 1);
			    temp = temp.slice(0, pos);
			  }

			  if (point >= 0) {
			    exponent -= temp.length - point - 1;
			    temp = +(temp.slice(0, point) + temp.slice(point + 1)) + '';
			  }

			  pos = 0; //NOTE: 0x30 == '0'

			  while (temp.charCodeAt(temp.length + pos - 1) === 0x30) {
			    --pos;
			  }

			  if (pos !== 0) {
			    exponent -= pos;
			    temp = temp.slice(0, pos);
			  }

			  if (exponent !== 0) {
			    temp += 'e' + exponent;
			  }

			  if ((temp.length < result.length || hexadecimal && value > 1e12 && Math.floor(value) === value && (temp = '0x' + value.toString(16)).length < result.length) && +temp === value) {
			    result = temp;
			  }

			  return result;
			} // Generate valid RegExp expression.
			// This function is based on https://github.com/Constellation/iv Engine


			function escapeRegExpCharacter(ch, previousIsBackslash) {
			  // not handling '\' and handling \u2028 or \u2029 to unicode escape sequence
			  if ((ch & ~1) === 0x2028) {
			    return (previousIsBackslash ? 'u' : "\\u") + (ch === 0x2028 ? '2028' : '2029');
			  } else if (ch === 10 || ch === 13) {
			    // \n, \r
			    return (previousIsBackslash ? '' : '\\') + (ch === 10 ? 'n' : 'r');
			  }

			  return String.fromCharCode(ch);
			}

			function generateRegExp(reg) {
			  var match, result, flags, i, iz, ch, characterInBrack, previousIsBackslash;
			  result = reg.toString();

			  if (reg.source) {
			    // extract flag from toString result
			    match = result.match(/\/([^/]*)$/);

			    if (!match) {
			      return result;
			    }

			    flags = match[1];
			    result = '';
			    characterInBrack = false;
			    previousIsBackslash = false;

			    for (i = 0, iz = reg.source.length; i < iz; ++i) {
			      ch = reg.source.charCodeAt(i);

			      if (!previousIsBackslash) {
			        if (characterInBrack) {
			          if (ch === 93) {
			            // ]
			            characterInBrack = false;
			          }
			        } else {
			          if (ch === 47) {
			            // /
			            result += '\\';
			          } else if (ch === 91) {
			            // [
			            characterInBrack = true;
			          }
			        }

			        result += escapeRegExpCharacter(ch, previousIsBackslash);
			        previousIsBackslash = ch === 92; // \
			      } else {
			        // if new RegExp("\\\n') is provided, create /\n/
			        result += escapeRegExpCharacter(ch, previousIsBackslash); // prevent like /\\[/]/

			        previousIsBackslash = false;
			      }
			    }

			    return '/' + result + '/' + flags;
			  }

			  return result;
			}

			function escapeAllowedCharacter(code, next) {
			  var hex,
			      result = '\\';

			  switch (code) {
			    case 0x08:
			      // \b
			      result += 'b';
			      break;

			    case 0x0C:
			      // \f
			      result += 'f';
			      break;

			    case 0x09:
			      // \t
			      result += 't';
			      break;

			    default:
			      hex = code.toString(16).toUpperCase();

			      if (json || code > 0xFF) {
			        result += 'u' + '0000'.slice(hex.length) + hex;
			      } else if (code === 0x0000 && !isDecimalDigit(next)) {
			        result += '0';
			      } else if (code === 0x000B) {
			        // \v
			        result += 'x0B';
			      } else {
			        result += 'x' + '00'.slice(hex.length) + hex;
			      }

			      break;
			  }

			  return result;
			}

			function escapeDisallowedCharacter(code) {
			  var result = '\\';

			  switch (code) {
			    case 0x5C // \
			    :
			      result += '\\';
			      break;

			    case 0x0A // \n
			    :
			      result += 'n';
			      break;

			    case 0x0D // \r
			    :
			      result += 'r';
			      break;

			    case 0x2028:
			      result += 'u2028';
			      break;

			    case 0x2029:
			      result += 'u2029';
			      break;
			  }

			  return result;
			}

			function escapeDirective(str) {
			  var i, iz, code, quote;
			  quote = quotes === 'double' ? '"' : '\'';

			  for (i = 0, iz = str.length; i < iz; ++i) {
			    code = str.charCodeAt(i);

			    if (code === 0x27) {
			      // '
			      quote = '"';
			      break;
			    } else if (code === 0x22) {
			      // "
			      quote = '\'';
			      break;
			    } else if (code === 0x5C) {
			      // \
			      ++i;
			    }
			  }

			  return quote + str + quote;
			}

			function escapeString(str) {
			  var result = '',
			      i,
			      len,
			      code,
			      singleQuotes = 0,
			      doubleQuotes = 0,
			      single,
			      quote; //TODO http://jsperf.com/character-counting/8

			  for (i = 0, len = str.length; i < len; ++i) {
			    code = str.charCodeAt(i);

			    if (code === 0x27) {
			      // '
			      ++singleQuotes;
			    } else if (code === 0x22) {
			      // "
			      ++doubleQuotes;
			    } else if (code === 0x2F && json) {
			      // /
			      result += '\\';
			    } else if (isLineTerminator(code) || code === 0x5C) {
			      // \
			      result += escapeDisallowedCharacter(code);
			      continue;
			    } else if (json && code < 0x20 || // SP
			    !(json || escapeless || code >= 0x20 && code <= 0x7E)) {
			      // SP, ~
			      result += escapeAllowedCharacter(code, str.charCodeAt(i + 1));
			      continue;
			    }

			    result += String.fromCharCode(code);
			  }

			  single = !(quotes === 'double' || quotes === 'auto' && doubleQuotes < singleQuotes);
			  quote = single ? '\'' : '"';

			  if (!(single ? singleQuotes : doubleQuotes)) {
			    return quote + result + quote;
			  }

			  str = result;
			  result = quote;

			  for (i = 0, len = str.length; i < len; ++i) {
			    code = str.charCodeAt(i);

			    if (code === 0x27 && single || code === 0x22 && !single) {
			      // ', "
			      result += '\\';
			    }

			    result += String.fromCharCode(code);
			  }

			  return result + quote;
			}

			function join(l, r) {
			  if (!l.length) return r;
			  if (!r.length) return l;
			  var lCp = l.charCodeAt(l.length - 1),
			      rCp = r.charCodeAt(0);

			  if (isIdentifierCh(lCp) && isIdentifierCh(rCp) || lCp === rCp && (lCp === 0x2B || lCp === 0x2D) || // + +, - -
			  lCp === 0x2F && rCp === 0x69) {
			    // /re/ instanceof foo
			    return l + _.space + r;
			  } else if (isWhitespace(lCp) || isWhitespace(rCp)) return l + r;

			  return l + _.optSpace + r;
			}

			function shiftIndent() {
			  var prevIndent = _.indent;
			  _.indent += _.indentUnit;
			  return prevIndent;
			}

			function adoptionPrefix($stmt) {
			  if ($stmt.type === Syntax.BlockStatement) return _.optSpace;
			  if ($stmt.type === Syntax.EmptyStatement) return '';
			  return _.newline + _.indent + _.indentUnit;
			}

			function adoptionSuffix($stmt) {
			  if ($stmt.type === Syntax.BlockStatement) return _.optSpace;
			  return _.newline + _.indent;
			} //Subentities generators


			function generateVerbatim($expr, settings) {
			  var verbatim = $expr[extra.verbatim],
			      strVerbatim = typeof verbatim === 'string',
			      precedence = !strVerbatim && verbatim.precedence !== void 0 ? verbatim.precedence : Precedence.Sequence,
			      parenthesize = precedence < settings.precedence,
			      content = strVerbatim ? verbatim : verbatim.content,
			      chunks = content.split(/\r\n|\n/),
			      chunkCount = chunks.length;
			  if (parenthesize) _.js += '(';
			  _.js += chunks[0];

			  for (var i = 1; i < chunkCount; i++) {
			    _.js += _.newline + _.indent + chunks[i];
			  }

			  if (parenthesize) _.js += ')';
			}

			function generateFunctionParams($node) {
			  var $params = $node.params,
			      paramCount = $params.length,
			      lastParamIdx = paramCount - 1,
			      arrowFuncWithoutParentheses = $node.type === Syntax.ArrowFunctionExpression && paramCount === 1 && $params[0].type === Syntax.Identifier; //NOTE: arg => { } case

			  if (arrowFuncWithoutParentheses) _.js += $params[0].name;else {
			    _.js += '(';

			    for (var i = 0; i < paramCount; ++i) {
			      var $param = $params[i];
			      if ($params[i].type === Syntax.Identifier) _.js += $param.name;else ExprGen[$param.type]($param, Preset.e4);
			      if (i !== lastParamIdx) _.js += ',' + _.optSpace;
			    }

			    _.js += ')';
			  }
			}

			function generateFunctionBody($node) {
			  var $body = $node.body;
			  generateFunctionParams($node);
			  if ($node.type === Syntax.ArrowFunctionExpression) _.js += _.optSpace + '=>';

			  if ($node.expression) {
			    _.js += _.optSpace;
			    var exprJs = exprToJs($body, Preset.e4);
			    if (exprJs.charAt(0) === '{') exprJs = '(' + exprJs + ')';
			    _.js += exprJs;
			  } else {
			    _.js += adoptionPrefix($body);
			    StmtGen[$body.type]($body, Preset.s8);
			  }
			} //-------------------------------------------------===------------------------------------------------------
			//                                Syntactic entities generation presets
			//-------------------------------------------------===------------------------------------------------------


			var Preset = {
			  e1: function e1(allowIn) {
			    return {
			      precedence: Precedence.Assignment,
			      allowIn: allowIn,
			      allowCall: true,
			      allowUnparenthesizedNew: true
			    };
			  },
			  e2: function e2(allowIn) {
			    return {
			      precedence: Precedence.LogicalOR,
			      allowIn: allowIn,
			      allowCall: true,
			      allowUnparenthesizedNew: true
			    };
			  },
			  e3: {
			    precedence: Precedence.Call,
			    allowIn: true,
			    allowCall: true,
			    allowUnparenthesizedNew: false
			  },
			  e4: {
			    precedence: Precedence.Assignment,
			    allowIn: true,
			    allowCall: true,
			    allowUnparenthesizedNew: true
			  },
			  e5: {
			    precedence: Precedence.Sequence,
			    allowIn: true,
			    allowCall: true,
			    allowUnparenthesizedNew: true
			  },
			  e6: function e6(allowUnparenthesizedNew) {
			    return {
			      precedence: Precedence.New,
			      allowIn: true,
			      allowCall: false,
			      allowUnparenthesizedNew: allowUnparenthesizedNew
			    };
			  },
			  e7: {
			    precedence: Precedence.Unary,
			    allowIn: true,
			    allowCall: true,
			    allowUnparenthesizedNew: true
			  },
			  e8: {
			    precedence: Precedence.Postfix,
			    allowIn: true,
			    allowCall: true,
			    allowUnparenthesizedNew: true
			  },
			  e9: {
			    precedence: void 0,
			    allowIn: true,
			    allowCall: true,
			    allowUnparenthesizedNew: true
			  },
			  e10: {
			    precedence: Precedence.Call,
			    allowIn: true,
			    allowCall: true,
			    allowUnparenthesizedNew: true
			  },
			  e11: function e11(allowCall) {
			    return {
			      precedence: Precedence.Call,
			      allowIn: true,
			      allowCall: allowCall,
			      allowUnparenthesizedNew: false
			    };
			  },
			  e12: {
			    precedence: Precedence.Primary,
			    allowIn: false,
			    allowCall: false,
			    allowUnparenthesizedNew: true
			  },
			  e13: {
			    precedence: Precedence.Primary,
			    allowIn: true,
			    allowCall: true,
			    allowUnparenthesizedNew: true
			  },
			  e14: {
			    precedence: Precedence.Sequence,
			    allowIn: false,
			    allowCall: true,
			    allowUnparenthesizedNew: true
			  },
			  e15: function e15(allowCall) {
			    return {
			      precedence: Precedence.Sequence,
			      allowIn: true,
			      allowCall: allowCall,
			      allowUnparenthesizedNew: true
			    };
			  },
			  e16: function e16(precedence, allowIn) {
			    return {
			      precedence: precedence,
			      allowIn: allowIn,
			      allowCall: true,
			      allowUnparenthesizedNew: true
			    };
			  },
			  e17: function e17(allowIn) {
			    return {
			      precedence: Precedence.Call,
			      allowIn: allowIn,
			      allowCall: true,
			      allowUnparenthesizedNew: true
			    };
			  },
			  e18: function e18(allowIn) {
			    return {
			      precedence: Precedence.Assignment,
			      allowIn: allowIn,
			      allowCall: true,
			      allowUnparenthesizedNew: true
			    };
			  },
			  e19: {
			    precedence: Precedence.Sequence,
			    allowIn: true,
			    allowCall: true,
			    semicolonOptional: false
			  },
			  e20: {
			    precedence: Precedence.Await,
			    allowCall: true
			  },
			  s1: function s1(functionBody, semicolonOptional) {
			    return {
			      allowIn: true,
			      functionBody: false,
			      directiveContext: functionBody,
			      semicolonOptional: semicolonOptional
			    };
			  },
			  s2: {
			    allowIn: true,
			    functionBody: false,
			    directiveContext: false,
			    semicolonOptional: true
			  },
			  s3: function s3(allowIn) {
			    return {
			      allowIn: allowIn,
			      functionBody: false,
			      directiveContext: false,
			      semicolonOptional: false
			    };
			  },
			  s4: function s4(semicolonOptional) {
			    return {
			      allowIn: true,
			      functionBody: false,
			      directiveContext: false,
			      semicolonOptional: semicolonOptional
			    };
			  },
			  s5: function s5(semicolonOptional) {
			    return {
			      allowIn: true,
			      functionBody: false,
			      directiveContext: true,
			      semicolonOptional: semicolonOptional
			    };
			  },
			  s6: {
			    allowIn: false,
			    functionBody: false,
			    directiveContext: false,
			    semicolonOptional: false
			  },
			  s7: {
			    allowIn: true,
			    functionBody: false,
			    directiveContext: false,
			    semicolonOptional: false
			  },
			  s8: {
			    allowIn: true,
			    functionBody: true,
			    directiveContext: false,
			    semicolonOptional: false
			  }
			}; //-------------------------------------------------===-------------------------------------------------------
			//                                             Expressions
			//-------------------------------------------------===-------------------------------------------------------
			//Regular expressions

			var FLOATING_OR_OCTAL_REGEXP = /[.eExX]|^0[0-9]+/,
			    LAST_DECIMAL_DIGIT_REGEXP = /[0-9]$/; //Common expression generators

			function generateLogicalOrBinaryExpression($expr, settings) {
			  var op = $expr.operator,
			      precedence = BinaryPrecedence[$expr.operator],
			      parenthesize = precedence < settings.precedence,
			      allowIn = settings.allowIn || parenthesize,
			      operandGenSettings = Preset.e16(precedence, allowIn),
			      exprJs = exprToJs($expr.left, operandGenSettings);
			  parenthesize |= op === 'in' && !allowIn;
			  if (parenthesize) _.js += '('; // 0x2F = '/'

			  if (exprJs.charCodeAt(exprJs.length - 1) === 0x2F && isIdentifierCh(op.charCodeAt(0))) exprJs = exprJs + _.space + op;else exprJs = join(exprJs, op);
			  operandGenSettings.precedence++;
			  var rightJs = exprToJs($expr.right, operandGenSettings); //NOTE: If '/' concats with '/' or `<` concats with `!--`, it is interpreted as comment start

			  if (op === '/' && rightJs.charAt(0) === '/' || op.slice(-1) === '<' && rightJs.slice(0, 3) === '!--') exprJs += _.space + rightJs;else exprJs = join(exprJs, rightJs);
			  _.js += exprJs;
			  if (parenthesize) _.js += ')';
			}

			function generateArrayPatternOrExpression($expr) {
			  var $elems = $expr.elements,
			      elemCount = $elems.length;

			  if (elemCount) {
			    var lastElemIdx = elemCount - 1,
			        multiline = elemCount > 1,
			        prevIndent = shiftIndent(),
			        itemPrefix = _.newline + _.indent;
			    _.js += '[';

			    for (var i = 0; i < elemCount; i++) {
			      var $elem = $elems[i];
			      if (multiline) _.js += itemPrefix;
			      if ($elem) ExprGen[$elem.type]($elem, Preset.e4);
			      if (i !== lastElemIdx || !$elem) _.js += ',';
			    }

			    _.indent = prevIndent;
			    if (multiline) _.js += _.newline + _.indent;
			    _.js += ']';
			  } else _.js += '[]';
			}

			function generateGeneratorOrComprehensionExpression($expr) {
			  //NOTE: GeneratorExpression should be parenthesized with (...), ComprehensionExpression with [...]
			  var $blocks = $expr.blocks,
			      $filter = $expr.filter,
			      isGenerator = $expr.type === Syntax.GeneratorExpression,
			      exprJs = isGenerator ? '(' : '[',
			      bodyJs = exprToJs($expr.body, Preset.e4);

			  if ($blocks) {
			    var prevIndent = shiftIndent(),
			        blockCount = $blocks.length;

			    for (var i = 0; i < blockCount; ++i) {
			      var blockJs = exprToJs($blocks[i], Preset.e5);
			      exprJs = i > 0 ? join(exprJs, blockJs) : exprJs + blockJs;
			    }

			    _.indent = prevIndent;
			  }

			  if ($filter) {
			    var filterJs = exprToJs($filter, Preset.e5);
			    exprJs = join(exprJs, 'if' + _.optSpace);
			    exprJs = join(exprJs, '(' + filterJs + ')');
			  }

			  exprJs = join(exprJs, bodyJs);
			  exprJs += isGenerator ? ')' : ']';
			  _.js += exprJs;
			} //Expression raw generator dictionary


			var ExprRawGen = {
			  SequenceExpression: function generateSequenceExpression($expr, settings) {
			    var $children = $expr.expressions,
			        childrenCount = $children.length,
			        lastChildIdx = childrenCount - 1,
			        parenthesize = Precedence.Sequence < settings.precedence,
			        exprGenSettings = Preset.e1(settings.allowIn || parenthesize);
			    if (parenthesize) _.js += '(';

			    for (var i = 0; i < childrenCount; i++) {
			      var $child = $children[i];
			      ExprGen[$child.type]($child, exprGenSettings);
			      if (i !== lastChildIdx) _.js += ',' + _.optSpace;
			    }

			    if (parenthesize) _.js += ')';
			  },
			  AssignmentExpression: function generateAssignmentExpression($expr, settings) {
			    var $left = $expr.left,
			        $right = $expr.right,
			        parenthesize = Precedence.Assignment < settings.precedence,
			        allowIn = settings.allowIn || parenthesize;
			    if (parenthesize) _.js += '(';
			    ExprGen[$left.type]($left, Preset.e17(allowIn));
			    _.js += _.optSpace + $expr.operator + _.optSpace;
			    ExprGen[$right.type]($right, Preset.e18(allowIn));
			    if (parenthesize) _.js += ')';
			  },
			  AssignmentPattern: function generateAssignmentPattern($node) {
			    var $fakeAssign = {
			      left: $node.left,
			      right: $node.right,
			      operator: '='
			    };
			    ExprGen.AssignmentExpression($fakeAssign, Preset.e4);
			  },
			  ArrowFunctionExpression: function generateArrowFunctionExpression($expr, settings) {
			    var parenthesize = Precedence.ArrowFunction < settings.precedence;
			    if (parenthesize) _.js += '(';
			    if ($expr.async) _.js += 'async ';
			    generateFunctionBody($expr);
			    if (parenthesize) _.js += ')';
			  },
			  AwaitExpression: function generateAwaitExpression($expr, settings) {
			    var parenthesize = Precedence.Await < settings.precedence;
			    if (parenthesize) _.js += '(';
			    _.js += $expr.all ? 'await* ' : 'await ';
			    ExprGen[$expr.argument.type]($expr.argument, Preset.e20);
			    if (parenthesize) _.js += ')';
			  },
			  ConditionalExpression: function generateConditionalExpression($expr, settings) {
			    var $test = $expr.test,
			        $conseq = $expr.consequent,
			        $alt = $expr.alternate,
			        parenthesize = Precedence.Conditional < settings.precedence,
			        allowIn = settings.allowIn || parenthesize,
			        testGenSettings = Preset.e2(allowIn),
			        branchGenSettings = Preset.e1(allowIn);
			    if (parenthesize) _.js += '(';
			    ExprGen[$test.type]($test, testGenSettings);
			    _.js += _.optSpace + '?' + _.optSpace;
			    ExprGen[$conseq.type]($conseq, branchGenSettings);
			    _.js += _.optSpace + ':' + _.optSpace;
			    ExprGen[$alt.type]($alt, branchGenSettings);
			    if (parenthesize) _.js += ')';
			  },
			  LogicalExpression: generateLogicalOrBinaryExpression,
			  BinaryExpression: generateLogicalOrBinaryExpression,
			  CallExpression: function generateCallExpression($expr, settings) {
			    var $callee = $expr.callee,
			        $args = $expr['arguments'],
			        argCount = $args.length,
			        lastArgIdx = argCount - 1,
			        parenthesize = !settings.allowCall || Precedence.Call < settings.precedence;
			    if (parenthesize) _.js += '(';
			    ExprGen[$callee.type]($callee, Preset.e3);
			    _.js += '(';

			    for (var i = 0; i < argCount; ++i) {
			      var $arg = $args[i];
			      ExprGen[$arg.type]($arg, Preset.e4);
			      if (i !== lastArgIdx) _.js += ',' + _.optSpace;
			    }

			    _.js += ')';
			    if (parenthesize) _.js += ')';
			  },
			  NewExpression: function generateNewExpression($expr, settings) {
			    var $args = $expr['arguments'],
			        parenthesize = Precedence.New < settings.precedence,
			        argCount = $args.length,
			        lastArgIdx = argCount - 1,
			        withCall = !settings.allowUnparenthesizedNew || parentheses || argCount > 0,
			        calleeJs = exprToJs($expr.callee, Preset.e6(!withCall));
			    if (parenthesize) _.js += '(';
			    _.js += join('new', calleeJs);

			    if (withCall) {
			      _.js += '(';

			      for (var i = 0; i < argCount; ++i) {
			        var $arg = $args[i];
			        ExprGen[$arg.type]($arg, Preset.e4);
			        if (i !== lastArgIdx) _.js += ',' + _.optSpace;
			      }

			      _.js += ')';
			    }

			    if (parenthesize) _.js += ')';
			  },
			  MemberExpression: function generateMemberExpression($expr, settings) {
			    var $obj = $expr.object,
			        $prop = $expr.property,
			        parenthesize = Precedence.Member < settings.precedence,
			        isNumObj = !$expr.computed && $obj.type === Syntax.Literal && typeof $obj.value === 'number';
			    if (parenthesize) _.js += '(';

			    if (isNumObj) {
			      //NOTE: When the following conditions are all true:
			      //   1. No floating point
			      //   2. Don't have exponents
			      //   3. The last character is a decimal digit
			      //   4. Not hexadecimal OR octal number literal
			      // then we should add a floating point.
			      var numJs = exprToJs($obj, Preset.e11(settings.allowCall)),
			          withPoint = LAST_DECIMAL_DIGIT_REGEXP.test(numJs) && !FLOATING_OR_OCTAL_REGEXP.test(numJs);
			      _.js += withPoint ? numJs + '.' : numJs;
			    } else ExprGen[$obj.type]($obj, Preset.e11(settings.allowCall));

			    if ($expr.computed) {
			      _.js += '[';
			      ExprGen[$prop.type]($prop, Preset.e15(settings.allowCall));
			      _.js += ']';
			    } else _.js += '.' + $prop.name;

			    if (parenthesize) _.js += ')';
			  },
			  UnaryExpression: function generateUnaryExpression($expr, settings) {
			    var parenthesize = Precedence.Unary < settings.precedence,
			        op = $expr.operator,
			        argJs = exprToJs($expr.argument, Preset.e7);
			    if (parenthesize) _.js += '('; //NOTE: delete, void, typeof
			    // get `typeof []`, not `typeof[]`

			    if (_.optSpace === '' || op.length > 2) _.js += join(op, argJs);else {
			      _.js += op; //NOTE: Prevent inserting spaces between operator and argument if it is unnecessary
			      // like, `!cond`

			      var leftCp = op.charCodeAt(op.length - 1),
			          rightCp = argJs.charCodeAt(0); // 0x2B = '+', 0x2D =  '-'

			      if (leftCp === rightCp && (leftCp === 0x2B || leftCp === 0x2D) || isIdentifierCh(leftCp) && isIdentifierCh(rightCp)) {
			        _.js += _.space;
			      }

			      _.js += argJs;
			    }
			    if (parenthesize) _.js += ')';
			  },
			  YieldExpression: function generateYieldExpression($expr, settings) {
			    var $arg = $expr.argument,
			        js = $expr.delegate ? 'yield*' : 'yield',
			        parenthesize = Precedence.Yield < settings.precedence;
			    if (parenthesize) _.js += '(';

			    if ($arg) {
			      var argJs = exprToJs($arg, Preset.e4);
			      js = join(js, argJs);
			    }

			    _.js += js;
			    if (parenthesize) _.js += ')';
			  },
			  UpdateExpression: function generateUpdateExpression($expr, settings) {
			    var $arg = $expr.argument,
			        $op = $expr.operator,
			        prefix = $expr.prefix,
			        precedence = prefix ? Precedence.Unary : Precedence.Postfix,
			        parenthesize = precedence < settings.precedence;
			    if (parenthesize) _.js += '(';

			    if (prefix) {
			      _.js += $op;
			      ExprGen[$arg.type]($arg, Preset.e8);
			    } else {
			      ExprGen[$arg.type]($arg, Preset.e8);
			      _.js += $op;
			    }

			    if (parenthesize) _.js += ')';
			  },
			  FunctionExpression: function generateFunctionExpression($expr) {
			    var isGenerator = !!$expr.generator;
			    if ($expr.async) _.js += 'async ';
			    _.js += isGenerator ? 'function*' : 'function';

			    if ($expr.id) {
			      _.js += isGenerator ? _.optSpace : _.space;
			      _.js += $expr.id.name;
			    } else _.js += _.optSpace;

			    generateFunctionBody($expr);
			  },
			  ExportBatchSpecifier: function generateExportBatchSpecifier() {
			    _.js += '*';
			  },
			  ArrayPattern: generateArrayPatternOrExpression,
			  ArrayExpression: generateArrayPatternOrExpression,
			  ClassExpression: function generateClassExpression($expr) {
			    var $id = $expr.id,
			        $super = $expr.superClass,
			        $body = $expr.body,
			        exprJs = 'class';

			    if ($id) {
			      var idJs = exprToJs($id, Preset.e9);
			      exprJs = join(exprJs, idJs);
			    }

			    if ($super) {
			      var superJs = exprToJs($super, Preset.e4);
			      superJs = join('extends', superJs);
			      exprJs = join(exprJs, superJs);
			    }

			    _.js += exprJs + _.optSpace;
			    StmtGen[$body.type]($body, Preset.s2);
			  },
			  MetaProperty: function generateMetaProperty($expr, settings) {
			    var $meta = $expr.meta,
			        $property = $expr.property,
			        parenthesize = Precedence.Member < settings.precedence;
			    if (parenthesize) _.js += '(';
			    _.js += (typeof $meta === "string" ? $meta : $meta.name) + '.' + (typeof $property === "string" ? $property : $property.name);
			    if (parenthesize) _.js += ')';
			  },
			  MethodDefinition: function generateMethodDefinition($expr) {
			    var exprJs = $expr['static'] ? 'static' + _.optSpace : '',
			        keyJs = exprToJs($expr.key, Preset.e5);
			    if ($expr.computed) keyJs = '[' + keyJs + ']';

			    if ($expr.kind === 'get' || $expr.kind === 'set') {
			      keyJs = join($expr.kind, keyJs);
			      _.js += join(exprJs, keyJs);
			    } else {
			      if ($expr.value.generator) _.js += exprJs + '*' + keyJs;else if ($expr.value.async) _.js += exprJs + 'async ' + keyJs;else _.js += join(exprJs, keyJs);
			    }

			    generateFunctionBody($expr.value);
			  },
			  Property: function generateProperty($expr) {
			    var $val = $expr.value,
			        $kind = $expr.kind,
			        keyJs = exprToJs($expr.key, Preset.e4);
			    if ($expr.computed) keyJs = '[' + keyJs + ']';

			    if ($kind === 'get' || $kind === 'set') {
			      _.js += $kind + _.space + keyJs;
			      generateFunctionBody($val);
			    } else {
			      if ($expr.shorthand) _.js += keyJs;else if ($expr.method) {
			        if ($val.generator) keyJs = '*' + keyJs;else if ($val.async) keyJs = 'async ' + keyJs;
			        _.js += keyJs;
			        generateFunctionBody($val);
			      } else {
			        _.js += keyJs + ':' + _.optSpace;
			        ExprGen[$val.type]($val, Preset.e4);
			      }
			    }
			  },
			  ObjectExpression: function generateObjectExpression($expr) {
			    var $props = $expr.properties,
			        propCount = $props.length;

			    if (propCount) {
			      var lastPropIdx = propCount - 1,
			          prevIndent = shiftIndent();
			      _.js += '{';

			      for (var i = 0; i < propCount; i++) {
			        var $prop = $props[i],
			            propType = $prop.type || Syntax.Property;
			        _.js += _.newline + _.indent;
			        ExprGen[propType]($prop, Preset.e5);
			        if (i !== lastPropIdx) _.js += ',';
			      }

			      _.indent = prevIndent;
			      _.js += _.newline + _.indent + '}';
			    } else _.js += '{}';
			  },
			  ObjectPattern: function generateObjectPattern($expr) {
			    var $props = $expr.properties,
			        propCount = $props.length;

			    if (propCount) {
			      var lastPropIdx = propCount - 1,
			          multiline = false;
			      if (propCount === 1) multiline = $props[0].value.type !== Syntax.Identifier;else {
			        for (var i = 0; i < propCount; i++) {
			          if (!$props[i].shorthand) {
			            multiline = true;
			            break;
			          }
			        }
			      }
			      _.js += multiline ? '{' + _.newline : '{';
			      var prevIndent = shiftIndent(),
			          propSuffix = ',' + (multiline ? _.newline : _.optSpace);

			      for (var i = 0; i < propCount; i++) {
			        var $prop = $props[i];
			        if (multiline) _.js += _.indent;
			        ExprGen[$prop.type]($prop, Preset.e5);
			        if (i !== lastPropIdx) _.js += propSuffix;
			      }

			      _.indent = prevIndent;
			      _.js += multiline ? _.newline + _.indent + '}' : '}';
			    } else _.js += '{}';
			  },
			  ThisExpression: function generateThisExpression() {
			    _.js += 'this';
			  },
			  Identifier: function generateIdentifier($expr) {
			    _.js += $expr.name;
			  },
			  Import: function generateImport() {
			    _.js += 'import';
			  },
			  ImportSpecifier: function generateImportSpecifier($expr) {
			    _.js += $expr.imported.name;
			    if ($expr.local) _.js += _.space + 'as' + _.space + $expr.local.name;
			  },
			  ExportSpecifier: function generateImportOrExportSpecifier($expr) {
			    _.js += $expr.local.name;
			    if ($expr.exported) _.js += _.space + 'as' + _.space + $expr.exported.name;
			  },
			  Literal: function generateLiteral($expr) {
			    if (extra.raw && $expr.raw !== void 0) _.js += $expr.raw;else if ($expr.value === null) _.js += 'null';else {
			      var valueType = typeof $expr.value;
			      if (valueType === 'string') _.js += escapeString($expr.value);else if (valueType === 'number') _.js += generateNumber($expr.value);else if (valueType === 'boolean') _.js += $expr.value ? 'true' : 'false';else _.js += generateRegExp($expr.value);
			    }
			  },
			  GeneratorExpression: generateGeneratorOrComprehensionExpression,
			  ComprehensionExpression: generateGeneratorOrComprehensionExpression,
			  ComprehensionBlock: function generateComprehensionBlock($expr) {
			    var $left = $expr.left,
			        leftJs = void 0,
			        rightJs = exprToJs($expr.right, Preset.e5);
			    if ($left.type === Syntax.VariableDeclaration) leftJs = $left.kind + _.space + stmtToJs($left.declarations[0], Preset.s6);else leftJs = exprToJs($left, Preset.e10);
			    leftJs = join(leftJs, $expr.of ? 'of' : 'in');
			    _.js += 'for' + _.optSpace + '(' + join(leftJs, rightJs) + ')';
			  },
			  RestElement: function generateRestElement($node) {
			    _.js += '...' + $node.argument.name;
			  },
			  SpreadElement: function generateSpreadElement($expr) {
			    var $arg = $expr.argument;
			    _.js += '...';
			    ExprGen[$arg.type]($arg, Preset.e4);
			  },
			  TaggedTemplateExpression: function generateTaggedTemplateExpression($expr, settings) {
			    var $tag = $expr.tag,
			        $quasi = $expr.quasi,
			        parenthesize = Precedence.TaggedTemplate < settings.precedence;
			    if (parenthesize) _.js += '(';
			    ExprGen[$tag.type]($tag, Preset.e11(settings.allowCall));
			    ExprGen[$quasi.type]($quasi, Preset.e12);
			    if (parenthesize) _.js += ')';
			  },
			  TemplateElement: function generateTemplateElement($expr) {
			    //NOTE: Don't use "cooked". Since tagged template can use raw template
			    // representation. So if we do so, it breaks the script semantics.
			    _.js += $expr.value.raw;
			  },
			  TemplateLiteral: function generateTemplateLiteral($expr) {
			    var $quasis = $expr.quasis,
			        $childExprs = $expr.expressions,
			        quasiCount = $quasis.length,
			        lastQuasiIdx = quasiCount - 1;
			    _.js += '`';

			    for (var i = 0; i < quasiCount; ++i) {
			      var $quasi = $quasis[i];
			      ExprGen[$quasi.type]($quasi, Preset.e13);

			      if (i !== lastQuasiIdx) {
			        var $childExpr = $childExprs[i];
			        _.js += '${' + _.optSpace;
			        ExprGen[$childExpr.type]($childExpr, Preset.e5);
			        _.js += _.optSpace + '}';
			      }
			    }

			    _.js += '`';
			  },
			  Super: function generateSuper() {
			    _.js += 'super';
			  }
			}; //-------------------------------------------------===------------------------------------------------------
			//                                              Statements
			//-------------------------------------------------===------------------------------------------------------
			//Regular expressions

			var EXPR_STMT_UNALLOWED_EXPR_REGEXP = /^{|^class(?:\s|{)|^(async )?function(?:\s|\*|\()/; //Common statement generators

			function generateTryStatementHandlers(stmtJs, $finalizer, handlers) {
			  var handlerCount = handlers.length,
			      lastHandlerIdx = handlerCount - 1;

			  for (var i = 0; i < handlerCount; ++i) {
			    var handlerJs = stmtToJs(handlers[i], Preset.s7);
			    stmtJs = join(stmtJs, handlerJs);
			    if ($finalizer || i !== lastHandlerIdx) stmtJs += adoptionSuffix(handlers[i].body);
			  }

			  return stmtJs;
			}

			function generateForStatementIterator($op, $stmt, settings) {
			  var $body = $stmt.body,
			      $left = $stmt.left,
			      bodySemicolonOptional = !semicolons && settings.semicolonOptional,
			      prevIndent1 = shiftIndent(),
			      awaitStr = $stmt.await ? ' await' : '',
			      stmtJs = 'for' + awaitStr + _.optSpace + '(';

			  if ($left.type === Syntax.VariableDeclaration) {
			    var prevIndent2 = shiftIndent();
			    stmtJs += $left.kind + _.space + stmtToJs($left.declarations[0], Preset.s6);
			    _.indent = prevIndent2;
			  } else stmtJs += exprToJs($left, Preset.e10);

			  stmtJs = join(stmtJs, $op);
			  var rightJs = exprToJs($stmt.right, Preset.e4);
			  stmtJs = join(stmtJs, rightJs) + ')';
			  _.indent = prevIndent1;
			  _.js += stmtJs + adoptionPrefix($body);
			  StmtGen[$body.type]($body, Preset.s4(bodySemicolonOptional));
			} //Statement generator dictionary


			var StmtRawGen = {
			  BlockStatement: function generateBlockStatement($stmt, settings) {
			    var $body = $stmt.body,
			        len = $body.length,
			        lastIdx = len - 1,
			        prevIndent = shiftIndent();
			    _.js += '{' + _.newline;

			    for (var i = 0; i < len; i++) {
			      var $item = $body[i];
			      _.js += _.indent;
			      StmtGen[$item.type]($item, Preset.s1(settings.functionBody, i === lastIdx));
			      _.js += _.newline;
			    }

			    _.indent = prevIndent;
			    _.js += _.indent + '}';
			  },
			  BreakStatement: function generateBreakStatement($stmt, settings) {
			    if ($stmt.label) _.js += 'break ' + $stmt.label.name;else _.js += 'break';
			    if (semicolons || !settings.semicolonOptional) _.js += ';';
			  },
			  ContinueStatement: function generateContinueStatement($stmt, settings) {
			    if ($stmt.label) _.js += 'continue ' + $stmt.label.name;else _.js += 'continue';
			    if (semicolons || !settings.semicolonOptional) _.js += ';';
			  },
			  ClassBody: function generateClassBody($stmt) {
			    var $body = $stmt.body,
			        itemCount = $body.length,
			        lastItemIdx = itemCount - 1,
			        prevIndent = shiftIndent();
			    _.js += '{' + _.newline;

			    for (var i = 0; i < itemCount; i++) {
			      var $item = $body[i],
			          itemType = $item.type || Syntax.Property;
			      _.js += _.indent;
			      ExprGen[itemType]($item, Preset.e5);
			      if (i !== lastItemIdx) _.js += _.newline;
			    }

			    _.indent = prevIndent;
			    _.js += _.newline + _.indent + '}';
			  },
			  ClassDeclaration: function generateClassDeclaration($stmt) {
			    var $body = $stmt.body,
			        $super = $stmt.superClass,
			        js = 'class ' + $stmt.id.name;

			    if ($super) {
			      var superJs = exprToJs($super, Preset.e4);
			      js += _.space + join('extends', superJs);
			    }

			    _.js += js + _.optSpace;
			    StmtGen[$body.type]($body, Preset.s2);
			  },
			  DirectiveStatement: function generateDirectiveStatement($stmt, settings) {
			    if (extra.raw && $stmt.raw) _.js += $stmt.raw;else _.js += escapeDirective($stmt.directive);
			    if (semicolons || !settings.semicolonOptional) _.js += ';';
			  },
			  DoWhileStatement: function generateDoWhileStatement($stmt, settings) {
			    var $body = $stmt.body,
			        $test = $stmt.test,
			        bodyJs = adoptionPrefix($body) + stmtToJs($body, Preset.s7) + adoptionSuffix($body); //NOTE: Because `do 42 while (cond)` is Syntax Error. We need semicolon.

			    var stmtJs = join('do', bodyJs);
			    _.js += join(stmtJs, 'while' + _.optSpace + '(');
			    ExprGen[$test.type]($test, Preset.e5);
			    _.js += ')';
			    if (semicolons || !settings.semicolonOptional) _.js += ';';
			  },
			  CatchClause: function generateCatchClause($stmt) {
			    var $param = $stmt.param,
			        $guard = $stmt.guard,
			        $body = $stmt.body,
			        prevIndent = shiftIndent();
			    _.js += 'catch' + _.optSpace;

			    if ($param) {
			      _.js += '(';
			      ExprGen[$param.type]($param, Preset.e5);
			    }

			    if ($guard) {
			      _.js += ' if ';
			      ExprGen[$guard.type]($guard, Preset.e5);
			    }

			    _.indent = prevIndent;

			    if ($param) {
			      _.js += ')';
			    }

			    _.js += adoptionPrefix($body);
			    StmtGen[$body.type]($body, Preset.s7);
			  },
			  DebuggerStatement: function generateDebuggerStatement($stmt, settings) {
			    _.js += 'debugger';
			    if (semicolons || !settings.semicolonOptional) _.js += ';';
			  },
			  EmptyStatement: function generateEmptyStatement() {
			    _.js += ';';
			  },
			  ExportAllDeclaration: function ExportAllDeclaration($stmt, settings) {
			    StmtRawGen.ExportDeclaration($stmt, settings, true);
			  },
			  ExportDeclaration: function generateExportDeclaration($stmt, settings, exportAll) {
			    var $specs = $stmt.specifiers,
			        $decl = $stmt.declaration,
			        withSemicolon = semicolons || !settings.semicolonOptional; // export default AssignmentExpression[In] ;

			    if ($stmt['default']) {
			      var declJs = exprToJs($decl, Preset.e4);
			      _.js += join('export default', declJs);
			      if (withSemicolon) _.js += ';';
			    } // export * FromClause ;
			    // export ExportClause[NoReference] FromClause ;
			    // export ExportClause ;
			    else if ($specs || exportAll) {
			        var stmtJs = 'export';
			        if (exportAll) stmtJs += _.optSpace + '*';else if ($specs.length === 0) stmtJs += _.optSpace + '{' + _.optSpace + '}';else if ($specs[0].type === Syntax.ExportBatchSpecifier) {
			          var specJs = exprToJs($specs[0], Preset.e5);
			          stmtJs = join(stmtJs, specJs);
			        } else {
			          var prevIndent = shiftIndent(),
			              specCount = $specs.length,
			              lastSpecIdx = specCount - 1;
			          stmtJs += _.optSpace + '{';

			          for (var i = 0; i < specCount; ++i) {
			            stmtJs += _.newline + _.indent;
			            stmtJs += exprToJs($specs[i], Preset.e5);
			            if (i !== lastSpecIdx) stmtJs += ',';
			          }

			          _.indent = prevIndent;
			          stmtJs += _.newline + _.indent + '}';
			        }

			        if ($stmt.source) {
			          _.js += join(stmtJs, 'from' + _.optSpace);
			          ExprGen.Literal($stmt.source);
			        } else _.js += stmtJs;

			        if (withSemicolon) _.js += ';';
			      } // export VariableStatement
			      // export Declaration[Default]
			      else if ($decl) {
			          var declJs = stmtToJs($decl, Preset.s4(!withSemicolon));
			          _.js += join('export', declJs);
			        }
			  },
			  ExportNamedDeclaration: function ExportNamedDeclaration($stmt, settings) {
			    StmtRawGen.ExportDeclaration($stmt, settings);
			  },
			  ExpressionStatement: function generateExpressionStatement($stmt, settings) {
			    var exprJs = exprToJs($stmt.expression, Preset.e5),
			        parenthesize = EXPR_STMT_UNALLOWED_EXPR_REGEXP.test(exprJs) || directive && settings.directiveContext && $stmt.expression.type === Syntax.Literal && typeof $stmt.expression.value === 'string'; //NOTE: '{', 'function', 'class' are not allowed in expression statement.
			    // Therefore, they should be parenthesized.

			    if (parenthesize) _.js += '(' + exprJs + ')';else _.js += exprJs;
			    if (semicolons || !settings.semicolonOptional) _.js += ';';
			  },
			  ImportDeclaration: function generateImportDeclaration($stmt, settings) {
			    var $specs = $stmt.specifiers,
			        stmtJs = 'import',
			        specCount = $specs.length; //NOTE: If no ImportClause is present,
			    // this should be `import ModuleSpecifier` so skip `from`
			    // ModuleSpecifier is StringLiteral.

			    if (specCount) {
			      var hasBinding = !!$specs[0]['default'],
			          firstNamedIdx = hasBinding ? 1 : 0,
			          lastSpecIdx = specCount - 1; // ImportedBinding

			      if (hasBinding) stmtJs = join(stmtJs, $specs[0].id.name); // NamedImports

			      if (firstNamedIdx < specCount) {
			        if (hasBinding) stmtJs += ',';
			        stmtJs += _.optSpace + '{'; // import { ... } from "...";

			        if (firstNamedIdx === lastSpecIdx) stmtJs += _.optSpace + exprToJs($specs[firstNamedIdx], Preset.e5) + _.optSpace;else {
			          var prevIndent = shiftIndent(); // import {
			          //    ...,
			          //    ...,
			          // } from "...";

			          for (var i = firstNamedIdx; i < specCount; i++) {
			            stmtJs += _.newline + _.indent + exprToJs($specs[i], Preset.e5);
			            if (i !== lastSpecIdx) stmtJs += ',';
			          }

			          _.indent = prevIndent;
			          stmtJs += _.newline + _.indent;
			        }
			        stmtJs += '}' + _.optSpace;
			      }

			      stmtJs = join(stmtJs, 'from');
			    }

			    _.js += stmtJs + _.optSpace;
			    ExprGen.Literal($stmt.source);
			    if (semicolons || !settings.semicolonOptional) _.js += ';';
			  },
			  VariableDeclarator: function generateVariableDeclarator($stmt, settings) {
			    var $id = $stmt.id,
			        $init = $stmt.init,
			        genSettings = Preset.e1(settings.allowIn);

			    if ($init) {
			      ExprGen[$id.type]($id, genSettings);
			      _.js += _.optSpace + '=' + _.optSpace;
			      ExprGen[$init.type]($init, genSettings);
			    } else {
			      if ($id.type === Syntax.Identifier) _.js += $id.name;else ExprGen[$id.type]($id, genSettings);
			    }
			  },
			  VariableDeclaration: function generateVariableDeclaration($stmt, settings) {
			    var $decls = $stmt.declarations,
			        len = $decls.length,
			        prevIndent = len > 1 ? shiftIndent() : _.indent,
			        declGenSettings = Preset.s3(settings.allowIn);
			    _.js += $stmt.kind;

			    for (var i = 0; i < len; i++) {
			      var $decl = $decls[i];
			      _.js += i === 0 ? _.space : ',' + _.optSpace;
			      StmtGen[$decl.type]($decl, declGenSettings);
			    }

			    if (semicolons || !settings.semicolonOptional) _.js += ';';
			    _.indent = prevIndent;
			  },
			  ThrowStatement: function generateThrowStatement($stmt, settings) {
			    var argJs = exprToJs($stmt.argument, Preset.e5);
			    _.js += join('throw', argJs);
			    if (semicolons || !settings.semicolonOptional) _.js += ';';
			  },
			  TryStatement: function generateTryStatement($stmt) {
			    var $block = $stmt.block,
			        $finalizer = $stmt.finalizer,
			        stmtJs = 'try' + adoptionPrefix($block) + stmtToJs($block, Preset.s7) + adoptionSuffix($block);
			    var $handlers = $stmt.handlers || $stmt.guardedHandlers;
			    if ($handlers) stmtJs = generateTryStatementHandlers(stmtJs, $finalizer, $handlers);

			    if ($stmt.handler) {
			      $handlers = isArray($stmt.handler) ? $stmt.handler : [$stmt.handler];
			      stmtJs = generateTryStatementHandlers(stmtJs, $finalizer, $handlers);
			    }

			    if ($finalizer) {
			      stmtJs = join(stmtJs, 'finally' + adoptionPrefix($finalizer));
			      stmtJs += stmtToJs($finalizer, Preset.s7);
			    }

			    _.js += stmtJs;
			  },
			  SwitchStatement: function generateSwitchStatement($stmt) {
			    var $cases = $stmt.cases,
			        $discr = $stmt.discriminant,
			        prevIndent = shiftIndent();
			    _.js += 'switch' + _.optSpace + '(';
			    ExprGen[$discr.type]($discr, Preset.e5);
			    _.js += ')' + _.optSpace + '{' + _.newline;
			    _.indent = prevIndent;

			    if ($cases) {
			      var caseCount = $cases.length,
			          lastCaseIdx = caseCount - 1;

			      for (var i = 0; i < caseCount; i++) {
			        var $case = $cases[i];
			        _.js += _.indent;
			        StmtGen[$case.type]($case, Preset.s4(i === lastCaseIdx));
			        _.js += _.newline;
			      }
			    }

			    _.js += _.indent + '}';
			  },
			  SwitchCase: function generateSwitchCase($stmt, settings) {
			    var $conseqs = $stmt.consequent,
			        $firstConseq = $conseqs[0],
			        $test = $stmt.test,
			        i = 0,
			        conseqSemicolonOptional = !semicolons && settings.semicolonOptional,
			        conseqCount = $conseqs.length,
			        lastConseqIdx = conseqCount - 1,
			        prevIndent = shiftIndent();

			    if ($test) {
			      var testJs = exprToJs($test, Preset.e5);
			      _.js += join('case', testJs) + ':';
			    } else _.js += 'default:';

			    if (conseqCount && $firstConseq.type === Syntax.BlockStatement) {
			      i++;
			      _.js += adoptionPrefix($firstConseq);
			      StmtGen[$firstConseq.type]($firstConseq, Preset.s7);
			    }

			    for (; i < conseqCount; i++) {
			      var $conseq = $conseqs[i],
			          semicolonOptional = i === lastConseqIdx && conseqSemicolonOptional;
			      _.js += _.newline + _.indent;
			      StmtGen[$conseq.type]($conseq, Preset.s4(semicolonOptional));
			    }

			    _.indent = prevIndent;
			  },
			  IfStatement: function generateIfStatement($stmt, settings) {
			    var $conseq = $stmt.consequent,
			        $test = $stmt.test,
			        prevIndent = shiftIndent(),
			        semicolonOptional = !semicolons && settings.semicolonOptional;
			    _.js += 'if' + _.optSpace + '(';
			    ExprGen[$test.type]($test, Preset.e5);
			    _.js += ')';
			    _.indent = prevIndent;
			    _.js += adoptionPrefix($conseq);

			    if ($stmt.alternate) {
			      var conseq = stmtToJs($conseq, Preset.s7) + adoptionSuffix($conseq),
			          alt = stmtToJs($stmt.alternate, Preset.s4(semicolonOptional));
			      if ($stmt.alternate.type === Syntax.IfStatement) alt = 'else ' + alt;else alt = join('else', adoptionPrefix($stmt.alternate) + alt);
			      _.js += join(conseq, alt);
			    } else StmtGen[$conseq.type]($conseq, Preset.s4(semicolonOptional));
			  },
			  ForStatement: function generateForStatement($stmt, settings) {
			    var $init = $stmt.init,
			        $test = $stmt.test,
			        $body = $stmt.body,
			        $update = $stmt.update,
			        bodySemicolonOptional = !semicolons && settings.semicolonOptional,
			        prevIndent = shiftIndent();
			    _.js += 'for' + _.optSpace + '(';

			    if ($init) {
			      if ($init.type === Syntax.VariableDeclaration) StmtGen[$init.type]($init, Preset.s6);else {
			        ExprGen[$init.type]($init, Preset.e14);
			        _.js += ';';
			      }
			    } else _.js += ';';

			    if ($test) {
			      _.js += _.optSpace;
			      ExprGen[$test.type]($test, Preset.e5);
			    }

			    _.js += ';';

			    if ($update) {
			      _.js += _.optSpace;
			      ExprGen[$update.type]($update, Preset.e5);
			    }

			    _.js += ')';
			    _.indent = prevIndent;
			    _.js += adoptionPrefix($body);
			    StmtGen[$body.type]($body, Preset.s4(bodySemicolonOptional));
			  },
			  ForInStatement: function generateForInStatement($stmt, settings) {
			    generateForStatementIterator('in', $stmt, settings);
			  },
			  ForOfStatement: function generateForOfStatement($stmt, settings) {
			    generateForStatementIterator('of', $stmt, settings);
			  },
			  LabeledStatement: function generateLabeledStatement($stmt, settings) {
			    var $body = $stmt.body,
			        bodySemicolonOptional = !semicolons && settings.semicolonOptional,
			        prevIndent = _.indent;
			    _.js += $stmt.label.name + ':' + adoptionPrefix($body);
			    if ($body.type !== Syntax.BlockStatement) prevIndent = shiftIndent();
			    StmtGen[$body.type]($body, Preset.s4(bodySemicolonOptional));
			    _.indent = prevIndent;
			  },
			  ModuleDeclaration: function generateModuleDeclaration($stmt, settings) {
			    _.js += 'module' + _.space + $stmt.id.name + _.space + 'from' + _.optSpace;
			    ExprGen.Literal($stmt.source);
			    if (semicolons || !settings.semicolonOptional) _.js += ';';
			  },
			  Program: function generateProgram($stmt) {
			    var $body = $stmt.body,
			        len = $body.length,
			        lastIdx = len - 1;
			    if (safeConcatenation && len > 0) _.js += '\n';

			    for (var i = 0; i < len; i++) {
			      var $item = $body[i];
			      _.js += _.indent;
			      StmtGen[$item.type]($item, Preset.s5(!safeConcatenation && i === lastIdx));
			      if (i !== lastIdx) _.js += _.newline;
			    }
			  },
			  FunctionDeclaration: function generateFunctionDeclaration($stmt) {
			    var isGenerator = !!$stmt.generator;
			    if ($stmt.async) _.js += 'async ';
			    _.js += isGenerator ? 'function*' + _.optSpace : 'function' + _.space;
			    _.js += $stmt.id.name;
			    generateFunctionBody($stmt);
			  },
			  ReturnStatement: function generateReturnStatement($stmt, settings) {
			    var $arg = $stmt.argument;

			    if ($arg) {
			      var argJs = exprToJs($arg, Preset.e5);
			      _.js += join('return', argJs);
			    } else _.js += 'return';

			    if (semicolons || !settings.semicolonOptional) _.js += ';';
			  },
			  WhileStatement: function generateWhileStatement($stmt, settings) {
			    var $body = $stmt.body,
			        $test = $stmt.test,
			        bodySemicolonOptional = !semicolons && settings.semicolonOptional,
			        prevIndent = shiftIndent();
			    _.js += 'while' + _.optSpace + '(';
			    ExprGen[$test.type]($test, Preset.e5);
			    _.js += ')';
			    _.indent = prevIndent;
			    _.js += adoptionPrefix($body);
			    StmtGen[$body.type]($body, Preset.s4(bodySemicolonOptional));
			  },
			  WithStatement: function generateWithStatement($stmt, settings) {
			    var $body = $stmt.body,
			        $obj = $stmt.object,
			        bodySemicolonOptional = !semicolons && settings.semicolonOptional,
			        prevIndent = shiftIndent();
			    _.js += 'with' + _.optSpace + '(';
			    ExprGen[$obj.type]($obj, Preset.e5);
			    _.js += ')';
			    _.indent = prevIndent;
			    _.js += adoptionPrefix($body);
			    StmtGen[$body.type]($body, Preset.s4(bodySemicolonOptional));
			  }
			};

			function generateStatement($stmt, option) {
			  StmtGen[$stmt.type]($stmt, option);
			} //CodeGen
			//-----------------------------------------------------------------------------------


			function exprToJs($expr, settings) {
			  var savedJs = _.js;
			  _.js = '';
			  ExprGen[$expr.type]($expr, settings);
			  var src = _.js;
			  _.js = savedJs;
			  return src;
			}

			function stmtToJs($stmt, settings) {
			  var savedJs = _.js;
			  _.js = '';
			  StmtGen[$stmt.type]($stmt, settings);
			  var src = _.js;
			  _.js = savedJs;
			  return src;
			}

			function run($node) {
			  _.js = '';
			  if (StmtGen[$node.type]) StmtGen[$node.type]($node, Preset.s7);else ExprGen[$node.type]($node, Preset.e19);
			  return _.js;
			}

			function wrapExprGen(gen) {
			  return function ($expr, settings) {
			    if (extra.verbatim && $expr.hasOwnProperty(extra.verbatim)) generateVerbatim($expr, settings);else gen($expr, settings);
			  };
			}

			function createExprGenWithExtras() {
			  var gens = {};

			  for (var key in ExprRawGen) {
			    if (ExprRawGen.hasOwnProperty(key)) gens[key] = wrapExprGen(ExprRawGen[key]);
			  }

			  return gens;
			} //Strings


			var _ = {
			  js: '',
			  newline: '\n',
			  optSpace: ' ',
			  space: ' ',
			  indentUnit: '    ',
			  indent: ''
			}; //Generators

			var ExprGen = void 0,
			    StmtGen = StmtRawGen;

			exports.generate = function ($node, options) {
			  var defaultOptions = getDefaultOptions(),
			      result,
			      pair;

			  if (options != null) {
			    //NOTE: Obsolete options
			    //
			    //   `options.indent`
			    //   `options.base`
			    //
			    // Instead of them, we can use `option.format.indent`.
			    if (typeof options.indent === 'string') {
			      defaultOptions.format.indent.style = options.indent;
			    }

			    if (typeof options.base === 'number') {
			      defaultOptions.format.indent.base = options.base;
			    }

			    options = updateDeeply(defaultOptions, options);
			    _.indentUnit = options.format.indent.style;

			    if (typeof options.base === 'string') {
			      _.indent = options.base;
			    } else {
			      _.indent = stringRepeat(_.indentUnit, options.format.indent.base);
			    }
			  } else {
			    options = defaultOptions;
			    _.indentUnit = options.format.indent.style;
			    _.indent = stringRepeat(_.indentUnit, options.format.indent.base);
			  }

			  json = options.format.json;
			  renumber = options.format.renumber;
			  hexadecimal = json ? false : options.format.hexadecimal;
			  quotes = json ? 'double' : options.format.quotes;
			  escapeless = options.format.escapeless;
			  _.newline = options.format.newline;
			  _.optSpace = options.format.space;
			  if (options.format.compact) _.newline = _.optSpace = _.indentUnit = _.indent = '';
			  _.space = _.optSpace ? _.optSpace : ' ';
			  parentheses = options.format.parentheses;
			  semicolons = options.format.semicolons;
			  safeConcatenation = options.format.safeConcatenation;
			  directive = options.directive;
			  parse = json ? null : options.parse;
			  extra = options;
			  if (extra.verbatim) ExprGen = createExprGenWithExtras();else ExprGen = ExprRawGen;
			  return run($node);
			};
		}
	},
	"json-hammerhead": {
		":mainpath:": "json.js",
		"json.js": function (exports, module, require) {
			

			// NOTE: json2.js uses fallbacks to the existing JSON implementations. So we can't rely on it in our client code.
			// This is an isolated implementation of JSON that does not rely on any external stuff (prototypes, existing JSON
			// implementations, etc.). The Serialization/deserialization logic is borrowed from http://json.org/json2.js.
			function f(n) {
			  // Format integers to have at least two digits.
			  return n < 10 ? '0' + n : n;
			}

			var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
			var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
			var gap;
			var indent;
			var meta = {
			  // table of character substitutions
			  '\b': '\\b',
			  '\t': '\\t',
			  '\n': '\\n',
			  '\f': '\\f',
			  '\r': '\\r',
			  '"': '\\"',
			  '\\': '\\\\'
			};

			function quote(string) {
			  // If the string contains no control characters, no quote characters, and no
			  // backslash characters, then we can safely slap some quotes around it.
			  // Otherwise we must also replace the offending characters with safe escape
			  // sequences.
			  escapable.lastIndex = 0;
			  return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
			    var c = meta[a];
			    return typeof c === 'string' ? c : "\\u" + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
			  }) + '"' : '"' + string + '"';
			}

			function str(key, holder) {
			  // Produce a string from holder[key].
			  var i,
			      // The loop counter.
			  k,
			      // The member key.
			  v,
			      // The member value.
			  length,
			      mind = gap,
			      partial,
			      value = holder[key]; // If the value has a toJSON method, call it to obtain a replacement value.

			  if (value && typeof value === 'object') {
			    //NOTE: determine exact object type instead of relying on prototype.toJSON like in original json2.js
			    var objToStrValue = Object.prototype.toString.apply(value);

			    if (objToStrValue === '[object String]' || objToStrValue === '[object Number]' || objToStrValue === '[object Boolean]') {
			      value = value.valueOf();
			    } else if (objToStrValue === '[object Date]') {
			      value = isFinite(this.valueOf()) ? this.getUTCFullYear() + '-' + f(this.getUTCMonth() + 1) + '-' + f(this.getUTCDate()) + 'T' + f(this.getUTCHours()) + ':' + f(this.getUTCMinutes()) + ':' + f(this.getUTCSeconds()) + 'Z' : null;
			    }
			  } // What happens next depends on the value's type.


			  switch (typeof value) {
			    case 'string':
			      return quote(value);

			    case 'number':
			      // JSON numbers must be finite. Encode non-finite numbers as null.
			      return isFinite(value) ? String(value) : 'null';

			    case 'boolean':
			    case 'null':
			      // If the value is a boolean or null, convert it to a string. Note:
			      // typeof null does not produce 'null'. The case is included here in
			      // the remote chance that this gets fixed someday.
			      return String(value);
			    // If the type is 'object', we might be dealing with an object or an array or
			    // null.

			    case 'object':
			      // Due to a specification blunder in ECMAScript, typeof null is 'object',
			      // so watch out for that case.
			      if (!value) {
			        return 'null';
			      } // Make an array to hold the partial results of stringifying this object value.


			      gap += indent;
			      partial = []; // Is the value an array?

			      if (Object.prototype.toString.apply(value) === '[object Array]') {
			        // The value is an array. Stringify every element. Use null as a placeholder
			        // for non-JSON values.
			        length = value.length;

			        for (i = 0; i < length; i += 1) {
			          partial[i] = str(i, value) || 'null';
			        } // Join all of the elements together, separated with commas, and wrap them in
			        // brackets.


			        v = partial.length === 0 ? '[]' : gap ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' : '[' + partial.join(',') + ']';
			        gap = mind;
			        return v;
			      } // Iterate through all of the keys in the object.


			      for (k in value) {
			        if (Object.prototype.hasOwnProperty.call(value, k)) {
			          v = str(k, value);

			          if (v) {
			            partial.push(quote(k) + (gap ? ': ' : ':') + v);
			          }
			        }
			      } // Join all of the member texts together, separated with commas,
			      // and wrap them in braces.


			      v = partial.length === 0 ? '{}' : gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' : '{' + partial.join(',') + '}';
			      gap = mind;
			      return v;
			  }
			}

			function isDOMNode(obj) {
			  if (typeof Node === 'object') return obj instanceof Node;
			  return typeof obj.nodeType === 'number' && typeof obj.nodeName === 'string';
			}

			function isJQueryObj(obj) {
			  return !!(obj && obj.jquery);
			} //Exports
			//-------------------------------------------------------------------------------------


			exports.stringify = function (value) {
			  gap = '';
			  indent = ''; // Make a fake root object containing our value under the key of ''.
			  // Return the result of stringifying the value.

			  return str('', {
			    '': value
			  });
			};

			exports.parse = function (text, reviver) {
			  // The parse method takes a text and an optional reviver function, and returns
			  // a JavaScript value if the text is a valid JSON text.
			  var j;

			  function walk(holder, key) {
			    // The walk method is used to recursively walk the resulting structure so
			    // that modifications can be made.
			    var k,
			        v,
			        value = holder[key];

			    if (value && typeof value === 'object') {
			      for (k in value) {
			        if (Object.prototype.hasOwnProperty.call(value, k)) {
			          v = walk(value, k);

			          if (v !== undefined) {
			            value[k] = v;
			          } else {
			            delete value[k];
			          }
			        }
			      }
			    }

			    return reviver.call(holder, key, value);
			  } // Parsing happens in four stages. In the first stage, we replace certain
			  // Unicode characters with escape sequences. JavaScript handles many characters
			  // incorrectly, either silently deleting them, or treating them as line endings.


			  text = String(text);
			  cx.lastIndex = 0;

			  if (cx.test(text)) {
			    text = text.replace(cx, function (a) {
			      return "\\u" + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
			    });
			  } // In the second stage, we run the text against regular expressions that look
			  // for non-JSON patterns. We are especially concerned with '()' and 'new'
			  // because they can cause invocation, and '=' because it can cause mutation.
			  // But just to be safe, we want to reject all unexpected forms.
			  // We split the second stage into 4 regexp operations in order to work around
			  // crippling inefficiencies in IE's and Safari's regexp engines. First we
			  // replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
			  // replace all simple value tokens with ']' characters. Third, we delete all
			  // open brackets that follow a colon or comma or that begin the text. Finally,
			  // we look to see that the remaining characters are only whitespace or ']' or
			  // ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.


			  if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
			    // In the third stage we use the eval function to compile the text into a
			    // JavaScript structure. The '{' operator is subject to a syntactic ambiguity
			    // in JavaScript: it can begin a block or an object literal. We wrap the text
			    // in parens to eliminate the ambiguity.
			    j = eval('(' + text + ')'); // In the optional fourth stage, we recursively walk the new structure, passing
			    // each name/value pair to a reviver function for possible transformation.

			    return typeof reviver === 'function' ? walk({
			      '': j
			    }, '') : j;
			  } // If the text is not JSON parseable, then a SyntaxError is thrown.


			  throw new SyntaxError('JSON.parse');
			};

			exports.isSerializable = function (value) {
			  if (value) {
			    //NOTE: jquery object, DOM nodes and functions are disallowed obj types because we can't serialize them correctly
			    if (typeof value === 'function' || isJQueryObj(value) || isDOMNode(value)) return false;

			    if (typeof value === 'object') {
			      for (var prop in value) {
			        if (value.hasOwnProperty(prop) && !exports.isSerializable(value[prop])) return false;
			      }
			    }
			  }

			  return true;
			};
		}
	},
	"pinkie": {
		"index.js": function (exports, module, require) {
			

			var PENDING = 'pending';
			var SETTLED = 'settled';
			var FULFILLED = 'fulfilled';
			var REJECTED = 'rejected';

			var NOOP = function NOOP() {};

			var isNode = typeof global !== 'undefined' && typeof global.process !== 'undefined' && typeof global.process.emit === 'function';
			var asyncSetTimer = typeof setImmediate === 'undefined' ? setTimeout : setImmediate;
			var asyncQueue = [];
			var asyncTimer;

			function asyncFlush() {
			  // run promise callbacks
			  for (var i = 0; i < asyncQueue.length; i++) {
			    asyncQueue[i][0](asyncQueue[i][1]);
			  } // reset async asyncQueue


			  asyncQueue = [];
			  asyncTimer = false;
			}

			function asyncCall(callback, arg) {
			  asyncQueue.push([callback, arg]);

			  if (!asyncTimer) {
			    asyncTimer = true;
			    asyncSetTimer(asyncFlush, 0);
			  }
			}

			function invokeResolver(resolver, promise) {
			  function resolvePromise(value) {
			    resolve(promise, value);
			  }

			  function rejectPromise(reason) {
			    reject(promise, reason);
			  }

			  try {
			    resolver(resolvePromise, rejectPromise);
			  } catch (e) {
			    rejectPromise(e);
			  }
			}

			function invokeCallback(subscriber) {
			  var owner = subscriber.owner;
			  var settled = owner._state;
			  var value = owner._data;
			  var callback = subscriber[settled];
			  var promise = subscriber.then;

			  if (typeof callback === 'function') {
			    settled = FULFILLED;

			    try {
			      value = callback(value);
			    } catch (e) {
			      reject(promise, e);
			    }
			  }

			  if (!handleThenable(promise, value)) {
			    if (settled === FULFILLED) {
			      resolve(promise, value);
			    }

			    if (settled === REJECTED) {
			      reject(promise, value);
			    }
			  }
			}

			function handleThenable(promise, value) {
			  var resolved;

			  try {
			    if (promise === value) {
			      throw new TypeError('A promises callback cannot return that same promise.');
			    }

			    if (value && (typeof value === 'function' || typeof value === 'object')) {
			      // then should be retrieved only once
			      var then = value.then;

			      if (typeof then === 'function') {
			        then.call(value, function (val) {
			          if (!resolved) {
			            resolved = true;

			            if (value === val) {
			              fulfill(promise, val);
			            } else {
			              resolve(promise, val);
			            }
			          }
			        }, function (reason) {
			          if (!resolved) {
			            resolved = true;
			            reject(promise, reason);
			          }
			        });
			        return true;
			      }
			    }
			  } catch (e) {
			    if (!resolved) {
			      reject(promise, e);
			    }

			    return true;
			  }

			  return false;
			}

			function resolve(promise, value) {
			  if (promise === value || !handleThenable(promise, value)) {
			    fulfill(promise, value);
			  }
			}

			function fulfill(promise, value) {
			  if (promise._state === PENDING) {
			    promise._state = SETTLED;
			    promise._data = value;
			    asyncCall(publishFulfillment, promise);
			  }
			}

			function reject(promise, reason) {
			  if (promise._state === PENDING) {
			    promise._state = SETTLED;
			    promise._data = reason;
			    asyncCall(publishRejection, promise);
			  }
			}

			function publish(promise) {
			  promise._then = promise._then.forEach(invokeCallback);
			}

			function publishFulfillment(promise) {
			  promise._state = FULFILLED;
			  publish(promise);
			}

			function publishRejection(promise) {
			  promise._state = REJECTED;
			  publish(promise);

			  if (!promise._handled && isNode) {
			    global.process.emit('unhandledRejection', promise._data, promise);
			  }
			}

			function notifyRejectionHandled(promise) {
			  global.process.emit('rejectionHandled', promise);
			}
			/**
			 * @class
			 */


			function Promise(resolver) {
			  if (typeof resolver !== 'function') {
			    throw new TypeError('Promise resolver ' + resolver + ' is not a function');
			  }

			  if (this instanceof Promise === false) {
			    throw new TypeError('Failed to construct \'Promise\': Please use the \'new\' operator, this object constructor cannot be called as a function.');
			  }

			  this._then = [];
			  invokeResolver(resolver, this);
			}

			Promise.prototype = {
			  constructor: Promise,
			  _state: PENDING,
			  _then: null,
			  _data: undefined,
			  _handled: false,
			  then: function then(onFulfillment, onRejection) {
			    var subscriber = {
			      owner: this,
			      then: new this.constructor(NOOP),
			      fulfilled: onFulfillment,
			      rejected: onRejection
			    };

			    if ((onRejection || onFulfillment) && !this._handled) {
			      this._handled = true;

			      if (this._state === REJECTED && isNode) {
			        asyncCall(notifyRejectionHandled, this);
			      }
			    }

			    if (this._state === FULFILLED || this._state === REJECTED) {
			      // already resolved, call callback async
			      asyncCall(invokeCallback, subscriber);
			    } else {
			      // subscribe
			      this._then.push(subscriber);
			    }

			    return subscriber.then;
			  },
			  catch: function _catch(onRejection) {
			    return this.then(null, onRejection);
			  }
			};

			Promise.all = function (promises) {
			  if (!Array.isArray(promises)) {
			    throw new TypeError('You must pass an array to Promise.all().');
			  }

			  return new Promise(function (resolve, reject) {
			    var results = [];
			    var remaining = 0;

			    function resolver(index) {
			      remaining++;
			      return function (value) {
			        results[index] = value;

			        if (! --remaining) {
			          resolve(results);
			        }
			      };
			    }

			    for (var i = 0, promise; i < promises.length; i++) {
			      promise = promises[i];

			      if (promise && typeof promise.then === 'function') {
			        promise.then(resolver(i), reject);
			      } else {
			        results[i] = promise;
			      }
			    }

			    if (!remaining) {
			      resolve(results);
			    }
			  });
			};

			Promise.race = function (promises) {
			  if (!Array.isArray(promises)) {
			    throw new TypeError('You must pass an array to Promise.race().');
			  }

			  return new Promise(function (resolve, reject) {
			    for (var i = 0, promise; i < promises.length; i++) {
			      promise = promises[i];

			      if (promise && typeof promise.then === 'function') {
			        promise.then(resolve, reject);
			      } else {
			        resolve(promise);
			      }
			    }
			  });
			};

			Promise.resolve = function (value) {
			  if (value && typeof value === 'object' && value.constructor === Promise) {
			    return value;
			  }

			  return new Promise(function (resolve) {
			    resolve(value);
			  });
			};

			Promise.reject = function (reason) {
			  return new Promise(function (resolve, reject) {
			    reject(reason);
			  });
			};

			module.exports = Promise;
		}
	},
	"testcafe-hammerhead": {
		"src": {
			"client": {
				"dom-processor": {
					"client-dom-adapter.js": function (exports, module, require) {
						

						function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

						function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						var __importStar = void 0 && (void 0).__importStar || function (mod) {
						  if (mod && mod.__esModule) return mod;
						  var result = {};
						  if (mod != null) for (var k in mod) {
						    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
						  }
						  result["default"] = mod;
						  return result;
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var internal_properties_1 = __importDefault(require("../../processing/dom/internal-properties"));

						var base_dom_adapter_1 = __importDefault(require("../../processing/dom/base-dom-adapter"));

						var native_methods_1 = __importDefault(require("../sandbox/native-methods"));

						var destination_location_1 = require("../utils/destination-location");

						var url_1 = require("../utils/url");

						var domUtils = __importStar(require("../utils/dom"));

						var writer_1 = __importDefault(require("../sandbox/node/document/writer"));

						var windows_storage_1 = require("../sandbox/windows-storage");

						var html_1 = require("../utils/html");

						var ClientDomAdapter = /*#__PURE__*/function (_base_dom_adapter_1$d) {
						  _inheritsLoose(ClientDomAdapter, _base_dom_adapter_1$d);

						  function ClientDomAdapter() {
						    var _this;

						    _this = _base_dom_adapter_1$d.apply(this, arguments) || this;
						    _this._srcdocMode = false;
						    return _this;
						  }

						  var _proto = ClientDomAdapter.prototype;

						  _proto.removeAttr = function removeAttr(el, attr) {
						    return native_methods_1.default.removeAttribute.call(el, attr);
						  };

						  _proto.getAttr = function getAttr(el, attr) {
						    return native_methods_1.default.getAttribute.call(el, attr);
						  };

						  _proto.hasAttr = function hasAttr(el, attr) {
						    return el.hasAttribute(attr);
						  };

						  _proto.isSVGElement = function isSVGElement(el) {
						    return domUtils.isSVGElement(el);
						  };

						  _proto.getClassName = function getClassName(el) {
						    return el.className;
						  };

						  _proto.hasEventHandler = function hasEventHandler(el) {
						    var attributes = native_methods_1.default.elementAttributesGetter.call(el);

						    for (var _i2 = 0; _i2 < attributes.length; _i2++) {
						      var attr = attributes[_i2];
						      if (this.EVENTS.indexOf(attr.name) !== -1) return true;
						    }

						    return false;
						  };

						  _proto.getTagName = function getTagName(el) {
						    return domUtils.getTagName(el);
						  };

						  _proto.setAttr = function setAttr(el, attr, value) {
						    return native_methods_1.default.setAttribute.call(el, attr, value);
						  };

						  _proto.setScriptContent = function setScriptContent(script, content) {
						    native_methods_1.default.scriptTextSetter.call(script, content);
						  };

						  _proto.getScriptContent = function getScriptContent(script) {
						    return native_methods_1.default.scriptTextGetter.call(script);
						  };

						  _proto.getStyleContent = function getStyleContent(style) {
						    return native_methods_1.default.elementInnerHTMLGetter.call(style);
						  };

						  _proto.setStyleContent = function setStyleContent(style, content) {
						    native_methods_1.default.elementInnerHTMLSetter.call(style, content);
						  };

						  _proto.needToProcessContent = function needToProcessContent(el) {
						    return !writer_1.default.hasUnclosedElementFlag(el);
						  };

						  _proto.needToProcessUrl = function needToProcessUrl() {
						    return true;
						  };

						  _proto.hasIframeParent = function hasIframeParent(el) {
						    if (this._srcdocMode) return true;

						    try {
						      if (el[internal_properties_1.default.processedContext]) return window.top !== el[internal_properties_1.default.processedContext];
						      return window.top.document !== domUtils.findDocument(el);
						    } catch (e) {
						      return true;
						    }
						  };

						  _proto.getProxyUrl = function getProxyUrl() {
						    return url_1.getProxyUrl.apply(url_1, arguments);
						  };

						  _proto.isTopParentIframe = function isTopParentIframe(el) {
						    var elWindow = el[internal_properties_1.default.processedContext];
						    return elWindow && window.top === elWindow.parent;
						  };

						  _proto.sameOriginCheck = function sameOriginCheck(location, checkedUrl) {
						    return destination_location_1.sameOriginCheck(location, checkedUrl);
						  };

						  _proto.isExistingTarget = function isExistingTarget(target) {
						    return !!windows_storage_1.findByName(target);
						  };

						  _proto.processSrcdocAttr = function processSrcdocAttr(html) {
						    this._srcdocMode = true;
						    var processedHtml = html_1.processHtml(html, {
						      isPage: true
						    });
						    this._srcdocMode = false;
						    return processedHtml;
						  };

						  return ClientDomAdapter;
						}(base_dom_adapter_1.default);

						exports.default = ClientDomAdapter;
						module.exports = exports.default;
					},
					"index.js": function (exports, module, require) {
						

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var client_dom_adapter_1 = __importDefault(require("./client-dom-adapter"));

						var index_1 = __importDefault(require("../../processing/dom/index"));

						exports.default = new index_1.default(new client_dom_adapter_1.default());
						module.exports = exports.default;
					}
				},
				"index.js": function (exports, module, require) {
					

					var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
					  return mod && mod.__esModule ? mod : {
					    "default": mod
					  };
					};

					var __importStar = void 0 && (void 0).__importStar || function (mod) {
					  if (mod && mod.__esModule) return mod;
					  var result = {};
					  if (mod != null) for (var k in mod) {
					    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
					  }
					  result["default"] = mod;
					  return result;
					};

					Object.defineProperty(exports, "__esModule", {
					  value: true
					});

					var pinkie_1 = __importDefault(require("pinkie"));

					var sandbox_1 = __importDefault(require("./sandbox"));

					var event_emitter_1 = __importDefault(require("./utils/event-emitter"));

					var xhr_1 = __importDefault(require("./sandbox/xhr"));

					var settings_1 = __importDefault(require("./settings"));

					var transport_1 = __importDefault(require("./transport"));

					var JSON = __importStar(require("json-hammerhead"));

					var browserUtils = __importStar(require("./utils/browser"));

					var destLocationUtils = __importStar(require("./utils/destination-location"));

					var domUtils = __importStar(require("./utils/dom"));

					var eventUtils = __importStar(require("./utils/event"));

					var typeUtils = __importStar(require("./utils/types"));

					var positionUtils = __importStar(require("./utils/position"));

					var styleUtils = __importStar(require("./utils/style"));

					var string_trim_1 = __importDefault(require("../utils/string-trim"));

					var sharedCookieUtils = __importStar(require("../utils/cookie"));

					var sharedUrlUtils = __importStar(require("../utils/url"));

					var sharedHeadersUtils = __importStar(require("../utils/headers"));

					var sharedStackProcessingUtils = __importStar(require("../utils/stack-processing"));

					var self_removing_scripts_1 = __importDefault(require("../utils/self-removing-scripts"));

					var urlUtils = __importStar(require("./utils/url"));

					var featureDetection = __importStar(require("./utils/feature-detection"));

					var htmlUtils = __importStar(require("./utils/html"));

					var native_methods_1 = __importDefault(require("./sandbox/native-methods"));

					var script_1 = require("../processing/script");

					var header_1 = require("../processing/script/header");

					var style_1 = __importDefault(require("../processing/style"));

					var extend_1 = __importDefault(require("./utils/extend"));

					var internal_properties_1 = __importDefault(require("../processing/dom/internal-properties"));

					var page_navigation_watch_1 = __importDefault(require("./page-navigation-watch"));

					var dom_processor_1 = __importDefault(require("./dom-processor"));

					var Hammerhead = /*#__PURE__*/function () {
					  function Hammerhead() {
					    var _this = this;

					    this.win = null;
					    this.transport = new transport_1.default();
					    this.sandbox = new sandbox_1.default(this.transport);
					    this.pageNavigationWatch = new page_navigation_watch_1.default(this.sandbox.event, this.sandbox.codeInstrumentation, this.sandbox.node.element);
					    this.EVENTS = {
					      beforeFormSubmit: this.sandbox.node.element.BEFORE_FORM_SUBMIT_EVENT,
					      beforeBeforeUnload: this.sandbox.event.unload.BEFORE_BEFORE_UNLOAD_EVENT,
					      beforeUnload: this.sandbox.event.unload.BEFORE_UNLOAD_EVENT,
					      unload: this.sandbox.event.unload.UNLOAD_EVENT,
					      bodyCreated: this.sandbox.node.mutation.BODY_CREATED_EVENT,
					      documentCleaned: this.sandbox.node.mutation.DOCUMENT_CLEANED_EVENT,
					      uncaughtJsError: this.sandbox.node.win.UNCAUGHT_JS_ERROR_EVENT,
					      unhandledRejection: this.sandbox.node.win.UNHANDLED_REJECTION_EVENT,
					      startFileUploading: this.sandbox.upload.START_FILE_UPLOADING_EVENT,
					      endFileUploading: this.sandbox.upload.END_FILE_UPLOADING_EVENT,
					      evalIframeScript: this.sandbox.iframe.EVAL_EXTERNAL_SCRIPT_EVENT,
					      xhrCompleted: this.sandbox.xhr.XHR_COMPLETED_EVENT,
					      xhrError: this.sandbox.xhr.XHR_ERROR_EVENT,
					      beforeXhrSend: this.sandbox.xhr.BEFORE_XHR_SEND_EVENT,
					      fetchSent: this.sandbox.fetch.FETCH_REQUEST_SENT_EVENT,
					      pageNavigationTriggered: this.pageNavigationWatch.PAGE_NAVIGATION_TRIGGERED_EVENT,
					      scriptElementAdded: this.sandbox.node.element.SCRIPT_ELEMENT_ADDED_EVENT,
					      consoleMethCalled: this.sandbox.console.CONSOLE_METH_CALLED_EVENT,
					      windowOpened: this.sandbox.childWindow.WINDOW_OPENED_EVENT
					    };
					    this.PROCESSING_COMMENTS = {
					      stylesheetStart: style_1.default.STYLESHEET_PROCESSING_START_COMMENT,
					      stylesheetEnd: style_1.default.STYLESHEET_PROCESSING_END_COMMENT,
					      scriptStart: header_1.SCRIPT_PROCESSING_START_COMMENT,
					      scriptEndHeader: header_1.SCRIPT_PROCESSING_END_HEADER_COMMENT,
					      scriptEnd: header_1.SCRIPT_PROCESSING_END_COMMENT
					    };
					    this.EventEmitter = event_emitter_1.default; // Methods

					    this.doUpload = function (input, filePaths) {
					      return _this.sandbox.upload.doUpload(input, filePaths);
					    };

					    this.createNativeXHR = xhr_1.default.createNativeXHR;
					    this.processScript = script_1.processScript; // NOTE: We should provide a function to retrieve modules, because hammerhead will be bundled into a single
					    // file and we will not have access to the internal modules by default.
					    // eslint-disable-next-line no-undef

					    this.get = require; // Modules

					    this.Promise = pinkie_1.default;
					    this.json = JSON;
					    this.nativeMethods = this.sandbox.nativeMethods;
					    this.shadowUI = this.sandbox.shadowUI;
					    this.storages = this.sandbox.storageSandbox;
					    this.eventSandbox = {
					      listeners: this.sandbox.event.listeners,
					      hover: this.sandbox.event.hover,
					      focusBlur: this.sandbox.event.focusBlur,
					      elementEditingWatcher: this.sandbox.event.elementEditingWatcher,
					      eventSimulator: this.sandbox.event.eventSimulator,
					      selection: this.sandbox.event.selection,
					      message: this.sandbox.event.message,
					      timers: this.sandbox.event.timers,
					      DataTransfer: this.sandbox.event.DataTransfer,
					      DragDataStore: this.sandbox.event.DragDataStore
					    };
					    this.utils = {
					      browser: browserUtils,
					      dom: domUtils,
					      event: eventUtils,
					      position: positionUtils,
					      style: styleUtils,
					      types: typeUtils,
					      trim: string_trim_1.default,
					      extend: extend_1.default,
					      html: htmlUtils,
					      url: urlUtils,
					      featureDetection: featureDetection,
					      destLocation: destLocationUtils
					    };
					    this.sharedUtils = {
					      cookie: sharedCookieUtils,
					      url: sharedUrlUtils,
					      headers: sharedHeadersUtils,
					      stackProcessing: sharedStackProcessingUtils,
					      selfRemovingScripts: self_removing_scripts_1.default
					    };
					    this.settings = settings_1.default;
					  }

					  var _proto = Hammerhead.prototype;

					  _proto._getEventOwner = function _getEventOwner(evtName) {
					    switch (evtName) {
					      case this.EVENTS.pageNavigationTriggered:
					        return this.pageNavigationWatch;

					      case this.EVENTS.beforeUnload:
					      case this.EVENTS.beforeBeforeUnload:
					      case this.EVENTS.unload:
					        return this.sandbox.event.unload;

					      case this.EVENTS.bodyCreated:
					      case this.EVENTS.documentCleaned:
					        return this.sandbox.node.mutation;

					      case this.EVENTS.uncaughtJsError:
					      case this.EVENTS.unhandledRejection:
					        return this.sandbox.node.win;

					      case this.EVENTS.startFileUploading:
					      case this.EVENTS.endFileUploading:
					        return this.sandbox.upload;

					      case this.EVENTS.evalIframeScript:
					        return this.sandbox.iframe;

					      case this.EVENTS.xhrCompleted:
					      case this.EVENTS.xhrError:
					      case this.EVENTS.beforeXhrSend:
					        return this.sandbox.xhr;

					      case this.EVENTS.beforeFormSubmit:
					      case this.EVENTS.scriptElementAdded:
					        return this.sandbox.node.element;

					      case this.EVENTS.fetchSent:
					        return this.sandbox.fetch;

					      case this.EVENTS.consoleMethCalled:
					        return this.sandbox.console;

					      case this.EVENTS.windowOpened:
					        return this.sandbox.childWindow;

					      default:
					        return null;
					    }
					  };

					  Hammerhead._cleanLocalStorageServiceData = function _cleanLocalStorageServiceData(sessionId, window) {
					    var nativeLocalStorage = native_methods_1.default.winLocalStorageGetter.call(window);
					    native_methods_1.default.storageRemoveItem.call(nativeLocalStorage, sessionId);
					  };

					  _proto.on = function on(evtName, handler) {
					    var eventOwner = this._getEventOwner(evtName);

					    if (eventOwner) eventOwner.on(evtName, handler);
					  };

					  _proto.off = function off(evtName, handler) {
					    var eventOwner = this._getEventOwner(evtName);

					    if (eventOwner) eventOwner.off(evtName, handler);
					  };

					  _proto.navigateTo = function navigateTo(url, forceReload) {
					    var _this2 = this;

					    var navigationUrl = urlUtils.getNavigationUrl(url, this.win);
					    if (!navigationUrl) return; // @ts-ignore

					    this.win.location = navigationUrl;

					    if (forceReload) {
					      this.sandbox.node.win.on(this.sandbox.node.win.HASH_CHANGE_EVENT, function () {
					        _this2.win.location.reload(true);
					      });
					    }
					  };

					  _proto.start = function start(initSettings, win) {
					    this.win = win || window;
					    settings_1.default.set(initSettings);
					    if (initSettings.isFirstPageLoad) Hammerhead._cleanLocalStorageServiceData(initSettings.sessionId, this.win);
					    dom_processor_1.default.forceProxySrcForImage = initSettings.forceProxySrcForImage;
					    dom_processor_1.default.allowMultipleWindows = initSettings.allowMultipleWindows;
					    this.transport.start(this.eventSandbox.message);
					    this.sandbox.attach(this.win);
					    this.pageNavigationWatch.start();
					  };

					  return Hammerhead;
					}();

					var hammerhead = new Hammerhead(); // NOTE: The 'load' event is raised after calling document.close for a same-domain iframe
					// So, we need to define the '%hammerhead%' variable as 'configurable' so that it can be redefined.

					native_methods_1.default.objectDefineProperty(window, internal_properties_1.default.hammerhead, {
					  value: hammerhead,
					  configurable: true
					});
					exports.default = hammerhead;
					module.exports = exports.default;
				},
				"page-navigation-watch.js": function (exports, module, require) {
					

					function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

					function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

					var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
					  return mod && mod.__esModule ? mod : {
					    "default": mod
					  };
					};

					var __importStar = void 0 && (void 0).__importStar || function (mod) {
					  if (mod && mod.__esModule) return mod;
					  var result = {};
					  if (mod != null) for (var k in mod) {
					    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
					  }
					  result["default"] = mod;
					  return result;
					};

					Object.defineProperty(exports, "__esModule", {
					  value: true
					});

					var event_emitter_1 = __importDefault(require("./utils/event-emitter"));

					var url_1 = require("../utils/url");

					var url_2 = require("./utils/url");

					var dom_1 = require("./utils/dom");

					var windowsStorage = __importStar(require("./sandbox/windows-storage"));

					var dom_2 = __importDefault(require("../processing/dom"));

					var next_tick_1 = __importDefault(require("./utils/next-tick"));

					var native_methods_1 = __importDefault(require("./sandbox/native-methods"));

					var internal_properties_1 = __importDefault(require("../processing/dom/internal-properties"));

					var PageNavigationWatch = /*#__PURE__*/function (_event_emitter_1$defa) {
					  _inheritsLoose(PageNavigationWatch, _event_emitter_1$defa);

					  function PageNavigationWatch(_eventSandbox, _codeInstrumentation, _elementSandbox) {
					    var _this;

					    _this = _event_emitter_1$defa.call(this) || this;
					    _this._eventSandbox = _eventSandbox;
					    _this._codeInstrumentation = _codeInstrumentation;
					    _this._elementSandbox = _elementSandbox;
					    _this.PAGE_NAVIGATION_TRIGGERED_EVENT = 'hammerhead|event|page-navigation-triggered';
					    _this._lastLocationValue = window.location.toString();
					    return _this;
					  }

					  var _proto = PageNavigationWatch.prototype;

					  _proto._formWatch = function _formWatch(elementSandbox, eventSandbox) {
					    var onFormSubmit = function onFormSubmit(form) {
					      var targetWindow = PageNavigationWatch._getTargetWindow(form);

					      PageNavigationWatch._onNavigationTriggeredInWindow(targetWindow, native_methods_1.default.formActionGetter.call(form));
					    }; // NOTE: fires when form.submit() is called


					    elementSandbox.on(elementSandbox.BEFORE_FORM_SUBMIT_EVENT, function (e) {
					      return onFormSubmit(e.form);
					    }); // NOTE: fires when the form is submitted by clicking the submit button

					    eventSandbox.listeners.initElementListening(window, ['submit']);
					    eventSandbox.listeners.addInternalEventBeforeListener(window, ['submit'], function (e) {
					      var prevented = false;
					      if (!dom_1.isFormElement(e.target)) return;

					      var onPreventDefault = function onPreventDefault(preventedEvent) {
					        prevented = prevented || preventedEvent === e;
					      };

					      eventSandbox.on(eventSandbox.EVENT_PREVENTED_EVENT, onPreventDefault);
					      next_tick_1.default().then(function () {
					        eventSandbox.off(eventSandbox.EVENT_PREVENTED_EVENT, onPreventDefault); // NOTE: the defaultPrevented flag is saved between event raises in all browsers
					        // except IE. In IE, it is reset to false before the next handler is executed.

					        if (!e.defaultPrevented && !prevented) onFormSubmit(e.target);
					      });
					    });
					  };

					  PageNavigationWatch._getTargetWindow = function _getTargetWindow(el) {
					    var target = native_methods_1.default.getAttribute.call(el, dom_2.default.getStoredAttrName('target')) || native_methods_1.default.getAttribute.call(el, 'target') || '_self';

					    switch (target) {
					      case '_top':
					        return window.top;

					      case '_parent':
					        return window.parent;

					      case '_self':
					        return window;

					      default:
					        return windowsStorage.findByName(target);
					    }
					  };

					  _proto._linkWatch = function _linkWatch(eventSandbox) {
					    eventSandbox.listeners.initElementListening(window, ['click']);
					    eventSandbox.listeners.addInternalEventBeforeListener(window, ['click'], function (e) {
					      var link = dom_1.isAnchorElement(e.target) ? e.target : dom_1.closest(e.target, 'a');

					      if (link && !dom_1.isShadowUIElement(link)) {
					        var prevented = false;

					        var targetWindow = PageNavigationWatch._getTargetWindow(link);

					        var href = native_methods_1.default.anchorHrefGetter.call(link);

					        var onPreventDefault = function onPreventDefault(preventedEvent) {
					          prevented = prevented || preventedEvent === e;
					        };

					        eventSandbox.on(eventSandbox.EVENT_PREVENTED_EVENT, onPreventDefault);
					        next_tick_1.default().then(function () {
					          eventSandbox.off(eventSandbox.EVENT_PREVENTED_EVENT, onPreventDefault); // NOTE: the defaultPrevented flag is saved between event raises in all browsers
					          // except IE. In IE, it is reset to false before the next handler is executed.

					          if (!e.defaultPrevented && !prevented) PageNavigationWatch._onNavigationTriggeredInWindow(targetWindow, href);
					        });
					      }
					    });
					  };

					  _proto._locationWatch = function _locationWatch(codeInstrumentation) {
					    var _this2 = this;

					    var locationAccessorsInstrumentation = codeInstrumentation._locationAccessorsInstrumentation;

					    var locationChangedHandler = function locationChangedHandler(newLocation) {
					      return _this2.onNavigationTriggered(newLocation);
					    };

					    locationAccessorsInstrumentation.on(locationAccessorsInstrumentation.LOCATION_CHANGED_EVENT, locationChangedHandler);
					  };

					  PageNavigationWatch._onNavigationTriggeredInWindow = function _onNavigationTriggeredInWindow(win, url) {
					    try {
					      win[internal_properties_1.default.hammerhead].pageNavigationWatch.onNavigationTriggered(url);
					    } // eslint-disable-next-line no-empty
					    catch (e) {}
					  };

					  _proto.onNavigationTriggered = function onNavigationTriggered(url) {
					    var currentLocation = this._lastLocationValue;
					    this._lastLocationValue = window.location.toString();
					    if (url !== currentLocation && (url.charAt(0) === '#' || url_2.isChangedOnlyHash(currentLocation, url)) || dom_2.default.isJsProtocol(url)) return;
					    var parsedProxyUrl = url_1.parseProxyUrl(url);
					    if (!parsedProxyUrl) return;
					    this.emit(this.PAGE_NAVIGATION_TRIGGERED_EVENT, parsedProxyUrl.destUrl);
					  };

					  _proto.start = function start() {
					    this._locationWatch(this._codeInstrumentation);

					    this._linkWatch(this._eventSandbox);

					    this._formWatch(this._elementSandbox, this._eventSandbox);
					  };

					  return PageNavigationWatch;
					}(event_emitter_1.default);

					exports.default = PageNavigationWatch;
					module.exports = exports.default;
				},
				"sandbox": {
					"backup.js": function (exports, module, require) {
						

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var dom_1 = require("../utils/dom");

						var native_methods_1 = __importDefault(require("./native-methods"));

						var SANDBOX_BACKUP = 'hammerhead|sandbox-backup';

						function findRecord(storage, iframe) {
						  for (var i = storage.length - 1; i >= 0; i--) {
						    try {
						      if (storage[i].iframe === iframe) return storage[i];
						    } catch (e) {
						      storage.splice(i, 1);
						    }
						  }

						  return void 0;
						}

						function create(window, sandbox) {
						  var topSameDomainWindow = dom_1.getTopSameDomainWindow(window);
						  var iframe = window !== topSameDomainWindow ? dom_1.getFrameElement(window) : null;
						  var storage = topSameDomainWindow[SANDBOX_BACKUP];

						  if (!storage) {
						    storage = [];
						    native_methods_1.default.objectDefineProperty(topSameDomainWindow, SANDBOX_BACKUP, {
						      value: storage
						    });
						  }

						  var record = findRecord(storage, iframe);
						  if (record) record.sandbox = sandbox;else storage.push({
						    iframe: iframe,
						    sandbox: sandbox
						  });
						}

						exports.create = create;

						function get(window) {
						  var topSameDomainWindow = dom_1.getTopSameDomainWindow(window);
						  var storage = topSameDomainWindow[SANDBOX_BACKUP];
						  var iframe = window !== topSameDomainWindow ? window.frameElement : null;

						  if (storage) {
						    var record = findRecord(storage, iframe);
						    return record ? record.sandbox : null;
						  }

						  return null;
						}

						exports.get = get;
					},
					"base.js": function (exports, module, require) {
						

						function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

						function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var event_emitter_1 = __importDefault(require("../utils/event-emitter"));

						var native_methods_1 = __importDefault(require("./native-methods"));

						var dom_1 = require("../utils/dom");

						var internal_properties_1 = __importDefault(require("../../processing/dom/internal-properties"));

						var SandboxBase = /*#__PURE__*/function (_event_emitter_1$defa) {
						  _inheritsLoose(SandboxBase, _event_emitter_1$defa);

						  function SandboxBase() {
						    var _this;

						    _this = _event_emitter_1$defa.apply(this, arguments) || this;
						    _this.window = null;
						    _this.nativeMethods = native_methods_1.default;
						    _this.document = null;
						    return _this;
						  } // NOTE: The sandbox is deactivated when its window is removed from the DOM.


						  var _proto = SandboxBase.prototype;

						  _proto.isDeactivated = function isDeactivated() {
						    try {
						      // NOTE: In IE11, a situation when the document is not active may occur.
						      // eslint-disable-next-line no-unused-expressions
						      this.document.body;

						      if (this.window[internal_properties_1.default.hammerhead]) {
						        var frameElement = dom_1.getFrameElement(this.window);
						        return !!frameElement && !dom_1.isElementInDocument(frameElement, dom_1.findDocument(frameElement));
						      }
						    } catch (e) {// eslint-disable-line no-empty
						    }

						    return true;
						  };

						  _proto.attach = function attach(window, document) {
						    this.window = window;
						    this.document = document || window.document;
						  };

						  return SandboxBase;
						}(event_emitter_1.default);

						exports.default = SandboxBase;
						module.exports = exports.default;
					},
					"child-window": {
						"default-target.js": function (exports, module, require) {
							

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});
							var DefaultTarget;

							(function (DefaultTarget) {
							  DefaultTarget["form"] = "_self";
							  DefaultTarget["linkOrArea"] = "_self";
							  DefaultTarget["windowOpen"] = "_blank";
							})(DefaultTarget || (DefaultTarget = {}));

							exports.default = DefaultTarget;
							module.exports = exports.default;
						},
						"index.js": function (exports, module, require) {
							

							function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

							function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							var __importStar = void 0 && (void 0).__importStar || function (mod) {
							  if (mod && mod.__esModule) return mod;
							  var result = {};
							  if (mod != null) for (var k in mod) {
							    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
							  }
							  result["default"] = mod;
							  return result;
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var base_1 = __importDefault(require("../base"));

							var settings_1 = __importDefault(require("../../settings"));

							var native_methods_1 = __importDefault(require("../native-methods"));

							var windowsStorage = __importStar(require("../windows-storage"));

							var get_random_int_16_value_1 = __importDefault(require("../../utils/get-random-int-16-value"));

							var domUtils = __importStar(require("../../utils/dom"));

							var urlUtils = __importStar(require("../../utils/url"));

							var url_1 = require("../../../utils/url");

							var default_target_1 = __importDefault(require("./default-target"));

							var is_keyword_target_1 = __importDefault(require("../../../utils/is-keyword-target"));

							var internal_properties_1 = __importDefault(require("../../../processing/dom/internal-properties"));

							var get_top_opener_window_1 = __importDefault(require("../../utils/get-top-opener-window"));

							var dom_1 = require("../../utils/dom");

							var DEFAULT_WINDOW_PARAMETERS = 'width=500px, height=500px';
							var STORE_CHILD_WINDOW_CMD = 'hammerhead|command|store-child-window';

							var ChildWindowSandbox = /*#__PURE__*/function (_base_1$default) {
							  _inheritsLoose(ChildWindowSandbox, _base_1$default);

							  function ChildWindowSandbox(_messageSandbox, _listeners) {
							    var _this;

							    _this = _base_1$default.call(this) || this;
							    _this._messageSandbox = _messageSandbox;
							    _this._listeners = _listeners;
							    _this.WINDOW_OPENED_EVENT = 'hammerhead|event|window-opened';
							    return _this;
							  }

							  ChildWindowSandbox._shouldOpenInNewWindowOnElementAction = function _shouldOpenInNewWindowOnElementAction(el, defaultTarget) {
							    var target = this._calculateTargetForElement(el);

							    return this._shouldOpenInNewWindow(target, defaultTarget);
							  };

							  ChildWindowSandbox._shouldOpenInNewWindow = function _shouldOpenInNewWindow(target, defaultTarget) {
							    target = target || defaultTarget;
							    target = target.toLowerCase();
							    if (is_keyword_target_1.default(target)) return target === '_blank';
							    return !windowsStorage.findByName(target);
							  };

							  var _proto = ChildWindowSandbox.prototype;

							  _proto._openUrlInNewWindow = function _openUrlInNewWindow(url, windowName, windowParams, window) {
							    var windowId = get_random_int_16_value_1.default().toString();
							    windowParams = windowParams || DEFAULT_WINDOW_PARAMETERS;
							    windowName = windowName || windowId;
							    var newPageUrl = urlUtils.getPageProxyUrl(url, windowId);
							    var targetWindow = window || this.window;
							    var openedWindow = native_methods_1.default.windowOpen.call(targetWindow, newPageUrl, windowName, windowParams);

							    this._tryToStoreChildWindow(openedWindow, get_top_opener_window_1.default());

							    this.emit(this.WINDOW_OPENED_EVENT, {
							      windowId: windowId,
							      window: openedWindow
							    });
							    return {
							      windowId: windowId,
							      wnd: openedWindow
							    };
							  };

							  ChildWindowSandbox._calculateTargetForElement = function _calculateTargetForElement(el) {
							    var _a;

							    var base = native_methods_1.default.querySelector.call(domUtils.findDocument(el), 'base');
							    return el.target || ((_a = base) === null || _a === void 0 ? void 0 : _a.target);
							  };

							  _proto.handleClickOnLinkOrArea = function handleClickOnLinkOrArea(el) {
							    var _this2 = this;

							    if (!settings_1.default.get().allowMultipleWindows) return;

							    this._listeners.initElementListening(el, ['click']);

							    this._listeners.addInternalEventAfterListener(el, ['click'], function (e) {
							      if (e.defaultPrevented) return;
							      if (!ChildWindowSandbox._shouldOpenInNewWindowOnElementAction(el, default_target_1.default.linkOrArea)) return; // TODO: need to check that specified 'area' are clickable (initiated new page opening)

							      var url = native_methods_1.default.anchorHrefGetter.call(el);
							      e.preventDefault();

							      _this2._openUrlInNewWindow(url);
							    });
							  };

							  _proto.handleWindowOpen = function handleWindowOpen(window, args) {
							    var url = args[0],
							        target = args[1],
							        parameters = args[2];

							    if (settings_1.default.get().allowMultipleWindows && ChildWindowSandbox._shouldOpenInNewWindow(target, default_target_1.default.windowOpen)) {
							      var openedWindowInfo = this._openUrlInNewWindow(url, target, parameters, window);

							      return openedWindowInfo.wnd;
							    }

							    return native_methods_1.default.windowOpen.apply(window, args);
							  };

							  _proto._handleFormSubmitting = function _handleFormSubmitting(window) {
							    var _this3 = this;

							    if (!settings_1.default.get().allowMultipleWindows) return;

							    this._listeners.initElementListening(window, ['submit']);

							    this._listeners.addInternalEventBeforeListener(window, ['submit'], function (e) {
							      if (!domUtils.isFormElement(e.target)) return;
							      var form = e.target;
							      if (!ChildWindowSandbox._shouldOpenInNewWindowOnElementAction(form, default_target_1.default.form)) return;
							      var aboutBlankUrl = urlUtils.getProxyUrl(url_1.SPECIAL_BLANK_PAGE);

							      var openedInfo = _this3._openUrlInNewWindow(aboutBlankUrl);

							      var formAction = native_methods_1.default.formActionGetter.call(form);
							      var newWindowUrl = urlUtils.getPageProxyUrl(formAction, openedInfo.windowId);
							      native_methods_1.default.formActionSetter.call(form, newWindowUrl);
							      native_methods_1.default.formTargetSetter.call(form, openedInfo.windowId); // TODO: On hammerhead start we need to clean up the window.name
							      // It's necessary for form submit.
							      // Also we need clean up the form target to the original value.
							    });
							  };

							  _proto._tryToStoreChildWindow = function _tryToStoreChildWindow(win, topOpenerWindow) {
							    try {
							      topOpenerWindow[internal_properties_1.default.hammerhead].sandbox.childWindow.addWindow(win);
							      return true;
							    } catch (e) {
							      return false;
							    }
							  };

							  _proto._setupChildWindowCollecting = function _setupChildWindowCollecting(window) {
							    var _this4 = this;

							    if (dom_1.isIframeWindow(window)) return;
							    var topOpenerWindow = get_top_opener_window_1.default();

							    if (window !== topOpenerWindow) {
							      if (!this._tryToStoreChildWindow(window, topOpenerWindow)) this._messageSandbox.sendServiceMsg({
							        cmd: STORE_CHILD_WINDOW_CMD
							      }, topOpenerWindow);
							    } else {
							      this._childWindows = new Set();

							      this._messageSandbox.on(this._messageSandbox.SERVICE_MSG_RECEIVED_EVENT, function (_ref) {
							        var message = _ref.message,
							            source = _ref.source;
							        if (message.cmd === STORE_CHILD_WINDOW_CMD) _this4._childWindows.add(source);
							      });
							    }
							  };

							  _proto.addWindow = function addWindow(win) {
							    this._childWindows.add(win);
							  };

							  _proto.getChildWindows = function getChildWindows() {
							    var _this5 = this;

							    var childWindows = []; // eslint-disable-next-line hammerhead/proto-methods

							    this._childWindows.forEach(function (win) {
							      // NOTE: sort windows that can be closed
							      if (win.parent) childWindows.push(win);else _this5._childWindows.delete(win);
							    });

							    return childWindows;
							  };

							  _proto.attach = function attach(window) {
							    _base_1$default.prototype.attach.call(this, window, window.document);

							    this._handleFormSubmitting(window);

							    this._setupChildWindowCollecting(window);
							  };

							  return ChildWindowSandbox;
							}(base_1.default);

							exports.default = ChildWindowSandbox;
							module.exports = exports.default;
						}
					},
					"code-instrumentation": {
						"index.js": function (exports, module, require) {
							

							function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

							function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var base_1 = __importDefault(require("../base"));

							var properties_1 = __importDefault(require("./properties"));

							var location_1 = __importDefault(require("./location"));

							var methods_1 = __importDefault(require("./methods"));

							var script_1 = require("../../../processing/script");

							var instruction_1 = __importDefault(require("../../../processing/script/instruction"));

							var native_methods_1 = __importDefault(require("../../sandbox/native-methods"));

							var html_1 = require("../../utils/html");

							var url_1 = require("../../utils/url");

							var url_resolver_1 = __importDefault(require("../../utils/url-resolver"));

							var CodeInstrumentation = /*#__PURE__*/function (_base_1$default) {
							  _inheritsLoose(CodeInstrumentation, _base_1$default);

							  function CodeInstrumentation(eventSandbox, messageSandbox) {
							    var _this;

							    _this = _base_1$default.call(this) || this;
							    _this._methodCallInstrumentation = new methods_1.default(eventSandbox.message);
							    _this._locationAccessorsInstrumentation = new location_1.default(messageSandbox);
							    _this._propertyAccessorsInstrumentation = new properties_1.default();
							    return _this;
							  }

							  var _proto = CodeInstrumentation.prototype;

							  _proto.attach = function attach(window) {
							    var _this2 = this;

							    _base_1$default.prototype.attach.call(this, window);

							    this._methodCallInstrumentation.attach(window);

							    this._locationAccessorsInstrumentation.attach(window);

							    this.elementPropertyAccessors = this._propertyAccessorsInstrumentation.attach(window); // NOTE: In Google Chrome, iframes whose src contains html code raise the 'load' event twice.
							    // So, we need to define code instrumentation functions as 'configurable' so that they can be redefined.
							    // NOTE: GH-260

							    native_methods_1.default.objectDefineProperty(window, instruction_1.default.getEval, {
							      value: function value(evalFn) {
							        if (evalFn !== window.eval) return evalFn;

							        var evalWrapper = function evalWrapper(script) {
							          if (typeof script === 'string') script = script_1.processScript(script);
							          return evalFn(script);
							        };

							        native_methods_1.default.objectDefineProperty(evalWrapper, CodeInstrumentation.WRAPPED_EVAL_FN, {
							          value: evalFn
							        });
							        return evalWrapper;
							      },
							      configurable: true
							    });
							    native_methods_1.default.objectDefineProperty(window, instruction_1.default.processScript, {
							      value: function value(script, isApply) {
							        if (isApply) {
							          if (script && script.length && typeof script[0] === 'string') {
							            var args = [script_1.processScript(script[0], false)]; // NOTE: shallow-copy the remaining args. Don't use arr.slice(),
							            // since it may leak the arguments object.
							            // See: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/arguments

							            for (var i = 1; i < script.length; i++) {
							              args.push(script[i]);
							            }

							            return args;
							          }
							        } else if (typeof script === 'string') return script_1.processScript(script, false);

							        return script;
							      },
							      configurable: true
							    });
							    native_methods_1.default.objectDefineProperty(window, instruction_1.default.processHtml, {
							      value: function value(win, html) {
							        if (typeof html === 'string') html = html_1.processHtml("<html><body>" + html + "</body></html>", {
							          processedContext: win
							        });
							        return html;
							      },
							      configurable: true
							    });
							    native_methods_1.default.objectDefineProperty(window, instruction_1.default.getProxyUrl, {
							      value: function value(url, baseUrl) {
							        var storedBaseUrl = url_resolver_1.default.getBaseUrl(_this2.document);
							        var shouldChangeBase = baseUrl && baseUrl !== storedBaseUrl;
							        if (shouldChangeBase) url_resolver_1.default.updateBase(baseUrl, _this2.document);
							        var proxyUrl = url_1.getProxyUrl(url, {
							          resourceType: url_1.stringifyResourceType({
							            isScript: true
							          })
							        });
							        if (shouldChangeBase) url_resolver_1.default.updateBase(storedBaseUrl, _this2.document);
							        return proxyUrl;
							      },
							      configurable: true
							    });
							    native_methods_1.default.objectDefineProperty(window, instruction_1.default.restArray, {
							      value: function value(array, startIndex) {
							        return native_methods_1.default.arraySlice.call(array, startIndex);
							      },
							      configurable: true
							    });
							    native_methods_1.default.objectDefineProperty(window, instruction_1.default.restObject, {
							      value: function value(obj, excludeProps) {
							        var rest = {};
							        var keys = native_methods_1.default.objectKeys(obj);

							        for (var _i2 = 0; _i2 < keys.length; _i2++) {
							          var key = keys[_i2];
							          if (excludeProps.indexOf(key) < 0) rest[key] = obj[key];
							        }

							        return rest;
							      },
							      configurable: true
							    });
							  };

							  return CodeInstrumentation;
							}(base_1.default);

							exports.default = CodeInstrumentation;
							CodeInstrumentation.WRAPPED_EVAL_FN = 'hammerhead|code-instrumentation|wrapped-eval-fn';
							module.exports = exports.default;
						},
						"location": {
							"ancestor-origins-wrapper.js": function (exports, module, require) {
								

								function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

								function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

								function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

								function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

								function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

								var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
								  return mod && mod.__esModule ? mod : {
								    "default": mod
								  };
								};

								Object.defineProperty(exports, "__esModule", {
								  value: true
								});

								var native_methods_1 = __importDefault(require("../../native-methods"));

								var index_1 = __importDefault(require("./index"));

								var overriding_1 = require("../../../utils/overriding");

								var lengthWeakMap = new WeakMap();

								function updateOrigin(ancestorOrigins, wrapper, index, origin) {
								  var descriptor = overriding_1.createOverriddenDescriptor(ancestorOrigins, index, {
								    value: origin
								  });
								  native_methods_1.default.objectDefineProperty(wrapper, index, descriptor);
								}

								var DOMStringListInheritor = function DOMStringListInheritor() {};

								DOMStringListInheritor.prototype = DOMStringList.prototype;

								var DOMStringListWrapper = /*#__PURE__*/function (_DOMStringListInherit) {
								  _inheritsLoose(DOMStringListWrapper, _DOMStringListInherit);

								  function DOMStringListWrapper(window, getCrossDomainOrigin) {
								    var _this;

								    _this = _DOMStringListInherit.call(this) || this;
								    var nativeOrigins = window.location.ancestorOrigins;
								    var length = nativeOrigins.length;
								    var parentWindow = window.parent;
								    lengthWeakMap.set(_assertThisInitialized(_this), length);

								    var _loop = function _loop(i) {
								      var parentLocationWrapper = index_1.default.getLocationWrapper(parentWindow);
								      var isCrossDomainParent = parentLocationWrapper === parentWindow.location; // eslint-disable-next-line no-restricted-properties

								      updateOrigin(nativeOrigins, _assertThisInitialized(_this), i.toString(), isCrossDomainParent ? '' : parentLocationWrapper.origin);
								      if (isCrossDomainParent && getCrossDomainOrigin) //@ts-ignore
								        getCrossDomainOrigin(parentWindow, function (origin) {
								          return updateOrigin(nativeOrigins, _assertThisInitialized(_this), i, origin);
								        });
								      parentWindow = parentWindow.parent;
								    };

								    for (var i = 0; i < length; i++) {
								      _loop(i);
								    }

								    return _this;
								  }

								  var _proto = DOMStringListWrapper.prototype;

								  _proto.item = function item(index) {
								    return this[index];
								  };

								  _proto.contains = function contains(origin) {
								    if (typeof origin !== 'string') origin = String(origin);
								    var length = lengthWeakMap.get(this) || 0;

								    for (var i = 0; i < length; i++) {
								      if (this[i] === origin) return true;
								    }

								    return false;
								  };

								  _createClass(DOMStringListWrapper, [{
								    key: "length",
								    get: function get() {
								      return lengthWeakMap.get(this);
								    }
								  }]);

								  return DOMStringListWrapper;
								}(DOMStringListInheritor);

								exports.default = DOMStringListWrapper;
								module.exports = exports.default;
							},
							"index.js": function (exports, module, require) {
								

								function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

								function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

								var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
								  return mod && mod.__esModule ? mod : {
								    "default": mod
								  };
								};

								Object.defineProperty(exports, "__esModule", {
								  value: true
								});

								var wrapper_1 = __importDefault(require("./wrapper"));

								var base_1 = __importDefault(require("../../base"));

								var dom_1 = require("../../../utils/dom");

								var instruction_1 = __importDefault(require("../../../../processing/script/instruction"));

								var native_methods_1 = __importDefault(require("../../native-methods"));

								var browser_1 = require("../../../utils/browser");

								var LOCATION_WRAPPER = 'hammerhead|location-wrapper';

								var LocationAccessorsInstrumentation = /*#__PURE__*/function (_base_1$default) {
								  _inheritsLoose(LocationAccessorsInstrumentation, _base_1$default);

								  function LocationAccessorsInstrumentation(_messageSandbox) {
								    var _this;

								    _this = _base_1$default.call(this) || this;
								    _this._messageSandbox = _messageSandbox;
								    _this.LOCATION_CHANGED_EVENT = 'hammerhead|event|location-changed';

								    _this._locationChangedEventCallback = function (e) {
								      return _this.emit(_this.LOCATION_CHANGED_EVENT, e);
								    };

								    return _this;
								  }

								  LocationAccessorsInstrumentation.isLocationWrapper = function isLocationWrapper(obj) {
								    return obj instanceof wrapper_1.default;
								  };

								  LocationAccessorsInstrumentation.getLocationWrapper = function getLocationWrapper(owner) {
								    // NOTE: IE11 case. We can get cross-domain location wrapper without any exceptions.
								    // We return owner.location in this case, as in other browsers.
								    if (browser_1.isIE && dom_1.isCrossDomainWindows(window, owner)) return owner.location; // NOTE: When the owner is cross-domain, we cannot get its location wrapper, so we return the original
								    // location, which cannot be accessed but behaves like a real one. Cross-domain location retains the 'replace'
								    // and 'assign' methods, so we intercept calls to them through MethodCallInstrumentation.

								    try {
								      return owner[LOCATION_WRAPPER];
								    } catch (e) {
								      return owner.location;
								    }
								  };

								  var _proto = LocationAccessorsInstrumentation.prototype;

								  _proto.attach = function attach(window) {
								    _base_1$default.prototype.attach.call(this, window);

								    var document = window.document;
								    var locationWrapper = new wrapper_1.default(window, this._messageSandbox, this._locationChangedEventCallback); // NOTE: In Google Chrome, iframes whose src contains html code raise the 'load' event twice.
								    // So, we need to define code instrumentation functions as 'configurable' so that they can be redefined.

								    native_methods_1.default.objectDefineProperty(window, LOCATION_WRAPPER, {
								      value: locationWrapper,
								      configurable: true
								    });
								    native_methods_1.default.objectDefineProperty(document, LOCATION_WRAPPER, {
								      value: locationWrapper,
								      configurable: true
								    });
								    native_methods_1.default.objectDefineProperty(window, instruction_1.default.getLocation, {
								      value: function value(location) {
								        return dom_1.isLocation(location) ? locationWrapper : location;
								      },
								      configurable: true
								    });
								    native_methods_1.default.objectDefineProperty(window, instruction_1.default.setLocation, {
								      value: function value(location, _value) {
								        if (dom_1.isLocation(location) && typeof _value === 'string') {
								          // @ts-ignore
								          locationWrapper.href = _value; // eslint-disable-line no-restricted-properties

								          return _value;
								        }

								        return null;
								      },
								      configurable: true
								    });
								  };

								  return LocationAccessorsInstrumentation;
								}(base_1.default);

								exports.default = LocationAccessorsInstrumentation;
								module.exports = exports.default;
							},
							"wrapper.js": function (exports, module, require) {
								

								function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

								function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

								function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

								var __importStar = void 0 && (void 0).__importStar || function (mod) {
								  if (mod && mod.__esModule) return mod;
								  var result = {};
								  if (mod != null) for (var k in mod) {
								    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
								  }
								  result["default"] = mod;
								  return result;
								};

								var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
								  return mod && mod.__esModule ? mod : {
								    "default": mod
								  };
								};

								Object.defineProperty(exports, "__esModule", {
								  value: true
								});

								var destination_location_1 = require("../../../utils/destination-location");

								var url_1 = require("../../../utils/url");

								var url_2 = require("../../../../utils/url");

								var domUtils = __importStar(require("../../../utils/dom"));

								var native_methods_1 = __importDefault(require("../../native-methods"));

								var url_resolver_1 = __importDefault(require("../../../utils/url-resolver"));

								var dom_1 = __importDefault(require("../../../../processing/dom"));

								var ancestor_origins_wrapper_1 = __importDefault(require("./ancestor-origins-wrapper"));

								var integer_id_generator_1 = __importDefault(require("../../../utils/integer-id-generator"));

								var overriding_1 = require("../../../utils/overriding");

								var dom_2 = require("../../../utils/dom");

								var GET_ORIGIN_CMD = 'hammerhead|command|get-origin';
								var ORIGIN_RECEIVED_CMD = 'hammerhead|command|origin-received';

								function getLocationUrl(window) {
								  try {
								    return window.location.toString();
								  } catch (e) {
								    return void 0;
								  }
								}

								var LocationInheritor = function LocationInheritor() {};

								LocationInheritor.prototype = Location.prototype;

								var LocationWrapper = /*#__PURE__*/function (_LocationInheritor) {
								  _inheritsLoose(LocationWrapper, _LocationInheritor);

								  function LocationWrapper(window, messageSandbox, onChanged) {
								    var _this;

								    _this = _LocationInheritor.call(this) || this;
								    var parsedLocation = url_1.parseProxyUrl(getLocationUrl(window));
								    var locationResourceType = parsedLocation ? parsedLocation.resourceType : '';
								    var parsedResourceType = url_1.parseResourceType(locationResourceType); // @ts-ignore

								    var isLocationPropsInProto = native_methods_1.default.objectHasOwnProperty.call(window.Location.prototype, 'href'); // @ts-ignore

								    var locationPropsOwner = isLocationPropsInProto ? window.Location.prototype : window.location;
								    var locationProps = {};
								    parsedResourceType.isIframe = parsedResourceType.isIframe || dom_2.isIframeWindow(window);
								    var resourceType = url_2.getResourceTypeString({
								      isIframe: parsedResourceType.isIframe,
								      isForm: parsedResourceType.isForm
								    });

								    var getHref = function getHref() {
								      // eslint-disable-next-line no-restricted-properties
								      if (dom_2.isIframeWindow(window) && window.location.href === url_2.SPECIAL_BLANK_PAGE) return url_2.SPECIAL_BLANK_PAGE;
								      var locationUrl = destination_location_1.get();
								      var resolveElement = url_resolver_1.default.getResolverElement(window.document);
								      native_methods_1.default.anchorHrefSetter.call(resolveElement, locationUrl);
								      var href = native_methods_1.default.anchorHrefGetter.call(resolveElement);
								      return url_2.ensureTrailingSlash(href, locationUrl);
								    };

								    var getProxiedHref = function getProxiedHref(href) {
								      if (typeof href !== 'string') href = String(href);
								      href = url_2.prepareUrl(href);
								      if (dom_1.default.isJsProtocol(href)) return dom_1.default.processJsAttrValue(href, {
								        isJsProtocol: true,
								        isEventAttr: false
								      });
								      var locationUrl = getLocationUrl(window);
								      var proxyPort = null;

								      if (window !== window.parent) {
								        var parentLocationUrl = getLocationUrl(window.parent);
								        var parsedParentLocationUrl = url_1.parseProxyUrl(parentLocationUrl);

								        if (parsedParentLocationUrl && parsedParentLocationUrl.proxy) {
								          // eslint-disable-next-line no-restricted-properties
								          var parentProxyPort = parsedParentLocationUrl.proxy.port;
								          proxyPort = url_2.sameOriginCheck(parentLocationUrl, href) ? parentProxyPort : url_1.getCrossDomainProxyPort(parentProxyPort);
								        }
								      }

								      var changedOnlyHash = locationUrl && url_1.isChangedOnlyHash(locationUrl, href);
								      var currentResourceType = changedOnlyHash ? locationResourceType : resourceType;
								      return url_1.getProxyUrl(href, {
								        resourceType: currentResourceType,
								        proxyPort: proxyPort
								      });
								    }; // eslint-disable-next-line no-restricted-properties


								    locationProps.href = overriding_1.createOverriddenDescriptor(locationPropsOwner, 'href', {
								      getter: getHref,
								      setter: function setter(href) {
								        var proxiedHref = getProxiedHref(href); // eslint-disable-next-line no-restricted-properties

								        window.location.href = proxiedHref;
								        onChanged(proxiedHref);
								        return href;
								      }
								    }); // eslint-disable-next-line no-restricted-properties

								    locationProps.search = overriding_1.createOverriddenDescriptor(locationPropsOwner, 'search', {
								      // eslint-disable-next-line no-restricted-properties
								      getter: function getter() {
								        return window.location.search;
								      },
								      setter: function setter(search) {
								        var newLocation = url_1.changeDestUrlPart(window.location.toString(), native_methods_1.default.anchorSearchSetter, search, resourceType); // @ts-ignore

								        window.location = newLocation;
								        onChanged(newLocation);
								        return search;
								      }
								    }); // eslint-disable-next-line no-restricted-properties

								    locationProps.origin = overriding_1.createOverriddenDescriptor(locationPropsOwner, 'origin', {
								      getter: function getter() {
								        return url_2.getDomain(destination_location_1.getParsed());
								      },
								      setter: function setter(origin) {
								        return origin;
								      }
								    });
								    locationProps.hash = overriding_1.createOverriddenDescriptor(locationPropsOwner, 'hash', {
								      getter: function getter() {
								        return window.location.hash;
								      },
								      setter: function setter(hash) {
								        window.location.hash = hash;
								        return hash;
								      }
								    });

								    if (window.location.ancestorOrigins) {
								      var callbacks = native_methods_1.default.objectCreate(null);
								      var idGenerator = new integer_id_generator_1.default();

								      var getCrossDomainOrigin = function getCrossDomainOrigin(win, callback) {
								        var id = idGenerator.increment();
								        callbacks[id] = callback;
								        messageSandbox.sendServiceMsg({
								          id: id,
								          cmd: GET_ORIGIN_CMD
								        }, win);
								      };

								      if (messageSandbox) {
								        messageSandbox.on(messageSandbox.SERVICE_MSG_RECEIVED_EVENT, function (_ref) {
								          var message = _ref.message,
								              source = _ref.source;

								          if (message.cmd === GET_ORIGIN_CMD) {
								            // @ts-ignore
								            messageSandbox.sendServiceMsg({
								              id: message.id,
								              cmd: ORIGIN_RECEIVED_CMD,
								              origin: _this.origin
								            }, source); // eslint-disable-line no-restricted-properties
								          } else if (message.cmd === ORIGIN_RECEIVED_CMD) {
								            var callback = callbacks[message.id];
								            if (callback) callback(message.origin); // eslint-disable-line no-restricted-properties
								          }
								        });
								      }

								      var ancestorOrigins = new ancestor_origins_wrapper_1.default(window, messageSandbox ? getCrossDomainOrigin : void 0);
								      locationProps.ancestorOrigins = overriding_1.createOverriddenDescriptor(locationPropsOwner, 'ancestorOrigins', {
								        getter: function getter() {
								          return ancestorOrigins;
								        }
								      });
								    }

								    var createLocationPropertyDesc = function createLocationPropertyDesc(property, nativePropSetter) {
								      locationProps[property] = overriding_1.createOverriddenDescriptor(locationPropsOwner, property, {
								        getter: function getter() {
								          var frameElement = domUtils.getFrameElement(window);
								          var inIframeWithoutSrc = frameElement && domUtils.isIframeWithoutSrc(frameElement);
								          var parsedDestLocation = inIframeWithoutSrc ? window.location : destination_location_1.getParsed();
								          return parsedDestLocation[property];
								        },
								        setter: function setter(value) {
								          var newLocation = url_1.changeDestUrlPart(window.location.toString(), nativePropSetter, value, resourceType); // @ts-ignore

								          window.location = newLocation;
								          onChanged(newLocation);
								          return value;
								        }
								      });
								    };

								    createLocationPropertyDesc('port', native_methods_1.default.anchorPortSetter);
								    createLocationPropertyDesc('host', native_methods_1.default.anchorHostSetter);
								    createLocationPropertyDesc('hostname', native_methods_1.default.anchorHostnameSetter);
								    createLocationPropertyDesc('pathname', native_methods_1.default.anchorPathnameSetter);
								    createLocationPropertyDesc('protocol', native_methods_1.default.anchorProtocolSetter);
								    locationProps.assign = overriding_1.createOverriddenDescriptor(locationPropsOwner, 'assign', {
								      value: function value(url) {
								        var proxiedHref = getProxiedHref(url);
								        var result = window.location.assign(proxiedHref);
								        onChanged(proxiedHref);
								        return result;
								      }
								    });
								    locationProps.replace = overriding_1.createOverriddenDescriptor(locationPropsOwner, 'replace', {
								      value: function value(url) {
								        var proxiedHref = getProxiedHref(url);
								        var result = window.location.replace(proxiedHref);
								        onChanged(proxiedHref);
								        return result;
								      }
								    });
								    locationProps.reload = overriding_1.createOverriddenDescriptor(locationPropsOwner, 'reload', {
								      value: function value(forcedReload) {
								        var result = window.location.reload(forcedReload);
								        onChanged(window.location.toString());
								        return result;
								      }
								    });
								    locationProps.toString = overriding_1.createOverriddenDescriptor(locationPropsOwner, 'toString', {
								      value: getHref
								    });
								    if (!isLocationPropsInProto && native_methods_1.default.objectHasOwnProperty.call(window.location, 'valueOf')) locationProps.valueOf = overriding_1.createOverriddenDescriptor(locationPropsOwner, 'valueOf', {
								      value: function value() {
								        return _assertThisInitialized(_this);
								      }
								    });
								    native_methods_1.default.objectDefineProperties(_assertThisInitialized(_this), locationProps);
								    return _this;
								  }

								  return LocationWrapper;
								}(LocationInheritor);

								exports.default = LocationWrapper; // NOTE: window.Location in IE11 is object

								if (typeof Location !== 'function') LocationWrapper.toString = function () {
								  return Location.toString();
								};else overriding_1.overrideStringRepresentation(LocationWrapper, Location);
								module.exports = exports.default;
							}
						},
						"methods.js": function (exports, module, require) {
							

							function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

							function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							var __importStar = void 0 && (void 0).__importStar || function (mod) {
							  if (mod && mod.__esModule) return mod;
							  var result = {};
							  if (mod != null) for (var k in mod) {
							    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
							  }
							  result["default"] = mod;
							  return result;
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var base_1 = __importDefault(require("../base"));

							var instruction_1 = __importDefault(require("../../../processing/script/instruction"));

							var instrumented_1 = require("../../../processing/script/instrumented");

							var dom_1 = require("../../utils/dom");

							var fast_apply_1 = __importDefault(require("../../utils/fast-apply"));

							var typeUtils = __importStar(require("../../utils/types"));

							var url_1 = require("../../utils/url");

							var native_methods_1 = __importDefault(require("../native-methods"));

							var MethodCallInstrumentation = /*#__PURE__*/function (_base_1$default) {
							  _inheritsLoose(MethodCallInstrumentation, _base_1$default);

							  function MethodCallInstrumentation(_messageSandbox) {
							    var _this;

							    _this = _base_1$default.call(this) || this;
							    _this._messageSandbox = _messageSandbox;
							    _this.methodWrappers = {
							      postMessage: {
							        condition: dom_1.isWindow,
							        method: function method(contentWindow, args) {
							          return _messageSandbox.postMessage(contentWindow, args);
							        }
							      },
							      // NOTE: We cannot get the location wrapper for a cross-domain window. Therefore, we need to
							      // intercept calls to the native 'replace' method.
							      replace: {
							        condition: dom_1.isLocation,
							        method: function method(location, args) {
							          return location.replace(url_1.getProxyUrl(args[0], {
							            resourceType: MethodCallInstrumentation._getLocationResourceType(location)
							          }));
							        }
							      },
							      // NOTE: We cannot get the location wrapper for a cross-domain window. Therefore, we need to
							      // intercept calls to the native 'assign' method.
							      assign: {
							        condition: dom_1.isLocation,
							        method: function method(location, args) {
							          return location.assign(url_1.getProxyUrl(args[0], {
							            resourceType: MethodCallInstrumentation._getLocationResourceType(location)
							          }));
							        }
							      }
							    };
							    return _this;
							  } // NOTE: Isolate throw statement into a separate function because JS engine doesn't optimize such functions.


							  MethodCallInstrumentation._error = function _error(msg) {
							    throw new Error(msg);
							  };

							  MethodCallInstrumentation._getLocationResourceType = function _getLocationResourceType(location) {
							    return window.top.location === location ? null : url_1.stringifyResourceType({
							      isIframe: true
							    });
							  };

							  MethodCallInstrumentation._isPostMessageFn = function _isPostMessageFn(win, fn) {
							    // NOTE: in iOS Safari 9.3 win.postMessage === win.postMessage equals false
							    if (win.postMessage === win.postMessage) return win.postMessage === fn;
							    return fn && typeof fn.toString === 'function' && fn.toString() === win.postMessage.toString();
							  };

							  var _proto = MethodCallInstrumentation.prototype;

							  _proto.attach = function attach(window) {
							    var _this2 = this;

							    _base_1$default.prototype.attach.call(this, window); // NOTE: In Google Chrome, iframes whose src contains html code raise the 'load' event twice.
							    // So, we need to define code instrumentation functions as 'configurable' so that they can be redefined.


							    native_methods_1.default.objectDefineProperty(window, instruction_1.default.callMethod, {
							      value: function value(owner, methName, args) {
							        if (typeUtils.isNullOrUndefined(owner)) MethodCallInstrumentation._error("Cannot call method '" + methName + "' of " + typeUtils.inaccessibleTypeToStr(owner));
							        if (typeof owner[methName] !== 'function') MethodCallInstrumentation._error("'" + methName + "' is not a function"); // OPTIMIZATION: previously we've performed the
							        // `this.methodWrappers.hasOwnProperty(methName)`
							        // check which is quite slow. Now we use the
							        // fast RegExp check instead.

							        if (typeof methName === 'string' && instrumented_1.shouldInstrumentMethod(methName) && _this2.methodWrappers[methName].condition(owner)) return _this2.methodWrappers[methName].method(owner, args);
							        return fast_apply_1.default(owner, methName, args);
							      },
							      configurable: true
							    });
							    var methodCallInstrumentation = this;
							    native_methods_1.default.objectDefineProperty(window, instruction_1.default.getPostMessage, {
							      value: function value(win, postMessageFn) {
							        if (arguments.length === 1 && !dom_1.isWindow(win)) {
							          // @ts-ignore
							          return win.postMessage;
							        }

							        if (arguments.length === 2 && !MethodCallInstrumentation._isPostMessageFn(this, postMessageFn)) return postMessageFn;
							        return function () {
							          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
							            args[_key] = arguments[_key];
							          }

							          //@ts-ignore
							          return methodCallInstrumentation._messageSandbox.postMessage(this, args);
							        };
							      },
							      configurable: true
							    });
							  };

							  return MethodCallInstrumentation;
							}(base_1.default);

							exports.default = MethodCallInstrumentation;
							module.exports = exports.default;
						},
						"properties": {
							"anchor.js": function (exports, module, require) {
								

								var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
								  return mod && mod.__esModule ? mod : {
								    "default": mod
								  };
								};

								Object.defineProperty(exports, "__esModule", {
								  value: true
								});

								var url_1 = require("../../../utils/url");

								var native_methods_1 = __importDefault(require("../../native-methods"));

								var anchor = native_methods_1.default.createElement.call(document, 'a');
								var emptyAnchor = native_methods_1.default.createElement.call(document, 'a');

								function getAnchorProperty(el, nativePropGetter) {
								  var href = native_methods_1.default.anchorHrefGetter.call(el);
								  if (!anchor) reattach();

								  if (href) {
								    native_methods_1.default.anchorHrefSetter.call(anchor, url_1.getDestinationUrl(href));
								    return nativePropGetter.call(anchor);
								  }

								  return nativePropGetter.call(emptyAnchor);
								}

								exports.getAnchorProperty = getAnchorProperty;

								function setAnchorProperty(el, nativePropSetter, value) {
								  var href = native_methods_1.default.anchorHrefGetter.call(el);
								  if (!anchor) reattach();

								  if (href) {
								    native_methods_1.default.anchorHrefSetter.call(anchor, url_1.getDestinationUrl(href));
								    nativePropSetter.call(anchor, value);
								    el.setAttribute('href', native_methods_1.default.anchorHrefGetter.call(anchor));
								  }

								  return value;
								}

								exports.setAnchorProperty = setAnchorProperty;

								function reattach() {
								  anchor = native_methods_1.default.createElement.call(document, 'a');
								  emptyAnchor = native_methods_1.default.createElement.call(document, 'a');
								}

								exports.reattach = reattach;

								function dispose() {
								  anchor = null;
								  emptyAnchor = null;
								}

								exports.dispose = dispose;
							},
							"index.js": function (exports, module, require) {
								

								function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

								function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

								var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
								  return mod && mod.__esModule ? mod : {
								    "default": mod
								  };
								};

								var __importStar = void 0 && (void 0).__importStar || function (mod) {
								  if (mod && mod.__esModule) return mod;
								  var result = {};
								  if (mod != null) for (var k in mod) {
								    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
								  }
								  result["default"] = mod;
								  return result;
								};

								Object.defineProperty(exports, "__esModule", {
								  value: true
								});

								var internal_properties_1 = __importDefault(require("../../../../processing/dom/internal-properties"));

								var location_1 = __importDefault(require("../location"));

								var wrapper_1 = __importDefault(require("../location/wrapper"));

								var base_1 = __importDefault(require("../../base"));

								var domUtils = __importStar(require("../../../utils/dom"));

								var typeUtils = __importStar(require("../../../utils/types"));

								var urlUtils = __importStar(require("../../../utils/url"));

								var url_1 = require("../../../../utils/url");

								var instruction_1 = __importDefault(require("../../../../processing/script/instruction"));

								var instrumented_1 = require("../../../../processing/script/instrumented");

								var native_methods_1 = __importDefault(require("../../native-methods"));

								var dom_1 = __importDefault(require("../../../../processing/dom"));

								var settings_1 = __importDefault(require("../../../settings"));

								var browser_1 = require("../../../utils/browser");

								var window_1 = __importDefault(require("../../node/window"));

								var shadow_ui_1 = __importDefault(require("../../shadow-ui"));

								var noop_1 = __importDefault(require("../../../utils/noop"));

								var PropertyAccessorsInstrumentation = /*#__PURE__*/function (_base_1$default) {
								  _inheritsLoose(PropertyAccessorsInstrumentation, _base_1$default);

								  function PropertyAccessorsInstrumentation() {
								    return _base_1$default.apply(this, arguments) || this;
								  }

								  // NOTE: Isolate throw statements into a separate function because the
								  // JS engine doesn't optimize such functions.
								  PropertyAccessorsInstrumentation._error = function _error(msg) {
								    throw new Error(msg);
								  };

								  PropertyAccessorsInstrumentation._safeIsShadowUIElement = function _safeIsShadowUIElement(owner, propName) {
								    var el = owner[propName];
								    if (!el || !shadow_ui_1.default.isShadowContainerCollection(owner)) return false;

								    try {
								      return !window_1.default.isProxyObject(el) && domUtils.isShadowUIElement(el);
								    } catch (e) {
								      return false;
								    }
								  };

								  PropertyAccessorsInstrumentation._setCrossDomainLocation = function _setCrossDomainLocation(location, value) {
								    var proxyUrl = '';
								    if (typeof value !== 'string') value = String(value);

								    if (!dom_1.default.isJsProtocol(value)) {
								      var resourceType = urlUtils.stringifyResourceType({
								        isIframe: true
								      });
								      value = url_1.prepareUrl(value);
								      proxyUrl = location !== window.top.location ? urlUtils.getProxyUrl(value, {
								        resourceType: resourceType
								      }) : urlUtils.getProxyUrl(value, {
								        proxyPort: settings_1.default.get().crossDomainProxyPort
								      });
								    } else proxyUrl = dom_1.default.processJsAttrValue(value, {
								      isJsProtocol: true,
								      isEventAttr: false
								    });

								    location.href = proxyUrl; // eslint-disable-line no-restricted-properties

								    return value;
								  };

								  var _proto = PropertyAccessorsInstrumentation.prototype;

								  _proto._createPropertyAccessors = function _createPropertyAccessors() {
								    return {
								      href: {
								        condition: domUtils.isLocation,
								        // eslint-disable-next-line no-restricted-properties
								        get: function get(crossDomainLocation) {
								          return crossDomainLocation.href;
								        },
								        set: PropertyAccessorsInstrumentation._setCrossDomainLocation
								      },
								      location: {
								        condition: function condition(owner) {
								          return domUtils.isDocument(owner) || domUtils.isWindow(owner);
								        },
								        get: function get(owner) {
								          var locationWrapper = location_1.default.getLocationWrapper(owner);
								          if (locationWrapper) return locationWrapper;else if (!owner.location) return owner.location;
								          var wnd = domUtils.isWindow(owner) ? owner : owner.defaultView;
								          return new wrapper_1.default(wnd, null, noop_1.default);
								        },
								        set: function set(owner, location) {
								          //@ts-ignore
								          var ownerWindow = domUtils.isWindow(owner) ? owner : owner.defaultView;
								          var locationWrapper = location_1.default.getLocationWrapper(ownerWindow);
								          if (!locationWrapper || locationWrapper === owner.location || browser_1.isIE && domUtils.isCrossDomainWindows(window, ownerWindow)) PropertyAccessorsInstrumentation._setCrossDomainLocation(owner.location, location);else if (locationWrapper) locationWrapper.href = location; // eslint-disable-line no-restricted-properties

								          return location;
								        }
								      }
								    };
								  };

								  PropertyAccessorsInstrumentation._getSetPropertyInstructionByOwner = function _getSetPropertyInstructionByOwner(owner, window) {
								    try {
								      return owner && owner[internal_properties_1.default.processedContext] && owner[internal_properties_1.default.processedContext] !== window && owner[internal_properties_1.default.processedContext][instruction_1.default.setProperty];
								    } catch (e) {
								      return null;
								    }
								  };

								  _proto.attach = function attach(window) {
								    _base_1$default.prototype.attach.call(this, window);

								    var accessors = this._createPropertyAccessors(); // NOTE: In Google Chrome, iframes whose src contains html code raise the 'load' event twice.
								    // So, we need to define code instrumentation functions as 'configurable' so that they can be redefined.


								    native_methods_1.default.objectDefineProperty(window, instruction_1.default.getProperty, {
								      value: function value(owner, propName) {
								        if (typeUtils.isNullOrUndefined(owner)) PropertyAccessorsInstrumentation._error("Cannot read property '" + propName + "' of " + typeUtils.inaccessibleTypeToStr(owner));
								        if (window_1.default.isProxyObject(owner)) return owner[propName];
								        if (typeof propName === 'string' && instrumented_1.shouldInstrumentProperty(propName) && accessors[propName].condition(owner)) return accessors[propName].get(owner);
								        if (PropertyAccessorsInstrumentation._safeIsShadowUIElement(owner, propName)) return void 0;
								        return owner[propName];
								      },
								      configurable: true
								    });
								    native_methods_1.default.objectDefineProperty(window, instruction_1.default.setProperty, {
								      value: function value(owner, propName, _value) {
								        if (typeUtils.isNullOrUndefined(owner)) PropertyAccessorsInstrumentation._error("Cannot set property '" + propName + "' of " + typeUtils.inaccessibleTypeToStr(owner));
								        if (window_1.default.isProxyObject(owner)) return owner[propName] = _value; // eslint-disable-line no-return-assign

								        var ownerSetPropertyInstruction = PropertyAccessorsInstrumentation._getSetPropertyInstructionByOwner(owner, window);

								        if (ownerSetPropertyInstruction) return ownerSetPropertyInstruction(owner, propName, _value);
								        if (typeof propName === 'string' && instrumented_1.shouldInstrumentProperty(propName) && accessors[propName].condition(owner)) return accessors[propName].set(owner, _value);
								        return owner[propName] = _value; // eslint-disable-line no-return-assign
								      },
								      configurable: true
								    });
								    return accessors;
								  };

								  return PropertyAccessorsInstrumentation;
								}(base_1.default);

								exports.default = PropertyAccessorsInstrumentation;
								module.exports = exports.default;
							}
						}
					},
					"console.js": function (exports, module, require) {
						

						function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

						function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var base_1 = __importDefault(require("./base"));

						var dom_1 = require("../utils/dom");

						var native_methods_1 = __importDefault(require("../sandbox/native-methods"));

						var overriding_1 = require("../utils/overriding");

						var ConsoleSandbox = /*#__PURE__*/function (_base_1$default) {
						  _inheritsLoose(ConsoleSandbox, _base_1$default);

						  function ConsoleSandbox(_messageSandbox) {
						    var _this;

						    _this = _base_1$default.call(this) || this;
						    _this._messageSandbox = _messageSandbox;
						    _this.CONSOLE_METH_CALLED_EVENT = 'hammerhead|event|console-meth-called';

						    _this._serviceMsgReceivedEventCallback = function (_ref) {
						      var message = _ref.message;
						      if (message.cmd === _this.CONSOLE_METH_CALLED_EVENT) _this.emit(_this.CONSOLE_METH_CALLED_EVENT, {
						        meth: message.meth,
						        line: message.line
						      });
						    };

						    return _this;
						  }

						  var _proto = ConsoleSandbox.prototype;

						  _proto._toString = function _toString(obj) {
						    try {
						      return String(obj);
						    } catch (e) {
						      return 'object';
						    }
						  };

						  _proto._proxyConsoleMeth = function _proxyConsoleMeth(meth) {
						    var _this2 = this;

						    overriding_1.overrideFunction(this.window.console, meth, function () {
						      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
						        args[_key] = arguments[_key];
						      }

						      if (!dom_1.isCrossDomainWindows(window, window.top)) {
						        var sendToTopWindow = dom_1.isIframeWindow(window);
						        var line = native_methods_1.default.arrayMap.call(args, _this2._toString).join(' ');

						        if (sendToTopWindow) {
						          _this2.emit(_this2.CONSOLE_METH_CALLED_EVENT, {
						            meth: meth,
						            line: line,
						            inIframe: true
						          });

						          _this2._messageSandbox.sendServiceMsg({
						            meth: meth,
						            line: line,
						            cmd: _this2.CONSOLE_METH_CALLED_EVENT
						          }, window.top);
						        } else _this2.emit(_this2.CONSOLE_METH_CALLED_EVENT, {
						          meth: meth,
						          line: line
						        });
						      }

						      _this2.nativeMethods.consoleMeths[meth].apply(_this2.nativeMethods.console, args);
						    });
						  };

						  _proto.attach = function attach(window) {
						    _base_1$default.prototype.attach.call(this, window);

						    this._proxyConsoleMeth('log');

						    this._proxyConsoleMeth('info');

						    this._proxyConsoleMeth('error');

						    this._proxyConsoleMeth('warn');

						    this._messageSandbox.on(this._messageSandbox.SERVICE_MSG_RECEIVED_EVENT, this._serviceMsgReceivedEventCallback);
						  };

						  return ConsoleSandbox;
						}(base_1.default);

						exports.default = ConsoleSandbox;
						module.exports = exports.default;
					},
					"cookie": {
						"index.js": function (exports, module, require) {
							

							function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

							function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

							function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							var __importStar = void 0 && (void 0).__importStar || function (mod) {
							  if (mod && mod.__esModule) return mod;
							  var result = {};
							  if (mod != null) for (var k in mod) {
							    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
							  }
							  result["default"] = mod;
							  return result;
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var base_1 = __importDefault(require("../base"));

							var settings_1 = __importDefault(require("../../settings"));

							var window_sync_1 = __importDefault(require("./window-sync"));

							var destLocation = __importStar(require("../../utils/destination-location"));

							var cookieUtils = __importStar(require("../../utils/cookie"));

							var string_trim_1 = __importDefault(require("../../../utils/string-trim"));

							var cookie_limit_1 = __importDefault(require("../../../session/cookie-limit"));

							var native_methods_1 = __importDefault(require("../../sandbox/native-methods"));

							var cookie_1 = require("../../../utils/cookie");

							var get_top_opener_window_1 = __importDefault(require("../../utils/get-top-opener-window"));

							var MIN_DATE_VALUE = new native_methods_1.default.date(0).toUTCString();

							var CookieSandbox = /*#__PURE__*/function (_base_1$default) {
							  _inheritsLoose(CookieSandbox, _base_1$default);

							  function CookieSandbox(messageSandbox, _unloadSandbox, childWindowSandbox) {
							    var _this;

							    _this = _base_1$default.call(this) || this;
							    _this._unloadSandbox = _unloadSandbox;
							    _this._windowSync = new window_sync_1.default(_assertThisInitialized(_this), messageSandbox, childWindowSandbox);
							    return _this;
							  }

							  CookieSandbox._removeAllSyncCookie = function _removeAllSyncCookie() {
							    var cookies = native_methods_1.default.documentCookieGetter.call(document);
							    var parsedCookies = cookie_1.parseClientSyncCookieStr(cookies);
							    var sessionId = settings_1.default.get().sessionId;

							    for (var _i2 = 0, _parsedCookies$outdat2 = parsedCookies.outdated; _i2 < _parsedCookies$outdat2.length; _i2++) {
							      var outdatedCookie = _parsedCookies$outdat2[_i2];
							      native_methods_1.default.documentCookieSetter.call(document, cookie_1.generateDeleteSyncCookieStr(outdatedCookie));
							    }

							    for (var _i4 = 0, _parsedCookies$actual2 = parsedCookies.actual; _i4 < _parsedCookies$actual2.length; _i4++) {
							      var parsedCookie = _parsedCookies$actual2[_i4];

							      if (parsedCookie.sid === sessionId && (parsedCookie.isWindowSync || parsedCookie.isServerSync)) {
							        native_methods_1.default.documentCookieSetter.call(document, cookie_1.generateDeleteSyncCookieStr(parsedCookie));

							        if (parsedCookie.isClientSync) {
							          cookie_1.changeSyncType(parsedCookie, {
							            window: false
							          });
							          native_methods_1.default.documentCookieSetter.call(document, cookie_1.formatSyncCookie(parsedCookie));
							        }
							      }
							    }
							  };

							  var _proto = CookieSandbox.prototype;

							  _proto._canSetCookie = function _canSetCookie(cookie, setByClient) {
							    // eslint-disable-next-line no-restricted-properties
							    if (setByClient && (cookie.length > cookie_limit_1.default || destLocation.getParsed().protocol === 'file:')) return false;
							    var clientCookie = "key" + native_methods_1.default.mathRandom.call(native_methods_1.default.math) + "=value";
							    native_methods_1.default.documentCookieSetter.call(this.document, clientCookie);
							    var documentCookieIsEmpty = !native_methods_1.default.documentCookieGetter.call(this.document);
							    if (!documentCookieIsEmpty) native_methods_1.default.documentCookieSetter.call(this.document, clientCookie + ";expires=" + MIN_DATE_VALUE);
							    return !documentCookieIsEmpty;
							  };

							  CookieSandbox._updateClientCookieStr = function _updateClientCookieStr(cookieKey, newCookieStr) {
							    var cookieStr = settings_1.default.get().cookie; // eslint-disable-line no-restricted-properties

							    var cookies = cookieStr ? cookieStr.split(';') : [];
							    var changedCookies = [];
							    var replaced = false;
							    var searchStr = cookieKey === '' ? null : cookieKey + '='; // NOTE: Replace a cookie if it already exists.

							    for (var _i6 = 0; _i6 < cookies.length; _i6++) {
							      var cookie = cookies[_i6];
							      cookie = string_trim_1.default(cookie);
							      var isCookieExists = searchStr ? cookie.indexOf(searchStr) === 0 : cookie.indexOf('=') === -1;
							      if (!isCookieExists) changedCookies.push(cookie);else if (newCookieStr !== null) {
							        changedCookies.push(newCookieStr);
							        replaced = true;
							      }
							    }

							    if (!replaced && newCookieStr !== null) changedCookies.push(newCookieStr);
							    settings_1.default.get().cookie = changedCookies.join('; '); // eslint-disable-line no-restricted-properties
							  };

							  _proto.getCookie = function getCookie() {
							    this.syncCookie(); // eslint-disable-next-line no-restricted-properties

							    return settings_1.default.get().cookie || '';
							  };

							  _proto.setCookie = function setCookie(cookie) {
							    var setByClient = typeof cookie === 'string'; // NOTE: Cookie cannot be set in iframe without src in IE
							    // Also cookie cannot be set on a page with 'file:' protocol
							    // or if the length of cookie higher than limit

							    if (!this._canSetCookie(cookie, setByClient)) return;
							    var parsedCookie = setByClient ? cookieUtils.parse(cookie) : cookie;
							    if (!parsedCookie || parsedCookie.httpOnly) return;
							    var parsedDestLocation = destLocation.getParsed(); // NOTE: All Hammerhad sessions have the same domain, so we need to validate the Domain attribute manually
							    // according to a test url.
							    // eslint-disable-next-line no-restricted-properties

							    if (!cookieUtils.domainMatch(parsedDestLocation.hostname, parsedCookie.domain)) return; // eslint-disable-next-line no-restricted-properties

							    if ((!parsedCookie.secure || parsedDestLocation.protocol === 'https:') && // eslint-disable-next-line no-restricted-properties
							    cookieUtils.pathMatch(parsedDestLocation.pathname, parsedCookie.path)) {
							      var currentDate = cookieUtils.getUTCDate();
							      var clientCookieStr = null;
							      if (!parsedCookie.expires || parsedCookie.expires === 'Infinity' || parsedCookie.expires > currentDate) clientCookieStr = cookieUtils.formatClientString(parsedCookie);

							      CookieSandbox._updateClientCookieStr(parsedCookie.key, clientCookieStr);
							    }

							    if (setByClient) {
							      cookieUtils.setDefaultValues(parsedCookie, parsedDestLocation);

							      this._syncClientCookie(parsedCookie);

							      this.syncCookie();
							    }
							  };

							  _proto.syncCookie = function syncCookie() {
							    var cookies = native_methods_1.default.documentCookieGetter.call(this.document);
							    var parsedCookies = cookie_1.parseClientSyncCookieStr(cookies);
							    var sessionId = settings_1.default.get().sessionId;
							    var serverSyncCookies = [];

							    for (var _i8 = 0, _parsedCookies$outdat4 = parsedCookies.outdated; _i8 < _parsedCookies$outdat4.length; _i8++) {
							      var outdatedCookie = _parsedCookies$outdat4[_i8];
							      native_methods_1.default.documentCookieSetter.call(this.document, cookie_1.generateDeleteSyncCookieStr(outdatedCookie));
							    }

							    for (var _i10 = 0, _parsedCookies$actual4 = parsedCookies.actual; _i10 < _parsedCookies$actual4.length; _i10++) {
							      var parsedCookie = _parsedCookies$actual4[_i10];
							      if (parsedCookie.sid !== sessionId) continue;
							      if (parsedCookie.isServerSync) serverSyncCookies.push(parsedCookie);else if (parsedCookie.isWindowSync) this.setCookie(parsedCookie);
							    }

							    if (serverSyncCookies.length) this._syncServerCookie(serverSyncCookies);
							  };

							  _proto._syncServerCookie = function _syncServerCookie(parsedCookies) {
							    for (var _i12 = 0; _i12 < parsedCookies.length; _i12++) {
							      var parsedCookie = parsedCookies[_i12];
							      this.setCookie(parsedCookie);
							      native_methods_1.default.documentCookieSetter.call(this.document, cookie_1.generateDeleteSyncCookieStr(parsedCookie));
							      cookie_1.changeSyncType(parsedCookie, {
							        server: false,
							        window: true
							      });
							      native_methods_1.default.documentCookieSetter.call(this.document, cookie_1.formatSyncCookie(parsedCookie));
							    }

							    this._windowSync.syncBetweenWindows(parsedCookies);
							  };

							  _proto._syncClientCookie = function _syncClientCookie(parsedCookie) {
							    parsedCookie.isClientSync = true;
							    parsedCookie.isWindowSync = true;
							    parsedCookie.sid = settings_1.default.get().sessionId;
							    parsedCookie.lastAccessed = new native_methods_1.default.date();
							    cookie_1.prepareSyncCookieProperties(parsedCookie);
							    native_methods_1.default.documentCookieSetter.call(this.document, cookie_1.formatSyncCookie(parsedCookie));

							    this._windowSync.syncBetweenWindows([parsedCookie]);
							  };

							  CookieSandbox.isSyncCookieExists = function isSyncCookieExists(parsedCookie, clientCookieStr) {
							    var startIndex = clientCookieStr.indexOf(parsedCookie.cookieStr);
							    var endIndex = startIndex + parsedCookie.cookieStr.length;
							    return startIndex > -1 && (clientCookieStr.length === endIndex || clientCookieStr.charAt(endIndex) === ';');
							  };

							  _proto.syncWindowCookie = function syncWindowCookie(parsedCookies) {
							    var clientCookie = native_methods_1.default.documentCookieGetter.call(this.document);

							    for (var _i14 = 0; _i14 < parsedCookies.length; _i14++) {
							      var parsedCookie = parsedCookies[_i14];
							      if (CookieSandbox.isSyncCookieExists(parsedCookie, clientCookie)) this.setCookie(parsedCookie);
							    }
							  };

							  _proto.getWindowSync = function getWindowSync() {
							    return this._windowSync;
							  };

							  _proto.attach = function attach(window) {
							    _base_1$default.prototype.attach.call(this, window);

							    this._windowSync.attach(window);

							    if (window === get_top_opener_window_1.default()) this._unloadSandbox.on(this._unloadSandbox.UNLOAD_EVENT, CookieSandbox._removeAllSyncCookie);
							  };

							  return CookieSandbox;
							}(base_1.default);

							exports.default = CookieSandbox;
							module.exports = exports.default;
						},
						"window-sync.js": function (exports, module, require) {
							

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var index_1 = __importDefault(require("./index"));

							var pinkie_1 = __importDefault(require("pinkie"));

							var internal_properties_1 = __importDefault(require("../../../processing/dom/internal-properties"));

							var integer_id_generator_1 = __importDefault(require("../../utils/integer-id-generator"));

							var native_methods_1 = __importDefault(require("../native-methods"));

							var cookie_1 = require("../../../utils/cookie");

							var get_top_opener_window_1 = __importDefault(require("../../utils/get-top-opener-window"));

							var SYNC_COOKIE_START_CMD = 'hammerhead|command|sync-cookie-start';
							var SYNC_COOKIE_DONE_CMD = 'hammerhead|command|sync-cookie-done';
							var SYNC_MESSAGE_TIMEOUT = 500;
							var SYNC_MESSAGE_ATTEMPT_COUNT = 5;

							var WindowSync = /*#__PURE__*/function () {
							  function WindowSync(_cookieSandbox, _messageSandbox, _childWindowSandbox) {
							    this._cookieSandbox = _cookieSandbox;
							    this._messageSandbox = _messageSandbox;
							    this._childWindowSandbox = _childWindowSandbox;
							    this._win = null;
							    this._messageIdGenerator = null;
							    this._resolversMap = new Map();
							  }

							  WindowSync._getCookieSandbox = function _getCookieSandbox(win) {
							    try {
							      // eslint-disable-next-line no-restricted-properties
							      var cookieSandbox = win[internal_properties_1.default.hammerhead].sandbox.cookie;
							      return cookieSandbox.document && cookieSandbox;
							    } catch (e) {
							      return null;
							    }
							  };

							  var _proto = WindowSync.prototype;

							  _proto._onMsgReceived = function _onMsgReceived(_ref) {
							    var _this = this;

							    var message = _ref.message,
							        source = _ref.source;

							    if (message.cmd === SYNC_COOKIE_START_CMD) {
							      this._cookieSandbox.syncWindowCookie(message.cookies);

							      if (this._win !== this._win.top) this._messageSandbox.sendServiceMsg({
							        id: message.id,
							        cmd: SYNC_COOKIE_DONE_CMD
							      }, source);else if (this._win !== get_top_opener_window_1.default()) {
							        this.syncBetweenWindows(message.cookies, source).then(function () {
							          return _this._messageSandbox.sendServiceMsg({
							            id: message.id,
							            cmd: SYNC_COOKIE_DONE_CMD
							          }, source);
							        });
							      } else this.syncBetweenWindows(message.cookies, source);
							    } else if (message.cmd === SYNC_COOKIE_DONE_CMD) {
							      var resolver = this._resolversMap.get(message.id);

							      if (resolver) resolver();
							    }
							  };

							  _proto._getWindowsForSync = function _getWindowsForSync(initiator, currentWindow, windows) {
							    if (windows === void 0) {
							      windows = [];
							    }

							    if (currentWindow !== initiator && currentWindow !== this._win.top) windows.push(currentWindow); // @ts-ignore

							    for (var _i2 = 0, _currentWindow$frames2 = currentWindow.frames; _i2 < _currentWindow$frames2.length; _i2++) {
							      var frameWindow = _currentWindow$frames2[_i2];

							      this._getWindowsForSync(initiator, frameWindow, windows);
							    }

							    return windows;
							  };

							  _proto._sendSyncMessage = function _sendSyncMessage(win, cmd, cookies) {
							    var _this2 = this;

							    var id = this._messageIdGenerator.increment();

							    var attempts = 0;
							    return new pinkie_1.default(function (resolve) {
							      var timeoutId = null;

							      var resolveWrapper = function resolveWrapper() {
							        native_methods_1.default.clearTimeout.call(_this2._win, timeoutId);

							        _this2._resolversMap.delete(id);

							        resolve();
							      };

							      var sendMsg = function sendMsg() {
							        // NOTE: The window was removed if the parent property is null.
							        if (attempts++ < SYNC_MESSAGE_ATTEMPT_COUNT || !win.parent) {
							          _this2._messageSandbox.sendServiceMsg({
							            id: id,
							            cmd: cmd,
							            cookies: cookies
							          }, win);

							          timeoutId = native_methods_1.default.setTimeout.call(_this2._win, sendMsg, SYNC_MESSAGE_TIMEOUT * attempts);
							        } else resolveWrapper();
							      };

							      _this2._resolversMap.set(id, resolveWrapper);

							      sendMsg();
							    });
							  };

							  _proto._delegateSyncBetweenWindowsToMainTopWindow = function _delegateSyncBetweenWindowsToMainTopWindow(cookies) {
							    var topOpenerWindow = get_top_opener_window_1.default();

							    var cookieSandboxTop = WindowSync._getCookieSandbox(topOpenerWindow);

							    if (cookieSandboxTop) {
							      cookieSandboxTop.syncWindowCookie(cookies);
							      cookieSandboxTop.getWindowSync().syncBetweenWindows(cookies, this._win);
							    } else this._messageSandbox.sendServiceMsg({
							      cmd: SYNC_COOKIE_START_CMD,
							      cookies: cookies
							    }, topOpenerWindow);
							  };

							  _proto._removeSyncCookie = function _removeSyncCookie(cookies) {
							    var doc = this._win.document;
							    var clientCookieStr = cookies[0].isClientSync && native_methods_1.default.documentCookieGetter.call(doc);

							    for (var _i4 = 0; _i4 < cookies.length; _i4++) {
							      var _parsedCookie = cookies[_i4];
							      native_methods_1.default.documentCookieSetter.call(doc, cookie_1.generateDeleteSyncCookieStr(_parsedCookie));
							    } // NOTE: client cookie is passed one at a time


							    var parsedCookie = cookies[0];

							    if (clientCookieStr && index_1.default.isSyncCookieExists(parsedCookie, clientCookieStr)) {
							      cookie_1.changeSyncType(parsedCookie, {
							        window: false
							      });
							      native_methods_1.default.documentCookieSetter.call(doc, cookie_1.formatSyncCookie(parsedCookie));
							    }
							  };

							  _proto.syncBetweenWindows = function syncBetweenWindows(cookies, initiator) {
							    var _this3 = this;

							    var topOpenerWindow = get_top_opener_window_1.default();

							    if (this._win !== this._win.top || this._win !== topOpenerWindow && !initiator) {
							      this._delegateSyncBetweenWindowsToMainTopWindow(cookies);

							      return pinkie_1.default.resolve();
							    }

							    var windowsForSync = this._getWindowsForSync(initiator, this._win);

							    var syncMessages = [];

							    if (this._win === topOpenerWindow) {
							      for (var _i6 = 0, _this$_childWindowSan2 = this._childWindowSandbox.getChildWindows(); _i6 < _this$_childWindowSan2.length; _i6++) {
							        var win = _this$_childWindowSan2[_i6];

							        var cookieSandbox = WindowSync._getCookieSandbox(win);

							        if (cookieSandbox) syncMessages.push(cookieSandbox.getWindowSync().syncBetweenWindows(cookies, this._win));else syncMessages.push(this._sendSyncMessage(win, SYNC_COOKIE_START_CMD, cookies));
							      }
							    }

							    for (var _i8 = 0; _i8 < windowsForSync.length; _i8++) {
							      var _win = windowsForSync[_i8];

							      var _cookieSandbox2 = WindowSync._getCookieSandbox(_win);

							      if (_cookieSandbox2) _cookieSandbox2.syncWindowCookie(cookies);else syncMessages.push(this._sendSyncMessage(_win, SYNC_COOKIE_START_CMD, cookies));
							    }

							    if (syncMessages.length) {
							      var syncMessagesPromise = pinkie_1.default.all(syncMessages);
							      if (this._win === topOpenerWindow) syncMessagesPromise = syncMessagesPromise.then(function () {
							        return _this3._removeSyncCookie(cookies);
							      });
							      return syncMessagesPromise;
							    } else {
							      this._removeSyncCookie(cookies);

							      return pinkie_1.default.resolve();
							    }
							  };

							  _proto.attach = function attach(win) {
							    var _this4 = this;

							    this._win = win;

							    this._messageSandbox.on(this._messageSandbox.SERVICE_MSG_RECEIVED_EVENT, function (e) {
							      return _this4._onMsgReceived(e);
							    });

							    if (win === win.top) {
							      this._messageIdGenerator = this._messageIdGenerator || new integer_id_generator_1.default();
							      this._resolversMap = this._resolversMap || new Map();
							    }
							  };

							  return WindowSync;
							}();

							exports.default = WindowSync;
							module.exports = exports.default;
						}
					},
					"electron.js": function (exports, module, require) {
						

						function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

						function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						var __importStar = void 0 && (void 0).__importStar || function (mod) {
						  if (mod && mod.__esModule) return mod;
						  var result = {};
						  if (mod != null) for (var k in mod) {
						    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
						  }
						  result["default"] = mod;
						  return result;
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var base_1 = __importDefault(require("./base"));

						var script_1 = require("../../processing/script");

						var destinationLocation = __importStar(require("../utils/destination-location"));

						var overriding_1 = require("../utils/overriding");

						var ElectronSandbox = /*#__PURE__*/function (_base_1$default) {
						  _inheritsLoose(ElectronSandbox, _base_1$default);

						  function ElectronSandbox() {
						    return _base_1$default.apply(this, arguments) || this;
						  }

						  ElectronSandbox._createFnWrapper = function _createFnWrapper(vm, nativeFn) {
						    return function () {
						      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
						        args[_key] = arguments[_key];
						      }

						      if (typeof args[0] === 'string') args[0] = script_1.processScript(args[0]);
						      return nativeFn.apply(vm, args);
						    };
						  };

						  ElectronSandbox._overrideElectronModulePaths = function _overrideElectronModulePaths(window) {
						    // NOTE: Need this to avoid Webmake require
						    // eslint-disable-next-line no-eval
						    var electronRequire = eval('require');
						    var path = electronRequire('path');
						    var destination = destinationLocation.getParsed();
						    /*eslint-disable no-restricted-properties*/

						    if (destination.protocol !== 'file:') return;
						    var pathname = window.process.platform === 'win32' && destination.pathname[0] === '/' ? destination.pathname.substr(1) : destination.pathname;
						    /*eslint-enable no-restricted-properties*/

						    window.__filename = path.normalize(decodeURIComponent(pathname));
						    window.__dirname = path.dirname(window.__filename);
						    window.module.filename = window.__filename;
						    window.module.paths = window.module.paths.concat(electronRequire('module')._nodeModulePaths(window.__dirname));
						  };

						  var _proto = ElectronSandbox.prototype;

						  _proto.attach = function attach(window) {
						    _base_1$default.prototype.attach.call(this, window);

						    if (!window.require) return;

						    var vm = window.require('vm');

						    if (!vm) return;
						    var nativeMethods = this.nativeMethods;

						    if (nativeMethods.refreshElectronMeths(vm)) {
						      overriding_1.overrideFunction(vm, 'createScript', ElectronSandbox._createFnWrapper(vm, nativeMethods.createScript)); // NOTE: DebugContext has been removed in V8 and is not available in Node.js 10+

						      if (vm.runInDebugContext) overriding_1.overrideFunction(vm, 'runInDebugContext', ElectronSandbox._createFnWrapper(vm, nativeMethods.runInDebugContext));
						      overriding_1.overrideFunction(vm, 'runInContext', ElectronSandbox._createFnWrapper(vm, nativeMethods.runInContext));
						      overriding_1.overrideFunction(vm, 'runInNewContext', ElectronSandbox._createFnWrapper(vm, nativeMethods.runInNewContext));
						      overriding_1.overrideFunction(vm, 'runInThisContext', ElectronSandbox._createFnWrapper(vm, nativeMethods.runInThisContext));

						      ElectronSandbox._overrideElectronModulePaths(window);
						    }
						  };

						  return ElectronSandbox;
						}(base_1.default);

						exports.default = ElectronSandbox;
						module.exports = exports.default;
					},
					"event": {
						"active-window-tracker.js": function (exports, module, require) {
							

							function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

							function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var base_1 = __importDefault(require("../base"));

							var dom_1 = require("../../utils/dom");

							var WINDOW_ACTIVATED_EVENT = 'hammerhead|event|window-activated';
							var WINDOW_DEACTIVATED_EVENT = 'hammerhead|event|window-deactivated';

							var ActiveWindowTracker = /*#__PURE__*/function (_base_1$default) {
							  _inheritsLoose(ActiveWindowTracker, _base_1$default);

							  function ActiveWindowTracker(_messageSandbox) {
							    var _this;

							    _this = _base_1$default.call(this) || this;
							    _this._messageSandbox = _messageSandbox;
							    _this._isIframeWindow = false;
							    _this._activeWindow = null;
							    _this._isActive = false;
							    return _this;
							  }

							  var _proto = ActiveWindowTracker.prototype;

							  _proto._notifyPrevActiveWindow = function _notifyPrevActiveWindow() {
							    try {
							      if (this._activeWindow.top && this._activeWindow !== this._activeWindow.top) {
							        this._messageSandbox.sendServiceMsg({
							          cmd: WINDOW_DEACTIVATED_EVENT
							        }, this._activeWindow);
							      }
							    } catch (err) {// NOTE: The error appears in IE when the corresponding iframe is removed.
							    }
							  };

							  _proto.attach = function attach(window) {
							    var _this2 = this;

							    _base_1$default.prototype.attach.call(this, window);

							    this._isIframeWindow = dom_1.isIframeWindow(window);
							    this._activeWindow = !this._isIframeWindow ? window.top : null;
							    this._isActive = !this._isIframeWindow;

							    this._messageSandbox.on(this._messageSandbox.SERVICE_MSG_RECEIVED_EVENT, function (e) {
							      if (e.message.cmd === WINDOW_ACTIVATED_EVENT) {
							        _this2._notifyPrevActiveWindow();

							        _this2._isActive = false;
							        _this2._activeWindow = e.source;
							      } else if (e.message.cmd === WINDOW_DEACTIVATED_EVENT) _this2._isActive = false;
							    });
							  };

							  _proto.isCurrentWindowActive = function isCurrentWindowActive() {
							    return this._isActive;
							  };

							  _proto.makeCurrentWindowActive = function makeCurrentWindowActive() {
							    this._isActive = true;

							    if (!this._isIframeWindow) {
							      this._notifyPrevActiveWindow();

							      this._activeWindow = this.window;
							    } else {
							      this._messageSandbox.sendServiceMsg({
							        cmd: WINDOW_ACTIVATED_EVENT
							      }, this.window.top);
							    }
							  };

							  return ActiveWindowTracker;
							}(base_1.default);

							exports.default = ActiveWindowTracker;
							module.exports = exports.default;
						},
						"drag-and-drop": {
							"data-store-mode.js": function (exports, module, require) {
								

								Object.defineProperty(exports, "__esModule", {
								  value: true
								}); // https://html.spec.whatwg.org/multipage/interaction.html#drag-data-store-mode

								exports.default = {
								  readwrite: 'readwrite',
								  readonly: 'readonly',
								  protected: 'protected'
								};
								module.exports = exports.default;
							},
							"data-transfer-item-kind.js": function (exports, module, require) {
								

								Object.defineProperty(exports, "__esModule", {
								  value: true
								}); // https://html.spec.whatwg.org/multipage/interaction.html#the-drag-data-item-kind

								exports.default = {
								  string: 'string',
								  file: 'file'
								};
								module.exports = exports.default;
							},
							"data-transfer-item-list.js": function (exports, module, require) {
								

								var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
								  return mod && mod.__esModule ? mod : {
								    "default": mod
								  };
								};

								Object.defineProperty(exports, "__esModule", {
								  value: true
								});

								var native_methods_1 = __importDefault(require("../../native-methods"));

								var data_transfer_item_1 = __importDefault(require("./data-transfer-item"));

								var data_store_mode_1 = __importDefault(require("./data-store-mode"));

								var data_transfer_item_kind_1 = __importDefault(require("./data-transfer-item-kind"));

								function parseTextUriList(textUriList) {
								  textUriList = textUriList.replace(/\r\n$/, '');
								  var res = [];
								  if (textUriList === '') return res;
								  textUriList = textUriList.split(/\r\n/);

								  for (var _i2 = 0, _textUriList2 = textUriList; _i2 < _textUriList2.length; _i2++) {
								    var textUri = _textUriList2[_i2];
								    if (textUri !== '#') res.push(textUri);
								  }

								  return res;
								}

								function processFormat(format) {
								  if (format === 'text') return 'text/plain';
								  if (format === 'url') return 'text/uri-list';
								  return format;
								} // https://html.spec.whatwg.org/multipage/interaction.html#datatransferitemlist


								var DataTransferItemList = function DataTransferItemList(dataStore) {
								  var _this = this;

								  // Internals
								  var items = [];
								  var itemsData = [];

								  var getTypes = function getTypes() {
								    var res = [];

								    for (var _i4 = 0, _items2 = items; _i4 < _items2.length; _i4++) {
								      var item = _items2[_i4];
								      res.push(item.type);
								    }

								    return res;
								  };

								  var updateIndexes = function updateIndexes() {
								    var idx = 0;

								    while (items[idx] !== void 0 || _this[idx] !== void 0) {
								      var item = items[idx];
								      native_methods_1.default.objectDefineProperty(_this, idx, {
								        enumerable: item !== void 0,
								        configurable: true,
								        value: item
								      });
								      idx++;
								    }
								  };

								  var getItemData = function getItemData(format) {
								    var convertToUrl = false;
								    format = processFormat(format);
								    if (format === 'url') convertToUrl = true;
								    var item = '';

								    for (var i = 0; i < items.length; i++) {
								      if (items[i].type === format) item = itemsData[i];
								    }

								    if (convertToUrl && item) item = parseTextUriList(item)[0];
								    return item;
								  };

								  var removeItem = function removeItem(format) {
								    format = processFormat(format);

								    for (var i = 0; i < items.length; i++) {
								      if (items[i].type === format) {
								        items.splice(i, 1);
								        itemsData.splice(i, 1);
								        break;
								      }
								    }

								    updateIndexes();
								  };

								  var addItem = function addItem(data, type, allowReplace) {
								    var newItem = null;

								    if (typeof data === 'string') {
								      var typeLowerCase = type.toString().toLowerCase();
								      var itemData = getItemData(typeLowerCase);
								      if (!allowReplace && itemData) throw new Error("Failed to execute 'add' on 'DataTransferItemList': An item already exists for type '" + typeLowerCase + "'.");
								      if (itemData) removeItem(typeLowerCase);
								      newItem = new data_transfer_item_1.default(data_transfer_item_kind_1.default.string, processFormat(type), data);
								    } else newItem = new data_transfer_item_1.default(data_transfer_item_kind_1.default.file, null, data);

								    items.push(newItem);
								    itemsData.push(data);
								    updateIndexes();
								    return newItem;
								  }; // Internal API


								  this.getAndHideInternalMethods = function () {
								    var res = {
								      getTypes: getTypes,
								      getItemData: getItemData,
								      removeItem: removeItem,
								      addItem: addItem
								    };
								    delete _this.getAndHideInternalMethods;
								    return res;
								  }; // API


								  native_methods_1.default.objectDefineProperty(this, 'length', {
								    enumerable: true,
								    get: function get() {
								      return items.length;
								    }
								  });
								  native_methods_1.default.objectDefineProperty(this, 'remove', {
								    configurable: true,
								    enumerable: true,
								    get: function get() {
								      return function (idx) {
								        if (dataStore.mode !== data_store_mode_1.default.readwrite) return;
								        items.splice(idx, 1);
								        itemsData.splice(idx, 1);
								        updateIndexes();
								      };
								    }
								  });
								  native_methods_1.default.objectDefineProperty(this, 'clear', {
								    configurable: true,
								    enumerable: true,
								    get: function get() {
								      return function () {
								        if (dataStore.mode !== data_store_mode_1.default.readwrite) return;
								        items = [];
								        itemsData = [];
								        updateIndexes();
								      };
								    }
								  });
								  native_methods_1.default.objectDefineProperty(this, 'add', {
								    configurable: true,
								    enumerable: true,
								    get: function get() {
								      return function (data, type) {
								        if (!arguments.length) throw new Error("Failed to execute 'add' on 'DataTransferItemList': 1 argument required, but only 0 present.");
								        if (arguments.length === 1 && typeof data === 'string') throw new Error("Failed to execute 'add' on 'DataTransferItemList': parameter 1 is not of type 'File'.");
								        if (dataStore.mode !== data_store_mode_1.default.readwrite) return void 0;
								        return addItem(data, type, false);
								      };
								    }
								  });
								};

								exports.default = DataTransferItemList;
								if (native_methods_1.default.DataTransferItemList) DataTransferItemList.prototype = native_methods_1.default.DataTransferItemList.prototype;
								module.exports = exports.default;
							},
							"data-transfer-item.js": function (exports, module, require) {
								

								var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
								  return mod && mod.__esModule ? mod : {
								    "default": mod
								  };
								};

								Object.defineProperty(exports, "__esModule", {
								  value: true
								});

								var native_methods_1 = __importDefault(require("../../native-methods"));

								var data_transfer_item_kind_1 = __importDefault(require("./data-transfer-item-kind")); // https://html.spec.whatwg.org/multipage/interaction.html#datatransferitem


								var DataTransferItem = function DataTransferItem(kind, type, data) {
								  native_methods_1.default.objectDefineProperty(this, 'kind', {
								    enumerable: true,
								    get: function get() {
								      return kind;
								    }
								  });
								  native_methods_1.default.objectDefineProperty(this, 'type', {
								    enumerable: true,
								    get: function get() {
								      return type;
								    }
								  });
								  native_methods_1.default.objectDefineProperty(this, 'getAsString', {
								    configurable: true,
								    enumerable: true,
								    get: function get() {
								      return function (callback) {
								        if (!arguments.length) throw new Error("Failed to execute 'getAsString' on 'DataTransferItem': 1 argument required, but only 0 present.");
								        if (typeof callback !== 'function') return;
								        if (kind !== data_transfer_item_kind_1.default.string) return;
								        native_methods_1.default.setTimeout.call(window, function () {
								          return callback(data);
								        }, 0);
								      };
								    }
								  });
								  native_methods_1.default.objectDefineProperty(this, 'getAsFile', {
								    configurable: true,
								    enumerable: true,
								    get: function get() {
								      return function () {
								        if (kind !== data_transfer_item_kind_1.default.file) return null;
								        return data;
								      };
								    }
								  });
								};

								exports.default = DataTransferItem;
								if (native_methods_1.default.DataTransferItem) DataTransferItem.prototype = native_methods_1.default.DataTransferItem.prototype;
								module.exports = exports.default;
							},
							"data-transfer.js": function (exports, module, require) {
								

								var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
								  return mod && mod.__esModule ? mod : {
								    "default": mod
								  };
								};

								Object.defineProperty(exports, "__esModule", {
								  value: true
								}); // NOTE: Although DataTransfer interface has a constructor, it is not possible to
								// create a useful DataTransfer object from script, since DataTransfer objects have a
								// processing and security model that is coordinated by the browser during drag-and-drops.
								// So we have to create a mock for it to use it in drag-and-drop events

								var browser_1 = require("../../../utils/browser");

								var feature_detection_1 = require("../../../utils/feature-detection");

								var native_methods_1 = __importDefault(require("../../native-methods"));

								var data_transfer_item_list_1 = __importDefault(require("./data-transfer-item-list"));

								var file_list_1 = __importDefault(require("./file-list"));

								var data_store_mode_1 = __importDefault(require("./data-store-mode"));

								var drop_effect_1 = __importDefault(require("./drop-effect"));

								var effect_allowed_1 = __importDefault(require("./effect-allowed")); // https://html.spec.whatwg.org/multipage/interaction.html#datatransfer


								var DataTransfer = function DataTransfer(dataStore) {
								  var dropEffect = drop_effect_1.default.none;
								  var effectAllowed = effect_allowed_1.default.uninitialized;
								  var itemList = new data_transfer_item_list_1.default(dataStore);
								  var itemListInternals = itemList.getAndHideInternalMethods();
								  var fileList = new file_list_1.default();
								  var emptyItemList = new data_transfer_item_list_1.default(dataStore);
								  var emptyListInternals = emptyItemList.getAndHideInternalMethods();

								  var getActualItemList = function getActualItemList() {
								    return dataStore.mode === data_store_mode_1.default.protected ? emptyItemList : itemList;
								  };

								  var getActualItemListInternals = function getActualItemListInternals() {
								    return dataStore.mode === data_store_mode_1.default.protected ? emptyListInternals : itemListInternals;
								  };

								  native_methods_1.default.objectDefineProperty(this, 'dropEffect', {
								    configurable: true,
								    enumerable: true,
								    get: function get() {
								      return dropEffect;
								    },
								    set: function set(value) {
								      if (drop_effect_1.default[value]) dropEffect = drop_effect_1.default[value];
								      return value;
								    }
								  });
								  native_methods_1.default.objectDefineProperty(this, 'effectAllowed', {
								    configurable: true,
								    enumerable: true,
								    get: function get() {
								      return effectAllowed;
								    },
								    set: function set(value) {
								      if (effect_allowed_1.default[value]) effectAllowed = effect_allowed_1.default[value];
								      return value;
								    }
								  });

								  if (!browser_1.isIE11) {
								    native_methods_1.default.objectDefineProperty(this, 'items', {
								      configurable: true,
								      enumerable: true,
								      get: getActualItemList
								    });
								  }

								  native_methods_1.default.objectDefineProperty(this, 'types', {
								    configurable: true,
								    enumerable: true,
								    get: function get() {
								      return getActualItemListInternals().getTypes();
								    }
								  });
								  native_methods_1.default.objectDefineProperty(this, 'files', {
								    configurable: true,
								    enumerable: true,
								    get: function get() {
								      return fileList;
								    }
								  });

								  if (!browser_1.isIE11) {
								    this.setDragImage = function () {// do nothing
								    };
								  }

								  this.getData = function (format) {
								    if (!arguments.length) throw new Error("Failed to execute 'getData' on 'DataTransfer': 1 argument required, but only 0 present.");
								    format = format.toString().toLowerCase();
								    return getActualItemListInternals().getItemData(format);
								  };

								  this.setData = function (format, data) {
								    if (arguments.length < 2) throw new Error("Failed to execute 'setData' on 'DataTransfer': 2 argument required, but only " + arguments.length + " present.");
								    if (dataStore.mode !== data_store_mode_1.default.readwrite) return;
								    format = format.toString().toLowerCase();
								    itemListInternals.addItem(data, format, true);
								  };

								  this.clearData = function (format) {
								    if (dataStore.mode !== data_store_mode_1.default.readwrite) return;
								    if (format === void 0) // @ts-ignore
								      itemList.clear();else itemListInternals.removeItem(format);
								  };
								};

								exports.default = DataTransfer;
								if (feature_detection_1.hasDataTransfer) DataTransfer.prototype = native_methods_1.default.DataTransfer.prototype;
								module.exports = exports.default;
							},
							"drag-data-store.js": function (exports, module, require) {
								

								var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
								  return mod && mod.__esModule ? mod : {
								    "default": mod
								  };
								};

								Object.defineProperty(exports, "__esModule", {
								  value: true
								});

								var data_store_mode_1 = __importDefault(require("./data-store-mode")); // https://html.spec.whatwg.org/multipage/interaction.html#the-drag-data-store


								var DragDataStore = /*#__PURE__*/function () {
								  function DragDataStore() {
								    this.mode = data_store_mode_1.default.readwrite;
								  }

								  var _proto = DragDataStore.prototype;

								  _proto.setReadOnlyMode = function setReadOnlyMode() {
								    this.mode = data_store_mode_1.default.readonly;
								  };

								  _proto.setProtectedMode = function setProtectedMode() {
								    this.mode = data_store_mode_1.default.protected;
								  };

								  return DragDataStore;
								}();

								exports.default = DragDataStore;
								module.exports = exports.default;
							},
							"drop-effect.js": function (exports, module, require) {
								

								Object.defineProperty(exports, "__esModule", {
								  value: true
								}); // https://html.spec.whatwg.org/multipage/interaction.html#dom-datatransfer-dropeffect

								exports.default = {
								  none: 'none',
								  copy: 'copy',
								  link: 'link',
								  move: 'move'
								};
								module.exports = exports.default;
							},
							"effect-allowed.js": function (exports, module, require) {
								

								Object.defineProperty(exports, "__esModule", {
								  value: true
								}); // https://html.spec.whatwg.org/multipage/interaction.html#dom-datatransfer-effectallowed

								exports.default = {
								  uninitialized: 'uninitialized',
								  none: 'none',
								  copy: 'copy',
								  copyLink: 'copyLink',
								  copyMove: 'copyMove',
								  link: 'link',
								  linkMove: 'linkMove',
								  move: 'move',
								  all: 'all'
								};
								module.exports = exports.default;
							},
							"file-list.js": function (exports, module, require) {
								

								var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
								  return mod && mod.__esModule ? mod : {
								    "default": mod
								  };
								};

								Object.defineProperty(exports, "__esModule", {
								  value: true
								}); // https://w3c.github.io/FileAPI/#filelist-section
								// NOTE: we have limited support for FileList only for drag and drop DataTransfer purposes

								var native_methods_1 = __importDefault(require("../../native-methods"));

								var FileList = function FileList() {
								  native_methods_1.default.objectDefineProperty(this, 'length', {
								    enumerable: true,
								    get: function get() {
								      return 0;
								    }
								  });
								  native_methods_1.default.objectDefineProperty(this, 'item', {
								    enumerable: true,
								    get: function get() {
								      return function () {
								        return void 0;
								      };
								    }
								  });
								};

								exports.default = FileList;
								if (native_methods_1.default.FileList) FileList.prototype = native_methods_1.default.FileList.prototype;
								module.exports = exports.default;
							}
						},
						"element-editing-watcher.js": function (exports, module, require) {
							

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var native_methods_1 = __importDefault(require("../native-methods"));

							var dom_1 = require("../../utils/dom");

							var EDITING_OBSERVED_FLAG = 'hammerhead|editing-observed';
							var PREVIOUS_VALUE_PROPERTY = 'hammerhead|previous-value';

							var ElementEditingWatcher = /*#__PURE__*/function () {
							  function ElementEditingWatcher(_eventSimulator) {
							    this._eventSimulator = _eventSimulator;
							  }

							  var _proto = ElementEditingWatcher.prototype;

							  _proto._onBlur = function _onBlur(e) {
							    if (!this.processElementChanging(e.target)) this.stopWatching(e.target);
							  };

							  _proto._onChange = function _onChange(e) {
							    this.stopWatching(e.target);
							  };

							  ElementEditingWatcher._getValue = function _getValue(el) {
							    if (dom_1.isInputElement(el)) return native_methods_1.default.inputValueGetter.call(el);else if (dom_1.isTextAreaElement(el)) return native_methods_1.default.textAreaValueGetter.call(el); // eslint-disable-next-line no-restricted-properties

							    return el.value;
							  };

							  _proto.stopWatching = function stopWatching(el) {
							    var _this = this;

							    if (!el) return;
							    native_methods_1.default.removeEventListener.call(el, 'blur', function (e) {
							      return _this._onBlur(e);
							    });
							    native_methods_1.default.removeEventListener.call(el, 'change', function (e) {
							      return _this._onChange(e);
							    });
							    if (el[EDITING_OBSERVED_FLAG] !== void 0) delete el[EDITING_OBSERVED_FLAG];
							    if (el[PREVIOUS_VALUE_PROPERTY] !== void 0) delete el[PREVIOUS_VALUE_PROPERTY];
							  };

							  _proto.watchElementEditing = function watchElementEditing(el) {
							    var _native_methods_1$def,
							        _this2 = this;

							    if (!el || el[EDITING_OBSERVED_FLAG] || !dom_1.isTextEditableElementAndEditingAllowed(el) || dom_1.isShadowUIElement(el)) return;
							    native_methods_1.default.objectDefineProperties(el, (_native_methods_1$def = {}, _native_methods_1$def[EDITING_OBSERVED_FLAG] = {
							      value: true,
							      configurable: true,
							      writable: true
							    }, _native_methods_1$def[PREVIOUS_VALUE_PROPERTY] = {
							      value: ElementEditingWatcher._getValue(el),
							      configurable: true,
							      writable: true
							    }, _native_methods_1$def));
							    native_methods_1.default.addEventListener.call(el, 'blur', function (e) {
							      return _this2._onBlur(e);
							    });
							    native_methods_1.default.addEventListener.call(el, 'change', function (e) {
							      return _this2._onChange(e);
							    });
							  };

							  _proto.restartWatchingElementEditing = function restartWatchingElementEditing(el) {
							    if (el && el[EDITING_OBSERVED_FLAG]) el[PREVIOUS_VALUE_PROPERTY] = ElementEditingWatcher._getValue(el);
							  };

							  _proto.processElementChanging = function processElementChanging(el) {
							    if (el && el[EDITING_OBSERVED_FLAG] && ElementEditingWatcher._getValue(el) !== el[PREVIOUS_VALUE_PROPERTY]) {
							      this._eventSimulator.change(el);

							      this.restartWatchingElementEditing(el);
							      return true;
							    }

							    return false;
							  };

							  _proto.getElementSavedValue = function getElementSavedValue(el) {
							    return el[PREVIOUS_VALUE_PROPERTY];
							  };

							  _proto.isEditingObserved = function isEditingObserved(el) {
							    return el[EDITING_OBSERVED_FLAG];
							  };

							  return ElementEditingWatcher;
							}();

							exports.default = ElementEditingWatcher;
							module.exports = exports.default;
						},
						"focus-blur.js": function (exports, module, require) {
							

							function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

							function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							var __importStar = void 0 && (void 0).__importStar || function (mod) {
							  if (mod && mod.__esModule) return mod;
							  var result = {};
							  if (mod != null) for (var k in mod) {
							    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
							  }
							  result["default"] = mod;
							  return result;
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var internal_attributes_1 = __importDefault(require("../../../processing/dom/internal-attributes"));

							var internal_properties_1 = __importDefault(require("../../../processing/dom/internal-properties"));

							var base_1 = __importDefault(require("../base"));

							var active_window_tracker_1 = __importDefault(require("../event/active-window-tracker"));

							var native_methods_1 = __importDefault(require("../native-methods"));

							var browserUtils = __importStar(require("../../utils/browser"));

							var domUtils = __importStar(require("../../utils/dom"));

							var styleUtils = __importStar(require("../../utils/style"));

							var INTERNAL_FOCUS_BLUR_FLAG_PREFIX = 'hammerhead|event|internal-';
							var PREVENT_FOCUS_ON_CHANGE = browserUtils.isChrome;
							var eventsMap = {
							  bubbles: {
							    'focus': 'focusin',
							    'blur': 'focusout'
							  },
							  nonBubbles: {
							    'focusin': 'focus',
							    'focusout': 'blur'
							  }
							};

							var FocusBlurSandbox = /*#__PURE__*/function (_base_1$default) {
							  _inheritsLoose(FocusBlurSandbox, _base_1$default);

							  function FocusBlurSandbox(_listeners, _eventSimulator, messageSandbox, _timersSandbox, elementEditingWatcher) {
							    var _this;

							    _this = _base_1$default.call(this) || this;
							    _this._listeners = _listeners;
							    _this._eventSimulator = _eventSimulator;
							    _this._timersSandbox = _timersSandbox;
							    _this._topWindow = null;
							    _this._lastFocusedElement = null;
							    _this._scrollState = {};
							    _this._activeWindowTracker = new active_window_tracker_1.default(messageSandbox);
							    _this._elementEditingWatcher = elementEditingWatcher;
							    return _this;
							  }

							  FocusBlurSandbox._getNativeMeth = function _getNativeMeth(el, event) {
							    if (domUtils.isSVGElement(el)) {
							      if (event === 'focus') return native_methods_1.default.svgFocus;else if (event === 'blur') return native_methods_1.default.svgBlur;
							    } //@ts-ignore


							    return native_methods_1.default[event];
							  };

							  FocusBlurSandbox._restoreElementScroll = function _restoreElementScroll(el, scroll) {
							    var newScroll = styleUtils.getElementScroll(el);
							    if (newScroll.left !== scroll.left) styleUtils.setScrollLeft(el, scroll.left);
							    if (newScroll.top !== scroll.top) styleUtils.setScrollTop(el, scroll.top);
							  };

							  var _proto = FocusBlurSandbox.prototype;

							  _proto._onChangeActiveElement = function _onChangeActiveElement(activeElement) {
							    if (this._lastFocusedElement === activeElement) return;
							    if (this._lastFocusedElement && native_methods_1.default.getAttribute.call(this._lastFocusedElement, internal_attributes_1.default.focusPseudoClass)) native_methods_1.default.removeAttribute.call(this._lastFocusedElement, internal_attributes_1.default.focusPseudoClass);

							    if (domUtils.isElementFocusable(activeElement) && !(domUtils.isBodyElement(activeElement) && domUtils.getTabIndex(activeElement) === null)) {
							      this._lastFocusedElement = activeElement;
							      native_methods_1.default.setAttribute.call(activeElement, internal_attributes_1.default.focusPseudoClass, true);
							    } else this._lastFocusedElement = null;
							  };

							  _proto._shouldUseLabelHtmlForElement = function _shouldUseLabelHtmlForElement(el, type) {
							    return type === 'focus' && !!el.htmlFor && domUtils.isLabelElement(el) && !domUtils.isElementFocusable(el);
							  };

							  _proto._getElementNonScrollableParentsScrollState = function _getElementNonScrollableParentsScrollState(el) {
							    var scrollState = [];
							    var elementParents = domUtils.getParents(el);

							    for (var _i2 = 0; _i2 < elementParents.length; _i2++) {
							      var elementParent = elementParents[_i2];

							      if (styleUtils.get(elementParent, 'overflow') === 'hidden') {
							        scrollState.push({
							          element: elementParent,
							          state: styleUtils.getElementScroll(elementParent)
							        });
							      }
							    }

							    return scrollState;
							  };

							  _proto._restoreElementNonScrollableParentsScrollState = function _restoreElementNonScrollableParentsScrollState(scrollState) {
							    for (var _i4 = 0; _i4 < scrollState.length; _i4++) {
							      var scrollStateEntry = scrollState[_i4];

							      FocusBlurSandbox._restoreElementScroll(scrollStateEntry.element, scrollStateEntry.state);
							    }
							  };

							  _proto._saveScrollStateIfNecessary = function _saveScrollStateIfNecessary(el, preventScrolling) {
							    if (preventScrolling) this._scrollState.windowScroll = styleUtils.getElementScroll(this.window);
							    if (browserUtils.isIE) this._scrollState.elementNonScrollableParentsScrollState = this._getElementNonScrollableParentsScrollState(el);
							  };

							  _proto._restoreScrollStateIfNecessary = function _restoreScrollStateIfNecessary(preventScrolling) {
							    if (preventScrolling) FocusBlurSandbox._restoreElementScroll(this.window, this._scrollState.windowScroll);
							    if (browserUtils.isIE) this._restoreElementNonScrollableParentsScrollState(this._scrollState.elementNonScrollableParentsScrollState);
							  };

							  _proto._raiseEvent = function _raiseEvent(el, type, callback, _ref) {
							    var _this2 = this;

							    var withoutHandlers = _ref.withoutHandlers,
							        isAsync = _ref.isAsync,
							        forMouseEvent = _ref.forMouseEvent,
							        preventScrolling = _ref.preventScrolling,
							        relatedTarget = _ref.relatedTarget,
							        focusedOnChange = _ref.focusedOnChange;

							    // NOTE: We cannot use Promise because 'resolve' will be called async, but we need to resolve
							    // immediately in IE9 and IE10.
							    var simulateEvent = function simulateEvent() {
							      // NOTE: The focus and blur events should be raised after activeElement is changed (B237489)
							      // in MSEdge, the focus/blur events are executed  synchronously.
							      if (browserUtils.isIE && browserUtils.version < 12) {
							        _this2.window.setTimeout(function () {
							          _this2.window.setTimeout(function () {
							            delete el[FocusBlurSandbox.getInternalEventFlag(type)];
							          }, 0);
							        }, 0);
							      } else delete el[FocusBlurSandbox.getInternalEventFlag(type)];

							      if (!withoutHandlers) {
							        var bubblesEventType = eventsMap.bubbles[type];
							        var bubblesEventShouldRaiseFirstly = browserUtils.isIE11 || browserUtils.isMSEdge && browserUtils.version < 17 && type === 'blur';

							        if (isAsync) {
							          // NOTE: focusin, focusout events are synchronously
							          _this2._eventSimulator[bubblesEventType](el, relatedTarget);

							          _this2._timersSandbox.deferFunction(function () {
							            return _this2._eventSimulator[type](el, relatedTarget);
							          });
							        } else if (bubblesEventShouldRaiseFirstly) {
							          _this2._eventSimulator[bubblesEventType](el, relatedTarget);

							          _this2._eventSimulator[type](el, relatedTarget);
							        } else {
							          _this2._eventSimulator[type](el, relatedTarget);

							          _this2._eventSimulator[bubblesEventType](el, relatedTarget);
							        }
							      } else if (type === 'focus' && PREVENT_FOCUS_ON_CHANGE) {
							        var preventFocus = function preventFocus(_e, _dispatched, _preventEvent, cancelHandlers, stopEventPropagation) {
							          cancelHandlers();
							          stopEventPropagation();
							        };

							        _this2._listeners.addInternalEventBeforeListener(window, ['focus'], preventFocus);

							        _this2._eventSimulator['focus'](el, relatedTarget);

							        _this2._listeners.removeInternalEventBeforeListener(window, ['focus'], preventFocus);
							      }

							      callback();
							    };

							    if (el[type]) {
							      // NOTE: To guarantee that all focus/blur events are raised, we need to raise them manually.
							      this._saveScrollStateIfNecessary(el, preventScrolling);

							      if (this._shouldUseLabelHtmlForElement(el, type)) {
							        var htmlForElement = native_methods_1.default.getElementById.call(domUtils.findDocument(el), el.htmlFor);
							        if (htmlForElement) el = htmlForElement;else {
							          callback();
							          return;
							        }
							      }

							      el[FocusBlurSandbox.getInternalEventFlag(type)] = true; // NOTE: We should guarantee that activeElement will be changed, therefore we need to call the native
							      // focus/blur event.

							      if (!focusedOnChange) FocusBlurSandbox._getNativeMeth(el, type).call(el);

							      this._restoreScrollStateIfNecessary(preventScrolling);

							      var curDocument = domUtils.findDocument(el);
							      var activeElement = domUtils.getActiveElement(curDocument); // NOTE: If the element was not focused and has a parent with tabindex, we focus this parent.

							      var parent = native_methods_1.default.nodeParentNodeGetter.call(el);
							      var parentWithTabIndex = parent === document ? null : domUtils.closest(parent, '[tabindex]');

							      if (type === 'focus' && activeElement !== el && parentWithTabIndex && forMouseEvent) {
							        // NOTE: In WebKit, Safari and MSEdge, calling the native focus event for a parent element
							        // raises page scrolling. We can't prevent it. Therefore, we need to restore a page scrolling value.
							        var needPreventScrolling = browserUtils.isWebKit || browserUtils.isSafari || browserUtils.isIE;

							        this._raiseEvent(parentWithTabIndex, 'focus', simulateEvent, {
							          preventScrolling: needPreventScrolling,
							          forMouseEvent: forMouseEvent
							        });
							      } // NOTE: Some browsers don't change document.activeElement after calling element.blur() if a browser
							      // window is in the background. That's why we call body.focus() without handlers. It should be called
							      // synchronously because client scripts may expect that document.activeElement will be changed immediately
							      // after element.blur() is called.
							      else if (type === 'blur' && activeElement === el && el !== curDocument.body) this._raiseEvent(curDocument.body, 'focus', simulateEvent, {
							          withoutHandlers: true
							        });else if (!el.disabled) simulateEvent();else callback();
							    } else simulateEvent();
							  };

							  FocusBlurSandbox.getInternalEventFlag = function getInternalEventFlag(type) {
							    return INTERNAL_FOCUS_BLUR_FLAG_PREFIX + type;
							  };

							  FocusBlurSandbox.getNonBubblesEventType = function getNonBubblesEventType(bubblesEventType) {
							    return eventsMap.nonBubbles[bubblesEventType];
							  };

							  _proto.attach = function attach(window) {
							    var _this3 = this;

							    _base_1$default.prototype.attach.call(this, window);

							    this._activeWindowTracker.attach(window);

							    this._topWindow = domUtils.isCrossDomainWindows(window, window.top) ? window : window.top;

							    this._listeners.addInternalEventBeforeListener(window, ['focus', 'blur'], function () {
							      var activeElement = domUtils.getActiveElement(_this3.document);

							      _this3._onChangeActiveElement(activeElement);
							    });
							  };

							  _proto._raiseSelectionChange = function _raiseSelectionChange(callback, el) {
							    // NOTE: In MSEdge, the 'selectionchange' event doesn't occur immediately (it occurs with a some delay)
							    // so we should raise it right after the 'focus' event is raised.
							    if (browserUtils.isMSEdge && el && domUtils.isTextEditableElement(el)) this._eventSimulator.selectionchange(el);
							    if (typeof callback === 'function') callback();
							  };

							  _proto.focus = function focus(el, callback, silent, forMouseEvent, isNativeFocus, preventScrolling) {
							    var _this4 = this;

							    // NOTE: el.focus() does not raise the event if the element is invisible. If the element is located
							    // within an invisible iframe, all browsers except Chrome do not raise the event (GH-442)
							    var raiseEventInIframe = !isNativeFocus || browserUtils.isWebKit || !styleUtils.isElementInInvisibleIframe(el);
							    var elDocument = (el[internal_properties_1.default.processedContext] || this.window).document;
							    if (!raiseEventInIframe || isNativeFocus && !styleUtils.isElementVisible(el, elDocument)) return null;
							    var isElementInIframe = domUtils.isElementInIframe(el);
							    var iframeElement = isElementInIframe ? domUtils.getIframeByElement(el) : null;
							    var curDocument = domUtils.findDocument(el);
							    var isBodyElement = domUtils.isBodyElement(el);
							    var activeElement = domUtils.getActiveElement();
							    var activeElementDocument = domUtils.findDocument(activeElement);
							    var withoutHandlers = false;
							    var needBlur = false;
							    var needBlurIframe = false;
							    var isContentEditable = domUtils.isContentEditableElement(el);

							    var isCurrentWindowActive = this._activeWindowTracker.isCurrentWindowActive();

							    if (activeElement === el) withoutHandlers = !(isBodyElement && isContentEditable && !isCurrentWindowActive);else withoutHandlers = isBodyElement && !(isContentEditable || browserUtils.isIE); // NOTE: In IE, if you call focus() or blur() methods from script, an active element is changed immediately,
							    // but events are raised asynchronously after some timeout.

							    var isAsync = false;

							    var raiseFocusEvent = function raiseFocusEvent() {
							      if (!isCurrentWindowActive && !domUtils.isShadowUIElement(el)) _this4._activeWindowTracker.makeCurrentWindowActive();
							      var raiseEventArgs = {
							        withoutHandlers: withoutHandlers || silent,
							        isAsync: isAsync,
							        forMouseEvent: forMouseEvent,
							        preventScrolling: preventScrolling,
							        relatedTarget: activeElement
							      };

							      _this4._raiseEvent(el, 'focus', function () {
							        if (!silent) _this4._elementEditingWatcher.watchElementEditing(el); // NOTE: If we call focus for an unfocusable element (like 'div' or 'image') in iframe, we should
							        // specify document.active for this iframe manually, so we call focus without handlers.

							        if (isElementInIframe && iframeElement && domUtils.getActiveElement(_this4._topWindow.document) !== iframeElement) _this4._raiseEvent(iframeElement, 'focus', function () {
							          return _this4._raiseSelectionChange(callback, el);
							        }, {
							          withoutHandlers: true,
							          isAsync: isAsync
							        });else _this4._raiseSelectionChange(callback, el);
							      }, raiseEventArgs);
							    };

							    if (isNativeFocus && browserUtils.isIE) {
							      // NOTE: In IE, the focus() method does not have any effect if it is called in the focus event handler
							      // during the  second event phase.
							      if ((this._eventSimulator.isSavedWindowsEventsExists() || browserUtils.version > 10) && this.window.event && this.window.event.type === 'focus' && this.window.event.srcElement === el) {
							        this._raiseSelectionChange(callback, el);

							        return null;
							      } // NOTE: In MSEdge, the focus/blur events are executed synchronously.


							      if (browserUtils.version < 12) isAsync = true;
							    }

							    if (activeElement && activeElement.tagName) {
							      if (activeElement !== el) {
							        // NOTE: B253685
							        if (curDocument !== activeElementDocument && activeElement === activeElementDocument.body) needBlur = false;else if (activeElement === curDocument.body) {
							          // NOTE: The Blur event is raised for the body only in IE. In addition, we must not call the
							          // blur function for the body because this moves the browser window into the background.
							          if (!silent && browserUtils.isIE) {
							            if (isAsync) this._timersSandbox.setTimeout.call(this.window, function () {
							              return _this4._eventSimulator.blur(activeElement);
							            }, 0);else this._eventSimulator.blur(activeElement);
							          }
							        } else if (!el.disabled) needBlur = true;
							      } // NOTE: B254260


							      needBlurIframe = curDocument !== activeElementDocument && domUtils.isElementInIframe(activeElement, activeElementDocument);
							    } // NOTE: We always call blur for iframe manually without handlers (B254260).


							    if (needBlurIframe && !needBlur) {
							      if (browserUtils.isIE) {
							        // NOTE: We should call blur for iframe with handlers in IE but we can't call the method 'blur'
							        // because activeElement !== element and handlers will not be called.
							        this._eventSimulator.blur(domUtils.getIframeByElement(activeElement));

							        raiseFocusEvent();
							      } else this.blur(domUtils.getIframeByElement(activeElement), raiseFocusEvent, true, isNativeFocus);
							    } else if (needBlur) {
							      this.blur(activeElement, function (focusOnChange) {
							        if (needBlurIframe) _this4.blur(domUtils.getIframeByElement(activeElement), raiseFocusEvent, true, isNativeFocus);else if (!focusOnChange) raiseFocusEvent();else if (typeof callback === 'function') callback();
							      }, silent, isNativeFocus, el);
							    } else raiseFocusEvent();

							    return null;
							  };

							  _proto.blur = function blur(el, callback, withoutHandlers, isNativeBlur, relatedTarget) {
							    var curDocument = domUtils.findDocument(el);
							    var activeElement = domUtils.getActiveElement(curDocument); // NOTE: In IE, if you call the focus() or blur() method from script, an active element is changed
							    // immediately but events are raised asynchronously after some timeout (in MSEdgethe focus/blur methods
							    // are executed synchronously).

							    var isAsync = isNativeBlur && browserUtils.isIE && browserUtils.version < 12;
							    if (activeElement !== el) withoutHandlers = true;
							    var focusedOnChange = false;

							    if (!withoutHandlers) {
							      var focusOnChangeHandler = function focusOnChangeHandler(e) {
							        focusedOnChange = e.target === el;
							      };

							      if (PREVENT_FOCUS_ON_CHANGE) this._listeners.addInternalEventBeforeListener(window, ['focus'], focusOnChangeHandler);

							      this._elementEditingWatcher.processElementChanging(el);

							      if (PREVENT_FOCUS_ON_CHANGE) this._listeners.removeInternalEventBeforeListener(window, ['focus'], focusOnChangeHandler);

							      this._elementEditingWatcher.stopWatching(el);
							    }

							    var raiseEventParameters = {
							      withoutHandlers: withoutHandlers,
							      isAsync: isAsync,
							      relatedTarget: relatedTarget,
							      focusedOnChange: focusedOnChange
							    };

							    this._raiseEvent(el, 'blur', function () {
							      if (typeof callback === 'function') callback(focusedOnChange);
							    }, raiseEventParameters);
							  };

							  _proto.dispose = function dispose() {
							    this._lastFocusedElement = null;
							  };

							  return FocusBlurSandbox;
							}(base_1.default);

							exports.default = FocusBlurSandbox;
							module.exports = exports.default;
						},
						"hover.js": function (exports, module, require) {
							

							function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

							function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							var __importStar = void 0 && (void 0).__importStar || function (mod) {
							  if (mod && mod.__esModule) return mod;
							  var result = {};
							  if (mod != null) for (var k in mod) {
							    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
							  }
							  result["default"] = mod;
							  return result;
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var internal_attributes_1 = __importDefault(require("../../../processing/dom/internal-attributes"));

							var base_1 = __importDefault(require("../base"));

							var native_methods_1 = __importDefault(require("../native-methods"));

							var domUtils = __importStar(require("../../utils/dom"));

							var positionUtils = __importStar(require("../../utils/position"));

							var browserUtils = __importStar(require("../../utils/browser"));

							var HoverSandbox = /*#__PURE__*/function (_base_1$default) {
							  _inheritsLoose(HoverSandbox, _base_1$default);

							  function HoverSandbox(_listeners) {
							    var _this;

							    _this = _base_1$default.call(this) || this;
							    _this._listeners = _listeners;
							    _this._hoverElementFixed = false;
							    _this._lastHoveredElement = null;
							    return _this;
							  }

							  HoverSandbox._setHoverMarker = function _setHoverMarker(newHoveredElement, jointParent) {
							    if (jointParent) native_methods_1.default.setAttribute.call(jointParent, internal_attributes_1.default.hoverPseudoClass, '');

							    while (newHoveredElement && newHoveredElement.tagName) {
							      // NOTE: Assign a pseudo-class marker to the elements until the joint parent is found.
							      if (newHoveredElement !== jointParent) {
							        native_methods_1.default.setAttribute.call(newHoveredElement, internal_attributes_1.default.hoverPseudoClass, '');
							        newHoveredElement = native_methods_1.default.nodeParentNodeGetter.call(newHoveredElement);
							      } else break;
							    }
							  } // NOTE: In this method, we go up to the tree of elements and look for a joint parent for the
							  // previous and new hovered elements. Processing is needed only until  that parent is found.
							  // In this case, we'll reduce the number of dom calls.
							  ;

							  var _proto = HoverSandbox.prototype;

							  _proto._clearHoverMarkerUntilJointParent = function _clearHoverMarkerUntilJointParent(newHoveredElement) {
							    var jointParent = null;

							    if (this._lastHoveredElement) {
							      var el = this._lastHoveredElement;

							      while (el && el.tagName && el.contains) {
							        // NOTE: Check that the current element is a joint parent for the hovered elements.
							        if (!el.contains(newHoveredElement)) {
							          native_methods_1.default.removeAttribute.call(el, internal_attributes_1.default.hoverPseudoClass);
							          el = native_methods_1.default.nodeParentNodeGetter.call(el);
							        } else {
							          jointParent = el;
							          break;
							        }
							      }

							      if (jointParent) native_methods_1.default.removeAttribute.call(jointParent, internal_attributes_1.default.hoverPseudoClass);
							    }

							    return jointParent;
							  };

							  _proto._onHover = function _onHover(_ref) {
							    var target = _ref.target,
							        clientX = _ref.clientX,
							        clientY = _ref.clientY;
							    var hoverIsDisabled = browserUtils.isIE && positionUtils.shouldIgnoreMouseEventInsideIframe(target, clientX, clientY);
							    if (!hoverIsDisabled) this._hover(target);
							  };

							  _proto._hover = function _hover(el) {
							    if (!this._hoverElementFixed && !domUtils.isShadowUIElement(el)) {
							      var jointParent = this._clearHoverMarkerUntilJointParent(el);

							      HoverSandbox._setHoverMarker(el, jointParent);

							      this._lastHoveredElement = el;
							    }
							  };

							  _proto.fixHoveredElement = function fixHoveredElement() {
							    this._hoverElementFixed = true;
							  };

							  _proto.freeHoveredElement = function freeHoveredElement() {
							    this._hoverElementFixed = false;
							  };

							  _proto.attach = function attach(window) {
							    var _this2 = this;

							    _base_1$default.prototype.attach.call(this, window);

							    this._listeners.addInternalEventBeforeListener(window, ['mouseover', 'touchstart'], function (e) {
							      return _this2._onHover(e);
							    });
							  };

							  _proto.dispose = function dispose() {
							    this._lastHoveredElement = null;
							  };

							  return HoverSandbox;
							}(base_1.default);

							exports.default = HoverSandbox;
							module.exports = exports.default;
						},
						"index.js": function (exports, module, require) {
							

							function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

							function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

							function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							var __importStar = void 0 && (void 0).__importStar || function (mod) {
							  if (mod && mod.__esModule) return mod;
							  var result = {};
							  if (mod != null) for (var k in mod) {
							    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
							  }
							  result["default"] = mod;
							  return result;
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var focus_blur_1 = __importDefault(require("./focus-blur"));

							var hover_1 = __importDefault(require("./hover"));

							var listeners_1 = __importDefault(require("./listeners"));

							var selection_1 = __importDefault(require("./selection"));

							var base_1 = __importDefault(require("../base"));

							var native_methods_1 = __importDefault(require("../native-methods"));

							var domUtils = __importStar(require("../../utils/dom"));

							var browser_1 = require("../../utils/browser");

							var event_1 = require("../../utils/event");

							var data_transfer_1 = __importDefault(require("./drag-and-drop/data-transfer"));

							var drag_data_store_1 = __importDefault(require("./drag-and-drop/drag-data-store"));

							var overriding_1 = require("../../utils/overriding");

							var EventSandbox = /*#__PURE__*/function (_base_1$default) {
							  _inheritsLoose(EventSandbox, _base_1$default);

							  function EventSandbox(listeners, eventSimulator, elementEditingWatcher, unloadSandbox, messageSandbox, _shadowUI, timerSandbox) {
							    var _this;

							    _this = _base_1$default.call(this) || this;
							    _this._shadowUI = _shadowUI;
							    _this.EVENT_PREVENTED_EVENT = 'hammerhead|event|event-prevented';
							    _this.listeners = listeners;
							    _this.elementEditingWatcher = elementEditingWatcher;
							    _this.unload = unloadSandbox;
							    _this.timers = timerSandbox;
							    _this.eventSimulator = eventSimulator;
							    _this.focusBlur = new focus_blur_1.default(listeners, eventSimulator, messageSandbox, timerSandbox, elementEditingWatcher);
							    _this.selection = new selection_1.default(_assertThisInitialized(_this));
							    _this.hover = new hover_1.default(listeners);
							    _this._shadowUI = _shadowUI;
							    _this.message = messageSandbox;
							    _this.DataTransfer = data_transfer_1.default;
							    _this.DragDataStore = drag_data_store_1.default;
							    _this._overriddenMethods = null;
							    _this._onFocus = null;
							    _this._cancelInternalEvents = null;

							    _this._createOverriddenMethods();

							    _this._createInternalHandlers();

							    return _this;
							  }

							  var _proto = EventSandbox.prototype;

							  _proto._createOverriddenMethods = function _createOverriddenMethods() {
							    var selection = this.selection;
							    var focusBlurSandbox = this.focusBlur;
							    var eventSimulator = this.eventSimulator;
							    var sandbox = this;
							    this._overriddenMethods = {
							      dispatchEvent: function dispatchEvent() {
							        listeners_1.default.beforeDispatchEvent(this);
							        var res = browser_1.isIE11 && domUtils.isWindow(this) ? native_methods_1.default.windowDispatchEvent.apply(this, arguments) : native_methods_1.default.dispatchEvent.apply(this, arguments);
							        listeners_1.default.afterDispatchEvent(this);
							        return res;
							      },
							      click: function click() {
							        listeners_1.default.beforeDispatchEvent(this);
							        var res = eventSimulator.nativeClick(this, native_methods_1.default.click);
							        listeners_1.default.afterDispatchEvent(this);
							        return res;
							      },
							      setSelectionRange: function setSelectionRange() {
							        return selection.setSelectionRangeWrapper.apply(this, arguments);
							      },
							      select: function select() {
							        return selection.selectWrapper.call(this);
							      },
							      focus: function focus() {
							        return focusBlurSandbox.focus(this, null, false, false, true);
							      },
							      blur: function blur() {
							        return focusBlurSandbox.blur(this, null, false, true);
							      },
							      preventDefault: function preventDefault() {
							        sandbox.emit(sandbox.EVENT_PREVENTED_EVENT, this);
							        return native_methods_1.default.preventDefault.call(this);
							      }
							    };
							  };

							  _proto._createInternalHandlers = function _createInternalHandlers() {
							    var shadowUI = this._shadowUI;
							    var document = this.document;
							    var eventSimulator = this.eventSimulator;

							    this._onFocus = function (e) {
							      var focusedEl = e.target;
							      var activeEl = domUtils.getActiveElement(document);
							      if (!domUtils.isShadowUIElement(focusedEl) && !domUtils.isShadowUIElement(activeEl)) shadowUI.setLastActiveElement(activeEl);
							    };

							    this._cancelInternalEvents = function (e, _dispatched, _preventEvent, _cancelHandlers, stopPropagation) {
							      // NOTE: We should cancel events raised by calling the native function (focus, blur) only if the
							      // element has a flag. If an event is dispatched, we shouldn't cancel it.
							      // After calling a native function two events were raised
							      // .focus() -> focus, focusin
							      // .blur() -> blur, focusout
							      // So we should prevent both events
							      var eventType = focus_blur_1.default.getNonBubblesEventType(e.type) || e.type;
							      var internalEventFlag = focus_blur_1.default.getInternalEventFlag(eventType); //@ts-ignore

							      if (e.target[internalEventFlag] && !e[eventSimulator.DISPATCHED_EVENT_FLAG]) stopPropagation();
							    };
							  };

							  _proto._preventInputNativeDialogs = function _preventInputNativeDialogs(window) {
							    var shouldPreventClickEvents = browser_1.isFirefox || browser_1.isIE;
							    if (!shouldPreventClickEvents) return; // NOTE: Google Chrome and Safari don't open the native browser dialog when TestCafe clicks on the input.
							    // 'Click' is a complex emulated action that uses 'dispatchEvent' method internally.
							    // Another browsers open the native browser dialog in this case.
							    // This is why, we are forced to prevent the browser's open file dialog.

							    this.listeners.addInternalEventBeforeListener(window, ['click'], function (e, dispatched) {
							      if (dispatched && domUtils.isInputWithNativeDialog(e.target)) event_1.preventDefault(e, true);
							    });
							  };

							  _proto.attach = function attach(window) {
							    _base_1$default.prototype.attach.call(this, window);

							    overriding_1.overrideFunction(window.HTMLInputElement.prototype, 'setSelectionRange', this._overriddenMethods.setSelectionRange);
							    overriding_1.overrideFunction(window.HTMLTextAreaElement.prototype, 'setSelectionRange', this._overriddenMethods.setSelectionRange);

							    if (browser_1.isIE11) {
							      overriding_1.overrideFunction(window.Window.prototype, 'dispatchEvent', this._overriddenMethods.dispatchEvent);
							      overriding_1.overrideFunction(window.Document.prototype, 'dispatchEvent', this._overriddenMethods.dispatchEvent);
							      overriding_1.overrideFunction(window.HTMLElement.prototype, 'dispatchEvent', this._overriddenMethods.dispatchEvent);
							      overriding_1.overrideFunction(window.SVGElement.prototype, 'dispatchEvent', this._overriddenMethods.dispatchEvent);
							    } else {
							      overriding_1.overrideFunction(window.EventTarget.prototype, 'dispatchEvent', this._overriddenMethods.dispatchEvent);
							    }

							    overriding_1.overrideFunction(window.HTMLElement.prototype, 'focus', this._overriddenMethods.focus);
							    overriding_1.overrideFunction(window.HTMLElement.prototype, 'blur', this._overriddenMethods.blur);
							    overriding_1.overrideFunction(window.HTMLElement.prototype, 'click', this._overriddenMethods.click);
							    overriding_1.overrideFunction(window.Event.prototype, 'preventDefault', this._overriddenMethods.preventDefault); // @ts-ignore Window constructor has no the focus method

							    window.Window.focus = this._overriddenMethods.focus; // NOTE: we cannot use 'overrideFunction' here since the focus method may not exist
							    // @ts-ignore Window constructor has no the focus method

							    overriding_1.overrideStringRepresentation(window.Window.focus, native_methods_1.default.focus); // @ts-ignore Window constructor has no the blur method

							    window.Window.blur = this._overriddenMethods.blur; // NOTE: we cannot use 'overrideFunction' here since the blur method may not exist
							    // @ts-ignore Window constructor has no the blur method

							    overriding_1.overrideStringRepresentation(window.Window.blur, native_methods_1.default.blur); // @ts-ignore TextRange exists only in IE

							    if (window.TextRange && window.TextRange.prototype.select) // @ts-ignore TextRange exists only in IE
							      overriding_1.overrideFunction(window.TextRange.prototype, 'select', this._overriddenMethods.select);
							    this.listeners.initElementListening(document, event_1.DOM_EVENTS);
							    this.listeners.initElementListening(window, event_1.DOM_EVENTS.concat(['load', 'beforeunload', 'pagehide', 'unload', 'message']));
							    this.listeners.addInternalEventBeforeListener(window, ['focus'], this._onFocus);
							    this.listeners.addInternalEventBeforeListener(window, ['focus', 'blur', 'change', 'focusin', 'focusout'], this._cancelInternalEvents);

							    this._preventInputNativeDialogs(window);

							    this.unload.attach(window);
							    this.message.attach(window);
							    this.timers.attach(window);
							    this.focusBlur.attach(window);
							    this.hover.attach(window);
							  };

							  _proto.reattach = function reattach(window) {
							    this.listeners.restartElementListening(window.document);
							    this.listeners.restartElementListening(window);
							  };

							  return EventSandbox;
							}(base_1.default);

							exports.default = EventSandbox;
							module.exports = exports.default;
						},
						"listeners.js": function (exports, module, require) {
							

							function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

							function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							var __importStar = void 0 && (void 0).__importStar || function (mod) {
							  if (mod && mod.__esModule) return mod;
							  var result = {};
							  if (mod != null) for (var k in mod) {
							    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
							  }
							  result["default"] = mod;
							  return result;
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var internal_properties_1 = __importDefault(require("../../../processing/dom/internal-properties"));

							var native_methods_1 = __importDefault(require("../native-methods"));

							var event_emitter_1 = __importDefault(require("../../utils/event-emitter"));

							var listeningCtx = __importStar(require("./listening-context"));

							var event_1 = require("../../utils/event");

							var dom_1 = require("../../utils/dom");

							var browser_1 = require("../../utils/browser");

							var overriding_1 = require("../../utils/overriding");

							var LISTENED_EVENTS = ['click', 'mousedown', 'mouseup', 'dblclick', 'contextmenu', 'mousemove', 'mouseover', 'mouseout', 'pointerdown', 'pointermove', 'pointerover', 'pointerout', 'pointerup', 'MSPointerDown', 'MSPointerMove', 'MSPointerOver', 'MSPointerOut', 'MSPointerUp', 'touchstart', 'touchmove', 'touchend', 'keydown', 'keypress', 'keyup', 'change', 'focus', 'blur', 'focusin', 'focusout'];
							var EVENT_SANDBOX_DISPATCH_EVENT_FLAG = 'hammerhead|event-sandbox-dispatch-event-flag';

							var Listeners = /*#__PURE__*/function (_event_emitter_1$defa) {
							  _inheritsLoose(Listeners, _event_emitter_1$defa);

							  function Listeners() {
							    var _this;

							    _this = _event_emitter_1$defa.call(this) || this;
							    _this.EVENT_LISTENER_ATTACHED_EVENT = 'hammerhead|event|event-listener-attached';
							    _this.EVENT_LISTENER_DETACHED_EVENT = 'hammerhead|event|event-listener-detached';
							    _this.listeningCtx = listeningCtx;
							    _this.addInternalEventBeforeListener = _this.listeningCtx.addInternalBeforeHandler;
							    _this.addFirstInternalEventBeforeListener = _this.listeningCtx.addFirstInternalBeforeHandler;
							    _this.addInternalEventAfterListener = _this.listeningCtx.addInternalAfterHandler;
							    _this.removeInternalEventBeforeListener = _this.listeningCtx.removeInternalBeforeHandler;
							    return _this;
							  }

							  Listeners._getNativeAddEventListener = function _getNativeAddEventListener(el) {
							    if (browser_1.isIE11) {
							      if (dom_1.isWindow(el)) return native_methods_1.default.windowAddEventListener;
							      return el.body !== void 0 ? native_methods_1.default.documentAddEventListener : native_methods_1.default.addEventListener;
							    }

							    return native_methods_1.default.addEventListener;
							  };

							  Listeners._getNativeRemoveEventListener = function _getNativeRemoveEventListener(el) {
							    if (browser_1.isIE11) {
							      if (dom_1.isWindow(el)) return native_methods_1.default.windowRemoveEventListener;
							      return el.body !== void 0 ? native_methods_1.default.documentRemoveEventListener : native_methods_1.default.removeEventListener;
							    }

							    return native_methods_1.default.removeEventListener;
							  };

							  Listeners._isIEServiceHandler = function _isIEServiceHandler(listener) {
							    return listener.toString() === '[object FunctionWrapper]';
							  };

							  Listeners._getEventListenerWrapper = function _getEventListenerWrapper(eventCtx, listener) {
							    return function (e) {
							      // NOTE: Ignore IE11's and Edge's service handlers (GH-379)
							      if (Listeners._isIEServiceHandler(listener) || eventCtx.cancelOuterHandlers) return null;
							      if (typeof eventCtx.outerHandlersWrapper === 'function') return eventCtx.outerHandlersWrapper.call(this, e, listener);
							      return event_1.callEventListener(this, listener, e);
							    };
							  };

							  Listeners._isDifferentHandler = function _isDifferentHandler(outerHandlers, listener, useCapture) {
							    for (var _i2 = 0; _i2 < outerHandlers.length; _i2++) {
							      var outerHandler = outerHandlers[_i2];
							      if (outerHandler.fn === listener && outerHandler.useCapture === useCapture) return false;
							    }

							    return true;
							  };

							  Listeners._getUseCaptureParam = function _getUseCaptureParam(optionalParam) {
							    if (optionalParam && typeof optionalParam === 'boolean') return optionalParam;else if (optionalParam && typeof optionalParam === 'object') return !!optionalParam.capture;
							    return false;
							  };

							  var _proto = Listeners.prototype;

							  _proto._createEventHandler = function _createEventHandler() {
							    var listeners = this;
							    return function (e) {
							      var el = this;
							      var elWindow = el[internal_properties_1.default.processedContext] || window;
							      var eventPrevented = false;
							      var handlersCancelled = false;
							      var stopPropagationCalled = false;
							      var eventCtx = listeners.listeningCtx.getEventCtx(el, e.type);
							      if (!eventCtx) return;
							      var internalHandlers = eventCtx.internalBeforeHandlers;
							      eventCtx.cancelOuterHandlers = false;

							      var preventEvent = function preventEvent(allowBubbling) {
							        eventPrevented = true;
							        event_1.preventDefault(e, allowBubbling);
							      };

							      var cancelHandlers = function cancelHandlers() {
							        if (!handlersCancelled) eventCtx.cancelOuterHandlers = true;
							        handlersCancelled = true;
							      };

							      var stopEventPropagation = function stopEventPropagation() {
							        stopPropagationCalled = true;
							        event_1.stopPropagation(e);
							      }; // NOTE: Some listeners can remove itself when executed, so we need to copy the list of listeners here


							      var currentInternalHandlers = native_methods_1.default.arraySlice.call(internalHandlers);

							      for (var _i4 = 0; _i4 < currentInternalHandlers.length; _i4++) {
							        var internalHandler = currentInternalHandlers[_i4];
							        internalHandler.call(el, e, elWindow[EVENT_SANDBOX_DISPATCH_EVENT_FLAG], preventEvent, cancelHandlers, stopEventPropagation);
							        if (eventPrevented || stopPropagationCalled) break;
							      }
							    };
							  };

							  _proto.createOverriddenMethods = function createOverriddenMethods() {
							    var listeners = this;
							    return {
							      addEventListener: function addEventListener() {
							        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
							          args[_key] = arguments[_key];
							        }

							        var eventType = args[0],
							            listener = args[1];
							        var el = this;

							        var useCapture = Listeners._getUseCaptureParam(args[2]);

							        var eventCtx = listeningCtx.getEventCtx(el, eventType);

							        var nativeAddEventListener = Listeners._getNativeAddEventListener(el);

							        if (!eventCtx || !event_1.isValidEventListener(listener)) return nativeAddEventListener.apply(el, args); // NOTE: T233158

							        var isDifferentHandler = Listeners._isDifferentHandler(eventCtx.outerHandlers, listener, useCapture);

							        if (!isDifferentHandler) return null;

							        var wrapper = Listeners._getEventListenerWrapper(eventCtx, listener);

							        args[1] = wrapper;
							        listeningCtx.wrapEventListener(eventCtx, listener, wrapper, useCapture);
							        var res = nativeAddEventListener.apply(el, args);
							        listeningCtx.updateInternalAfterHandlers(el, eventType);
							        listeners.emit(listeners.EVENT_LISTENER_ATTACHED_EVENT, {
							          el: el,
							          eventType: eventType,
							          listener: listener
							        });
							        return res;
							      },
							      removeEventListener: function removeEventListener() {
							        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
							          args[_key2] = arguments[_key2];
							        }

							        var eventType = args[0],
							            listener = args[1];
							        var el = this;

							        var useCapture = Listeners._getUseCaptureParam(args[2]);

							        var nativeRemoveEventListener = Listeners._getNativeRemoveEventListener(el);

							        var eventCtx = listeningCtx.getEventCtx(el, eventType);
							        if (!eventCtx || !event_1.isValidEventListener(listener)) return nativeRemoveEventListener.apply(el, args);
							        var wrapper = listeningCtx.getWrapper(eventCtx, listener, useCapture);
							        args[1] = wrapper;
							        var res = nativeRemoveEventListener.apply(el, args);
							        listeners.emit(listeners.EVENT_LISTENER_DETACHED_EVENT, {
							          el: el,
							          listener: listener,
							          eventType: eventType
							        });
							        return res;
							      }
							    };
							  };

							  _proto.initElementListening = function initElementListening(el, events) {
							    if (events === void 0) {
							      events = LISTENED_EVENTS;
							    }

							    var nativeAddEventListener = Listeners._getNativeAddEventListener(el);

							    for (var _i6 = 0, _events2 = events; _i6 < _events2.length; _i6++) {
							      var event = _events2[_i6];
							      if (!this.listeningCtx.getEventCtx(el, event)) nativeAddEventListener.call(el, event, this._createEventHandler(), true);
							    }

							    this.listeningCtx.addListeningElement(el, events);

							    if (browser_1.isIE11) {
							      var overriddenMethods = this.createOverriddenMethods();

							      if (!el.addEventListener) {
							        // NOTE: we cannot use 'overrideFunction' here since the functions may not exist
							        el.addEventListener = overriddenMethods.addEventListener;
							        el.removeEventListener = overriddenMethods.removeEventListener;
							        overriding_1.overrideStringRepresentation(el.addEventListener, native_methods_1.default.addEventListener);
							        overriding_1.overrideStringRepresentation(el.removeEventListener, native_methods_1.default.removeEventListener);
							      } else if (overriding_1.isNativeFunction(el.addEventListener)) {
							        overriding_1.overrideFunction(el, 'addEventListener', overriddenMethods.addEventListener);
							        overriding_1.overrideFunction(el, 'removeEventListener', overriddenMethods.removeEventListener);
							      }
							    }
							  };

							  _proto.initDocumentBodyListening = function initDocumentBodyListening(doc) {
							    listeningCtx.addListeningElement(doc.body, event_1.DOM_EVENTS);

							    if (browser_1.isIE11) {
							      var overriddenMethods = this.createOverriddenMethods();
							      overriding_1.overrideFunction(doc.body, 'addEventListener', overriddenMethods.addEventListener);
							      overriding_1.overrideFunction(doc.body, 'removeEventListener', overriddenMethods.removeEventListener);
							    }
							  };

							  _proto.restartElementListening = function restartElementListening(el) {
							    var nativeAddEventListener = Listeners._getNativeAddEventListener(el);

							    var elementCtx = this.listeningCtx.getElementCtx(el);

							    if (elementCtx) {
							      var eventNames = native_methods_1.default.objectKeys(elementCtx);

							      for (var _i8 = 0; _i8 < eventNames.length; _i8++) {
							        var eventName = eventNames[_i8];
							        nativeAddEventListener.call(el, eventName, this._createEventHandler(), true);
							      }
							    }
							  };

							  _proto.cancelElementListening = function cancelElementListening(el) {
							    this.listeningCtx.removeListeningElement(el);
							    if (el.body) this.listeningCtx.removeListeningElement(el.body);
							  };

							  Listeners.beforeDispatchEvent = function beforeDispatchEvent(el) {
							    var elWindow = el[internal_properties_1.default.processedContext] || window;
							    elWindow[EVENT_SANDBOX_DISPATCH_EVENT_FLAG] = (elWindow[EVENT_SANDBOX_DISPATCH_EVENT_FLAG] || 0) + 1;
							  };

							  Listeners.afterDispatchEvent = function afterDispatchEvent(el) {
							    var elWindow = el[internal_properties_1.default.processedContext] || window;
							    elWindow[EVENT_SANDBOX_DISPATCH_EVENT_FLAG]--;
							    if (!elWindow[EVENT_SANDBOX_DISPATCH_EVENT_FLAG]) delete elWindow[EVENT_SANDBOX_DISPATCH_EVENT_FLAG];
							  };

							  _proto.setEventListenerWrapper = function setEventListenerWrapper(el, events, wrapper) {
							    if (!this.listeningCtx.isElementListening(el)) this.initElementListening(el, events);

							    for (var _i10 = 0; _i10 < events.length; _i10++) {
							      var event = events[_i10];
							      var eventCtx = this.listeningCtx.getEventCtx(el, event);
							      eventCtx.outerHandlersWrapper = wrapper;
							    }
							  };

							  _proto.getEventListeners = function getEventListeners(el, event) {
							    var eventCtx = this.listeningCtx.getEventCtx(el, event);
							    if (!eventCtx) return null;
							    return native_methods_1.default.arrayMap.call(eventCtx.outerHandlers, function (handler) {
							      return handler.fn;
							    });
							  };

							  return Listeners;
							}(event_emitter_1.default);

							exports.default = Listeners;
							module.exports = exports.default;
						},
						"listening-context.js": function (exports, module, require) {
							

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							}); // NOTE: For internal usage of Listeners.

							var browser_1 = require("../../utils/browser");

							var native_methods_1 = __importDefault(require("../native-methods"));

							var ELEMENT_LISTENING_EVENTS_STORAGE_PROP = 'hammerhead|element-listening-events-storage-prop';

							function getElementCtx(el) {
							  return el[ELEMENT_LISTENING_EVENTS_STORAGE_PROP];
							}

							exports.getElementCtx = getElementCtx;

							function getEventCtx(el, event) {
							  event = browser_1.isIE && browser_1.version > 10 && /MSPointer/.test(event) ? event.replace('MS', '').toLowerCase() : event;
							  var elementCtx = getElementCtx(el);
							  return elementCtx && elementCtx[event];
							}

							exports.getEventCtx = getEventCtx;

							function isElementListening(el) {
							  return !!el[ELEMENT_LISTENING_EVENTS_STORAGE_PROP];
							}

							exports.isElementListening = isElementListening;

							function addListeningElement(el, events) {
							  var elementCtx = getElementCtx(el) || {};

							  for (var i = 0; i < events.length; i++) {
							    if (!elementCtx[events[i]]) {
							      elementCtx[events[i]] = {
							        internalBeforeHandlers: [],
							        internalAfterHandlers: [],
							        outerHandlers: [],
							        outerHandlersWrapper: null,
							        wrappers: [],
							        cancelOuterHandlers: false
							      };
							    }
							  }

							  if (!isElementListening(el)) {
							    native_methods_1.default.objectDefineProperty(el, ELEMENT_LISTENING_EVENTS_STORAGE_PROP, {
							      value: elementCtx,
							      writable: true
							    });
							  }
							}

							exports.addListeningElement = addListeningElement;

							function removeListeningElement(el) {
							  delete el[ELEMENT_LISTENING_EVENTS_STORAGE_PROP];
							}

							exports.removeListeningElement = removeListeningElement;

							function addInternalAfterHandler(el, events, handler) {
							  var elementCtx = getElementCtx(el);

							  for (var _i2 = 0; _i2 < events.length; _i2++) {
							    var event = events[_i2];
							    elementCtx[event].internalAfterHandlers.unshift(handler);
							    native_methods_1.default.addEventListener.call(el, event, handler);
							  }
							}

							exports.addInternalAfterHandler = addInternalAfterHandler;

							function addFirstInternalBeforeHandler(el, events, handler) {
							  var elementCtx = getElementCtx(el);

							  for (var _i4 = 0; _i4 < events.length; _i4++) {
							    var event = events[_i4];
							    elementCtx[event].internalBeforeHandlers.unshift(handler);
							  }
							}

							exports.addFirstInternalBeforeHandler = addFirstInternalBeforeHandler;

							function addInternalBeforeHandler(el, events, handler) {
							  var elementCtx = getElementCtx(el);

							  for (var _i6 = 0; _i6 < events.length; _i6++) {
							    var event = events[_i6];
							    elementCtx[event].internalBeforeHandlers.push(handler);
							  }
							}

							exports.addInternalBeforeHandler = addInternalBeforeHandler;

							function removeInternalBeforeHandler(el, events, handler) {
							  var elementCtx = getElementCtx(el);

							  for (var _i8 = 0; _i8 < events.length; _i8++) {
							    var event = events[_i8];
							    var internalBeforeHandlers = elementCtx[event].internalBeforeHandlers;
							    var handlerIndex = internalBeforeHandlers.indexOf(handler);
							    if (handlerIndex > -1) internalBeforeHandlers.splice(handlerIndex, 1);
							  }
							}

							exports.removeInternalBeforeHandler = removeInternalBeforeHandler;

							function wrapEventListener(eventCtx, listener, wrapper, useCapture) {
							  eventCtx.outerHandlers.push({
							    fn: listener,
							    useCapture: useCapture || false
							  });
							  eventCtx.wrappers.push(wrapper);
							}

							exports.wrapEventListener = wrapEventListener;

							function getWrapper(eventCtx, listener, useCapture) {
							  var originListeners = eventCtx.outerHandlers;
							  var wrappers = eventCtx.wrappers;
							  var wrapper = null;

							  for (var i = 0; i < originListeners.length; i++) {
							    var curListener = originListeners[i];

							    if (curListener.fn === listener && (curListener.useCapture || false) === (useCapture || false)) {
							      wrapper = wrappers[i];
							      wrappers.splice(i, 1);
							      originListeners.splice(i, 1);
							      return wrapper;
							    }
							  }

							  return null;
							}

							exports.getWrapper = getWrapper;

							function updateInternalAfterHandlers(el, eventType) {
							  var elementCtx = getElementCtx(el);

							  for (var _i10 = 0, _elementCtx$eventType2 = elementCtx[eventType].internalAfterHandlers; _i10 < _elementCtx$eventType2.length; _i10++) {
							    var handler = _elementCtx$eventType2[_i10];
							    native_methods_1.default.removeEventListener.call(el, eventType, handler);
							    native_methods_1.default.addEventListener.call(el, eventType, handler);
							  }
							}

							exports.updateInternalAfterHandlers = updateInternalAfterHandlers;
						},
						"message.js": function (exports, module, require) {
							

							function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

							function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							var __importStar = void 0 && (void 0).__importStar || function (mod) {
							  if (mod && mod.__esModule) return mod;
							  var result = {};
							  if (mod != null) for (var k in mod) {
							    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
							  }
							  result["default"] = mod;
							  return result;
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var pinkie_1 = __importDefault(require("pinkie"));

							var base_1 = __importDefault(require("../base"));

							var native_methods_1 = __importDefault(require("../native-methods"));

							var destLocation = __importStar(require("../../utils/destination-location"));

							var url_1 = require("../../utils/url");

							var json_hammerhead_1 = require("json-hammerhead");

							var dom_1 = require("../../utils/dom");

							var event_1 = require("../../utils/event");

							var fast_apply_1 = __importDefault(require("../../utils/fast-apply"));

							var overriding_1 = require("../../utils/overriding");

							var MessageType;

							(function (MessageType) {
							  MessageType["Service"] = "hammerhead|service-msg";
							  MessageType["User"] = "hammerhead|user-msg";
							})(MessageType || (MessageType = {}));

							var MessageSandbox = /*#__PURE__*/function (_base_1$default) {
							  _inheritsLoose(MessageSandbox, _base_1$default);

							  function MessageSandbox(_listeners, _unloadSandbox) {
							    var _this;

							    _this = _base_1$default.call(this) || this;
							    _this._listeners = _listeners;
							    _this._unloadSandbox = _unloadSandbox;
							    _this.PING_DELAY = 200;
							    _this.PING_IFRAME_TIMEOUT = 7000;
							    _this.PING_IFRAME_MIN_TIMEOUT = 100;
							    _this.SERVICE_MSG_RECEIVED_EVENT = 'hammerhead|event|service-msg-received';
							    _this.RECEIVE_MSG_FN = 'hammerhead|receive-msg-function'; // NOTE: The window.top property may be changed after an iframe is removed from DOM in IE, so we save it.

							    _this.topWindow = null;
							    _this.window = null;
							    _this.storedOnMessageHandler = null;
							    _this.isWindowUnloaded = false;
							    _this.iframeInternalMsgQueue = [];
							    return _this;
							  }

							  MessageSandbox._getMessageData = function _getMessageData(e) {
							    var rawData = dom_1.isMessageEvent(e) ? native_methods_1.default.messageEventDataGetter.call(e) : e.data;
							    return typeof rawData === 'string' ? json_hammerhead_1.parse(rawData) : rawData;
							  } // NOTE: some window may be unavailable for the sending message, for example, if it was removed.
							  // In some browsers, window.postMessage is equal null, but other throw exception by property access.
							  ;

							  MessageSandbox._isWindowAvailable = function _isWindowAvailable(window) {
							    try {
							      return !!window.postMessage;
							    } catch (e) {
							      return false;
							    }
							  } // @ts-ignore
							  ;

							  var _proto = MessageSandbox.prototype;

							  _proto._onMessage = function _onMessage(e) {
							    var data = MessageSandbox._getMessageData(e);

							    if (data.type === MessageType.Service && e.source) {
							      if (this.pingCmd && data.message.cmd === this.pingCmd && data.message.isPingResponse) {
							        this.pingCallback();
							        this.pingCallback = null;
							        this.pingCmd = null;
							      } else this.emit(this.SERVICE_MSG_RECEIVED_EVENT, {
							        message: data.message,
							        source: e.source,
							        ports: e.ports
							      });
							    }
							  };

							  _proto._onWindowMessage = function _onWindowMessage(e, originListener) {
							    var data = MessageSandbox._getMessageData(e);

							    if (data.type !== MessageType.Service) {
							      var originUrl = destLocation.get();
							      if (data.targetUrl === '*' || destLocation.sameOriginCheck(originUrl, data.targetUrl)) return event_1.callEventListener(this.window, originListener, e);
							    }

							    return null;
							  };

							  MessageSandbox._wrapMessage = function _wrapMessage(type, message, targetUrl) {
							    var parsedDest = destLocation.getParsed();
							    var originUrl = url_1.formatUrl({
							      /*eslint-disable no-restricted-properties*/
							      protocol: parsedDest.protocol,
							      host: parsedDest.host
							      /*eslint-enable no-restricted-properties*/

							    });
							    return {
							      message: message,
							      originUrl: originUrl,
							      targetUrl: targetUrl,
							      type: type
							    };
							  };

							  _proto._removeInternalMsgFromQueue = function _removeInternalMsgFromQueue(sendFunc) {
							    for (var index = 0, length = this.iframeInternalMsgQueue.length; index < length; index++) {
							      if (this.iframeInternalMsgQueue[index].sendFunc === sendFunc) {
							        this.iframeInternalMsgQueue.splice(index, 1);
							        return true;
							      }
							    }

							    return false;
							  };

							  _proto.attach = function attach(window) {
							    var _this2 = this;

							    _base_1$default.prototype.attach.call(this, window); // NOTE: The window.top property may be changed after an iframe is removed from DOM in IE, so we save it.


							    this.topWindow = window.top;
							    this.isWindowUnloaded = false;

							    this._unloadSandbox.on(this._unloadSandbox.UNLOAD_EVENT, function () {
							      _this2.isWindowUnloaded = true;

							      while (_this2.iframeInternalMsgQueue.length) {
							        var msgInfo = _this2.iframeInternalMsgQueue[0];
							        native_methods_1.default.clearTimeout.call(_this2.window, msgInfo.timeoutId);
							        msgInfo.sendFunc();
							      }
							    });

							    var onMessageHandler = function onMessageHandler() {
							      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
							        args[_key] = arguments[_key];
							      }

							      return fast_apply_1.default(_this2, '_onMessage', args);
							    };

							    var onWindowMessageHandler = function onWindowMessageHandler() {
							      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
							        args[_key2] = arguments[_key2];
							      }

							      return fast_apply_1.default(_this2, '_onWindowMessage', args);
							    };

							    this._listeners.addInternalEventBeforeListener(window, ['message'], onMessageHandler);

							    this._listeners.setEventListenerWrapper(window, ['message'], onWindowMessageHandler); // NOTE: In Google Chrome, iframes whose src contains html code raise the 'load' event twice.
							    // So, we need to define code instrumentation functions as 'configurable' so that they can be redefined.


							    native_methods_1.default.objectDefineProperty(window, this.RECEIVE_MSG_FN, {
							      value: onMessageHandler,
							      configurable: true
							    }); // @ts-ignore

							    overriding_1.overrideDescriptor(window.MessageEvent.prototype, 'data', {
							      getter: function getter() {
							        var target = this.target;
							        var data = native_methods_1.default.messageEventDataGetter.call(this);
							        if (data && data.type !== MessageType.Service && dom_1.isWindow(target)) return data.message;
							        return data;
							      }
							    }); // @ts-ignore

							    var eventPropsOwner = native_methods_1.default.isEventPropsLocatedInProto ? window.Window.prototype : window;
							    overriding_1.overrideDescriptor(eventPropsOwner, 'onmessage', {
							      getter: function getter() {
							        return _this2.storedOnMessageHandler;
							      },
							      setter: function setter(handler) {
							        _this2.storedOnMessageHandler = typeof handler === 'function' ? handler : null;
							        native_methods_1.default.winOnMessageSetter.call(window, _this2.storedOnMessageHandler ? function (e) {
							          return _this2._onWindowMessage(e, handler);
							        } : null);
							      }
							    });
							  };

							  _proto.postMessage = function postMessage(contentWindow, args) {
							    var targetUrl = args[1] || destLocation.getOriginHeader(); // NOTE: Here, we pass all messages as "no preference" ("*").
							    // We do an origin check in "_onWindowMessage" to access the target origin.

							    args[1] = '*';
							    args[0] = MessageSandbox._wrapMessage(MessageType.User, args[0], targetUrl);
							    return fast_apply_1.default(contentWindow, 'postMessage', args);
							  };

							  _proto.sendServiceMsg = function sendServiceMsg(msg, targetWindow, ports) {
							    var _this3 = this;

							    var message = MessageSandbox._wrapMessage(MessageType.Service, msg);

							    var canSendDirectly = !dom_1.isCrossDomainWindows(targetWindow, this.window) && !!targetWindow[this.RECEIVE_MSG_FN];
							    if (!canSendDirectly) return MessageSandbox._isWindowAvailable(targetWindow) && targetWindow.postMessage(message, '*', ports);

							    var sendFunc = function sendFunc(force) {
							      // NOTE: In IE, this function is called on the timeout despite the fact that the timer has been cleared
							      // in the unload event handler, so we check whether the function is in the queue
							      if (force || _this3._removeInternalMsgFromQueue(sendFunc)) {
							        // NOTE: The 'sendFunc' function may be called on timeout, so we must call 'canSendDirectly' again,
							        // because the iframe could become cross-domain in the meantime. Unfortunately, Chrome hangs when
							        // trying to call the 'isCrossDomainWindows' function, so we have to wrap it in 'try/catch'.
							        try {
							          targetWindow[_this3.RECEIVE_MSG_FN]({
							            // NOTE: Cloning a message to prevent this modification.
							            data: json_hammerhead_1.parse(json_hammerhead_1.stringify(message)),
							            source: _this3.window,
							            ports: ports
							          });
							        } // eslint-disable-next-line no-empty
							        catch (e) {}
							      }
							    };

							    if (!this.isWindowUnloaded) {
							      // NOTE: Imitation of a delay for the postMessage method.
							      // We use the same-domain top window
							      // so that the function called by setTimeout is executed after removing the iframe
							      var topSameDomainWindow = dom_1.getTopSameDomainWindow(this.window);
							      var timeoutId = native_methods_1.default.setTimeout.call(topSameDomainWindow, sendFunc, 10);
							      this.iframeInternalMsgQueue.push({
							        timeoutId: timeoutId,
							        sendFunc: sendFunc
							      });
							    } else sendFunc(true);

							    return null;
							  } // NOTE: This code is used only in legacy API.
							  ;

							  _proto.pingIframe = function pingIframe(targetIframe, pingMessageCommand, shortWaiting) {
							    var _this4 = this;

							    return new pinkie_1.default(function (resolve, reject) {
							      var pingInterval = null;
							      var pingTimeout = null;
							      var targetWindow = null;

							      var sendPingRequest = function sendPingRequest() {
							        targetWindow = native_methods_1.default.contentWindowGetter.call(targetIframe);

							        if (targetWindow) {
							          _this4.sendServiceMsg({
							            cmd: _this4.pingCmd,
							            isPingRequest: true
							          }, targetWindow);
							        }
							      };

							      var cleanTimeouts = function cleanTimeouts() {
							        native_methods_1.default.clearInterval.call(_this4.window, pingInterval);
							        native_methods_1.default.clearTimeout.call(_this4.window, pingTimeout);
							        _this4.pingCallback = null;
							        _this4.pingCmd = null;
							        pingInterval = null;
							        pingTimeout = null;
							      };

							      pingTimeout = native_methods_1.default.setTimeout.call(_this4.window, function () {
							        cleanTimeouts();
							        reject();
							      }, shortWaiting ? _this4.PING_IFRAME_MIN_TIMEOUT : _this4.PING_IFRAME_TIMEOUT);

							      _this4.pingCallback = function () {
							        cleanTimeouts();
							        resolve();
							      };

							      _this4.pingCmd = pingMessageCommand;
							      sendPingRequest();
							      pingInterval = native_methods_1.default.setInterval.call(_this4.window, sendPingRequest, _this4.PING_DELAY);
							    });
							  };

							  return MessageSandbox;
							}(base_1.default);

							exports.default = MessageSandbox;
							module.exports = exports.default;
						},
						"selection.js": function (exports, module, require) {
							

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							var __importStar = void 0 && (void 0).__importStar || function (mod) {
							  if (mod && mod.__esModule) return mod;
							  var result = {};
							  if (mod != null) for (var k in mod) {
							    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
							  }
							  result["default"] = mod;
							  return result;
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var focus_blur_1 = __importDefault(require("./focus-blur"));

							var listeners_1 = __importDefault(require("./listeners"));

							var native_methods_1 = __importDefault(require("../native-methods"));

							var browserUtils = __importStar(require("../../utils/browser"));

							var domUtils = __importStar(require("../../utils/dom"));

							var internal_properties_1 = __importDefault(require("../../../processing/dom/internal-properties"));

							var Selection = /*#__PURE__*/function () {
							  function Selection(eventSandbox) {
							    this.focusBlurSandbox = eventSandbox.focusBlur;
							    this.timersSandbox = eventSandbox.timers;
							    this.listeners = eventSandbox.listeners;
							    this.eventSimulator = eventSandbox.eventSimulator;
							    var selection = this;
							    var eventSimulator = this.eventSimulator;
							    var listeners = this.listeners;
							    var timersSandbox = this.timersSandbox;

							    this.setSelectionRangeWrapper = function () {
							      var selectionStart = arguments[0];
							      var selectionEnd = arguments[1];
							      var selectionDirection = arguments[2] || 'none';
							      var el = this;
							      var fn = domUtils.isTextAreaElement(el) ? native_methods_1.default.textAreaSetSelectionRange : native_methods_1.default.setSelectionRange;
							      var activeElement = domUtils.getActiveElement(domUtils.findDocument(el));
							      var curDocument = domUtils.findDocument(el);
							      var isElementActive = false;

							      var selectionSetter = function selectionSetter() {
							        // NOTE: These browsers cannot restore the `selectionStart` and `selectionEnd` properties when we change the `type` attribute.
							        // So we need to use our own mechanism to store the `selectionStart` and `selectionEnd` properties.
							        var useInternalSelection = domUtils.isInputWithoutSelectionProperties(el);
							        var savedType = el.type;
							        var res;
							        if (useInternalSelection) el.setAttribute('type', 'text'); // NOTE: In MSEdge, an error occurs when the setSelectionRange method is called for an input with
							        // 'display = none' and selectionStart !== selectionEnd in other IEs, the error doesn't occur, but
							        // as a result selectionStart === selectionEnd === 0.

							        try {
							          res = fn.call(el, selectionStart, selectionEnd, selectionDirection);
							        } catch (e) {
							          res = fn.call(el, 0, 0, selectionDirection);
							        }

							        if (useInternalSelection) {
							          el[internal_properties_1.default.selection] = {
							            selectionStart: el.selectionStart,
							            selectionEnd: el.selectionEnd,
							            selectionDirection: el.selectionDirection
							          };
							          el.setAttribute('type', savedType); // HACK: (A problem with input type = 'number' after Chrome is updated to v.33.0.1750.117 and
							          // in Firefox 29.0.  T101195) To set right selection: if the input type is 'number' or 'email',
							          // we need to change the type to text, and then restore it after setting selection.(B254340).
							          // However, the type is changed asynchronously in this case. To force type changing,we need to
							          // call blur, Then raise the focus event to make the element active.

							          if (isElementActive) {
							            selection.focusBlurSandbox.blur(el, null, true);
							            selection.focusBlurSandbox.focus(el, null, true); // HACK: we should call focus for previous active element again because
							            // in Firefox 55.0.3 after first focus active element isn't changed

							            if (domUtils.getActiveElement(domUtils.findDocument(el)) !== el) selection.focusBlurSandbox.focus(el, null, true);
							          }
							        } // NOTE: In MSEdge, the 'selectionchange' event doesn't occur immediately (it occurs with a delay)
							        // So, we should raise it right after the 'setSelectionRange' method.


							        if (browserUtils.isMSEdge) eventSimulator.selectionchange(el);
							        return res;
							      };

							      if (activeElement === el) {
							        isElementActive = true;
							        return selectionSetter();
							      }

							      var needFocus = browserUtils.isIE11 || browserUtils.isMSEdge && (browserUtils.version === 17 && !curDocument.hasFocus() || browserUtils.version > 17);
							      return selection.wrapSetterSelection(el, selectionSetter, needFocus);
							    };

							    this.selectWrapper = function () {
							      // NOTE: Non-standard IE Only class TextRange
							      // @ts-ignore
							      var element = this.parentElement();
							      if (!element || domUtils.getActiveElement(domUtils.findDocument(element)) === element) return native_methods_1.default.select.call(this);
							      var result = null;
							      var focusRaised = false;

							      var focusHandler = function focusHandler(e) {
							        if (e.target === element || element.style.display === 'none') focusRaised = true;
							      };

							      listeners.addInternalEventBeforeListener(document, ['focus'], focusHandler);
							      result = native_methods_1.default.select.call(this);
							      timersSandbox.setTimeout.call(window, function () {
							        timersSandbox.setTimeout.call(window, function () {
							          listeners.removeInternalEventBeforeListener(document, ['focus'], focusHandler);
							          if (!focusRaised) eventSimulator.focus(element);
							        }, 0);
							      }, 0);
							      return result;
							    };
							  }

							  var _proto = Selection.prototype;

							  _proto.setSelection = function setSelection(el, start, end, direction) {
							    if (el.setSelectionRange) el.setSelectionRange(start, end, direction);else {
							      el.selectionStart = start;
							      el.selectionEnd = end;
							    }
							  };

							  _proto.getSelection = function getSelection(el) {
							    var internalSelection = el[internal_properties_1.default.selection];
							    return {
							      start: internalSelection ? internalSelection.selectionStart : el.selectionStart,
							      end: internalSelection ? internalSelection.selectionEnd : el.selectionEnd,
							      direction: internalSelection ? internalSelection.selectionDirection : el.selectionDirection
							    };
							  };

							  _proto.wrapSetterSelection = function wrapSetterSelection(el, selectionSetter, needFocus, isContentEditable) {
							    var _this = this;

							    var curDocument = domUtils.findDocument(el);
							    var activeElement = domUtils.getActiveElement(curDocument);
							    var result = null;
							    var focusRaised = false; // NOTE: we should not call focus during selection setting
							    // if element has been focused already (TestCafe GH-2301)

							    needFocus = needFocus && activeElement !== el;

							    var focusHandler = function focusHandler(e) {
							      if (e.target === el || el.style.display === 'none') focusRaised = true;
							    };

							    if (needFocus) this.listeners.addInternalEventBeforeListener(document, ['focus'], focusHandler); // The focus and blur events

							    listeners_1.default.beforeDispatchEvent(el);
							    listeners_1.default.beforeDispatchEvent(el);
							    result = selectionSetter(); // The focus and blur events

							    listeners_1.default.afterDispatchEvent(el);
							    listeners_1.default.afterDispatchEvent(el);

							    if (needFocus) {
							      activeElement = domUtils.getActiveElement(curDocument);

							      if (activeElement !== el && (browserUtils.isWebKit || browserUtils.isMSEdge && browserUtils.version > 17)) {
							        if (focusRaised) el[focus_blur_1.default.getInternalEventFlag('focus')] = true;
							        el.focus();
							      } // NOTE: In MSEdge, focus and blur are sync.


							      if (browserUtils.isIE11) {
							        this.timersSandbox.setTimeout.call(window, function () {
							          _this.timersSandbox.setTimeout.call(window, function () {
							            _this.listeners.removeInternalEventBeforeListener(document, ['focus'], focusHandler);

							            if (!focusRaised) _this.eventSimulator.focus(el);
							          }, 0);
							        }, 0);
							      } else {
							        this.listeners.removeInternalEventBeforeListener(document, ['focus'], focusHandler);

							        if (!focusRaised) {
							          // NOTE: In Firefox, raising the dispatchEvent 'focus' doesn’t activate an element.
							          // We should call the native focus method.
							          if (isContentEditable && browserUtils.isFirefox) this.focusBlurSandbox.focus(el, null, true, false, true);else this.eventSimulator.focus(el);
							        }
							      }
							    }

							    return result;
							  };

							  return Selection;
							}();

							exports.default = Selection;
							module.exports = exports.default;
						},
						"simulator.js": function (exports, module, require) {
							

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							var __importStar = void 0 && (void 0).__importStar || function (mod) {
							  if (mod && mod.__esModule) return mod;
							  var result = {};
							  if (mod != null) for (var k in mod) {
							    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
							  }
							  result["default"] = mod;
							  return result;
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var extend_1 = __importDefault(require("../../utils/extend"));

							var native_methods_1 = __importDefault(require("../native-methods"));

							var browserUtils = __importStar(require("../../utils/browser"));

							var domUtils = __importStar(require("../../utils/dom"));

							var eventUtils = __importStar(require("../../utils/event"));

							var position_1 = require("../../utils/position");

							var style_1 = require("../../utils/style");

							var TOUCH_EVENT_RADIUS = 25;
							var TOUCH_EVENT_FORCE = 0.5;
							var POINTER_EVENT_BUTTON = {
							  noButton: -1,
							  leftButton: 0,
							  rightButton: 2
							}; // NOTE: (IE11 only) 'MouseEvent.detail' value always equals 0 for 'click' and 'dblclick' events.
							// Otherwise, MouseEvent.detail behave as described in specification - https://www.w3.org/TR/uievents/#events-mouseevents

							var DEFAULT_MOUSE_EVENT_DETAIL_PROP_VALUE = {
							  click: browserUtils.isIE ? 0 : 1,
							  dblclick: browserUtils.isIE ? 0 : 2,
							  mousedown: 1,
							  mouseup: 1
							};
							var KEY_EVENT_NAME_RE = /^key\w+$/;
							var MOUSE_EVENT_NAME_RE = /^((mouse\w+)|((dbl)?click)|(contextmenu)|(drag\w*)|(drop))$/;
							var TOUCH_EVENT_NAME_RE = /^touch\w+$/;
							var FOCUS_IN_OUT_EVENT_NAME_RE = /^focus(in|out)$/; // NOTE: initTextEvent method required INPUT_METHOD param in IE

							var DOM_INPUT_METHOD_KEYBOARD = 1;
							var MOUSE_TO_POINTER_EVENT_TYPE_MAP = {
							  mousedown: 'pointerdown',
							  mouseup: 'pointerup',
							  mousemove: 'pointermove',
							  mouseover: 'pointerover',
							  mouseenter: 'pointerenter',
							  mouseout: 'pointerout'
							};
							var TOUCH_TO_POINTER_EVENT_TYPE_MAP = {
							  touchstart: 'pointerdown',
							  touchend: 'pointerup',
							  touchmove: 'pointermove'
							};
							var DISABLEABLE_HTML_ELEMENT_TYPE_CHECKERS = [domUtils.isButtonElement, domUtils.isFieldSetElement, domUtils.isInputElement, domUtils.isOptGroupElement, domUtils.isOptionElement, domUtils.isSelectElement, domUtils.isTextAreaElement];

							var EventSimulator = /*#__PURE__*/function () {
							  function EventSimulator() {
							    this.DISPATCHED_EVENT_FLAG = 'hammerhead|dispatched-event';
							    this.touchIdentifier = native_methods_1.default.dateNow(); // NOTE: (IE only) If event dispatching calls a native click function, we should clear the window.event
							    // property (which was set in the raiseDispatchEvent function). Otherwise, the window.event property will
							    // contain the dispatched event, not the native click event. We should restore the window.event value after
							    // the click is handled. (B237144)

							    this.savedWindowEvents = [];
							    this.savedNativeClickCount = 0;
							    this.browserWithNewEventsStyle = !browserUtils.isIE11;
							  }

							  EventSimulator._dispatchStorageEvent = function _dispatchStorageEvent(el, args) {
							    var ev = native_methods_1.default.documentCreateEvent.call(document, 'StorageEvent');
							    ev.initStorageEvent('storage', args.canBubble, args.cancelable, args.key, args.oldValue, args.newValue, args.url, null);
							    native_methods_1.default.objectDefineProperty(ev, 'storageArea', {
							      get: function get() {
							        return args.storageArea;
							      },
							      configurable: true
							    });

							    if (args.key === null) {
							      native_methods_1.default.objectDefineProperty(ev, 'key', {
							        get: function get() {
							          return null;
							        },
							        configurable: true
							      });
							    }

							    return el.dispatchEvent(ev);
							  };

							  var _proto = EventSimulator.prototype;

							  _proto._dispatchTouchEvent = function _dispatchTouchEvent(el, args) {
							    var ev = native_methods_1.default.documentCreateEvent.call(document, 'TouchEvent'); // HACK: A test for iOS by using initTouchEvent arguments.
							    // TODO: Replace it with a user agent analysis later.

							    if (ev.initTouchEvent) {
							      if (browserUtils.isIOS) {
							        ev.initTouchEvent(args.type, args.canBubble, args.cancelable, args.view, args.detail, args.screenX, args.screenY, args.pageX, args.pageY, args.ctrlKey, args.altKey, args.shiftKey, args.metaKey, args.touches, args.targetTouches, args.changedTouches, args.scale === void 0 ? 1.0 : args.scale, // NOTE: B237995
							        args.rotation === void 0 ? 0.0 : args.rotation);
							      } else if (ev.initTouchEvent.length === 12) {
							        // NOTE: The Firefox.
							        ev.initTouchEvent(args.type, args.canBubble, args.cancelable, args.view, args.detail, args.ctrlKey, args.altKey, args.shiftKey, args.metaKey, args.touches, args.targetTouches, args.changedTouches);
							      } else {
							        // NOTE: The default Android browser, Dolphin.
							        ev.initTouchEvent(args.touches, args.targetTouches, args.changedTouches, args.type, args.view, args.screenX, args.screenY, args.pageX - args.view.pageXOffset, args.pageY - args.view.pageYOffset, args.ctrlKey, args.altKey, args.shiftKey, args.metaKey);
							      }
							    } else {
							      ev = new native_methods_1.default.WindowTouchEvent(args.type, {
							        touches: args.touches,
							        targetTouches: args.targetTouches,
							        changedTouches: args.changedTouches,
							        ctrlKey: args.ctrlKey,
							        altKey: args.altKey,
							        shiftKey: args.shiftKey,
							        metaKey: args.metaKey,
							        bubbles: args.canBubble,
							        cancelable: args.cancelable,
							        cancelBubble: false,
							        defaultPrevented: false,
							        detail: args.detail,
							        view: args.view
							      });
							    }

							    if (eventUtils.hasPointerEvents) this._dispatchPointerEvent(el, args);
							    return el.dispatchEvent(ev);
							  };

							  EventSimulator._getUIEventArgs = function _getUIEventArgs(type, options) {
							    if (options === void 0) {
							      options = {};
							    }

							    var detail = 'detail' in options ? options.detail : DEFAULT_MOUSE_EVENT_DETAIL_PROP_VALUE[type];
							    return {
							      type: type,
							      composed: options.composed,
							      canBubble: options.canBubble !== false,
							      cancelable: options.cancelable !== false,
							      view: options.view || window,
							      detail: detail || 0,
							      ctrlKey: options.ctrlKey || false,
							      altKey: options.altKey || false,
							      shiftKey: options.shiftKey || false,
							      metaKey: options.metaKey || false
							    };
							  };

							  EventSimulator._getStorageEventArgs = function _getStorageEventArgs(options) {
							    if (options === void 0) {
							      options = {};
							    }

							    return extend_1.default(options, {
							      canBubble: options.canBubble !== false,
							      cancelable: options.cancelable !== false
							    });
							  };

							  EventSimulator._getMouseEventArgs = function _getMouseEventArgs(type, options) {
							    if (options === void 0) {
							      options = {};
							    }

							    return extend_1.default(EventSimulator._getUIEventArgs(type, options), {
							      screenX: options.screenX || 0,
							      screenY: options.screenY || 0,
							      clientX: options.clientX || 0,
							      clientY: options.clientY || 0,
							      button: options.button === void 0 ? eventUtils.BUTTON.left : options.button,
							      buttons: options.buttons === void 0 ? eventUtils.BUTTONS_PARAMETER.leftButton : options.buttons,
							      relatedTarget: options.relatedTarget || null,
							      which: options.which
							    });
							  };

							  EventSimulator._getKeyEventArgs = function _getKeyEventArgs(type, options) {
							    var keyOptions = {
							      keyCode: options.keyCode || 0,
							      charCode: options.charCode || 0,
							      which: type === 'press' ? options.charCode : options.keyCode
							    };
							    if ('keyIdentifier' in options) keyOptions.keyIdentifier = options.keyIdentifier;
							    if ('key' in options) keyOptions.key = options.key;
							    return extend_1.default(EventSimulator._getUIEventArgs(type, options), keyOptions);
							  };

							  EventSimulator._getModifiersAsString = function _getModifiersAsString(args) {
							    var modifiersString = '';

							    for (var modifier in eventUtils.KEYBOARD_MODIFIERS_PARAMETER) {
							      if (native_methods_1.default.objectHasOwnProperty.call(eventUtils.KEYBOARD_MODIFIERS_PARAMETER, modifier) && args[modifier]) modifiersString += eventUtils.KEYBOARD_MODIFIERS_PARAMETER[modifier] + ' ';
							    }

							    return modifiersString;
							  };

							  EventSimulator._prepareMouseEventOptions = function _prepareMouseEventOptions(options) {
							    if (options === void 0) {
							      options = {};
							    }

							    var buttons = options.buttons === void 0 ? eventUtils.BUTTONS_PARAMETER.noButton : options.buttons;
							    var button = eventUtils.BUTTON.left;
							    options.buttons = buttons;
							    options.button = options.button || button;

							    if (browserUtils.isWebKit) {
							      options.which = eventUtils.WHICH_PARAMETER.leftButton;
							      if (options.buttons === eventUtils.BUTTONS_PARAMETER.noButton) options.which = eventUtils.WHICH_PARAMETER.noButton;
							      if (options.buttons === eventUtils.BUTTONS_PARAMETER.rightButton) options.which = eventUtils.WHICH_PARAMETER.rightButton;
							    }

							    return options;
							  };

							  _proto._simulateEvent = function _simulateEvent(el, event, userOptions, options) {
							    var _this = this;

							    if (options === void 0) {
							      options = {};
							    }

							    var args = null;
							    var dispatch = null; // NOTE: We don't simulate a click on links with modifiers (ctrl, shift, ctrl+shift, alt),
							    // because it causes the opening of a browser window or additional tabs in it or loading files.

							    var isClickOnLink = event === 'click' && domUtils.isAnchorElement(el);
							    var opts = extend_1.default(userOptions ? {
							      clientX: userOptions.clientX,
							      clientY: userOptions.clientY,
							      screenX: userOptions.screenX,
							      screenY: userOptions.screenY,
							      altKey: isClickOnLink ? false : userOptions.alt,
							      shiftKey: isClickOnLink ? false : userOptions.shift,
							      ctrlKey: isClickOnLink ? false : userOptions.ctrl,
							      metaKey: userOptions.meta,
							      button: userOptions.button,
							      which: userOptions.which,
							      buttons: userOptions.buttons,
							      relatedTarget: userOptions.relatedTarget
							    } : {}, options);
							    opts.composed = eventUtils.isComposedEvent(event);
							    if (!opts.relatedTarget) opts.relatedTarget = document.body;

							    if (event === 'storage') {
							      opts = extend_1.default(opts, userOptions);
							      args = EventSimulator._getStorageEventArgs(opts);
							      dispatch = EventSimulator._dispatchStorageEvent;
							    } else if (MOUSE_EVENT_NAME_RE.test(event)) {
							      if (userOptions && userOptions.button !== void 0) opts = extend_1.default(opts, {
							        button: userOptions.button
							      });
							      args = EventSimulator._getMouseEventArgs(event, opts); // eslint-disable-next-line no-shadow

							      dispatch = function dispatch(el, args) {
							        return _this._dispatchMouseRelatedEvents(el, args, userOptions);
							      };
							    } else if (KEY_EVENT_NAME_RE.test(event)) {
							      if (userOptions && (userOptions.keyCode !== void 0 || userOptions.charCode !== void 0)) {
							        opts = extend_1.default(opts, {
							          key: userOptions.key || void 0,
							          keyCode: userOptions.keyCode || 0,
							          charCode: userOptions.charCode || 0
							        });
							        if ('keyIdentifier' in userOptions) opts.keyIdentifier = userOptions.keyIdentifier;
							        if ('key' in userOptions) opts.key = userOptions.key;
							      }

							      args = EventSimulator._getKeyEventArgs(event, opts); // eslint-disable-next-line no-shadow

							      dispatch = function dispatch(el, args) {
							        return _this._dispatchKeyEvent(el, args);
							      };
							    } else if (TOUCH_EVENT_NAME_RE.test(event)) {
							      args = this._getTouchEventArgs(event, extend_1.default(opts, {
							        target: el
							      })); // eslint-disable-next-line no-shadow

							      dispatch = function dispatch(el, args) {
							        return _this._dispatchTouchEvent(el, args);
							      };
							    }

							    return dispatch(el, args);
							  };

							  _proto._getTouchEventArgs = function _getTouchEventArgs(type, options) {
							    if (options === void 0) {
							      options = {};
							    }

							    var args = extend_1.default(EventSimulator._getUIEventArgs(type, options), {
							      screenX: options.screenX || 0,
							      screenY: options.screenY || 0,
							      clientX: options.clientX || 0,
							      clientY: options.clientY || 0,
							      pageX: options.clientX || 0,
							      pageY: options.clientY || 0,
							      identifier: this._getTouchIdentifier(type)
							    });

							    if (native_methods_1.default.documentCreateTouch) {
							      if (browserUtils.isIOS) args.touch = native_methods_1.default.documentCreateTouch.call(document, args.view, options.target, args.identifier, args.clientX, args.clientY, 0, 0);else {
							        // NOTE: B237995
							        args.touch = native_methods_1.default.documentCreateTouch.call(document, args.view, options.target, args.identifier, args.pageX, args.pageY, args.screenX, args.screenY, args.clientX, args.clientY, null, null, args.rotation === void 0 ? 0 : args.rotation);
							      }
							    } else {
							      args.touch = new native_methods_1.default.WindowTouch({
							        identifier: args.identifier,
							        target: options.target,
							        clientX: args.clientX,
							        clientY: args.clientY,
							        pageX: args.pageX,
							        pageY: args.pageY,
							        screenX: args.screenX,
							        screenY: args.screenY,
							        rotationAngle: 0,
							        radiusX: TOUCH_EVENT_RADIUS,
							        radiusY: TOUCH_EVENT_RADIUS,
							        force: TOUCH_EVENT_FORCE
							      });
							    }

							    args.changedTouches = [args.touch]; // NOTE: T170088

							    args.touches = args.type === 'touchend' ? [] : args.changedTouches;

							    if (native_methods_1.default.documentCreateTouchList) {
							      var _native_methods_1$def, _native_methods_1$def2;

							      args.changedTouches = (_native_methods_1$def = native_methods_1.default.documentCreateTouchList).call.apply(_native_methods_1$def, [document].concat(args.changedTouches));
							      args.touches = (_native_methods_1$def2 = native_methods_1.default.documentCreateTouchList).call.apply(_native_methods_1$def2, [document].concat(args.touches));
							    }

							    args.targetTouches = args.touches;
							    return args;
							  };

							  _proto._getTouchIdentifier = function _getTouchIdentifier(type) {
							    // NOTE: A touch point is created when the 'touchstart' event occurs. When the point' is moved,
							    // its id must not be changed (T112153).
							    if (type === 'touchstart') this.touchIdentifier++;
							    return this.touchIdentifier;
							  };

							  _proto._raiseNativeClick = function _raiseNativeClick(el, originClick) {
							    // NOTE: B254199
							    var iframe = domUtils.isElementInIframe(el) && domUtils.getIframeByElement(el);
							    var curWindow = iframe ? native_methods_1.default.contentWindowGetter.call(iframe) : window;
							    var prevWindowEvent = curWindow.event;
							    if (browserUtils.isIE11) delete curWindow.event;
							    originClick.call(el); // NOTE: Window.event becomes empty when the click event handler
							    // triggers the click event for a different element in IE11.(GH-226).

							    if (browserUtils.isIE11 && prevWindowEvent) {
							      native_methods_1.default.objectDefineProperty(curWindow, 'event', {
							        get: function get() {
							          return prevWindowEvent;
							        },
							        configurable: true
							      });
							    }
							  };

							  _proto._dispatchKeyEvent = function _dispatchKeyEvent(el, args) {
							    var ev = null;

							    if (this.browserWithNewEventsStyle && native_methods_1.default.WindowKeyboardEvent) {
							      var eventArgs = {
							        bubbles: args.canBubble,
							        composed: args.composed,
							        cancelable: args.cancelable,
							        cancelBubble: false,
							        defaultPrevented: false,
							        view: args.view,
							        detail: args.detail,
							        ctrlKey: args.ctrlKey,
							        altKey: args.altKey,
							        shiftKey: args.shiftKey,
							        metaKey: args.metaKey,
							        keyCode: args.keyCode,
							        charCode: args.charCode,
							        which: args.which
							      };
							      if ('keyIdentifier' in args) eventArgs.keyIdentifier = args.keyIdentifier;
							      if ('key' in args) eventArgs.key = args.key;
							      ev = new native_methods_1.default.WindowKeyboardEvent(args.type, eventArgs);
							    } else if (native_methods_1.default.documentCreateEvent) {
							      ev = native_methods_1.default.documentCreateEvent.call(document, 'KeyboardEvent');
							      ev.initKeyboardEvent(args.type, args.canBubble, args.cancelable, args.view, '', 0, EventSimulator._getModifiersAsString(args), false, '');
							    }

							    if (ev) {
							      // NOTE: the window.event.keyCode, window.event.charCode, window.event.which and
							      // window.event.key properties are not assigned after KeyboardEvent is created
							      native_methods_1.default.objectDefineProperty(ev, 'keyCode', {
							        configurable: true,
							        enumerable: true,
							        get: function get() {
							          return args.keyCode;
							        }
							      });
							      native_methods_1.default.objectDefineProperty(ev, 'charCode', {
							        configurable: true,
							        enumerable: true,
							        get: function get() {
							          return args.charCode;
							        }
							      });
							      native_methods_1.default.objectDefineProperty(ev, 'which', {
							        configurable: true,
							        enumerable: true,
							        get: function get() {
							          return args.which;
							        }
							      });

							      if ('key' in args) {
							        native_methods_1.default.objectDefineProperty(ev, 'key', {
							          configurable: true,
							          enumerable: true,
							          get: function get() {
							            return args.key;
							          }
							        });
							      }

							      if ('keyIdentifier' in args) {
							        native_methods_1.default.objectDefineProperty(ev, 'keyIdentifier', {
							          configurable: true,
							          enumerable: true,
							          get: function get() {
							            return args.keyIdentifier;
							          }
							        });
							      }

							      var defaultPrevented = false;
							      var returnValue = true; // NOTE: the dispatchEvent method does not return false in the case when preventDefault method
							      // was called for events that were created with the KeyboardEvent constructor

							      if (this.browserWithNewEventsStyle) {
							        ev.preventDefault = function () {
							          defaultPrevented = true;
							          native_methods_1.default.preventDefault.call(ev);
							          return false;
							        };
							      } // NOTE: the dispatchEvent method does not return false when returnValue was set to false (only in MSEdge)


							      if (browserUtils.isMSEdge) {
							        native_methods_1.default.objectDefineProperty(ev, 'returnValue', {
							          get: function get() {
							            return returnValue;
							          },
							          set: function set(value) {
							            if (value === false) ev.preventDefault();
							            returnValue = value;
							          }
							        });
							      }

							      var res = this._raiseDispatchEvent(el, ev);

							      if (browserUtils.isMSEdge) return returnValue && !defaultPrevented;else if (browserUtils.isIE) return res;
							      return !defaultPrevented;
							    }

							    return null;
							  };

							  _proto._getPointerEventTypeInfo = function _getPointerEventTypeInfo(type) {
							    if (MOUSE_TO_POINTER_EVENT_TYPE_MAP[type]) {
							      return {
							        eventType: MOUSE_TO_POINTER_EVENT_TYPE_MAP[type],
							        pointerType: 'mouse'
							      };
							    }

							    if (browserUtils.isChrome && TOUCH_TO_POINTER_EVENT_TYPE_MAP[type]) {
							      return {
							        eventType: TOUCH_TO_POINTER_EVENT_TYPE_MAP[type],
							        pointerType: 'touch'
							      };
							    }

							    return null;
							  };

							  _proto._dispatchPointerEvent = function _dispatchPointerEvent(el, args) {
							    var pointerEventTypeInfo = this._getPointerEventTypeInfo(args.type);

							    if (!pointerEventTypeInfo) return;
							    var eventType = pointerEventTypeInfo.eventType,
							        pointerType = pointerEventTypeInfo.pointerType;
							    var pointEvent = null;
							    var elPosition = position_1.getOffsetPosition(el);
							    var elBorders = style_1.getBordersWidth(el);
							    var elClientPosition = position_1.offsetToClientCoords({
							      x: elPosition.left + elBorders.left,
							      y: elPosition.top + elBorders.top
							    });
							    var pointerArgs = extend_1.default({
							      width: 1,
							      height: 1,
							      pressure: 0,
							      tiltX: 0,
							      tiltY: 0,
							      // NOTE: This parameter must be "1" for “mouse”.
							      pointerId: 1,
							      pointerType: pointerType,
							      timeStamp: native_methods_1.default.dateNow(),
							      isPrimary: true
							    }, args);
							    pointerArgs.type = eventType;
							    pointerArgs.offsetX = args.clientX - elClientPosition.x;
							    pointerArgs.offsetY = args.clientY - elClientPosition.y;
							    if (args.type === 'mousemove' || args.type === 'mouseover' || args.type === 'mouseout') pointerArgs.button = args.buttons === eventUtils.BUTTONS_PARAMETER.noButton ? POINTER_EVENT_BUTTON.noButton : pointerArgs.button;

							    if (browserUtils.isIE11) {
							      pointerArgs.rotation = 0;
							      pointEvent = native_methods_1.default.documentCreateEvent.call(document, 'PointerEvent'); // NOTE: We set the relatedTarget argument to null because IE has a memory leak.

							      pointEvent.initPointerEvent(pointerArgs.type, pointerArgs.canBubble, pointerArgs.cancelable, window, pointerArgs.detail, pointerArgs.screenX, pointerArgs.screenY, pointerArgs.clientX, pointerArgs.clientY, pointerArgs.ctrlKey, pointerArgs.altKey, pointerArgs.shiftKey, pointerArgs.metaKey, pointerArgs.button, null, pointerArgs.offsetX, pointerArgs.offsetY, pointerArgs.width, pointerArgs.height, pointerArgs.pressure, pointerArgs.rotation, pointerArgs.tiltX, pointerArgs.tiltY, pointerArgs.pointerId, pointerArgs.pointerType, pointerArgs.timeStamp, pointerArgs.isPrimary); // NOTE: After dispatching the pointer event, it doesn't contain the 'target' and 'relatedTarget' properties.

							      native_methods_1.default.objectDefineProperty(pointEvent, 'target', {
							        get: function get() {
							          return el;
							        },
							        configurable: true
							      });
							      native_methods_1.default.objectDefineProperty(pointEvent, 'relatedTarget', {
							        get: function get() {
							          return args.relatedTarget;
							        },
							        configurable: true
							      });
							      native_methods_1.default.objectDefineProperty(pointEvent, 'buttons', {
							        get: function get() {
							          return args.buttons;
							        }
							      });
							    } else {
							      pointerArgs.bubbles = true;
							      pointerArgs.cancelable = true;
							      pointEvent = new native_methods_1.default.WindowPointerEvent(eventType, pointerArgs);
							    }

							    this._raiseDispatchEvent(el, pointEvent);
							  };

							  _proto._elementCanBeDisabled = function _elementCanBeDisabled(el) {
							    for (var _i2 = 0; _i2 < DISABLEABLE_HTML_ELEMENT_TYPE_CHECKERS.length; _i2++) {
							      var elementCanBeDisabled = DISABLEABLE_HTML_ELEMENT_TYPE_CHECKERS[_i2];

							      if (elementCanBeDisabled(el)) {
							        return true;
							      }
							    }

							    return false;
							  };

							  _proto._dispatchMouseRelatedEvents = function _dispatchMouseRelatedEvents(el, args, userOptions) {
							    if (userOptions === void 0) {
							      userOptions = {};
							    }

							    if (args.type !== 'mouseover' && args.type !== 'mouseenter' && position_1.shouldIgnoreMouseEventInsideIframe(el, args.clientX, args.clientY)) return true; // NOTE: In IE, submit doesn't work if a click is simulated for some submit button's children (for example,
							    // img, B236676). In addition, if a test is being recorded in IE, the target of a click event is always a
							    // button, not a child, so the child does not receive the click event.

							    if (browserUtils.isIE) {
							      if (args.type === 'click' || args.type === 'mouseup' || args.type === 'mousedown') {
							        var elParent = native_methods_1.default.nodeParentNodeGetter.call(el);
							        var closestButton = domUtils.closest(elParent, 'button');

							        if (elParent && closestButton) {
							          if (native_methods_1.default.getAttribute.call(closestButton, 'type') === 'submit') el = closestButton;
							        }
							      }
							    }

							    if (eventUtils.hasPointerEvents) this._dispatchPointerEvent(el, args);
							    return this._dispatchMouseEvent(el, args, userOptions);
							  };

							  _proto._dispatchMouseEvent = function _dispatchMouseEvent(el, args, _ref) {
							    var _this2 = this;

							    var dataTransfer = _ref.dataTransfer,
							        timeStamp = _ref.timeStamp;
							    var disabledParent = domUtils.findParent(el, true, function (node) {
							      return _this2._elementCanBeDisabled(node) && node.hasAttribute && native_methods_1.default.hasAttribute.call(node, 'disabled');
							    });
							    if (disabledParent) return null;
							    var event = null;

							    if (this.browserWithNewEventsStyle && native_methods_1.default.WindowMouseEvent) {
							      event = new native_methods_1.default.WindowMouseEvent(args.type, {
							        bubbles: args.canBubble,
							        composed: args.composed,
							        cancelable: args.cancelable,
							        view: window,
							        detail: args.detail,
							        screenX: args.screenX,
							        screenY: args.screenY,
							        clientX: args.clientX,
							        clientY: args.clientY,
							        ctrlKey: args.ctrlKey,
							        altKey: args.altKey,
							        shiftKey: args.shiftKey,
							        metaKey: args.metaKey,
							        button: args.button,
							        buttons: args.buttons,
							        relatedTarget: args.relatedTarget
							      });
							    } else {
							      event = native_methods_1.default.documentCreateEvent.call(document, 'MouseEvents');
							      event.initMouseEvent(args.type, args.canBubble, args.cancelable, window, args.detail, args.screenX, args.screenY, args.clientX, args.clientY, args.ctrlKey, args.altKey, args.shiftKey, args.metaKey, args.button, args.relatedTarget);
							      native_methods_1.default.objectDefineProperty(event, 'buttons', {
							        get: function get() {
							          return args.buttons;
							        }
							      });
							    } // NOTE: T188166 (act.hover triggers the mouseenter event with the "which" parameter set to 1).


							    if (args.which !== void 0 && browserUtils.isWebKit) {
							      native_methods_1.default.objectDefineProperty(event, 'which', {
							        get: function get() {
							          return args.which;
							        }
							      });
							    }

							    if (timeStamp && !browserUtils.isIE) {
							      native_methods_1.default.objectDefineProperty(event, 'timeStamp', {
							        get: function get() {
							          return timeStamp;
							        }
							      });
							    }

							    if (dataTransfer) {
							      native_methods_1.default.objectDefineProperty(event, 'dataTransfer', {
							        configurable: true,
							        enumerable: true,
							        get: function get() {
							          return dataTransfer;
							        }
							      });
							    }

							    return this._raiseDispatchEvent(el, event);
							  };

							  _proto._dispatchFocusEvent = function _dispatchFocusEvent(el, name, relatedTarget) {
							    if (relatedTarget === void 0) {
							      relatedTarget = null;
							    }

							    var event = null;
							    var bubbles = FOCUS_IN_OUT_EVENT_NAME_RE.test(name);

							    if (this.browserWithNewEventsStyle && native_methods_1.default.WindowFocusEvent) {
							      event = new native_methods_1.default.WindowFocusEvent(name, {
							        bubbles: bubbles,
							        composed: eventUtils.isComposedEvent(name),
							        cancelable: false,
							        cancelBubble: false,
							        relatedTarget: relatedTarget,
							        defaultPrevented: false
							      });
							    } else if (native_methods_1.default.documentCreateEvent) {
							      event = native_methods_1.default.documentCreateEvent.call(document, 'FocusEvent');
							      event.initFocusEvent(name, bubbles, true, null, 0, bubbles ? relatedTarget : null);
							    }

							    if (event) {
							      event[this.DISPATCHED_EVENT_FLAG] = true;
							      return this._raiseDispatchEvent(el, event);
							    }

							    return null;
							  };

							  _proto._dispatchTextEvent = function _dispatchTextEvent(el, text) {
							    if (native_methods_1.default.WindowTextEvent && native_methods_1.default.documentCreateEvent) {
							      var event = native_methods_1.default.documentCreateEvent.call(document, 'TextEvent');
							      var args = {
							        eventType: browserUtils.isIE11 ? 'textinput' : 'textInput',
							        bubbles: true,
							        cancelable: true,
							        view: window,
							        data: text,
							        inputMethod: DOM_INPUT_METHOD_KEYBOARD,
							        locale: navigator.language
							      };
							      event.initTextEvent(args.eventType, args.bubbles, args.cancelable, args.view, args.data, args.inputMethod, args.locale);
							      return this._raiseDispatchEvent(el, event);
							    }

							    return null;
							  };

							  _proto._dispatchInputEvent = function _dispatchInputEvent(el, type, data) {
							    if (!native_methods_1.default.WindowInputEvent) return this._dispatchEvent(el, type, true);
							    var args = {
							      bubbles: true,
							      composed: eventUtils.isComposedEvent(type),
							      cancelable: true,
							      view: window,
							      inputType: 'insertText'
							    };
							    if (data !== void 0) args.data = data;
							    var event = new native_methods_1.default.WindowInputEvent(type, args);
							    return this._raiseDispatchEvent(el, event);
							  };

							  _proto._dispatchEvent = function _dispatchEvent(el, name, shouldBubble, flag) {
							    var ev = null;

							    if (native_methods_1.default.documentCreateEvent) {
							      ev = native_methods_1.default.documentCreateEvent.call(document, 'Events');
							      ev.initEvent(name, shouldBubble, true);
							    }

							    if (ev) {
							      if (flag) ev[flag] = true;
							      return this._raiseDispatchEvent(el, ev);
							    }

							    return null;
							  };

							  _proto._raiseDispatchEvent = function _raiseDispatchEvent(el, ev) {
							    var iframe = domUtils.isElementInIframe(el) && domUtils.getIframeByElement(el);
							    var curWindow = iframe ? native_methods_1.default.contentWindowGetter.call(iframe) : window;

							    if (browserUtils.isIE11 && iframe && curWindow) {
							      // NOTE: In IE, when we raise an event by using the dispatchEvent function, the window.event object is null.
							      // If a real event happens, there is a window.event object, but it is not identical with the first argument
							      // of the event handler. The window.Event object is identical with the object that is created when we raise
							      // the event by using  the fireEvent function. So, when we raise the event by using the dispatchEvent function,
							      // we need to set the window.event object manually. An exception for IE11: The window.event object is not null
							      // and it’s the same as in the event handler (only in window.top.event). Also, in iE11, window.event doesn’t
							      // have the returnValue property, so it’s impossible to prevent the event by assigning window.event.returnValue
							      // to false.
							      // NOTE: In IE11, iframe's window.event object is null. We need to set
							      // iframe's window.event object manually by using window.event (B254199).
							      native_methods_1.default.objectDefineProperty(curWindow, 'event', {
							        get: function get() {
							          return window.event;
							        },
							        configurable: true
							      });
							    }

							    var res = el.dispatchEvent(ev); // NOTE: GH-226

							    if (browserUtils.isIE11 && curWindow) delete curWindow.event;
							    return res;
							  }
							  /* NOTE: options = {
							   [clientX: integer,]
							   [clientY: integer,]
							   [alt: true|false,]
							   [ctrl: true|false,]
							   [shift: true|false,]
							   [meta: true|false,]
							   [button: Util.BUTTON]
							  } */
							  ;

							  _proto.click = function click(el, options) {
							    return this._simulateEvent(el, 'click', options, {
							      button: eventUtils.BUTTON.left,
							      buttons: eventUtils.BUTTONS_PARAMETER.noButton
							    });
							  };

							  _proto.nativeClick = function nativeClick(el, originClick) {
							    this._raiseNativeClick(el, originClick);
							  };

							  _proto.dblclick = function dblclick(el, options) {
							    return this._simulateEvent(el, 'dblclick', options, {
							      button: eventUtils.BUTTON.left,
							      buttons: eventUtils.BUTTONS_PARAMETER.noButton
							    });
							  };

							  _proto.rightclick = function rightclick(el, options) {
							    return this._simulateEvent(el, 'click', options, {
							      button: eventUtils.BUTTON.right,
							      buttons: eventUtils.BUTTONS_PARAMETER.rightButton
							    });
							  };

							  _proto.contextmenu = function contextmenu(el, options) {
							    return this._simulateEvent(el, 'contextmenu', options, {
							      button: eventUtils.BUTTON.right,
							      buttons: eventUtils.BUTTONS_PARAMETER.noButton
							    });
							  };

							  _proto.mousedown = function mousedown(el, options) {
							    if (options === void 0) {
							      options = {};
							    }

							    var button = options.button === void 0 ? eventUtils.BUTTON.left : options.button;
							    var buttons = button === eventUtils.BUTTON.left ? eventUtils.BUTTONS_PARAMETER.leftButton : eventUtils.BUTTONS_PARAMETER.rightButton;
							    options.button = button;
							    options.buttons = options.buttons === void 0 ? buttons : options.buttons;
							    return this._simulateEvent(el, 'mousedown', options);
							  };

							  _proto.mouseup = function mouseup(el, options) {
							    if (options === void 0) {
							      options = {};
							    }

							    var button = options.button === void 0 ? eventUtils.BUTTON.left : options.button;
							    return this._simulateEvent(el, 'mouseup', options, {
							      button: button,
							      buttons: eventUtils.BUTTONS_PARAMETER.noButton
							    });
							  };

							  _proto.mouseover = function mouseover(el, options) {
							    options = EventSimulator._prepareMouseEventOptions(options);
							    return this._simulateEvent(el, 'mouseover', options);
							  };

							  _proto.mousemove = function mousemove(el, options) {
							    options = EventSimulator._prepareMouseEventOptions(options);
							    return this._simulateEvent(el, 'mousemove', options, {
							      cancelable: false
							    });
							  };

							  _proto.mouseout = function mouseout(el, options) {
							    options = EventSimulator._prepareMouseEventOptions(options);
							    return this._simulateEvent(el, 'mouseout', options);
							  };

							  _proto.mouseenter = function mouseenter(el, options) {
							    options = EventSimulator._prepareMouseEventOptions(options);
							    return this._simulateEvent(el, 'mouseenter', options, {
							      canBubble: false
							    });
							  };

							  _proto.mouseleave = function mouseleave(el, options) {
							    options = EventSimulator._prepareMouseEventOptions(options);
							    return this._simulateEvent(el, 'mouseleave', options, {
							      canBubble: false
							    });
							  } // NOTE: Keyboard events.
							  ;

							  _proto.keypress = function keypress(el, options) {
							    return this._simulateEvent(el, 'keypress', options);
							  };

							  _proto.keyup = function keyup(el, options) {
							    return this._simulateEvent(el, 'keyup', options);
							  };

							  _proto.keydown = function keydown(el, options) {
							    return this._simulateEvent(el, 'keydown', options);
							  } // NOTE: Control events.
							  // NOTE: "focus", "blur" and "selectionchange" shouldn't bubble (T229732),
							  // but "input", "change" and "submit" should do it (GH-318).
							  ;

							  _proto.blur = function blur(el, relatedTarget) {
							    return this._dispatchFocusEvent(el, 'blur', relatedTarget);
							  };

							  _proto.focus = function focus(el, relatedTarget) {
							    return this._dispatchFocusEvent(el, 'focus', relatedTarget);
							  };

							  _proto.focusin = function focusin(el, relatedTarget) {
							    return this._dispatchFocusEvent(el, 'focusin', relatedTarget);
							  };

							  _proto.focusout = function focusout(el, relatedTarget) {
							    return this._dispatchFocusEvent(el, 'focusout', relatedTarget);
							  };

							  _proto.storage = function storage(window, options) {
							    return this._simulateEvent(window, 'storage', options);
							  };

							  _proto.change = function change(el) {
							    return this._dispatchEvent(el, 'change', true, this.DISPATCHED_EVENT_FLAG);
							  };

							  _proto.textInput = function textInput(el, data) {
							    return this._dispatchTextEvent(el, data);
							  };

							  _proto.beforeInput = function beforeInput(el, data) {
							    return this._dispatchInputEvent(el, 'beforeinput', data);
							  };

							  _proto.input = function input(el, data) {
							    return this._dispatchInputEvent(el, 'input', data);
							  };

							  _proto.submit = function submit(el) {
							    return this._dispatchEvent(el, 'submit', true);
							  };

							  _proto.selectionchange = function selectionchange(el) {
							    return this._dispatchEvent(el, 'selectionchange', false);
							  } // NOTE: Touch events.
							  ;

							  _proto.touchstart = function touchstart(el, options) {
							    return this._simulateEvent(el, 'touchstart', options);
							  };

							  _proto.touchend = function touchend(el, options) {
							    return this._simulateEvent(el, 'touchend', options);
							  };

							  _proto.touchmove = function touchmove(el, options) {
							    return this._simulateEvent(el, 'touchmove', options);
							  } // NOTE: drag and drop
							  ;

							  _proto.dragstart = function dragstart(el, options) {
							    return this._simulateEvent(el, 'dragstart', options);
							  };

							  _proto.drag = function drag(el, options) {
							    return this._simulateEvent(el, 'drag', options);
							  };

							  _proto.dragenter = function dragenter(el, options) {
							    return this._simulateEvent(el, 'dragenter', options);
							  };

							  _proto.dragover = function dragover(el, options) {
							    return this._simulateEvent(el, 'dragover', options);
							  };

							  _proto.dragleave = function dragleave(el, options) {
							    return this._simulateEvent(el, 'dragleave', options);
							  };

							  _proto.drop = function drop(el, options) {
							    return this._simulateEvent(el, 'drop', options);
							  };

							  _proto.dragend = function dragend(el, options) {
							    return this._simulateEvent(el, 'dragend', options);
							  };

							  _proto.isSavedWindowsEventsExists = function isSavedWindowsEventsExists() {
							    return this.savedWindowEvents && this.savedWindowEvents.length;
							  };

							  return EventSimulator;
							}();

							exports.default = EventSimulator;
							module.exports = exports.default;
						},
						"unload.js": function (exports, module, require) {
							

							function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

							function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var base_1 = __importDefault(require("../base"));

							var native_methods_1 = __importDefault(require("../native-methods"));

							var create_property_desc_js_1 = __importDefault(require("../../utils/create-property-desc.js"));

							var browser_1 = require("../../utils/browser");

							var overriding_1 = require("../../utils/overriding");

							var UnloadSandbox = /*#__PURE__*/function (_base_1$default) {
							  _inheritsLoose(UnloadSandbox, _base_1$default);

							  function UnloadSandbox(_listeners) {
							    var _this;

							    _this = _base_1$default.call(this) || this;
							    _this._listeners = _listeners;
							    _this.BEFORE_UNLOAD_EVENT = 'hammerhead|event|before-unload';
							    _this.BEFORE_BEFORE_UNLOAD_EVENT = 'hammerhead|event|before-before-unload';
							    _this.UNLOAD_EVENT = 'hammerhead|event|unload';
							    _this.beforeUnloadProperties = {
							      storedReturnValue: '',
							      prevented: false,
							      storedHandler: null,
							      nativeEventName: UnloadSandbox._getBeforeUnloadEventName(),
							      eventName: _this.BEFORE_UNLOAD_EVENT,
							      eventPropSetter: UnloadSandbox._getBeforeUnloadPropSetter()
							    };
							    _this.unloadProperties = {
							      storedReturnValue: '',
							      prevented: false,
							      storedHandler: null,
							      nativeEventName: 'unload',
							      eventName: _this.UNLOAD_EVENT,
							      eventPropSetter: native_methods_1.default.winOnUnloadSetter
							    };
							    return _this;
							  }

							  UnloadSandbox._getBeforeUnloadEventName = function _getBeforeUnloadEventName() {
							    // NOTE: the ios devices do not support beforeunload event
							    // https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html#//apple_ref/doc/uid/TP40006511-SW5
							    return browser_1.isIOS ? 'pagehide' : 'beforeunload';
							  };

							  UnloadSandbox._getBeforeUnloadPropSetter = function _getBeforeUnloadPropSetter() {
							    // NOTE: the ios devices do not support beforeunload event
							    // https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html#//apple_ref/doc/uid/TP40006511-SW5
							    return browser_1.isIOS ? native_methods_1.default.winOnPageHideSetter : native_methods_1.default.winOnBeforeUnloadSetter;
							  } // NOTE: This handler has to be called after others.
							  ;

							  var _proto = UnloadSandbox.prototype;

							  _proto._emitEvent = function _emitEvent(eventProperties) {
							    this.emit(eventProperties.eventName, {
							      returnValue: eventProperties.storedReturnValue,
							      prevented: eventProperties.prevented
							    });
							  };

							  _proto._createEventHandler = function _createEventHandler(eventProperties) {
							    return function (e, originListener) {
							      // NOTE: Overriding the returnValue property to prevent a native dialog.
							      native_methods_1.default.objectDefineProperty(e, 'returnValue', create_property_desc_js_1.default({
							        get: function get() {
							          return eventProperties.storedReturnValue;
							        },
							        set: function set(value) {
							          // NOTE: In all browsers, if the property is set to any value, unload is prevented. In FireFox,
							          // only if a value is set to an empty string, the unload operation is prevented.
							          eventProperties.storedReturnValue = value;
							          eventProperties.prevented = browser_1.isFirefox ? value !== '' : true;
							        }
							      }));
							      native_methods_1.default.objectDefineProperty(e, 'preventDefault', create_property_desc_js_1.default({
							        get: function get() {
							          return function () {
							            eventProperties.prevented = true;
							            return true;
							          };
							        },
							        set: function set() {
							          return void 0;
							        }
							      }));
							      var res = originListener(e);

							      if (res !== void 0) {
							        eventProperties.storedReturnValue = res;
							        eventProperties.prevented = true;
							      }
							    };
							  };

							  _proto._reattachListener = function _reattachListener(eventProperties) {
							    var nativeAddEventListener = native_methods_1.default.windowAddEventListener || native_methods_1.default.addEventListener;
							    var nativeRemoveEventListener = native_methods_1.default.windowRemoveEventListener || native_methods_1.default.removeEventListener; // NOTE: reattach the Listener, it'll be the last in the queue.

							    nativeRemoveEventListener.call(this.window, eventProperties.nativeEventName, this);
							    nativeAddEventListener.call(this.window, eventProperties.nativeEventName, this);
							  };

							  _proto._setEventListenerWrapper = function _setEventListenerWrapper(eventProperties) {
							    this._listeners.setEventListenerWrapper(window, [eventProperties.nativeEventName], this._createEventHandler(eventProperties));
							  };

							  _proto._addEventListener = function _addEventListener(eventProperties) {
							    var _this2 = this;

							    var nativeAddEventListener = native_methods_1.default.windowAddEventListener || native_methods_1.default.addEventListener;
							    nativeAddEventListener.call(window, eventProperties.nativeEventName, this);

							    this._listeners.on(this._listeners.EVENT_LISTENER_ATTACHED_EVENT, function (e) {
							      if (e.el === window && e.eventType === eventProperties.nativeEventName) _this2._reattachListener(eventProperties);
							    });
							  };

							  _proto._overrideEventDescriptor = function _overrideEventDescriptor(eventProperties) {
							    var _this3 = this;

							    // @ts-ignore
							    var eventPropsOwner = native_methods_1.default.isEventPropsLocatedInProto ? window.Window.prototype : window; // @ts-ignore

							    overriding_1.overrideDescriptor(eventPropsOwner, 'on' + eventProperties.nativeEventName, {
							      getter: function getter() {
							        return eventProperties.storedHandler;
							      },
							      setter: function setter(handler) {
							        return _this3.setOnEvent(eventProperties, window, handler);
							      }
							    });
							  };

							  _proto._attachEvent = function _attachEvent(eventProperties) {
							    this._setEventListenerWrapper(eventProperties);

							    this._addEventListener(eventProperties);

							    this._overrideEventDescriptor(eventProperties);
							  };

							  _proto.attach = function attach(window) {
							    var _this4 = this;

							    _base_1$default.prototype.attach.call(this, window);

							    this._attachEvent(this.beforeUnloadProperties);

							    this._attachEvent(this.unloadProperties);

							    this._listeners.addInternalEventBeforeListener(window, [this.beforeUnloadProperties.nativeEventName], function () {
							      return _this4.emit(_this4.BEFORE_BEFORE_UNLOAD_EVENT);
							    });
							  };

							  _proto.setOnEvent = function setOnEvent(eventProperties, window, handler) {
							    var _this5 = this;

							    if (typeof handler === 'function') {
							      eventProperties.storedHandler = handler;
							      eventProperties.eventPropSetter.call(window, function (e) {
							        return _this5._createEventHandler(eventProperties)(e, handler);
							      });

							      this._reattachListener(eventProperties);
							    } else {
							      eventProperties.storedHandler = null;
							      eventProperties.eventPropSetter.call(window, null);
							    }
							  };

							  _proto.handleEvent = function handleEvent(e) {
							    if (e.type === this.beforeUnloadProperties.nativeEventName) this._emitEvent(this.beforeUnloadProperties);else if (e.type === this.unloadProperties.nativeEventName) this._emitEvent(this.unloadProperties);
							  };

							  return UnloadSandbox;
							}(base_1.default);

							exports.default = UnloadSandbox;
							module.exports = exports.default;
						}
					},
					"fetch.js": function (exports, module, require) {
						

						function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

						function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						var __importStar = void 0 && (void 0).__importStar || function (mod) {
						  if (mod && mod.__esModule) return mod;
						  var result = {};
						  if (mod != null) for (var k in mod) {
						    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
						  }
						  result["default"] = mod;
						  return result;
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var sandbox_base_with_delayed_settings_1 = __importDefault(require("../worker/sandbox-base-with-delayed-settings"));

						var native_methods_1 = __importDefault(require("./native-methods"));

						var builtin_header_names_1 = __importDefault(require("../../request-pipeline/builtin-header-names"));

						var url_1 = require("../utils/url");

						var dom_1 = require("../utils/dom");

						var overriding_1 = require("../utils/overriding");

						var browserUtils = __importStar(require("../utils/browser"));

						var url_2 = require("../../utils/url");

						var headers_1 = require("../../utils/headers");

						function getCredentialsMode(credentialsOpt) {
						  credentialsOpt = String(credentialsOpt).toLowerCase();

						  switch (credentialsOpt) {
						    case 'omit':
						      return url_2.Credentials.omit;

						    case 'same-origin':
						      return url_2.Credentials.sameOrigin;

						    case 'include':
						      return url_2.Credentials.include;

						    default:
						      return url_2.Credentials.unknown;
						  }
						}

						var DEFAULT_REQUEST_CREDENTIALS = getCredentialsMode(native_methods_1.default.Request && new native_methods_1.default.Request(location.toString()).credentials);

						var FetchSandbox = /*#__PURE__*/function (_sandbox_base_with_de) {
						  _inheritsLoose(FetchSandbox, _sandbox_base_with_de);

						  function FetchSandbox(cookieSandbox, waitHammerheadSettings) {
						    var _this;

						    _this = _sandbox_base_with_de.call(this, waitHammerheadSettings) || this;
						    _this.cookieSandbox = cookieSandbox;
						    _this.FETCH_REQUEST_SENT_EVENT = 'hammerhead|event|fetch-request-sent-event';
						    return _this;
						  }

						  FetchSandbox._removeAuthHeadersPrefix = function _removeAuthHeadersPrefix(name, value) {
						    if (headers_1.isAuthorizationHeader(name)) return headers_1.removeAuthorizationPrefix(value);else if (headers_1.isAuthenticateHeader(name)) return headers_1.removeAuthenticatePrefix(value);
						    return value;
						  };

						  FetchSandbox._processInit = function _processInit(init) {
						    var headers = init.headers;
						    if (!headers) return init;

						    if (!dom_1.isFetchHeaders(headers)) {
						      headers = headers ? new native_methods_1.default.Headers(headers) : new native_methods_1.default.Headers();
						      init.headers = headers;
						    }

						    var authorizationValue = native_methods_1.default.headersGet.call(headers, builtin_header_names_1.default.authorization);
						    var proxyAuthorizationValue = native_methods_1.default.headersGet.call(headers, builtin_header_names_1.default.proxyAuthorization);
						    if (authorizationValue !== null && !headers_1.hasAuthorizationPrefix(authorizationValue)) native_methods_1.default.headersSet.call(headers, builtin_header_names_1.default.authorization, headers_1.addAuthorizationPrefix(authorizationValue));
						    if (proxyAuthorizationValue !== null && !headers_1.hasAuthorizationPrefix(proxyAuthorizationValue)) native_methods_1.default.headersSet.call(headers, builtin_header_names_1.default.proxyAuthorization, headers_1.addAuthorizationPrefix(proxyAuthorizationValue));
						    return init;
						  };

						  FetchSandbox._processArguments = function _processArguments(args) {
						    var input = args[0],
						        init = args[1];
						    var inputIsString = typeof input === 'string';
						    var optsCredentials = getCredentialsMode(init && init.credentials);

						    if (!dom_1.isFetchRequest(input)) {
						      var url = inputIsString ? input : String(input);
						      var credentials = optsCredentials === url_2.Credentials.unknown ? DEFAULT_REQUEST_CREDENTIALS : optsCredentials;
						      args[0] = url_1.getAjaxProxyUrl(url, credentials);
						      args[1] = FetchSandbox._processInit(init || {});
						    } else {
						      if (optsCredentials !== url_2.Credentials.unknown) args[0] = url_1.getAjaxProxyUrl(input.url, optsCredentials);
						      if (init && init.headers && input.destination !== 'worker') args[1] = FetchSandbox._processInit(init);
						    }
						  };

						  FetchSandbox._processHeaderEntry = function _processHeaderEntry(entry, isOnlyValue) {
						    if (isOnlyValue === void 0) {
						      isOnlyValue = false;
						    }

						    if (entry.done) return entry;
						    /* eslint-disable no-restricted-properties */

						    var processedValue = FetchSandbox._removeAuthHeadersPrefix(entry.value[0], entry.value[1]);

						    if (isOnlyValue) entry.value = processedValue;else entry.value[1] = processedValue;
						    /* eslint-enable no-restricted-properties */

						    return entry;
						  };

						  FetchSandbox._entriesWrapper = function _entriesWrapper() {
						    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
						      args[_key] = arguments[_key];
						    }

						    var iterator = native_methods_1.default.headersEntries.apply(this, args);
						    var nativeNext = iterator.next;

						    iterator.next = function () {
						      return FetchSandbox._processHeaderEntry(nativeNext.call(iterator));
						    };

						    return iterator;
						  };

						  FetchSandbox._valuesWrapper = function _valuesWrapper() {
						    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
						      args[_key2] = arguments[_key2];
						    }

						    var iterator = native_methods_1.default.headersEntries.apply(this, args);
						    var nativeNext = iterator.next;

						    iterator.next = function () {
						      return FetchSandbox._processHeaderEntry(nativeNext.call(iterator), true);
						    };

						    return iterator;
						  };

						  var _proto = FetchSandbox.prototype;

						  _proto.attach = function attach(window) {
						    _sandbox_base_with_de.prototype.attach.call(this, window, window.document);

						    if (!native_methods_1.default.fetch) return;
						    var sandbox = this;
						    overriding_1.overrideConstructor(window, 'Request', function () {
						      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
						        args[_key3] = arguments[_key3];
						      }

						      FetchSandbox._processArguments(args);

						      window.Headers.prototype.entries = window.Headers.prototype[Symbol.iterator] = native_methods_1.default.headersEntries;
						      var request = args.length === 1 ? new native_methods_1.default.Request(args[0]) : new native_methods_1.default.Request(args[0], args[1]);
						      window.Headers.prototype.entries = window.Headers.prototype[Symbol.iterator] = FetchSandbox._entriesWrapper;
						      return request;
						    });
						    overriding_1.overrideDescriptor(window.Request.prototype, 'url', {
						      getter: function getter() {
						        return url_1.getDestinationUrl(native_methods_1.default.requestUrlGetter.call(this));
						      }
						    });
						    overriding_1.overrideDescriptor(window.Request.prototype, 'referrer', {
						      getter: function getter() {
						        return url_1.getDestinationUrl(native_methods_1.default.requestReferrerGetter.call(this));
						      }
						    });
						    overriding_1.overrideFunction(window, 'fetch', function () {
						      var _this2 = this;

						      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
						        args[_key4] = arguments[_key4];
						      }

						      if (sandbox.gettingSettingInProgress()) return sandbox.delayUntilGetSettings(function () {
						        return _this2.fetch.apply(_this2, args);
						      }); // NOTE: Safari processed the empty `fetch()` request without `Promise` rejection (GH-1613)

						      if (!args.length && !browserUtils.isSafari) return native_methods_1.default.fetch.apply(this, args);

						      try {
						        FetchSandbox._processArguments(args);
						      } catch (e) {
						        return native_methods_1.default.promiseReject.call(sandbox.window.Promise, e);
						      }

						      window.Headers.prototype.entries = window.Headers.prototype[Symbol.iterator] = native_methods_1.default.headersEntries;
						      var fetchPromise = native_methods_1.default.fetch.apply(this, args);
						      window.Headers.prototype.entries = window.Headers.prototype[Symbol.iterator] = FetchSandbox._entriesWrapper;
						      sandbox.emit(sandbox.FETCH_REQUEST_SENT_EVENT, fetchPromise);
						      return native_methods_1.default.promiseThen.call(fetchPromise, function (response) {
						        sandbox.cookieSandbox.syncCookie();
						        return response;
						      });
						    });
						    overriding_1.overrideDescriptor(window.Response.prototype, 'url', {
						      getter: function getter() {
						        return url_1.getDestinationUrl(native_methods_1.default.responseUrlGetter.call(this));
						      }
						    });
						    overriding_1.overrideFunction(window.Headers.prototype, 'entries', FetchSandbox._entriesWrapper);
						    overriding_1.overrideFunction(window.Headers.prototype, Symbol.iterator, FetchSandbox._entriesWrapper);
						    overriding_1.overrideFunction(window.Headers.prototype, 'values', FetchSandbox._valuesWrapper);
						    overriding_1.overrideFunction(window.Headers.prototype, 'forEach', function () {
						      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
						        args[_key5] = arguments[_key5];
						      }

						      var callback = args[0];

						      if (typeof callback === 'function') {
						        args[0] = function (value, name, headers) {
						          value = FetchSandbox._removeAuthHeadersPrefix(name, value);
						          callback.call(this, value, name, headers);
						        };
						      }

						      return native_methods_1.default.headersForEach.apply(this, args);
						    });
						    overriding_1.overrideFunction(window.Headers.prototype, 'get', function () {
						      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
						        args[_key6] = arguments[_key6];
						      }

						      var value = native_methods_1.default.headersGet.apply(this, args);
						      return value && FetchSandbox._removeAuthHeadersPrefix(args[0], value);
						    });
						    overriding_1.overrideFunction(window.Headers.prototype, 'set', function () {
						      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
						        args[_key7] = arguments[_key7];
						      }

						      if (headers_1.isAuthorizationHeader(args[0])) args[1] = headers_1.addAuthorizationPrefix(args[1]);
						      return native_methods_1.default.headersSet.apply(this, args);
						    });
						  };

						  return FetchSandbox;
						}(sandbox_base_with_delayed_settings_1.default);

						exports.default = FetchSandbox;
						module.exports = exports.default;
					},
					"ie-debug.js": function (exports, module, require) {
						

						function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

						function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var base_1 = __importDefault(require("./base"));

						var browser_1 = require("../utils/browser");

						var BROWSERTOOLS_CONSOLE_SAFEFUNC = '__BROWSERTOOLS_CONSOLE_SAFEFUNC';

						var IEDebugSandbox = /*#__PURE__*/function (_base_1$default) {
						  _inheritsLoose(IEDebugSandbox, _base_1$default);

						  function IEDebugSandbox() {
						    var _this;

						    _this = _base_1$default.call(this) || this;
						    _this._isDebuggerInitiator = false;
						    return _this;
						  }

						  var _proto = IEDebugSandbox.prototype;

						  _proto._createFuncWrapper = function _createFuncWrapper(func) {
						    var _this2 = this;

						    if (typeof func === 'function') {
						      return function (fn, safeAssert) {
						        var ieDebugSandbox = _this2;
						        return function () {
						          ieDebugSandbox._isDebuggerInitiator = true;

						          try {
						            var result = fn(arguments);
						            ieDebugSandbox._isDebuggerInitiator = false;
						            return result;
						          } catch (e) {
						            safeAssert(e);
						          }

						          ieDebugSandbox._isDebuggerInitiator = false;
						        };
						      };
						    }

						    return func;
						  };

						  _proto.isDebuggerInitiator = function isDebuggerInitiator() {
						    return this._isDebuggerInitiator;
						  };

						  _proto.attach = function attach(window) {
						    var _this3 = this;

						    if (!browser_1.isIE) return;
						    var descriptor = this.nativeMethods.objectGetOwnPropertyDescriptor(window, BROWSERTOOLS_CONSOLE_SAFEFUNC);
						    var wrapper = void 0;

						    if (!descriptor || descriptor.value) {
						      // eslint-disable-line no-restricted-properties
						      if (descriptor) wrapper = this._createFuncWrapper(descriptor.value); // eslint-disable-line no-restricted-properties

						      this.nativeMethods.objectDefineProperty(window, BROWSERTOOLS_CONSOLE_SAFEFUNC, {
						        set: function set(fn) {
						          wrapper = _this3._createFuncWrapper(fn);
						        },
						        get: function get() {
						          return wrapper;
						        }
						      });
						    }
						  };

						  return IEDebugSandbox;
						}(base_1.default);

						exports.default = IEDebugSandbox;
						module.exports = exports.default;
					},
					"iframe.js": function (exports, module, require) {
						

						function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

						function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						var __importStar = void 0 && (void 0).__importStar || function (mod) {
						  if (mod && mod.__esModule) return mod;
						  var result = {};
						  if (mod != null) for (var k in mod) {
						    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
						  }
						  result["default"] = mod;
						  return result;
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var internal_properties_1 = __importDefault(require("../../processing/dom/internal-properties"));

						var base_1 = __importDefault(require("./base"));

						var settings_1 = __importDefault(require("../settings"));

						var native_methods_1 = __importDefault(require("../sandbox/native-methods"));

						var dom_1 = __importDefault(require("../../processing/dom"));

						var dom_2 = require("../utils/dom");

						var browser_1 = require("../utils/browser");

						var JSON = __importStar(require("json-hammerhead"));

						var overriding_1 = require("../utils/overriding");

						var IFRAME_WINDOW_INITED = 'hammerhead|iframe-window-inited';

						var IframeSandbox = /*#__PURE__*/function (_base_1$default) {
						  _inheritsLoose(IframeSandbox, _base_1$default);

						  function IframeSandbox(_nodeMutation, _cookieSandbox) {
						    var _this;

						    _this = _base_1$default.call(this) || this;
						    _this._nodeMutation = _nodeMutation;
						    _this._cookieSandbox = _cookieSandbox;
						    _this.RUN_TASK_SCRIPT_EVENT = 'hammerhead|event|run-task-script';
						    _this.EVAL_HAMMERHEAD_SCRIPT_EVENT = 'hammerhead|event|eval-hammerhead-script';
						    _this.EVAL_EXTERNAL_SCRIPT_EVENT = 'hammerhead|event|eval-external-script';
						    _this.IFRAME_DOCUMENT_CREATED_EVENT = 'hammerhead|event|iframe-document-created';

						    _this.on(_this.RUN_TASK_SCRIPT_EVENT, _this.iframeReadyToInitHandler);

						    _this._nodeMutation.on(_this._nodeMutation.IFRAME_ADDED_TO_DOM_EVENT, function (iframe) {
						      return _this.processIframe(iframe);
						    });

						    _this.iframeNativeMethodsBackup = null;
						    return _this;
						  }

						  var _proto = IframeSandbox.prototype;

						  _proto._shouldSaveIframeNativeMethods = function _shouldSaveIframeNativeMethods(iframe) {
						    if (!browser_1.isWebKit) return false;
						    var iframeSrc = this.nativeMethods.getAttribute.call(iframe, 'src');
						    return dom_1.default.isJsProtocol(iframeSrc);
						  };

						  _proto._ensureIframeNativeMethodsForChrome = function _ensureIframeNativeMethodsForChrome(iframe) {
						    var contentWindow = native_methods_1.default.contentWindowGetter.call(iframe);
						    var contentDocument = native_methods_1.default.contentDocumentGetter.call(iframe);

						    if (this.iframeNativeMethodsBackup) {
						      this.iframeNativeMethodsBackup.restoreDocumentMeths(contentWindow, contentDocument);
						      this.iframeNativeMethodsBackup = null;
						    } else if (this._shouldSaveIframeNativeMethods(iframe)) // @ts-ignore
						      this.iframeNativeMethodsBackup = new this.nativeMethods.constructor(contentDocument, contentWindow);
						  };

						  _proto._ensureIframeNativeMethodsForIE = function _ensureIframeNativeMethodsForIE(iframe) {
						    var contentWindow = native_methods_1.default.contentWindowGetter.call(iframe);
						    var contentDocument = native_methods_1.default.contentDocumentGetter.call(iframe);
						    var iframeNativeMethods = contentWindow[internal_properties_1.default.iframeNativeMethods];

						    if (iframeNativeMethods) {
						      iframeNativeMethods.restoreDocumentMeths(contentWindow, contentDocument);
						      delete contentWindow[internal_properties_1.default.iframeNativeMethods];
						    }
						  };

						  _proto._ensureIframeNativeMethods = function _ensureIframeNativeMethods(iframe) {
						    // NOTE: In Chrome, iframe with javascript protocol src raises the load event twice.
						    // As a result, when the second load event is raised, we write the overridden methods to the native methods.
						    // So, we need to save the native methods when the first load event is raised.
						    // https://code.google.com/p/chromium/issues/detail?id=578812
						    this._ensureIframeNativeMethodsForChrome(iframe); // NOTE: Restore native document methods for the iframe's document if it overrided earlier (IE9, IE10 only)
						    // https://github.com/DevExpress/testcafe-hammerhead/issues/279


						    this._ensureIframeNativeMethodsForIE(iframe);
						  };

						  _proto._emitEvents = function _emitEvents(iframe) {
						    // NOTE: Raise this internal event to eval the Hammerhead code script.
						    this.emit(this.EVAL_HAMMERHEAD_SCRIPT_EVENT, {
						      iframe: iframe
						    }); // NOTE: Raise this event to eval external code script.

						    this.emit(this.EVAL_EXTERNAL_SCRIPT_EVENT, {
						      iframe: iframe
						    }); // NOTE: Raise this event to eval the "task" script and to call the Hammerhead initialization method
						    // and external script initialization code.

						    this.emit(this.RUN_TASK_SCRIPT_EVENT, iframe);
						  };

						  _proto._raiseReadyToInitEvent = function _raiseReadyToInitEvent(iframe) {
						    if (!dom_2.isIframeWithoutSrc(iframe)) return;
						    var contentWindow = native_methods_1.default.contentWindowGetter.call(iframe);
						    var contentDocument = native_methods_1.default.contentDocumentGetter.call(iframe);

						    if (!IframeSandbox.isIframeInitialized(iframe)) {
						      // NOTE: Even if iframe is not loaded (iframe.contentDocument.documentElement does not exist), we
						      // still need to override the document.write method without initializing Hammerhead. This method can
						      // be called before iframe is fully loaded, we should override it now.
						      if (overriding_1.isNativeFunction(contentDocument.write)) this.emit(this.IFRAME_DOCUMENT_CREATED_EVENT, {
						        iframe: iframe
						      });
						    } else if (!contentWindow[IFRAME_WINDOW_INITED] && !contentWindow[internal_properties_1.default.hammerhead]) {
						      this._ensureIframeNativeMethods(iframe); // NOTE: Ok, the iframe is fully loaded now, but Hammerhead is not injected.


						      native_methods_1.default.objectDefineProperty(contentWindow, IFRAME_WINDOW_INITED, {
						        value: true
						      });

						      this._emitEvents(iframe);

						      contentWindow[internal_properties_1.default.processDomMethodName]();
						    }
						  };

						  IframeSandbox.isIframeInitialized = function isIframeInitialized(iframe) {
						    var contentWindow = native_methods_1.default.contentWindowGetter.call(iframe);
						    var contentDocument = native_methods_1.default.contentDocumentGetter.call(iframe);
						    var isFFIframeUninitialized = browser_1.isFirefox && contentWindow.document.readyState === 'uninitialized';
						    return !isFFIframeUninitialized && !!contentDocument.documentElement || browser_1.isIE && contentWindow[internal_properties_1.default.documentWasCleaned];
						  };

						  IframeSandbox.isWindowInited = function isWindowInited(window) {
						    return window[IFRAME_WINDOW_INITED];
						  };

						  _proto.iframeReadyToInitHandler = function iframeReadyToInitHandler(iframe) {
						    // NOTE: We are using String.replace in order to avoid adding Mustache scripts on the client side.
						    // If it is needed elsewhere in a certain place, we should consider using Mustache.
						    var taskScriptTemplate = settings_1.default.get().iframeTaskScriptTemplate;

						    var escapeStringPatterns = function escapeStringPatterns(str) {
						      return str.replace(/\$/g, '$$$$');
						    };

						    var cookie = JSON.stringify(this._cookieSandbox.getCookie());
						    var referer = settings_1.default.get().referer || this.window.location.toString();
						    var iframeTaskScriptTemplate = JSON.stringify(taskScriptTemplate);
						    var taskScript = taskScriptTemplate.replace('{{{cookie}}}', escapeStringPatterns(cookie)).replace('{{{referer}}}', escapeStringPatterns(JSON.stringify(referer))).replace('{{{iframeTaskScriptTemplate}}}', escapeStringPatterns(iframeTaskScriptTemplate));
						    var contentWindow = native_methods_1.default.contentWindowGetter.call(iframe);
						    contentWindow.eval.call(contentWindow, taskScript);
						  };

						  _proto.onIframeBeganToRun = function onIframeBeganToRun(iframe) {
						    this._raiseReadyToInitEvent(iframe);
						  };

						  _proto.processIframe = function processIframe(el) {
						    var _this2 = this;

						    if (dom_2.isShadowUIElement(el)) return;
						    if (dom_2.isIframeElement(el) && native_methods_1.default.contentWindowGetter.call(el) || dom_2.isFrameElement(el) && native_methods_1.default.frameContentWindowGetter.call(el)) this._raiseReadyToInitEvent(el); // NOTE: This handler exists for iframes without the src attribute. In some the browsers (e.g. Chrome)
						    // the load event is triggering immediately after an iframe added to DOM. In other browsers,
						    // the _raiseReadyToInitEvent function is calling in our function wrapper after an iframe added to DOM.

						    this.nativeMethods.addEventListener.call(el, 'load', function () {
						      return _this2._raiseReadyToInitEvent(el);
						    });
						  };

						  return IframeSandbox;
						}(base_1.default);

						exports.default = IframeSandbox;
						module.exports = exports.default;
					},
					"index.js": function (exports, module, require) {
						

						function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

						function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

						function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						var __importStar = void 0 && (void 0).__importStar || function (mod) {
						  if (mod && mod.__esModule) return mod;
						  var result = {};
						  if (mod != null) for (var k in mod) {
						    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
						  }
						  result["default"] = mod;
						  return result;
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var internal_properties_1 = __importDefault(require("../../processing/dom/internal-properties"));

						var code_instrumentation_1 = __importDefault(require("./code-instrumentation"));

						var cookie_1 = __importDefault(require("./cookie"));

						var element_editing_watcher_1 = __importDefault(require("./event/element-editing-watcher"));

						var event_1 = __importDefault(require("./event"));

						var simulator_1 = __importDefault(require("./event/simulator"));

						var iframe_1 = __importDefault(require("./iframe"));

						var listeners_1 = __importDefault(require("./event/listeners"));

						var message_1 = __importDefault(require("./event/message"));

						var mutation_1 = __importDefault(require("./node/mutation"));

						var node_1 = __importDefault(require("./node"));

						var base_1 = __importDefault(require("./base"));

						var shadow_ui_1 = __importDefault(require("./shadow-ui"));

						var timers_1 = __importDefault(require("./timers"));

						var unload_1 = __importDefault(require("./event/unload"));

						var upload_1 = __importDefault(require("./upload"));

						var xhr_1 = __importDefault(require("./xhr"));

						var fetch_1 = __importDefault(require("./fetch"));

						var storages_1 = __importDefault(require("./storages"));

						var electron_1 = __importDefault(require("./electron"));

						var console_1 = __importDefault(require("./console"));

						var style_1 = __importDefault(require("./style"));

						var browser_1 = require("../utils/browser");

						var html_1 = require("../utils/html");

						var anchor_1 = require("./code-instrumentation/properties/anchor");

						var backup_1 = require("./backup");

						var url_resolver_1 = __importDefault(require("../utils/url-resolver"));

						var windowStorage = __importStar(require("./windows-storage"));

						var native_methods_1 = __importDefault(require("../sandbox/native-methods"));

						var ie_debug_1 = __importDefault(require("./ie-debug"));

						var child_window_1 = __importDefault(require("./child-window"));

						var Sandbox = /*#__PURE__*/function (_base_1$default) {
						  _inheritsLoose(Sandbox, _base_1$default);

						  function Sandbox(transport) {
						    var _this;

						    _this = _base_1$default.call(this) || this;
						    backup_1.create(window, _assertThisInitialized(_this));
						    windowStorage.add(window);
						    var ieDebugSandbox = new ie_debug_1.default();
						    var listeners = new listeners_1.default();
						    var nodeMutation = new mutation_1.default();
						    var unloadSandbox = new unload_1.default(listeners);
						    var messageSandbox = new message_1.default(listeners, unloadSandbox);
						    var eventSimulator = new simulator_1.default();
						    var elementEditingWatcher = new element_editing_watcher_1.default(eventSimulator);
						    var timersSandbox = new timers_1.default();
						    var childWindowSandbox = new child_window_1.default(messageSandbox, listeners);
						    var cookieSandbox = new cookie_1.default(messageSandbox, unloadSandbox, childWindowSandbox); // API

						    _this.ieDebug = ieDebugSandbox;
						    _this.cookie = cookieSandbox; // eslint-disable-line no-restricted-properties

						    _this.childWindow = childWindowSandbox;
						    _this.storageSandbox = new storages_1.default(listeners, unloadSandbox, eventSimulator);
						    _this.xhr = new xhr_1.default(cookieSandbox);
						    _this.fetch = new fetch_1.default(cookieSandbox);
						    _this.iframe = new iframe_1.default(nodeMutation, cookieSandbox);
						    _this.shadowUI = new shadow_ui_1.default(nodeMutation, messageSandbox, _this.iframe, ieDebugSandbox);
						    _this.upload = new upload_1.default(listeners, eventSimulator, transport);
						    _this.event = new event_1.default(listeners, eventSimulator, elementEditingWatcher, unloadSandbox, messageSandbox, _this.shadowUI, timersSandbox);
						    _this.node = new node_1.default(nodeMutation, _this.iframe, _this.event, _this.upload, _this.shadowUI, cookieSandbox, _this.childWindow);
						    _this.codeInstrumentation = new code_instrumentation_1.default(_this.event, messageSandbox);
						    _this.console = new console_1.default(messageSandbox);
						    _this.style = new style_1.default();
						    _this.unload = unloadSandbox;
						    if (browser_1.isElectron) _this.electron = new electron_1.default();
						    _this.windowStorage = windowStorage;
						    return _this;
						  } // NOTE: In some cases, IE raises the "Can't execute code from a freed script" exception,
						  // so that we cannot use a sandbox created earlier and we have to create a new one.


						  Sandbox._canUseSandbox = function _canUseSandbox(sandbox) {
						    try {
						      //@ts-ignore
						      sandbox.off();
						    } catch (e) {
						      return false;
						    }

						    return true;
						  };

						  var _proto = Sandbox.prototype;

						  _proto.onIframeDocumentRecreated = function onIframeDocumentRecreated(iframe) {
						    if (iframe) {
						      var contentWindow = native_methods_1.default.contentWindowGetter.call(iframe);
						      var contentDocument = native_methods_1.default.contentDocumentGetter.call(iframe); // NOTE: Try to find an existing iframe sandbox.

						      var sandbox = backup_1.get(contentWindow);

						      if (sandbox && Sandbox._canUseSandbox(sandbox)) {
						        if (!contentWindow[internal_properties_1.default.sandboxIsReattached] || sandbox.document !== contentDocument) {
						          // NOTE: Inform the sandbox so that it restores communication with the recreated document.
						          sandbox.reattach(contentWindow, contentDocument);
						        }
						      } else {
						        // NOTE: Remove saved native methods for iframe
						        if (contentWindow[internal_properties_1.default.iframeNativeMethods]) delete contentWindow[internal_properties_1.default.iframeNativeMethods]; // NOTE: If the iframe sandbox is not found, this means that iframe is not initialized.
						        // In this case, we need to inject Hammerhead.
						        // HACK: IE10 cleans up overridden methods after the document.write method call.

						        this.nativeMethods.restoreDocumentMeths(contentWindow, contentDocument); // NOTE: A sandbox for this iframe is not found (iframe is not yet initialized).
						        // Inform IFrameSandbox about this, and it injects Hammerhead.

						        this.iframe.onIframeBeganToRun(iframe);
						      }
						    }
						  };

						  _proto.reattach = function reattach(window, document) {
						    native_methods_1.default.objectDefineProperty(window, internal_properties_1.default.sandboxIsReattached, {
						      value: true,
						      configurable: false
						    }); // NOTE: Assign the existing sandbox to the cleared document.

						    if (browser_1.isIE) this.nativeMethods.refreshIfNecessary(document, window);
						    url_resolver_1.default.init(document);
						    this.event.reattach(window);
						    this.shadowUI.attach(window); // NOTE: T182337

						    this.codeInstrumentation.attach(window);
						    this.node.doc.attach(window, document);
						    this.console.attach(window);
						    this.childWindow.attach(window);
						  };

						  _proto.attach = function attach(window) {
						    var _this2 = this;

						    _base_1$default.prototype.attach.call(this, window);

						    native_methods_1.default.objectDefineProperty(window, internal_properties_1.default.sandboxIsReattached, {
						      value: true,
						      configurable: false
						    });
						    url_resolver_1.default.init(this.document); // NOTE: Eval Hammerhead code script.

						    this.iframe.on(this.iframe.EVAL_HAMMERHEAD_SCRIPT_EVENT, function (e) {
						      // @ts-ignore
						      native_methods_1.default.contentWindowGetter.call(e.iframe).eval("(" + initHammerheadClient.toString() + ")();//# sourceURL=hammerhead.js");
						    }); // NOTE: We need to reattach a sandbox to the recreated iframe document.

						    this.node.mutation.on(this.node.mutation.DOCUMENT_CLEANED_EVENT, function (e) {
						      return _this2.reattach(e.window, e.document);
						    });
						    this.ieDebug.attach(window);
						    this.iframe.attach(window);
						    this.xhr.attach(window);
						    this.fetch.attach(window);
						    this.storageSandbox.attach(window);
						    this.codeInstrumentation.attach(window);
						    this.shadowUI.attach(window);
						    this.event.attach(window);
						    this.node.attach(window);
						    this.upload.attach(window);
						    this.cookie.attach(window); // eslint-disable-line no-restricted-properties

						    this.console.attach(window);
						    this.style.attach(window);
						    this.childWindow.attach(window);
						    if (this.electron) this.electron.attach(window);
						    this.unload.on(this.unload.UNLOAD_EVENT, function () {
						      return _this2.dispose();
						    });
						  };

						  _proto._removeInternalProperties = function _removeInternalProperties() {
						    var removeListeningElement = this.event.listeners.listeningCtx.removeListeningElement;
						    removeListeningElement(this.window);
						    removeListeningElement(this.document);
						    var childNodes = native_methods_1.default.querySelectorAll.call(this.document, '*');
						    var length = native_methods_1.default.nodeListLengthGetter.call(childNodes);

						    for (var i = 0; i < length; i++) {
						      var childNode = childNodes[i];
						      delete childNode[internal_properties_1.default.processedContext];
						      removeListeningElement(childNode);
						    }
						  };

						  _proto.dispose = function dispose() {
						    this.event.hover.dispose();
						    this.event.focusBlur.dispose();
						    html_1.dispose();
						    anchor_1.dispose();
						    url_resolver_1.default.dispose(this.document);
						    this.storageSandbox.dispose();

						    this._removeInternalProperties();
						  };

						  return Sandbox;
						}(base_1.default);

						exports.default = Sandbox;
						module.exports = exports.default;
					},
					"native-methods.js": function (exports, module, require) {
						

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});
						/*global Document, Window */

						var global_context_info_1 = __importDefault(require("../utils/global-context-info"));

						var overriding_1 = require("../utils/overriding");

						var NATIVE_CODE_RE = /\[native code]/;

						var NativeMethods = /*#__PURE__*/function () {
						  function NativeMethods(doc, win) {
						    win = win || global_context_info_1.default.global;
						    this.refreshWindowMeths(win, global_context_info_1.default.isInWorker);
						    if (global_context_info_1.default.isInWorker) return;
						    this.refreshDocumentMeths(doc, win);
						    this.refreshElementMeths(doc, win);
						  }

						  NativeMethods._getDocumentPropOwnerName = function _getDocumentPropOwnerName(docPrototype, propName) {
						    return docPrototype.hasOwnProperty(propName) ? 'Document' : 'HTMLDocument';
						  };

						  var _proto = NativeMethods.prototype;

						  _proto.getStoragesPropsOwner = function getStoragesPropsOwner(win) {
						    return this.isStoragePropsLocatedInProto ? win.Window.prototype : win;
						  };

						  _proto.refreshDocumentMeths = function refreshDocumentMeths(doc, win) {
						    doc = doc || document;
						    win = win || window;
						    var docPrototype = win.Document.prototype; // Dom

						    this.createDocumentFragment = docPrototype.createDocumentFragment;
						    this.createElement = docPrototype.createElement;
						    this.createElementNS = docPrototype.createElementNS;
						    this.createTextNode = docPrototype.createTextNode;
						    this.documentOpenPropOwnerName = NativeMethods._getDocumentPropOwnerName(docPrototype, 'open');
						    this.documentClosePropOwnerName = NativeMethods._getDocumentPropOwnerName(docPrototype, 'close');
						    this.documentWritePropOwnerName = NativeMethods._getDocumentPropOwnerName(docPrototype, 'write');
						    this.documentWriteLnPropOwnerName = NativeMethods._getDocumentPropOwnerName(docPrototype, 'writeln');
						    this.documentOpen = win[this.documentOpenPropOwnerName].prototype.open;
						    this.documentClose = win[this.documentClosePropOwnerName].prototype.close;
						    this.documentWrite = win[this.documentWritePropOwnerName].prototype.write;
						    this.documentWriteLn = win[this.documentWriteLnPropOwnerName].prototype.writeln;
						    this.elementFromPoint = docPrototype.elementFromPoint;
						    this.caretRangeFromPoint = docPrototype.caretRangeFromPoint;
						    this.caretPositionFromPoint = docPrototype.caretPositionFromPoint;
						    this.getElementById = docPrototype.getElementById;
						    this.getElementsByClassName = docPrototype.getElementsByClassName;
						    this.getElementsByName = docPrototype.getElementsByName;
						    this.getElementsByTagName = docPrototype.getElementsByTagName;
						    this.querySelector = docPrototype.querySelector;
						    this.querySelectorAll = docPrototype.querySelectorAll;
						    this.createHTMLDocument = win.DOMImplementation.prototype.createHTMLDocument; // @ts-ignore

						    if (doc.registerElement) {
						      // @ts-ignore
						      this.registerElement = docPrototype.registerElement;
						    } // Event
						    // NOTE: IE11 has no EventTarget so we should save "Event" methods separately


						    if (!win.EventTarget) {
						      this.documentAddEventListener = docPrototype.addEventListener;
						      this.documentRemoveEventListener = docPrototype.removeEventListener;
						    }

						    this.documentCreateEvent = docPrototype.createEvent; // @ts-ignore Deprecated

						    this.documentCreateTouch = docPrototype.createTouch; // @ts-ignore Deprecated

						    this.documentCreateTouchList = docPrototype.createTouchList; // getters/setters

						    this.documentCookiePropOwnerName = NativeMethods._getDocumentPropOwnerName(docPrototype, 'cookie');
						    this.documentScriptsPropOwnerName = NativeMethods._getDocumentPropOwnerName(docPrototype, 'scripts');
						    var documentCookieDescriptor = win.Object.getOwnPropertyDescriptor(win[this.documentCookiePropOwnerName].prototype, 'cookie'); // TODO: remove this condition after the GH-1649 fix

						    if (!this.isNativeCode(documentCookieDescriptor.get) || !this.isNativeCode(documentCookieDescriptor.get.toString)) {
						      try {
						        var parentNativeMethods = win.parent['%hammerhead%'].nativeMethods;
						        documentCookieDescriptor.get = parentNativeMethods.documentCookieGetter;
						        documentCookieDescriptor.set = parentNativeMethods.documentCookieSetter;
						      } catch (_a) {} // eslint-disable-line no-empty

						    }

						    this.documentReferrerGetter = win.Object.getOwnPropertyDescriptor(docPrototype, 'referrer').get;
						    this.documentStyleSheetsGetter = win.Object.getOwnPropertyDescriptor(docPrototype, 'styleSheets').get;
						    this.documentActiveElementGetter = win.Object.getOwnPropertyDescriptor(docPrototype, 'activeElement').get;
						    this.documentScriptsGetter = win.Object.getOwnPropertyDescriptor(win[this.documentScriptsPropOwnerName].prototype, 'scripts').get;
						    this.documentCookieGetter = documentCookieDescriptor.get;
						    this.documentCookieSetter = documentCookieDescriptor.set;
						    var documentDocumentURIDescriptor = win.Object.getOwnPropertyDescriptor(docPrototype, 'documentURI');
						    if (documentDocumentURIDescriptor) this.documentDocumentURIGetter = documentDocumentURIDescriptor.get;
						    var documentTitleDescriptor = win.Object.getOwnPropertyDescriptor(docPrototype, 'title');
						    this.documentTitleGetter = documentTitleDescriptor.get;
						    this.documentTitleSetter = documentTitleDescriptor.set;
						  };

						  _proto.refreshElementMeths = function refreshElementMeths(doc, win) {
						    var _this = this;

						    win = win || window;

						    var createElement = function createElement(tagName) {
						      return _this.createElement.call(doc || document, tagName);
						    };

						    var nativeElement = createElement('div');

						    var createTextNode = function createTextNode(data) {
						      return _this.createTextNode.call(doc || document, data);
						    };

						    var textNode = createTextNode('text'); // Dom

						    this.appendChild = win.Node.prototype.appendChild;
						    this.append = win.Element.prototype.append;
						    this.attachShadow = win.Element.prototype.attachShadow;
						    this.replaceChild = nativeElement.replaceChild;
						    this.cloneNode = nativeElement.cloneNode;
						    this.elementGetElementsByClassName = nativeElement.getElementsByClassName;
						    this.elementGetElementsByTagName = nativeElement.getElementsByTagName;
						    this.elementQuerySelector = nativeElement.querySelector;
						    this.elementQuerySelectorAll = nativeElement.querySelectorAll;
						    this.getAttribute = nativeElement.getAttribute;
						    this.getAttributeNS = nativeElement.getAttributeNS;
						    this.insertAdjacentHTML = nativeElement.insertAdjacentHTML;
						    this.insertBefore = nativeElement.insertBefore;
						    this.insertCell = createElement('tr').insertCell;
						    this.insertTableRow = createElement('table').insertRow;
						    this.insertTBodyRow = createElement('tbody').insertRow;
						    this.removeAttribute = nativeElement.removeAttribute;
						    this.removeAttributeNS = nativeElement.removeAttributeNS;
						    this.removeChild = win.Node.prototype.removeChild;
						    this.remove = win.Element.prototype.remove;
						    this.setAttribute = nativeElement.setAttribute;
						    this.setAttributeNS = nativeElement.setAttributeNS;
						    this.hasAttribute = nativeElement.hasAttribute;
						    this.hasAttributeNS = nativeElement.hasAttributeNS;
						    this.hasAttributes = nativeElement.hasAttributes;
						    this.anchorToString = win.HTMLAnchorElement.prototype.toString;
						    this.matches = nativeElement.matches || nativeElement.msMatchesSelector;
						    this.closest = nativeElement.closest; // Text node

						    this.appendData = textNode.appendData; // TODO: remove this condition after the GH-1649 fix

						    if (!this.isNativeCode(this.elementGetElementsByTagName)) {
						      try {
						        var parentNativeMethods = win.parent['%hammerhead%'].nativeMethods;
						        this.elementGetElementsByTagName = parentNativeMethods.elementGetElementsByTagName;
						      } // eslint-disable-next-line no-empty
						      catch (e) {}
						    } // Event


						    if (win.EventTarget) {
						      this.addEventListener = win.EventTarget.prototype.addEventListener;
						      this.removeEventListener = win.EventTarget.prototype.removeEventListener;
						      this.dispatchEvent = win.EventTarget.prototype.dispatchEvent;
						    } // NOTE: IE11 has no EventTarget
						    else {
						        this.addEventListener = nativeElement.addEventListener;
						        this.removeEventListener = nativeElement.removeEventListener;
						        this.dispatchEvent = nativeElement.dispatchEvent;
						      }

						    this.blur = nativeElement.blur;
						    this.click = nativeElement.click;
						    this.focus = nativeElement.focus; // @ts-ignore

						    this.select = window.TextRange ? createElement('body').createTextRange().select : null;
						    this.setSelectionRange = createElement('input').setSelectionRange;
						    this.textAreaSetSelectionRange = createElement('textarea').setSelectionRange;
						    this.svgFocus = win.SVGElement ? win.SVGElement.prototype.focus : this.focus;
						    this.svgBlur = win.SVGElement ? win.SVGElement.prototype.blur : this.blur; // Style
						    // NOTE: The 'style' descriptor is located in the Element.prototype in the Safari on IOS

						    this.htmlElementStylePropOwnerName = win.Element.prototype.hasOwnProperty('style') ? 'Element' : 'HTMLElement';
						    var htmlElementStyleDescriptor = win.Object.getOwnPropertyDescriptor(win[this.htmlElementStylePropOwnerName].prototype, 'style');
						    this.htmlElementStyleGetter = htmlElementStyleDescriptor.get; // NOTE: IE does not allow to set a style property

						    if (htmlElementStyleDescriptor.set) this.htmlElementStyleSetter = htmlElementStyleDescriptor.set;
						    var styleCssTextDescriptor = win.Object.getOwnPropertyDescriptor(win.CSSStyleDeclaration.prototype, 'cssText');
						    this.styleCssTextGetter = styleCssTextDescriptor.get;
						    this.styleCssTextSetter = styleCssTextDescriptor.set;
						  };

						  _proto._refreshGettersAndSetters = function _refreshGettersAndSetters(win, isInWorker) {
						    if (isInWorker === void 0) {
						      isInWorker = false;
						    }

						    win = win || window;
						    var winProto = win.constructor.prototype; // NOTE: Event properties is located in window prototype only in IE11

						    this.isEventPropsLocatedInProto = winProto.hasOwnProperty('onerror');
						    var eventPropsOwner = this.isEventPropsLocatedInProto ? winProto : win;
						    var winOnBeforeUnloadDescriptor = win.Object.getOwnPropertyDescriptor(eventPropsOwner, 'onbeforeunload');
						    var winOnUnloadDescriptor = win.Object.getOwnPropertyDescriptor(eventPropsOwner, 'onunload');
						    var winOnPageHideDescriptor = win.Object.getOwnPropertyDescriptor(eventPropsOwner, 'onpagehide');
						    var winOnMessageDescriptor = win.Object.getOwnPropertyDescriptor(eventPropsOwner, 'onmessage');
						    var winOnErrorDescriptor = win.Object.getOwnPropertyDescriptor(eventPropsOwner, 'onerror');
						    var winOnHashChangeDescriptor = win.Object.getOwnPropertyDescriptor(eventPropsOwner, 'onhashchange');
						    this.winOnBeforeUnloadSetter = winOnBeforeUnloadDescriptor && winOnBeforeUnloadDescriptor.set;
						    this.winOnUnloadSetter = winOnUnloadDescriptor && winOnUnloadDescriptor.set;
						    this.winOnPageHideSetter = winOnPageHideDescriptor && winOnPageHideDescriptor.set;
						    this.winOnMessageSetter = winOnMessageDescriptor && winOnMessageDescriptor.set;
						    this.winOnErrorSetter = winOnErrorDescriptor && winOnErrorDescriptor.set;
						    this.winOnHashChangeSetter = winOnHashChangeDescriptor && winOnHashChangeDescriptor.set;
						    var winOnUnhandledRejectionDescriptor = win.Object.getOwnPropertyDescriptor(eventPropsOwner, 'onunhandledrejection');
						    if (winOnUnhandledRejectionDescriptor) this.winOnUnhandledRejectionSetter = winOnUnhandledRejectionDescriptor.set; // Getters

						    if (win.WebSocket) {
						      var urlPropDescriptor = win.Object.getOwnPropertyDescriptor(win.WebSocket.prototype, 'url');
						      if (urlPropDescriptor && urlPropDescriptor.get && urlPropDescriptor.configurable) this.webSocketUrlGetter = urlPropDescriptor.get;
						    }

						    this.messageEventOriginGetter = win.Object.getOwnPropertyDescriptor(win.MessageEvent.prototype, 'origin').get; // NOTE: At present we proxy only the PerformanceNavigationTiming.
						    // Another types of the PerformanceEntry will be fixed later
						    // https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry

						    if (win.PerformanceNavigationTiming) this.performanceEntryNameGetter = win.Object.getOwnPropertyDescriptor(win.PerformanceEntry.prototype, 'name').get;
						    var dataPropDescriptor = win.Object.getOwnPropertyDescriptor(win.MessageEvent.prototype, 'data'); // NOTE: This condition is used for the Android 6.0 browser

						    if (dataPropDescriptor) this.messageEventDataGetter = dataPropDescriptor.get;

						    if (win.fetch) {
						      this.responseStatusGetter = win.Object.getOwnPropertyDescriptor(win.Response.prototype, 'status').get;
						      this.responseTypeGetter = win.Object.getOwnPropertyDescriptor(win.Response.prototype, 'type').get;
						      this.responseUrlGetter = win.Object.getOwnPropertyDescriptor(win.Response.prototype, 'url').get;
						      this.requestUrlGetter = win.Object.getOwnPropertyDescriptor(win.Request.prototype, 'url').get;
						      this.requestReferrerGetter = win.Object.getOwnPropertyDescriptor(win.Request.prototype, 'referrer').get;
						    }

						    if (win.XMLHttpRequest) {
						      var xhrResponseURLDescriptor = win.Object.getOwnPropertyDescriptor(win.XMLHttpRequest.prototype, 'responseURL'); // NOTE: IE doesn't support the 'responseURL' property

						      if (xhrResponseURLDescriptor) this.xhrResponseURLGetter = xhrResponseURLDescriptor.get;
						    } // eslint-disable-next-line no-restricted-properties


						    if (win.Window) {
						      // NOTE: The 'localStorage' and 'sessionStorage' properties is located in window prototype only in IE11
						      this.isStoragePropsLocatedInProto = win.Window.prototype.hasOwnProperty('localStorage');
						      var storagesPropsOwner = this.getStoragesPropsOwner(win);
						      this.winLocalStorageGetter = win.Object.getOwnPropertyDescriptor(storagesPropsOwner, 'localStorage').get;
						      this.winSessionStorageGetter = win.Object.getOwnPropertyDescriptor(storagesPropsOwner, 'sessionStorage').get;
						    }

						    if (isInWorker) return;
						    this.storageGetItem = win.Storage.prototype.getItem;
						    this.storageSetItem = win.Storage.prototype.setItem;
						    this.storageRemoveItem = win.Storage.prototype.removeItem;
						    this.storageClear = win.Storage.prototype.clear;
						    this.storageKey = win.Storage.prototype.key;
						    this.storageLengthGetter = win.Object.getOwnPropertyDescriptor(win.Storage.prototype, 'length');
						    var objectDataDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLObjectElement.prototype, 'data');
						    var inputTypeDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLInputElement.prototype, 'type');
						    var inputValueDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLInputElement.prototype, 'value');
						    var inputDisabledDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLInputElement.prototype, 'disabled');
						    var inputRequiredDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLInputElement.prototype, 'required');
						    var textAreaValueDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLTextAreaElement.prototype, 'value');
						    var imageSrcDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLImageElement.prototype, 'src');
						    var scriptSrcDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLScriptElement.prototype, 'src');
						    var scriptIntegrityDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLScriptElement.prototype, 'integrity');
						    var embedSrcDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLEmbedElement.prototype, 'src');
						    var sourceSrcDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLSourceElement.prototype, 'src');
						    var mediaSrcDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLMediaElement.prototype, 'src');
						    var inputSrcDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLInputElement.prototype, 'src');
						    var frameSrcDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLFrameElement.prototype, 'src');
						    var iframeSrcDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLIFrameElement.prototype, 'src');
						    var anchorHrefDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLAnchorElement.prototype, 'href');
						    var linkHrefDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLLinkElement.prototype, 'href');
						    var linkIntegrityDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLLinkElement.prototype, 'integrity');
						    var linkRelDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLLinkElement.prototype, 'rel');
						    var linkAsDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLLinkElement.prototype, 'as');
						    var areaHrefDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLAreaElement.prototype, 'href');
						    var baseHrefDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLBaseElement.prototype, 'href');
						    var anchorHostDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLAnchorElement.prototype, 'host');
						    var anchorHostnameDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLAnchorElement.prototype, 'hostname');
						    var anchorPathnameDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLAnchorElement.prototype, 'pathname');
						    var anchorPortDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLAnchorElement.prototype, 'port');
						    var anchorProtocolDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLAnchorElement.prototype, 'protocol');
						    var anchorSearchDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLAnchorElement.prototype, 'search');
						    var anchorTargetDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLAnchorElement.prototype, 'target');
						    var formTargetDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLFormElement.prototype, 'target');
						    var areaTargetDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLAreaElement.prototype, 'target');
						    var baseTargetDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLBaseElement.prototype, 'target');
						    var inputFormTargetDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLInputElement.prototype, 'formTarget');
						    var buttonFormTargetDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLButtonElement.prototype, 'formTarget');
						    var svgImageHrefDescriptor = win.Object.getOwnPropertyDescriptor(win.SVGImageElement.prototype, 'href');
						    var svgAnimStrAnimValDescriptor = win.Object.getOwnPropertyDescriptor(win.SVGAnimatedString.prototype, 'animVal');
						    var svgAnimStrBaseValDescriptor = win.Object.getOwnPropertyDescriptor(win.SVGAnimatedString.prototype, 'baseVal');
						    var inputAutocompleteDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLInputElement.prototype, 'autocomplete');
						    var formActionDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLFormElement.prototype, 'action');
						    var inputFormActionDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLInputElement.prototype, 'formAction');
						    var buttonFormActionDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLButtonElement.prototype, 'formAction');
						    var nodeTextContentDescriptor = win.Object.getOwnPropertyDescriptor(win.Node.prototype, 'textContent');
						    var htmlElementInnerTextDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLElement.prototype, 'innerText');
						    var scriptTextDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLScriptElement.prototype, 'text');
						    var anchorTextDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLAnchorElement.prototype, 'text');
						    var titleElementTextDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLTitleElement.prototype, 'text');
						    var iframeSandboxDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLIFrameElement.prototype, 'sandbox');
						    var windowOriginDescriptor = win.Object.getOwnPropertyDescriptor(win, 'origin');

						    if (windowOriginDescriptor) {
						      this.windowOriginGetter = windowOriginDescriptor.get;
						      this.windowOriginSetter = windowOriginDescriptor.set;
						    } // NOTE: We need 'disabled' property only for Chrome.
						    // In Chrome it's located in HTMLInputElement.prototype
						    // But in IE11 it's located in HTMLElement.prototype
						    // So we need the null check


						    if (inputDisabledDescriptor) {
						      this.inputDisabledSetter = inputDisabledDescriptor.set;
						      this.inputDisabledGetter = inputDisabledDescriptor.get;
						    } // NOTE: Html properties is located in HTMLElement prototype in IE11 only


						    this.elementHTMLPropOwnerName = win.Element.prototype.hasOwnProperty('innerHTML') ? 'Element' : 'HTMLElement';
						    var elementInnerHTMLDescriptor = win.Object.getOwnPropertyDescriptor(win[this.elementHTMLPropOwnerName].prototype, 'innerHTML');
						    var elementOuterHTMLDescriptor = win.Object.getOwnPropertyDescriptor(win[this.elementHTMLPropOwnerName].prototype, 'outerHTML'); // Setters

						    this.objectDataSetter = objectDataDescriptor.set;
						    this.inputTypeSetter = inputTypeDescriptor.set;
						    this.inputValueSetter = inputValueDescriptor.set;
						    this.inputRequiredSetter = inputRequiredDescriptor.set;
						    this.textAreaValueSetter = textAreaValueDescriptor.set;
						    this.imageSrcSetter = imageSrcDescriptor.set;
						    this.scriptSrcSetter = scriptSrcDescriptor.set;
						    this.embedSrcSetter = embedSrcDescriptor.set;
						    this.sourceSrcSetter = sourceSrcDescriptor.set;
						    this.mediaSrcSetter = mediaSrcDescriptor.set;
						    this.inputSrcSetter = inputSrcDescriptor.set;
						    this.frameSrcSetter = frameSrcDescriptor.set;
						    this.iframeSrcSetter = iframeSrcDescriptor.set;
						    this.anchorHrefSetter = anchorHrefDescriptor.set;
						    this.linkHrefSetter = linkHrefDescriptor.set;
						    this.linkRelSetter = linkRelDescriptor.set;
						    this.linkAsSetter = linkAsDescriptor && linkAsDescriptor.set;
						    this.areaHrefSetter = areaHrefDescriptor.set;
						    this.baseHrefSetter = baseHrefDescriptor.set;
						    this.anchorHostSetter = anchorHostDescriptor.set;
						    this.anchorHostnameSetter = anchorHostnameDescriptor.set;
						    this.anchorPathnameSetter = anchorPathnameDescriptor.set;
						    this.anchorPortSetter = anchorPortDescriptor.set;
						    this.anchorProtocolSetter = anchorProtocolDescriptor.set;
						    this.anchorSearchSetter = anchorSearchDescriptor.set;
						    this.anchorTargetSetter = anchorTargetDescriptor.set;
						    this.formTargetSetter = formTargetDescriptor.set;
						    this.areaTargetSetter = areaTargetDescriptor.set;
						    this.baseTargetSetter = baseTargetDescriptor.set;
						    this.inputFormTargetSetter = inputFormTargetDescriptor.set;
						    this.buttonFormTargetSetter = buttonFormTargetDescriptor.set;
						    this.svgAnimStrBaseValSetter = svgAnimStrBaseValDescriptor.set;
						    this.inputAutocompleteSetter = inputAutocompleteDescriptor.set;
						    this.formActionSetter = formActionDescriptor.set;
						    this.inputFormActionSetter = inputFormActionDescriptor.set;
						    this.buttonFormActionSetter = buttonFormActionDescriptor.set;
						    this.iframeSandboxSetter = iframeSandboxDescriptor.set;
						    this.htmlElementOnloadSetter = win.Object.getOwnPropertyDescriptor(win.HTMLElement.prototype, 'onload').set;
						    this.nodeTextContentSetter = nodeTextContentDescriptor.set;
						    this.htmlElementInnerTextSetter = htmlElementInnerTextDescriptor.set;
						    this.scriptTextSetter = scriptTextDescriptor.set;
						    this.anchorTextSetter = anchorTextDescriptor.set;
						    this.elementInnerHTMLSetter = elementInnerHTMLDescriptor.set;
						    this.elementOuterHTMLSetter = elementOuterHTMLDescriptor.set; // NOTE: Some browsers (for example, Edge, Internet Explorer 11, Safari) don't support the 'integrity' property.

						    if (scriptIntegrityDescriptor && linkIntegrityDescriptor) {
						      this.scriptIntegritySetter = scriptIntegrityDescriptor.set;
						      this.linkIntegritySetter = linkIntegrityDescriptor.set;
						    }

						    this.titleElementTextSetter = titleElementTextDescriptor.set; // NOTE: the classList property is located in HTMLElement prototype in IE11

						    this.elementClassListPropOwnerName = win.Element.prototype.hasOwnProperty('classList') ? 'Element' : 'HTMLElement';
						    this.elementClassListGetter = win.Object.getOwnPropertyDescriptor(win[this.elementClassListPropOwnerName].prototype, 'classList').get;
						    this.htmlCollectionLengthGetter = win.Object.getOwnPropertyDescriptor(win.HTMLCollection.prototype, 'length').get;
						    this.nodeListLengthGetter = win.Object.getOwnPropertyDescriptor(win.NodeList.prototype, 'length').get;
						    this.elementChildElementCountGetter = win.Object.getOwnPropertyDescriptor(win.Element.prototype, 'childElementCount').get;
						    this.inputFilesGetter = win.Object.getOwnPropertyDescriptor(win.HTMLInputElement.prototype, 'files').get;
						    this.styleSheetHrefGetter = win.Object.getOwnPropertyDescriptor(win.StyleSheet.prototype, 'href').get;
						    this.objectDataGetter = objectDataDescriptor.get;
						    this.inputTypeGetter = inputTypeDescriptor.get;
						    this.inputValueGetter = inputValueDescriptor.get;
						    this.inputRequiredGetter = inputRequiredDescriptor.get;
						    this.textAreaValueGetter = textAreaValueDescriptor.get;
						    this.imageSrcGetter = imageSrcDescriptor.get;
						    this.scriptSrcGetter = scriptSrcDescriptor.get;
						    this.embedSrcGetter = embedSrcDescriptor.get;
						    this.sourceSrcGetter = sourceSrcDescriptor.get;
						    this.mediaSrcGetter = mediaSrcDescriptor.get;
						    this.inputSrcGetter = inputSrcDescriptor.get;
						    this.frameSrcGetter = frameSrcDescriptor.get;
						    this.iframeSrcGetter = iframeSrcDescriptor.get;
						    this.anchorHrefGetter = anchorHrefDescriptor.get;
						    this.linkHrefGetter = linkHrefDescriptor.get;
						    this.linkRelGetter = linkRelDescriptor.get;
						    this.areaHrefGetter = areaHrefDescriptor.get;
						    this.baseHrefGetter = baseHrefDescriptor.get;
						    this.anchorHostGetter = anchorHostDescriptor.get;
						    this.anchorHostnameGetter = anchorHostnameDescriptor.get;
						    this.anchorPathnameGetter = anchorPathnameDescriptor.get;
						    this.anchorPortGetter = anchorPortDescriptor.get;
						    this.anchorProtocolGetter = anchorProtocolDescriptor.get;
						    this.anchorSearchGetter = anchorSearchDescriptor.get;
						    this.anchorTargetGetter = anchorTargetDescriptor.get;
						    this.formTargetGetter = formTargetDescriptor.get;
						    this.areaTargetGetter = areaTargetDescriptor.get;
						    this.baseTargetGetter = baseTargetDescriptor.get;
						    this.inputFormTargetGetter = inputFormTargetDescriptor.get;
						    this.buttonFormTargetGetter = buttonFormTargetDescriptor.get;
						    this.svgImageHrefGetter = svgImageHrefDescriptor.get;
						    this.svgAnimStrAnimValGetter = svgAnimStrAnimValDescriptor.get;
						    this.svgAnimStrBaseValGetter = svgAnimStrBaseValDescriptor.get;
						    this.inputAutocompleteGetter = inputAutocompleteDescriptor.get;
						    this.formActionGetter = formActionDescriptor.get;
						    this.inputFormActionGetter = inputFormActionDescriptor.get;
						    this.buttonFormActionGetter = buttonFormActionDescriptor.get;
						    this.iframeSandboxGetter = iframeSandboxDescriptor.get;
						    this.contentWindowGetter = win.Object.getOwnPropertyDescriptor(win.HTMLIFrameElement.prototype, 'contentWindow').get;
						    this.contentDocumentGetter = win.Object.getOwnPropertyDescriptor(win.HTMLIFrameElement.prototype, 'contentDocument').get;
						    this.frameContentWindowGetter = win.Object.getOwnPropertyDescriptor(win.HTMLFrameElement.prototype, 'contentWindow').get;
						    this.nodeTextContentGetter = nodeTextContentDescriptor.get;
						    this.htmlElementInnerTextGetter = htmlElementInnerTextDescriptor.get;
						    this.scriptTextGetter = scriptTextDescriptor.get;
						    this.anchorTextGetter = anchorTextDescriptor.get;
						    this.elementInnerHTMLGetter = elementInnerHTMLDescriptor.get;
						    this.elementOuterHTMLGetter = elementOuterHTMLDescriptor.get;
						    this.nodeFirstChildGetter = win.Object.getOwnPropertyDescriptor(win.Node.prototype, 'firstChild').get;
						    this.nodeLastChildGetter = win.Object.getOwnPropertyDescriptor(win.Node.prototype, 'lastChild').get;
						    this.nodeNextSiblingGetter = win.Object.getOwnPropertyDescriptor(win.Node.prototype, 'nextSibling').get;
						    this.nodePrevSiblingGetter = win.Object.getOwnPropertyDescriptor(win.Node.prototype, 'previousSibling').get;
						    this.nodeParentNodeGetter = win.Object.getOwnPropertyDescriptor(win.Node.prototype, 'parentNode').get;
						    this.nodeChildNodesGetter = win.Object.getOwnPropertyDescriptor(win.Node.prototype, 'childNodes').get;
						    this.elementFirstElementChildGetter = win.Object.getOwnPropertyDescriptor(win.Element.prototype, 'firstElementChild').get;
						    this.elementLastElementChildGetter = win.Object.getOwnPropertyDescriptor(win.Element.prototype, 'lastElementChild').get;
						    this.elementNextElementSiblingGetter = win.Object.getOwnPropertyDescriptor(win.Element.prototype, 'nextElementSibling').get;
						    this.elementPrevElementSiblingGetter = win.Object.getOwnPropertyDescriptor(win.Element.prototype, 'previousElementSibling').get; // NOTE: Some browsers (for example, Edge, Internet Explorer 11, Safari) don't support the 'integrity' property.

						    if (scriptIntegrityDescriptor && linkIntegrityDescriptor) {
						      this.scriptIntegrityGetter = scriptIntegrityDescriptor.get;
						      this.linkIntegrityGetter = linkIntegrityDescriptor.get;
						    }

						    var anchorOriginDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLAnchorElement.prototype, 'origin'); // NOTE: IE and Edge don't support origin property

						    if (anchorOriginDescriptor) this.anchorOriginGetter = anchorOriginDescriptor.get;
						    var iframeSrcdocDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLIFrameElement.prototype, 'srcdoc'); // NOTE: IE11 doesn't support the 'srcdoc' property

						    if (iframeSrcdocDescriptor) {
						      this.iframeSrcdocGetter = iframeSrcdocDescriptor.get;
						      this.iframeSrcdocSetter = iframeSrcdocDescriptor.set;
						    }

						    var cssStyleSheetHrefDescriptor = win.Object.getOwnPropertyDescriptor(win.CSSStyleSheet.prototype, 'href'); // NOTE: IE11 doesn't support the 'href' property

						    if (cssStyleSheetHrefDescriptor) this.cssStyleSheetHrefGetter = cssStyleSheetHrefDescriptor.get;
						    var nodeBaseURIDescriptor = win.Object.getOwnPropertyDescriptor(win.Node.prototype, 'baseURI'); // NOTE: IE11 doesn't support the 'baseURI' property

						    if (nodeBaseURIDescriptor) this.nodeBaseURIGetter = nodeBaseURIDescriptor.get; // NOTE: The 'attributes' property is located in Node prototype in IE11 only

						    this.elementAttributesPropOwnerName = win.Element.prototype.hasOwnProperty('attributes') ? 'Element' : 'Node';
						    this.elementAttributesGetter = win.Object.getOwnPropertyDescriptor(win[this.elementAttributesPropOwnerName].prototype, 'attributes').get;
						    var htmlManifestDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLHtmlElement.prototype, 'manifest'); // NOTE: Only the Safari browser supports the 'manifest' property

						    if (htmlManifestDescriptor) {
						      this.htmlManifestGetter = htmlManifestDescriptor.get;
						      this.htmlManifestSetter = htmlManifestDescriptor.set;
						    }

						    this.titleElementTextGetter = titleElementTextDescriptor.get; // MutationRecord

						    this.mutationRecordNextSiblingGetter = win.Object.getOwnPropertyDescriptor(win.MutationRecord.prototype, 'nextSibling').get;
						    this.mutationRecordPrevSiblingGetter = win.Object.getOwnPropertyDescriptor(win.MutationRecord.prototype, 'previousSibling').get;
						  };

						  _proto.refreshWindowMeths = function refreshWindowMeths(win, isInWorker) {
						    if (isInWorker === void 0) {
						      isInWorker = false;
						    }

						    win = win || window;
						    var winProto = win.constructor.prototype; // Dom

						    this.eval = win.eval;
						    this.formSubmit = win.HTMLFormElement && win.HTMLFormElement.prototype.submit;
						    this.documentFragmentQuerySelector = win.DocumentFragment && win.DocumentFragment.prototype.querySelector;
						    this.documentFragmentQuerySelectorAll = win.DocumentFragment && win.DocumentFragment.prototype.querySelectorAll;
						    this.preventDefault = win.Event.prototype.preventDefault;
						    this.historyPushState = win.history && win.history.pushState;
						    this.historyReplaceState = win.history && win.history.replaceState;
						    this.postMessage = win.postMessage || winProto.postMessage;
						    this.windowOpen = win.open || winProto.open;
						    this.setTimeout = win.setTimeout || winProto.setTimeout;
						    this.setInterval = win.setInterval || winProto.setInterval;
						    this.clearTimeout = win.clearTimeout || winProto.clearTimeout;
						    this.clearInterval = win.clearInterval || winProto.clearInterval;
						    this.registerProtocolHandler = win.navigator.registerProtocolHandler;
						    this.sendBeacon = win.navigator.sendBeacon;

						    if (win.XMLHttpRequest) {
						      // NOTE: IE11 has no EventTarget so we should save "Event" methods separately
						      var xhrEventProto = (win.EventTarget || win.XMLHttpRequest).prototype;
						      this.xhrAbort = win.XMLHttpRequest.prototype.abort;
						      this.xhrOpen = win.XMLHttpRequest.prototype.open;
						      this.xhrSend = win.XMLHttpRequest.prototype.send;
						      this.xhrAddEventListener = xhrEventProto.addEventListener;
						      this.xhrRemoveEventListener = xhrEventProto.removeEventListener;
						      this.xhrDispatchEvent = xhrEventProto.dispatchEvent;
						      this.xhrGetResponseHeader = win.XMLHttpRequest.prototype.getResponseHeader;
						      this.xhrGetAllResponseHeaders = win.XMLHttpRequest.prototype.getAllResponseHeaders;
						      this.xhrSetRequestHeader = win.XMLHttpRequest.prototype.setRequestHeader;
						      this.xhrOverrideMimeType = win.XMLHttpRequest.prototype.overrideMimeType;
						    }

						    try {
						      this.registerServiceWorker = win.navigator.serviceWorker.register;
						      this.getRegistrationServiceWorker = win.navigator.serviceWorker.getRegistration;
						    } catch (e) {
						      this.registerServiceWorker = null;
						      this.getRegistrationServiceWorker = null;
						    }

						    this.createContextualFragment = win.Range && win.Range.prototype.createContextualFragment;
						    var nativePerformance = win.performance;

						    if (nativePerformance) {
						      // eslint-disable-next-line no-restricted-properties
						      var nativePerformanceNow = win.performance.now || win.Performance.prototype.now;

						      this.performanceNow = function () {
						        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
						          args[_key] = arguments[_key];
						        }

						        return nativePerformanceNow.apply(nativePerformance, args);
						      };
						    } // Fetch


						    this.fetch = win.fetch;
						    this.Request = win.Request;

						    if (win.Headers) {
						      this.Headers = win.Headers;
						      this.headersSet = win.Headers.prototype.set;
						      this.headersGet = win.Headers.prototype.get;
						      this.headersDelete = win.Headers.prototype.delete;
						      this.headersEntries = win.Headers.prototype.entries;
						      this.headersForEach = win.Headers.prototype.forEach;
						      this.headersValues = win.Headers.prototype.values;
						    } // Event


						    this.windowAddEventListener = win.addEventListener || winProto.addEventListener;
						    this.windowRemoveEventListener = win.removeEventListener || winProto.removeEventListener;
						    this.windowDispatchEvent = win.dispatchEvent;
						    this.WindowPointerEvent = win.PointerEvent || winProto.PointerEvent;
						    this.WindowMSPointerEvent = win.MSPointerEvent || winProto.MSPointerEvent;
						    this.WindowTouch = win.Touch || winProto.Touch;
						    this.WindowTouchEvent = win.TouchEvent || winProto.TouchEvent;
						    this.WindowKeyboardEvent = win.KeyboardEvent || winProto.KeyboardEvent;
						    this.WindowFocusEvent = win.FocusEvent || winProto.FocusEvent;
						    this.WindowTextEvent = win.TextEvent || winProto.TextEvent;
						    this.WindowInputEvent = win.InputEvent || winProto.InputEvent;
						    this.WindowMouseEvent = win.MouseEvent || winProto.MouseEvent;
						    this.canvasContextDrawImage = win.CanvasRenderingContext2D && win.CanvasRenderingContext2D.prototype.drawImage; // FormData

						    this.formDataAppend = win.FormData && win.FormData.prototype.append; // DateTime

						    this.date = win.Date;
						    this.dateNow = win.Date.now; // eslint-disable-line no-restricted-properties
						    // Math

						    this.math = win.Math;
						    this.mathRandom = win.Math.random; // Object

						    this.objectToString = win.Object.prototype.toString;
						    this.objectAssign = win.Object.assign;
						    this.objectKeys = win.Object.keys;
						    this.objectDefineProperty = win.Object.defineProperty;
						    this.objectDefineProperties = win.Object.defineProperties;
						    this.objectCreate = win.Object.create;
						    this.objectIsExtensible = win.Object.isExtensible;
						    this.objectIsFrozen = win.Object.isFrozen;
						    this.objectGetOwnPropertyDescriptor = win.Object.getOwnPropertyDescriptor;
						    this.objectHasOwnProperty = win.Object.hasOwnProperty;
						    this.objectGetOwnPropertyNames = win.Object.getOwnPropertyNames;
						    this.objectGetPrototypeOf = win.Object.getPrototypeOf;
						    this.objectGetOwnPropertySymbols = win.Object.getOwnPropertySymbols; // Array

						    this.arraySlice = win.Array.prototype.slice;
						    this.arrayConcat = win.Array.prototype.concat;
						    this.arrayFilter = win.Array.prototype.filter;
						    this.arrayMap = win.Array.prototype.map;
						    this.arrayJoin = win.Array.prototype.join;
						    this.arraySplice = win.Array.prototype.splice;
						    this.arrayForEach = win.Array.prototype.forEach;
						    this.arrayFrom = win.Array.from;
						    this.DOMParserParseFromString = win.DOMParser && win.DOMParser.prototype.parseFromString;
						    this.arrayBufferIsView = win.ArrayBuffer.prototype.constructor.isView; // NOTE: this section relates to getting properties from DOM classes

						    if (!isInWorker) {
						      // DOMTokenList
						      this.tokenListAdd = win.DOMTokenList.prototype.add;
						      this.tokenListRemove = win.DOMTokenList.prototype.remove;
						      this.tokenListReplace = win.DOMTokenList.prototype.replace;
						      this.tokenListSupports = win.DOMTokenList.prototype.supports;
						      this.tokenListToggle = win.DOMTokenList.prototype.toggle;
						      this.tokenListContains = win.DOMTokenList.prototype.contains;
						      var tokenListValueDescriptor = win.Object.getOwnPropertyDescriptor(win.DOMTokenList.prototype, 'value'); // NOTE: IE11 doesn't support the 'value' property of the DOMTokenList interface

						      if (tokenListValueDescriptor) this.tokenListValueSetter = tokenListValueDescriptor.set; // Stylesheets

						      this.styleGetPropertyValue = win.CSSStyleDeclaration.prototype.getPropertyValue;
						      this.styleSetProperty = win.CSSStyleDeclaration.prototype.setProperty;
						      this.styleRemoveProperty = win.CSSStyleDeclaration.prototype.removeProperty;
						      this.styleInsertRule = win.CSSStyleSheet.prototype.insertRule;
						      this.scrollTo = win.scrollTo;
						    }

						    if (win.Promise) {
						      this.promiseThen = win.Promise.prototype.then;
						      this.promiseReject = win.Promise.reject;
						    } // Console


						    this.console = win.console;

						    if (this.console) {
						      this.consoleMeths = {
						        log: win.console.log,
						        warn: win.console.warn,
						        error: win.console.error,
						        info: win.console.info
						      };
						    }

						    this.crypto = win.crypto || win.msCrypto;
						    this.cryptoGetRandomValues = this.crypto && this.crypto.getRandomValues;
						    this.refreshClasses(win);

						    this._refreshGettersAndSetters(win, isInWorker);
						  };

						  _proto.refreshClasses = function refreshClasses(win) {
						    this.windowClass = win.Window;
						    this.documentClass = win.Document;
						    this.locationClass = win.Location;
						    this.elementClass = win.Element;
						    this.svgElementClass = win.SVGElement;
						    this.Worker = win.Worker;
						    this.MessageChannel = win.MessageChannel;
						    this.ArrayBuffer = win.ArrayBuffer;
						    this.Uint8Array = win.Uint8Array;
						    this.Uint16Array = win.Uint16Array;
						    this.Uint32Array = win.Uint32Array;
						    this.DataView = win.DataView;
						    this.Blob = win.Blob;
						    this.XMLHttpRequest = win.XMLHttpRequest;
						    this.Image = win.Image;
						    this.Function = win.Function;
						    this.functionToString = win.Function.prototype.toString;
						    this.Error = win.Error;
						    this.FontFace = win.FontFace;
						    this.StorageEvent = win.StorageEvent;
						    this.MutationObserver = win.MutationObserver;
						    this.EventSource = win.EventSource;
						    this.Proxy = win.Proxy;
						    this.WebSocket = win.WebSocket;
						    this.HTMLCollection = win.HTMLCollection;
						    this.NodeList = win.NodeList;
						    this.Node = win.Node;
						    this.URL = win.URL;
						    this.DataTransfer = win.DataTransfer;
						    this.DataTransferItemList = win.DataTransferItemList;
						    this.DataTransferItem = win.DataTransferItem;
						    this.FileList = win.FileList; // NOTE: non-IE11 case. window.File in IE11 is not constructable.

						    if (win.File && typeof win.File === 'function') this.File = win.File;
						  };

						  _proto.refreshElectronMeths = function refreshElectronMeths(vmModule) {
						    if (this.createScript && overriding_1.isNativeFunction(vmModule.createScript)) return false;
						    this.createScript = vmModule.createScript;
						    this.runInDebugContext = vmModule.runInDebugContext;
						    this.runInContext = vmModule.runInContext;
						    this.runInNewContext = vmModule.runInNewContext;
						    this.runInThisContext = vmModule.runInThisContext;
						    return true;
						  };

						  NativeMethods._ensureDocumentMethodRestore = function _ensureDocumentMethodRestore(document, prototype, methodName, savedNativeMethod) {
						    prototype[methodName] = savedNativeMethod;
						    if (document[methodName] !== prototype[methodName]) document[methodName] = savedNativeMethod;
						  };

						  _proto.restoreDocumentMeths = function restoreDocumentMeths(window, document) {
						    var docPrototype = window.Document.prototype;

						    NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'createDocumentFragment', this.createDocumentFragment);

						    NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'createElement', this.createElement);

						    NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'createElementNS', this.createElementNS);

						    NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'elementFromPoint', this.elementFromPoint);

						    NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'caretRangeFromPoint', this.caretRangeFromPoint);

						    NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'caretPositionFromPoint', this.caretPositionFromPoint);

						    NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'getElementById', this.getElementById);

						    NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'getElementsByClassName', this.getElementsByClassName);

						    NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'getElementsByName', this.getElementsByName);

						    NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'getElementsByTagName', this.getElementsByTagName);

						    NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'querySelector', this.querySelector);

						    NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'querySelectorAll', this.querySelectorAll); // Event
						    // NOTE: IE11 has no EventTarget


						    if (!window.EventTarget) {
						      NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'addEventListener', this.documentAddEventListener);

						      NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'removeEventListener', this.documentRemoveEventListener);
						    }

						    NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'createEvent', this.documentCreateEvent);

						    NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'createTouch', this.documentCreateTouch);

						    NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'createTouchList', this.documentCreateTouchList);

						    NativeMethods._ensureDocumentMethodRestore(document, window[this.documentOpenPropOwnerName].prototype, 'open', this.documentOpen);

						    NativeMethods._ensureDocumentMethodRestore(document, window[this.documentClosePropOwnerName].prototype, 'close', this.documentClose);

						    NativeMethods._ensureDocumentMethodRestore(document, window[this.documentWritePropOwnerName].prototype, 'write', this.documentWrite);

						    NativeMethods._ensureDocumentMethodRestore(document, window[this.documentWriteLnPropOwnerName].prototype, 'writeln', this.documentWriteLn);
						  };

						  _proto.refreshIfNecessary = function refreshIfNecessary(doc, win) {
						    var _this2 = this;

						    var tryToExecuteCode = function tryToExecuteCode(func) {
						      try {
						        return func();
						      } catch (e) {
						        return true;
						      }
						    };

						    var needToRefreshDocumentMethods = tryToExecuteCode(function () {
						      return !doc.createElement || overriding_1.isNativeFunction(document.createElement);
						    });
						    var needToRefreshElementMethods = tryToExecuteCode(function () {
						      var nativeElement = _this2.createElement.call(doc, 'div');

						      return overriding_1.isNativeFunction(nativeElement.getAttribute);
						    });
						    var needToRefreshWindowMethods = tryToExecuteCode(function () {
						      _this2.setTimeout.call(win, function () {
						        return void 0;
						      }, 0);

						      return overriding_1.isNativeFunction(win.XMLHttpRequest.prototype.open);
						    }); // NOTE: T173709

						    if (needToRefreshDocumentMethods) this.refreshDocumentMeths(doc, win);
						    if (needToRefreshElementMethods) this.refreshElementMeths(doc, win); // NOTE: T239109

						    if (needToRefreshWindowMethods) this.refreshWindowMeths(win);
						  };

						  _proto.isNativeCode = function isNativeCode(fn) {
						    return NATIVE_CODE_RE.test(fn.toString());
						  };

						  return NativeMethods;
						}();

						exports.default = new NativeMethods();
						module.exports = exports.default;
					},
					"node": {
						"attributes": {
							"index.js": function (exports, module, require) {
								

								var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
								  return mod && mod.__esModule ? mod : {
								    "default": mod
								  };
								};

								Object.defineProperty(exports, "__esModule", {
								  value: true
								});

								var wrapper_1 = __importDefault(require("./wrapper"));

								var dom_1 = require("../../../utils/dom");

								var native_methods_1 = __importDefault(require("../../native-methods"));

								var dom_2 = __importDefault(require("../../../../processing/dom"));

								var ATTRIBUTES_WRAPPER = 'hammerhead|element-attribute-wrappers';

								function cleanAttributes(wrapper) {
								  if (wrapper.length) {
								    for (var i = 0; i < wrapper.length; i++) {
								      delete wrapper[wrapper[i].name];
								      delete wrapper[i];
								    }
								  }
								}

								function assignAttributes(wrapper, attributes) {
								  var length = 0;
								  var properties = {};

								  for (var _i2 = 0; _i2 < attributes.length; _i2++) {
								    var attr = attributes[_i2];

								    if (!dom_1.isHammerheadAttr(attr.name)) {
								      var storedAttr = attributes[dom_2.default.getStoredAttrName(attr.name)];

								      if (storedAttr) {
								        // eslint-disable-next-line no-restricted-properties
								        if (dom_2.default.isAddedAutocompleteAttr(attr.name, storedAttr.value)) continue;
								        attr = native_methods_1.default.cloneNode.call(attr); // eslint-disable-next-line no-restricted-properties

								        attr.value = storedAttr.value;
								      }

								      properties[attr.name] = {
								        value: attr,
								        configurable: true,
								        enumerable: true
								      };
								      properties[length] = {
								        value: attr,
								        configurable: true
								      };
								      length++;
								    }
								  }

								  properties['length'] = {
								    value: length,
								    configurable: true
								  };
								  native_methods_1.default.objectDefineProperties(wrapper, properties);
								}

								exports.assignAttributes = assignAttributes;

								function getAttributes(el) {
								  if (el[ATTRIBUTES_WRAPPER]) {
								    refreshAttributesWrapper(el);
								    return el[ATTRIBUTES_WRAPPER];
								  }

								  var attributes = native_methods_1.default.elementAttributesGetter.call(el);
								  if (!attributes) return attributes;

								  for (var _i4 = 0; _i4 < attributes.length; _i4++) {
								    var attr = attributes[_i4];

								    if (dom_1.isHammerheadAttr(attr.name)) {
								      wrapper_1.default.prototype = attributes;
								      el[ATTRIBUTES_WRAPPER] = new wrapper_1.default(el, attributes);
								      return el[ATTRIBUTES_WRAPPER];
								    }
								  }

								  return attributes;
								}

								exports.getAttributes = getAttributes;

								function refreshAttributesWrapper(el) {
								  var attributesWrapper = el[ATTRIBUTES_WRAPPER];

								  if (attributesWrapper) {
								    cleanAttributes(attributesWrapper);
								    assignAttributes(attributesWrapper, native_methods_1.default.elementAttributesGetter.call(el));
								  }
								}

								exports.refreshAttributesWrapper = refreshAttributesWrapper;
							},
							"wrapper.js": function (exports, module, require) {
								

								var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
								  return mod && mod.__esModule ? mod : {
								    "default": mod
								  };
								};

								Object.defineProperty(exports, "__esModule", {
								  value: true
								});

								var fn_bind_1 = __importDefault(require("../../../utils/fn-bind"));

								var feature_detection_1 = require("../../../utils/feature-detection");

								var index_1 = require("./index");

								var ATTRIBUTES_METHODS = ['setNamedItem', 'setNamedItemNS', 'removeNamedItem', 'removeNamedItemNS', 'getNamedItem', 'getNamedItemNS'];

								function createMethodWrapper(el, attributes, method) {
								  return function () {
								    var result = attributes[method].apply(attributes, arguments);
								    index_1.refreshAttributesWrapper(el);
								    return result;
								  };
								}

								var AttributesWrapper = function AttributesWrapper(el, attributes) {
								  var _this = this;

								  index_1.assignAttributes(this, attributes);

								  this.item = function (index) {
								    return _this[index];
								  };

								  for (var field in attributes) {
								    if (typeof this[field] === 'function' && field !== 'item') {
								      this[field] = ATTRIBUTES_METHODS.indexOf(field) !== -1 ? createMethodWrapper(el, attributes, field) : fn_bind_1.default(attributes[field], attributes);
								    }
								  }

								  if (feature_detection_1.attrGetNamedItemIsNotEnumerable) this['getNamedItem'] = createMethodWrapper(el, attributes, 'getNamedItem');
								};

								exports.default = AttributesWrapper;
								module.exports = exports.default;
							}
						},
						"document": {
							"index.js": function (exports, module, require) {
								

								function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

								function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

								var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
								  return mod && mod.__esModule ? mod : {
								    "default": mod
								  };
								};

								var __importStar = void 0 && (void 0).__importStar || function (mod) {
								  if (mod && mod.__esModule) return mod;
								  var result = {};
								  if (mod != null) for (var k in mod) {
								    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
								  }
								  result["default"] = mod;
								  return result;
								};

								Object.defineProperty(exports, "__esModule", {
								  value: true
								});

								var base_1 = __importDefault(require("../../base"));

								var iframe_1 = __importDefault(require("../../iframe"));

								var native_methods_1 = __importDefault(require("../../native-methods"));

								var dom_processor_1 = __importDefault(require("../../../dom-processor"));

								var urlUtils = __importStar(require("../../../utils/url"));

								var settings_1 = __importDefault(require("../../../settings"));

								var browser_1 = require("../../../utils/browser");

								var dom_1 = require("../../../utils/dom");

								var writer_1 = __importDefault(require("./writer"));

								var shadow_ui_1 = __importDefault(require("./../../shadow-ui"));

								var internal_properties_1 = __importDefault(require("../../../../processing/dom/internal-properties"));

								var location_1 = __importDefault(require("../../code-instrumentation/location"));

								var overriding_1 = require("../../../utils/overriding");

								var url_1 = require("../../../utils/url");

								var DocumentSandbox = /*#__PURE__*/function (_base_1$default) {
								  _inheritsLoose(DocumentSandbox, _base_1$default);

								  function DocumentSandbox(_nodeSandbox, _shadowUI, _cookieSandbox, _documentTitleStorageInitializer) {
								    var _this;

								    _this = _base_1$default.call(this) || this;
								    _this._nodeSandbox = _nodeSandbox;
								    _this._shadowUI = _shadowUI;
								    _this._cookieSandbox = _cookieSandbox;
								    _this._documentTitleStorageInitializer = _documentTitleStorageInitializer;
								    _this.documentWriter = null;
								    return _this;
								  }

								  DocumentSandbox.forceProxySrcForImageIfNecessary = function forceProxySrcForImageIfNecessary(element) {
								    if (dom_1.isImgElement(element) && settings_1.default.get().forceProxySrcForImage) element[internal_properties_1.default.forceProxySrcForImage] = true;
								  };

								  DocumentSandbox._isDocumentInDesignMode = function _isDocumentInDesignMode(doc) {
								    return doc.designMode === 'on';
								  };

								  var _proto = DocumentSandbox.prototype;

								  _proto._isUninitializedIframeWithoutSrc = function _isUninitializedIframeWithoutSrc(win) {
								    var frameElement = dom_1.getFrameElement(win);
								    return win !== win.top && frameElement && dom_1.isIframeWithoutSrc(frameElement) && !iframe_1.default.isIframeInitialized(frameElement);
								  };

								  _proto._beforeDocumentCleaned = function _beforeDocumentCleaned() {
								    this._nodeSandbox.mutation.onBeforeDocumentCleaned(this.document);
								  };

								  _proto._onDocumentClosed = function _onDocumentClosed() {
								    this._nodeSandbox.mutation.onDocumentClosed(this.document);
								  };

								  DocumentSandbox._shouldEmitDocumentCleanedEvents = function _shouldEmitDocumentCleanedEvents(doc) {
								    if (browser_1.isIE) {
								      if (doc.readyState !== 'loading') return true;
								      var window = doc.defaultView;
								      if (window[internal_properties_1.default.documentWasCleaned]) return false;
								      var iframe = window && dom_1.getFrameElement(window);
								      return iframe && dom_1.isIframeWithoutSrc(iframe);
								    }

								    return doc.readyState !== 'loading' && doc.readyState !== 'uninitialized';
								  };

								  _proto._performDocumentWrite = function _performDocumentWrite(args, ln) {
								    var shouldEmitEvents = DocumentSandbox._shouldEmitDocumentCleanedEvents(this.document);

								    if (shouldEmitEvents) this._beforeDocumentCleaned();
								    var result = this.documentWriter.write(args, ln, shouldEmitEvents); // NOTE: B234357

								    if (!shouldEmitEvents) this._nodeSandbox.processNodes(null, this.document);
								    return result;
								  };

								  _proto._needToUpdateDocumentWriter = function _needToUpdateDocumentWriter(window, document) {
								    try {
								      return !this.documentWriter || this.window !== window || this.document !== document;
								    } catch (e) {
								      return true;
								    }
								  };

								  DocumentSandbox._definePropertyDescriptor = function _definePropertyDescriptor(owner, childOfOwner, prop, overriddenDescriptor) {
								    // NOTE: The 'URL', 'domain' and 'referrer' properties are non configurable in IE and Edge
								    if (!overriddenDescriptor.configurable) {
								      // NOTE: property doesn't redefined yet
								      if (!childOfOwner.hasOwnProperty(prop)) native_methods_1.default.objectDefineProperty(childOfOwner, prop, overriddenDescriptor);
								    } else native_methods_1.default.objectDefineProperty(owner, prop, overriddenDescriptor);
								  };

								  _proto.iframeDocumentOpen = function iframeDocumentOpen(window, document, args) {
								    var iframe = window.frameElement;
								    var result = native_methods_1.default.documentOpen.apply(document, args);
								    native_methods_1.default.objectDefineProperty(window, internal_properties_1.default.documentWasCleaned, {
								      value: true,
								      configurable: true
								    });

								    this._nodeSandbox.iframeSandbox.onIframeBeganToRun(iframe);

								    return result;
								  };

								  _proto.attach = function attach(window, document, partialInitializationForNotLoadedIframe) {
								    var _this2 = this;

								    if (partialInitializationForNotLoadedIframe === void 0) {
								      partialInitializationForNotLoadedIframe = false;
								    }

								    if (this._needToUpdateDocumentWriter(window, document)) {
								      this.documentWriter = new writer_1.default(window, document);

								      this._nodeSandbox.mutation.on(this._nodeSandbox.mutation.BEFORE_DOCUMENT_CLEANED_EVENT, function () {
								        _this2.documentWriter = new writer_1.default(window, document);
								      });
								    }

								    _base_1$default.prototype.attach.call(this, window, document);

								    var documentSandbox = this;
								    var docPrototype = window.Document.prototype;
								    var overriddenMethods = {
								      open: function open() {
								        var isUninitializedIframe = documentSandbox._isUninitializedIframeWithoutSrc(window);

								        if (!isUninitializedIframe) documentSandbox._beforeDocumentCleaned();

								        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
								          args[_key] = arguments[_key];
								        }

								        if (browser_1.isIE) return window.parent[internal_properties_1.default.hammerhead].sandbox.node.doc.iframeDocumentOpen(window, this, args);
								        var result = native_methods_1.default.documentOpen.apply(this, args); // NOTE: Chrome does not remove the "%hammerhead%" property from window
								        // after document.open call

								        var objectDefinePropertyFn = window[internal_properties_1.default.hammerhead] ? window[internal_properties_1.default.hammerhead].nativeMethods.objectDefineProperty : window.Object.defineProperty;
								        objectDefinePropertyFn(window, internal_properties_1.default.documentWasCleaned, {
								          value: true,
								          configurable: true
								        });
								        if (!isUninitializedIframe) documentSandbox._nodeSandbox.mutation.onDocumentCleaned(window, this);else // NOTE: If iframe initialization is in progress, we need to override the document.write and document.open
								          // methods once again, because they were cleaned after the native document.open method call.
								          documentSandbox.attach(window, this);
								        return result;
								      },
								      close: function close() {
								        // NOTE: IE11 raise the "load" event only when the document.close method is called. We need to
								        // restore the overridden document.open and document.write methods before Hammerhead injection, if the
								        // window is not initialized.
								        if (browser_1.isIE && !iframe_1.default.isWindowInited(window)) native_methods_1.default.restoreDocumentMeths(window, this); // NOTE: IE doesn't run scripts in iframe if iframe.documentContent.designMode equals 'on' (GH-871)

								        if (DocumentSandbox._isDocumentInDesignMode(this)) shadow_ui_1.default.removeSelfRemovingScripts(this);

								        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
								          args[_key2] = arguments[_key2];
								        }

								        var result = native_methods_1.default.documentClose.apply(this, args);
								        if (!documentSandbox._isUninitializedIframeWithoutSrc(window)) documentSandbox._onDocumentClosed();
								        var iframe = dom_1.getFrameElement(window); // NOTE: Firefox misses the Hammerhead instance after the iframe.contentDocument.close function calling (GH-1821)

								        if (iframe) documentSandbox._nodeSandbox.iframeSandbox.onIframeBeganToRun(iframe);
								        return result;
								      },
								      write: function write() {
								        return documentSandbox._performDocumentWrite(arguments);
								      },
								      writeln: function writeln() {
								        return documentSandbox._performDocumentWrite(arguments, true);
								      }
								    };
								    overriding_1.overrideFunction(window[native_methods_1.default.documentOpenPropOwnerName].prototype, 'open', overriddenMethods.open);
								    overriding_1.overrideFunction(window[native_methods_1.default.documentClosePropOwnerName].prototype, 'close', overriddenMethods.close);
								    overriding_1.overrideFunction(window[native_methods_1.default.documentWritePropOwnerName].prototype, 'write', overriddenMethods.write);
								    overriding_1.overrideFunction(window[native_methods_1.default.documentWriteLnPropOwnerName].prototype, 'writeln', overriddenMethods.writeln);
								    overriding_1.overrideFunction(document, 'open', overriddenMethods.open);
								    overriding_1.overrideFunction(document, 'close', overriddenMethods.close);
								    overriding_1.overrideFunction(document, 'write', overriddenMethods.write);
								    overriding_1.overrideFunction(document, 'writeln', overriddenMethods.writeln);
								    if (document.open !== overriddenMethods.open) overriding_1.overrideFunction(document, 'open', overriddenMethods.open);
								    overriding_1.overrideFunction(docPrototype, 'createElement', function () {
								      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
								        args[_key3] = arguments[_key3];
								      }

								      var el = native_methods_1.default.createElement.apply(this, args);
								      DocumentSandbox.forceProxySrcForImageIfNecessary(el);
								      dom_processor_1.default.processElement(el, urlUtils.convertToProxyUrl);

								      documentSandbox._nodeSandbox.processNodes(el);

								      return el;
								    });
								    overriding_1.overrideFunction(docPrototype, 'createElementNS', function () {
								      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
								        args[_key4] = arguments[_key4];
								      }

								      var el = native_methods_1.default.createElementNS.apply(this, args);
								      DocumentSandbox.forceProxySrcForImageIfNecessary(el);
								      dom_processor_1.default.processElement(el, urlUtils.convertToProxyUrl);

								      documentSandbox._nodeSandbox.processNodes(el);

								      return el;
								    });
								    overriding_1.overrideFunction(docPrototype, 'createDocumentFragment', function () {
								      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
								        args[_key5] = arguments[_key5];
								      }

								      var fragment = native_methods_1.default.createDocumentFragment.apply(this, args);

								      documentSandbox._nodeSandbox.processNodes(fragment);

								      return fragment;
								    });
								    var htmlDocPrototype = window.HTMLDocument.prototype;
								    var storedDomain = '';

								    if (native_methods_1.default.documentDocumentURIGetter) {
								      overriding_1.overrideDescriptor(docPrototype, 'documentURI', {
								        getter: function getter() {
								          return url_1.getDestinationUrl(native_methods_1.default.documentDocumentURIGetter.call(this));
								        }
								      });
								    }

								    var referrerOverriddenDescriptor = overriding_1.createOverriddenDescriptor(docPrototype, 'referrer', {
								      getter: function getter() {
								        var referrer = url_1.getDestinationUrl(native_methods_1.default.documentReferrerGetter.call(this));
								        return url_1.isSpecialPage(referrer) ? '' : referrer;
								      }
								    });

								    DocumentSandbox._definePropertyDescriptor(docPrototype, htmlDocPrototype, 'referrer', referrerOverriddenDescriptor);

								    var urlOverriddenDescriptor = overriding_1.createOverriddenDescriptor(docPrototype, 'URL', {
								      getter: function getter() {
								        // eslint-disable-next-line no-restricted-properties
								        return location_1.default.getLocationWrapper(this).href;
								      }
								    });

								    DocumentSandbox._definePropertyDescriptor(docPrototype, htmlDocPrototype, 'URL', urlOverriddenDescriptor);

								    var domainPropertyOwner = native_methods_1.default.objectHasOwnProperty.call(docPrototype, 'domain') ? docPrototype : htmlDocPrototype;
								    var domainOverriddenDescriptor = overriding_1.createOverriddenDescriptor(domainPropertyOwner, 'domain', {
								      getter: function getter() {
								        // eslint-disable-next-line no-restricted-properties
								        return storedDomain || location_1.default.getLocationWrapper(window).hostname;
								      },
								      setter: function setter(value) {
								        storedDomain = value;
								      }
								    });

								    DocumentSandbox._definePropertyDescriptor(domainPropertyOwner, htmlDocPrototype, 'domain', domainOverriddenDescriptor);

								    overriding_1.overrideDescriptor(docPrototype, 'styleSheets', {
								      getter: function getter() {
								        var styleSheets = native_methods_1.default.documentStyleSheetsGetter.call(this);
								        return documentSandbox._shadowUI._filterStyleSheetList(styleSheets, styleSheets.length);
								      }
								    });
								    var documentCookiePropOwnerPrototype = window[native_methods_1.default.documentCookiePropOwnerName].prototype;
								    overriding_1.overrideDescriptor(documentCookiePropOwnerPrototype, 'cookie', {
								      getter: function getter() {
								        return documentSandbox._cookieSandbox.getCookie();
								      },
								      setter: function setter(value) {
								        return documentSandbox._cookieSandbox.setCookie(String(value));
								      }
								    });
								    overriding_1.overrideDescriptor(docPrototype, 'activeElement', {
								      getter: function getter() {
								        var activeElement = native_methods_1.default.documentActiveElementGetter.call(this);
								        if (activeElement && dom_1.isShadowUIElement(activeElement)) return documentSandbox._shadowUI.getLastActiveElement() || this.body;
								        return activeElement;
								      }
								    });
								    var documentScriptsPropOwnerPrototype = window[native_methods_1.default.documentScriptsPropOwnerName].prototype;
								    overriding_1.overrideDescriptor(documentScriptsPropOwnerPrototype, 'scripts', {
								      getter: function getter() {
								        var scripts = native_methods_1.default.documentScriptsGetter.call(this);
								        var length = native_methods_1.default.htmlCollectionLengthGetter.call(scripts);
								        return documentSandbox._shadowUI._filterNodeList(scripts, length);
								      }
								    });

								    if (this._documentTitleStorageInitializer && !partialInitializationForNotLoadedIframe) {
								      overriding_1.overrideDescriptor(docPrototype, 'title', {
								        getter: function getter() {
								          return documentSandbox._documentTitleStorageInitializer.storage.getTitle();
								        },
								        setter: function setter(value) {
								          documentSandbox._documentTitleStorageInitializer.storage.setTitle(value);
								        }
								      });
								    }
								  };

								  return DocumentSandbox;
								}(base_1.default);

								exports.default = DocumentSandbox;
								module.exports = exports.default;
							},
							"title-storage-initializer.js": function (exports, module, require) {
								

								var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
								  return mod && mod.__esModule ? mod : {
								    "default": mod
								  };
								};

								Object.defineProperty(exports, "__esModule", {
								  value: true
								});

								var settings_1 = __importDefault(require("../../../settings"));

								var native_methods_1 = __importDefault(require("../../native-methods"));

								var remove_element_1 = __importDefault(require("../../../utils/remove-element"));

								var DocumentTitleStorageInitializer = /*#__PURE__*/function () {
								  function DocumentTitleStorageInitializer(storage) {
								    var _this = this;

								    this.storage = storage;
								    this.storage.on('titleElementAdded', function () {
								      return _this._processFirstTitleElement();
								    });
								  }

								  var _proto = DocumentTitleStorageInitializer.prototype;

								  _proto._setProxiedTitleValue = function _setProxiedTitleValue() {
								    var _settings_1$default$g = settings_1.default.get(),
								        sessionId = _settings_1$default$g.sessionId,
								        windowId = _settings_1$default$g.windowId;

								    var value = sessionId + "*" + windowId;
								    native_methods_1.default.documentTitleSetter.call(this.storage.getDocument(), value);
								  };

								  _proto._processFirstTitleElement = function _processFirstTitleElement() {
								    var firstTitle = this.storage.getFirstTitleElement();
								    if (!firstTitle) return false;
								    if (this.storage.isElementProcessed(firstTitle)) return false;
								    var value = native_methods_1.default.titleElementTextGetter.call(firstTitle);
								    this.storage.setTitleElementPropertyValue(firstTitle, value);

								    this._setProxiedTitleValue();

								    return true;
								  };

								  _proto.onAttach = function onAttach() {
								    this._processFirstTitleElement();
								  };

								  _proto.onPageTitleLoaded = function onPageTitleLoaded() {
								    if (this._processFirstTitleElement()) return;
								    var firstTitle = this.storage.getFirstTitleElement();
								    var secondTitle = this.storage.getSecondTitleElement();
								    if (!secondTitle) return; // NOTE: IE11 returns an empty string for the second <title> tag in the elements hierarchy.

								    var pageOriginValue = native_methods_1.default.titleElementTextGetter.call(secondTitle) || native_methods_1.default.htmlElementInnerTextGetter.call(secondTitle);
								    var serviceValue = native_methods_1.default.titleElementTextGetter.call(firstTitle);
								    native_methods_1.default.titleElementTextSetter.call(secondTitle, serviceValue);
								    remove_element_1.default(firstTitle);
								    this.storage.setTitleElementPropertyValue(secondTitle, pageOriginValue);
								  };

								  return DocumentTitleStorageInitializer;
								}();

								exports.default = DocumentTitleStorageInitializer;
								module.exports = exports.default;
							},
							"title-storage.js": function (exports, module, require) {
								

								function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

								function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

								function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

								function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

								var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
								  return mod && mod.__esModule ? mod : {
								    "default": mod
								  };
								};

								Object.defineProperty(exports, "__esModule", {
								  value: true
								});

								var native_methods_1 = __importDefault(require("../../native-methods"));

								var event_emitter_1 = __importDefault(require("../../../utils/event-emitter"));

								var DEFAULT_TITLE_VALUE = ''; // NOTE: Hammehead always add the <title> element for each test before test execution.
								// It's necessary to TestCafe can find the browser tab by page title.
								// This <title> element stores the sandboxed title value in the internal property.

								var INTERNAL_TITLE_PROP_NAME = 'hammerhead|document-title-storage|internal-prop-name';

								var DocumentTitleStorage = /*#__PURE__*/function (_event_emitter_1$defa) {
								  _inheritsLoose(DocumentTitleStorage, _event_emitter_1$defa);

								  function DocumentTitleStorage(document) {
								    var _this;

								    _this = _event_emitter_1$defa.call(this) || this;
								    _this._document = document;
								    return _this;
								  }

								  var _proto = DocumentTitleStorage.prototype;

								  _proto._ensureFirstTitleElement = function _ensureFirstTitleElement() {
								    var firstTitle = this.getFirstTitleElement();
								    if (firstTitle) return firstTitle;
								    firstTitle = native_methods_1.default.createElement.call(this._document, 'title');
								    native_methods_1.default.appendChild.call(this._document.head, firstTitle);
								    this.emit('titleElementAdded');
								    return firstTitle;
								  };

								  _proto._getValueFromFirstTitleElement = function _getValueFromFirstTitleElement() {
								    var firstTitle = this.getFirstTitleElement();
								    if (!firstTitle) return DEFAULT_TITLE_VALUE;
								    return this.getTitleElementPropertyValue(firstTitle);
								  };

								  _proto._setValueForFirstTitleElement = function _setValueForFirstTitleElement(value) {
								    var firstTitle = this._ensureFirstTitleElement();

								    this.setTitleElementPropertyValue(firstTitle, value);
								  };

								  _proto._getTitleElement = function _getTitleElement(index) {
								    return this._document && this._document.head && native_methods_1.default.elementQuerySelectorAll.call(this._document.head, 'title')[index];
								  };

								  _proto.getFirstTitleElement = function getFirstTitleElement() {
								    return this._getTitleElement(0);
								  };

								  _proto.getSecondTitleElement = function getSecondTitleElement() {
								    return this._getTitleElement(1);
								  };

								  _proto.getTitle = function getTitle() {
								    return this._getValueFromFirstTitleElement();
								  };

								  _proto.setTitle = function setTitle(value) {
								    value = String(value);

								    this._setValueForFirstTitleElement(value);
								  };

								  _proto.getTitleElementPropertyValue = function getTitleElementPropertyValue(element) {
								    return element[INTERNAL_TITLE_PROP_NAME] || DEFAULT_TITLE_VALUE;
								  };

								  _proto.setTitleElementPropertyValue = function setTitleElementPropertyValue(element, value) {
								    value = String(value);
								    if (this.isElementProcessed(element)) element[INTERNAL_TITLE_PROP_NAME] = value;else native_methods_1.default.objectDefineProperty(element, INTERNAL_TITLE_PROP_NAME, {
								      value: value,
								      writable: true
								    });
								  };

								  _proto.getDocument = function getDocument() {
								    return this._document;
								  };

								  _proto.isElementProcessed = function isElementProcessed(titleElement) {
								    return INTERNAL_TITLE_PROP_NAME in titleElement;
								  };

								  _createClass(DocumentTitleStorage, null, [{
								    key: "DEFAULT_TITLE_VALUE",
								    get: function get() {
								      return DEFAULT_TITLE_VALUE;
								    }
								  }]);

								  return DocumentTitleStorage;
								}(event_emitter_1.default);

								exports.default = DocumentTitleStorage;
								module.exports = exports.default;
							},
							"writer.js": function (exports, module, require) {
								

								var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
								  return mod && mod.__esModule ? mod : {
								    "default": mod
								  };
								};

								var __importStar = void 0 && (void 0).__importStar || function (mod) {
								  if (mod && mod.__esModule) return mod;
								  var result = {};
								  if (mod != null) for (var k in mod) {
								    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
								  }
								  result["default"] = mod;
								  return result;
								};

								Object.defineProperty(exports, "__esModule", {
								  value: true
								});

								var native_methods_1 = __importDefault(require("../../native-methods"));

								var htmlUtils = __importStar(require("../../../utils/html"));

								var dom_1 = require("../../../utils/dom");

								var browser_1 = require("../../../utils/browser");

								var script_1 = require("../../../../processing/script");

								var style_1 = __importDefault(require("../../../../processing/style"));

								var url_1 = require("../../../utils/url");

								var self_removing_scripts_1 = __importDefault(require("../../../../utils/self-removing-scripts"));

								var BEGIN_MARKER_TAG_NAME = 'hammerhead_write_marker_begin';
								var END_MARKER_TAG_NAME = 'hammerhead_write_marker_end';
								var BEGIN_MARKER_MARKUP = "<" + BEGIN_MARKER_TAG_NAME + "></" + BEGIN_MARKER_TAG_NAME + ">";
								var END_MARKER_MARKUP = "<" + END_MARKER_TAG_NAME + "></" + END_MARKER_TAG_NAME + ">";
								var BEGIN_REMOVE_RE = new RegExp("^[\\S\\s]*" + BEGIN_MARKER_MARKUP, 'g');
								var END_REMOVE_RE = new RegExp(END_MARKER_MARKUP + "[\\S\\s]*$", 'g');
								var REMOVE_OPENING_TAG_RE = /^<[^>]+>/g;
								var REMOVE_CLOSING_TAG_RE = /<\/[^<>]+>$/g;
								var PENDING_RE = /<\/?(?:[A-Za-z][^>]*)?$/g;
								var UNCLOSED_ELEMENT_FLAG = 'hammerhead|unclosed-element-flag';

								var DocumentWriter = /*#__PURE__*/function () {
								  function DocumentWriter(window, document) {
								    this.window = window;
								    this.document = document;
								    this.pending = '';
								    this.parentTagChain = [];
								    this.isBeginMarkerInDOM = false;
								    this.isEndMarkerInDOM = false;
								    this.isClosingContentEl = false;
								    this.isNonClosedComment = false;
								    this.isAddContentToEl = false;
								    this.contentForProcessing = '';
								    this.nonClosedEl = null;
								    this.cachedStartsWithClosingTagRegExps = {};
								  }

								  var _proto = DocumentWriter.prototype;

								  _proto._cutPending = function _cutPending(htmlChunk) {
								    var match = htmlChunk.match(PENDING_RE);
								    this.pending = match ? match[0] : '';
								    return this.pending ? htmlChunk.substring(0, htmlChunk.length - this.pending.length) : htmlChunk;
								  };

								  _proto._wrapHtmlChunk = function _wrapHtmlChunk(htmlChunk) {
								    var parentTagChainMarkup = this.parentTagChain.length ? '<' + this.parentTagChain.join('><') + '>' : '';
								    if (this.isNonClosedComment) parentTagChainMarkup += '<!--';
								    return parentTagChainMarkup + BEGIN_MARKER_MARKUP + htmlChunk + END_MARKER_MARKUP;
								  };

								  _proto._unwrapHtmlChunk = function _unwrapHtmlChunk(htmlChunk) {
								    if (!htmlChunk) return htmlChunk;
								    htmlChunk = htmlChunk.replace(BEGIN_REMOVE_RE, '').replace(END_REMOVE_RE, '');
								    if (!this.isBeginMarkerInDOM) htmlChunk = this.isNonClosedComment ? htmlChunk.slice(4) : htmlChunk.replace(REMOVE_OPENING_TAG_RE, '');
								    if (!this.isEndMarkerInDOM) htmlChunk = this.isNonClosedComment ? htmlChunk.slice(0, -3) : htmlChunk.replace(REMOVE_CLOSING_TAG_RE, '');
								    if (!this.isBeginMarkerInDOM && this.isEndMarkerInDOM) this.isNonClosedComment = false;
								    return htmlChunk;
								  };

								  DocumentWriter._setUnclosedElementFlag = function _setUnclosedElementFlag(el) {
								    if (dom_1.isScriptElement(el) || dom_1.isStyleElement(el)) el[UNCLOSED_ELEMENT_FLAG] = true;
								  };

								  DocumentWriter.hasUnclosedElementFlag = function hasUnclosedElementFlag(el) {
								    return !!el[UNCLOSED_ELEMENT_FLAG];
								  };

								  DocumentWriter._searchBeginMarker = function _searchBeginMarker(container) {
								    var beginMarker = native_methods_1.default.elementQuerySelector.call(container, BEGIN_MARKER_TAG_NAME);
								    if (beginMarker) return beginMarker;
								    beginMarker = container;

								    while (native_methods_1.default.elementFirstElementChildGetter.call(beginMarker)) {
								      beginMarker = native_methods_1.default.elementFirstElementChildGetter.call(beginMarker);
								    }

								    var beginMarkerParent = native_methods_1.default.nodeParentNodeGetter.call(beginMarker);
								    if (native_methods_1.default.nodeFirstChildGetter.call(beginMarkerParent) !== beginMarker) beginMarker = native_methods_1.default.nodeFirstChildGetter.call(beginMarkerParent);else if (dom_1.isCommentNode(native_methods_1.default.nodeFirstChildGetter.call(beginMarker))) beginMarker = native_methods_1.default.nodeFirstChildGetter.call(beginMarker);
								    return beginMarker;
								  };

								  DocumentWriter._searchEndMarker = function _searchEndMarker(container) {
								    var endMarker = native_methods_1.default.elementQuerySelector.call(container, END_MARKER_TAG_NAME);
								    if (endMarker) return endMarker;
								    endMarker = container;

								    while (native_methods_1.default.elementLastElementChildGetter.call(endMarker)) {
								      endMarker = native_methods_1.default.elementLastElementChildGetter.call(endMarker);
								    }

								    var endMarkerParent = native_methods_1.default.nodeParentNodeGetter.call(endMarker);
								    if (native_methods_1.default.nodeLastChildGetter.call(endMarkerParent) !== endMarker) endMarker = native_methods_1.default.nodeLastChildGetter.call(endMarkerParent);else if (dom_1.isCommentNode(native_methods_1.default.nodeLastChildGetter.call(endMarker))) endMarker = native_methods_1.default.nodeLastChildGetter.call(endMarker);
								    return endMarker;
								  };

								  _proto._updateParentTagChain = function _updateParentTagChain(container, endMarker) {
								    var endMarkerParent = dom_1.getTagName(endMarker) !== END_MARKER_TAG_NAME ? endMarker : native_methods_1.default.nodeParentNodeGetter.call(endMarker);

								    if (dom_1.isCommentNode(endMarker)) {
								      this.isNonClosedComment = true;
								      endMarkerParent = native_methods_1.default.nodeParentNodeGetter.call(endMarker);
								    }

								    this.parentTagChain = [];

								    while (endMarkerParent !== container) {
								      this.parentTagChain.unshift(dom_1.getTagName(endMarkerParent));
								      endMarkerParent = native_methods_1.default.nodeParentNodeGetter.call(endMarkerParent);
								    }
								  };

								  _proto._processBeginMarkerInContent = function _processBeginMarkerInContent(beginMarker) {
								    var elWithContent = beginMarker;

								    DocumentWriter._setUnclosedElementFlag(elWithContent);

								    if (this.isClosingContentEl && (dom_1.isScriptElement(elWithContent) || dom_1.isStyleElement(elWithContent))) {
								      this.contentForProcessing = native_methods_1.default.nodeTextContentGetter.call(this.nonClosedEl) + native_methods_1.default.nodeTextContentGetter.call(elWithContent).replace(BEGIN_REMOVE_RE, '');
								      native_methods_1.default.nodeTextContentSetter.call(elWithContent, '');
								    } else {
								      var textContent = native_methods_1.default.nodeTextContentGetter.call(elWithContent);
								      native_methods_1.default.nodeTextContentSetter.call(elWithContent, textContent.replace(BEGIN_REMOVE_RE, ''));
								    }

								    beginMarker = native_methods_1.default.createElement.call(document, BEGIN_MARKER_TAG_NAME);
								    var elWithContentParent = native_methods_1.default.nodeParentNodeGetter.call(elWithContent);
								    native_methods_1.default.insertBefore.call(elWithContentParent, beginMarker, elWithContent);
								  };

								  DocumentWriter._createStartsWithClosingTagRegExp = function _createStartsWithClosingTagRegExp(tagName) {
								    var regExpStrParts = [tagName.charAt(tagName.length - 1), '?'];

								    for (var i = tagName.length - 2; i > -1; i--) {
								      regExpStrParts.unshift('(?:', tagName.charAt(i));
								      regExpStrParts.push(')?');
								    }

								    regExpStrParts.unshift('^</');
								    regExpStrParts.push('$');
								    return new RegExp(regExpStrParts.join(''), 'i');
								  };

								  _proto._getStartsWithClosingTagRegExp = function _getStartsWithClosingTagRegExp(tagName) {
								    tagName = tagName.toLowerCase();
								    if (!this.cachedStartsWithClosingTagRegExps[tagName]) this.cachedStartsWithClosingTagRegExps[tagName] = DocumentWriter._createStartsWithClosingTagRegExp(tagName);
								    return this.cachedStartsWithClosingTagRegExps[tagName];
								  };

								  _proto._processEndMarkerInContent = function _processEndMarkerInContent(endMarker) {
								    var elWithContent = endMarker;
								    var textContent = native_methods_1.default.nodeTextContentGetter.call(elWithContent);

								    DocumentWriter._setUnclosedElementFlag(elWithContent);

								    native_methods_1.default.nodeTextContentSetter.call(elWithContent, textContent.replace(END_REMOVE_RE, ''));
								    endMarker = native_methods_1.default.createElement.call(document, END_MARKER_TAG_NAME);

								    if (this.pending) {
								      var startsWithClosingTagRegExp = this._getStartsWithClosingTagRegExp(elWithContent.tagName);

								      var isPendingStartsWithClosingTagPart = startsWithClosingTagRegExp.test(this.pending);

								      if (!isPendingStartsWithClosingTagPart) {
								        var newContent = native_methods_1.default.nodeTextContentGetter.call(elWithContent) + this.pending;
								        native_methods_1.default.nodeTextContentSetter.call(elWithContent, newContent);
								        this.pending = '';
								      }
								    }

								    var elWithContentParent = native_methods_1.default.nodeParentNodeGetter.call(elWithContent);
								    native_methods_1.default.appendChild.call(elWithContentParent, endMarker);
								  };

								  DocumentWriter._addOnDocumentRecreationScript = function _addOnDocumentRecreationScript(endMarker) {
								    var span = native_methods_1.default.createElement.call(endMarker.ownerDocument, 'span');
								    var endMarkerParent = native_methods_1.default.nodeParentNodeGetter.call(endMarker);
								    native_methods_1.default.insertBefore.call(endMarkerParent, span, endMarker);
								    native_methods_1.default.elementOuterHTMLSetter.call(span, self_removing_scripts_1.default.onWindowRecreation);
								  };

								  _proto._prepareDom = function _prepareDom(container, isDocumentCleaned) {
								    var beginMarker = DocumentWriter._searchBeginMarker(container);

								    var endMarker = DocumentWriter._searchEndMarker(container);

								    this.isBeginMarkerInDOM = dom_1.getTagName(beginMarker) === BEGIN_MARKER_TAG_NAME;
								    this.isEndMarkerInDOM = dom_1.getTagName(endMarker) === END_MARKER_TAG_NAME;
								    this.isAddContentToEl = beginMarker === endMarker;
								    this.isClosingContentEl = !this.isBeginMarkerInDOM && !this.isAddContentToEl;

								    if (!this.isAddContentToEl) {
								      this._updateParentTagChain(container, endMarker);

								      if (isDocumentCleaned) DocumentWriter._addOnDocumentRecreationScript(endMarker);
								    }

								    if (!this.isBeginMarkerInDOM && !this.isEndMarkerInDOM) {
								      this._processBeginMarkerInContent(beginMarker);

								      this._processEndMarkerInContent(endMarker);
								    } else if (this.isBeginMarkerInDOM && !this.isEndMarkerInDOM) this._processEndMarkerInContent(endMarker);else if (!this.isBeginMarkerInDOM && this.isEndMarkerInDOM) this._processBeginMarkerInContent(beginMarker);
								  };

								  _proto._processHtmlChunk = function _processHtmlChunk(htmlChunk, isDocumentCleaned) {
								    var _this = this;

								    htmlChunk = this._cutPending(this.pending + htmlChunk);
								    htmlChunk = this._wrapHtmlChunk(htmlChunk);
								    htmlChunk = htmlUtils.processHtml(htmlChunk, {
								      prepareDom: function prepareDom(container) {
								        return _this._prepareDom(container, isDocumentCleaned);
								      },
								      processedContext: this.window
								    });
								    htmlChunk = this._unwrapHtmlChunk(htmlChunk); // NOTE: Firefox and IE recreate a window instance during the document.write function execution (T213930).

								    if (htmlChunk && this.isBeginMarkerInDOM && (browser_1.isFirefox || browser_1.isIE) && !htmlUtils.isPageHtml(htmlChunk)) htmlChunk = self_removing_scripts_1.default.iframeInit + htmlChunk;
								    return htmlChunk;
								  };

								  _proto.write = function write(args, ln, isDocumentCleaned) {
								    var htmlChunk = this._processHtmlChunk(native_methods_1.default.arrayJoin.call(args, ''), isDocumentCleaned);

								    if (this.nonClosedEl && this.contentForProcessing) {
								      var processedContent = this.contentForProcessing;
								      if (dom_1.isScriptElement(this.nonClosedEl)) processedContent = script_1.processScript(this.contentForProcessing, true, false, url_1.convertToProxyUrl);else if (dom_1.isStyleElement(this.nonClosedEl)) processedContent = style_1.default.process(this.contentForProcessing, url_1.getProxyUrl, true);
								      native_methods_1.default.nodeTextContentSetter.call(this.nonClosedEl, processedContent);
								      this.contentForProcessing = '';
								    }

								    var nativeWriteMethod = ln ? native_methods_1.default.documentWriteLn : native_methods_1.default.documentWrite;
								    var result = nativeWriteMethod.call(this.document, htmlChunk);
								    if (isDocumentCleaned && browser_1.isIE) return result;

								    if (!this.isEndMarkerInDOM && !this.isAddContentToEl) {
								      var el = this.document.documentElement;

								      while (native_methods_1.default.elementLastElementChildGetter.call(el)) {
								        el = native_methods_1.default.elementLastElementChildGetter.call(el);
								      }

								      this.nonClosedEl = el;
								    }

								    return result;
								  };

								  return DocumentWriter;
								}();

								exports.default = DocumentWriter;
								module.exports = exports.default;
							}
						},
						"element.js": function (exports, module, require) {
							

							function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

							function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							var __importStar = void 0 && (void 0).__importStar || function (mod) {
							  if (mod && mod.__esModule) return mod;
							  var result = {};
							  if (mod != null) for (var k in mod) {
							    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
							  }
							  result["default"] = mod;
							  return result;
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var internal_properties_1 = __importDefault(require("../../../processing/dom/internal-properties"));

							var base_1 = __importDefault(require("../base"));

							var index_1 = __importDefault(require("../node/index"));

							var dom_1 = __importDefault(require("../../../processing/dom"));

							var native_methods_1 = __importDefault(require("../native-methods"));

							var dom_processor_1 = __importDefault(require("../../dom-processor"));

							var script_1 = require("../../../processing/script");

							var style_1 = __importDefault(require("../../../processing/style"));

							var urlUtils = __importStar(require("../../utils/url"));

							var domUtils = __importStar(require("../../utils/dom"));

							var hiddenInfo = __importStar(require("../upload/hidden-info"));

							var urlResolver = __importStar(require("../../utils/url-resolver"));

							var destination_location_1 = require("../../utils/destination-location");

							var event_1 = require("../../utils/event");

							var html_1 = require("../../utils/html");

							var query_selector_1 = require("../../utils/query-selector");

							var url_1 = require("../../../utils/url");

							var string_trim_1 = __importDefault(require("../../../utils/string-trim"));

							var windowsStorage = __importStar(require("../windows-storage"));

							var attributes_1 = require("./attributes");

							var shadow_ui_1 = __importDefault(require("../shadow-ui"));

							var dom_mutation_tracker_1 = __importDefault(require("./live-node-list/dom-mutation-tracker"));

							var attributes_2 = require("../../../processing/dom/attributes");

							var settings_1 = __importDefault(require("../../settings"));

							var overriding_1 = require("../../utils/overriding");

							var insert_position_1 = __importDefault(require("../../utils/insert-position"));

							var browser_1 = require("../../utils/browser");

							var is_keyword_target_1 = __importDefault(require("../../../utils/is-keyword-target"));

							var builtin_header_names_1 = __importDefault(require("../../../request-pipeline/builtin-header-names"));

							var url_2 = require("../../utils/url");

							var RESTRICTED_META_HTTP_EQUIV_VALUES = [builtin_header_names_1.default.refresh, builtin_header_names_1.default.contentSecurityPolicy];

							var ElementSandbox = /*#__PURE__*/function (_base_1$default) {
							  _inheritsLoose(ElementSandbox, _base_1$default);

							  function ElementSandbox(_nodeSandbox, _uploadSandbox, _iframeSandbox, _shadowUI, _eventSandbox, _childWindowSandbox) {
							    var _this;

							    _this = _base_1$default.call(this) || this;
							    _this._nodeSandbox = _nodeSandbox;
							    _this._uploadSandbox = _uploadSandbox;
							    _this._iframeSandbox = _iframeSandbox;
							    _this._shadowUI = _shadowUI;
							    _this._eventSandbox = _eventSandbox;
							    _this._childWindowSandbox = _childWindowSandbox;
							    _this.BEFORE_FORM_SUBMIT_EVENT = 'hammerhead|event|before-form-submit';
							    _this.SCRIPT_ELEMENT_ADDED_EVENT = 'hammerhead|event|script-added';
							    _this.overriddenMethods = null;
							    return _this;
							  }

							  ElementSandbox._onTargetChanged = function _onTargetChanged(el) {
							    var tagName = domUtils.getTagName(el);
							    var targetAttr = dom_processor_1.default.getTargetAttr(el);
							    if (!dom_1.default.isIframeFlagTag(tagName)) return;
							    var urlAttr = '';
							    if (targetAttr === 'target') urlAttr = tagName === 'form' ? 'action' : 'href';else if (targetAttr === 'formtarget') urlAttr = 'formaction';
							    var storedUrlAttr = dom_1.default.getStoredAttrName(urlAttr);

							    if (el.hasAttribute(storedUrlAttr)) {
							      var url = el.getAttribute(storedUrlAttr);
							      if (urlUtils.isSupportedProtocol(url)) el.setAttribute(urlAttr, url);
							    }
							  };

							  ElementSandbox._setProxiedSrc = function _setProxiedSrc(img) {
							    if (img[internal_properties_1.default.forceProxySrcForImage]) return;
							    var imgSrc = native_methods_1.default.imageSrcGetter.call(img);
							    var skipNextLoadEvent = !!imgSrc && img.complete && !img[internal_properties_1.default.cachedImage];
							    img[internal_properties_1.default.forceProxySrcForImage] = true;
							    if (imgSrc) img.setAttribute('src', imgSrc);
							    img[internal_properties_1.default.skipNextLoadEventForImage] = skipNextLoadEvent;
							  };

							  var _proto = ElementSandbox.prototype;

							  _proto.getAttributeCore = function getAttributeCore(el, args, isNs) {
							    var attr = String(args[isNs ? 1 : 0]);
							    var loweredAttr = attr.toLowerCase();
							    var ns = isNs ? args[0] : null;
							    var getAttrMeth = isNs ? native_methods_1.default.getAttributeNS : native_methods_1.default.getAttribute;
							    var tagName = domUtils.getTagName(el);
							    if (loweredAttr === 'style') return style_1.default.cleanUp(getAttrMeth.apply(el, args), urlUtils.parseProxyUrl); // OPTIMIZATION: The hasAttribute method is very slow.

							    if (dom_processor_1.default.isUrlAttr(el, loweredAttr, ns) || dom_processor_1.default.EVENTS.indexOf(loweredAttr) !== -1 || attributes_2.ATTRS_WITH_SPECIAL_PROXYING_LOGIC.indexOf(loweredAttr) !== -1) {
							      var storedAttrName = dom_1.default.getStoredAttrName(attr);
							      var storedAttrValue = getAttrMeth.apply(el, isNs ? [ns, storedAttrName] : [storedAttrName]);
							      if (dom_1.default.isAddedAutocompleteAttr(loweredAttr, storedAttrValue)) return null;else if (el.hasAttribute(storedAttrName)) args[isNs ? 1 : 0] = storedAttrName;
							    } else if (!isNs && ( // NOTE: We simply remove the 'integrity' attribute because its value will not be relevant after the script
							    // content changes (http://www.w3.org/TR/SRI/). If this causes problems in the future, we will need to generate
							    // the correct SHA for the changed script. (GH-235)
							    loweredAttr === 'integrity' && dom_1.default.isTagWithIntegrityAttr(tagName) || // NOTE: We simply remove the 'rel' attribute if rel='prefetch' and use stored 'rel' attribute, because the prefetch
							    // resource type is unknown. https://github.com/DevExpress/testcafe/issues/2528
							    loweredAttr === 'rel' && tagName === 'link' || loweredAttr === 'required' && domUtils.isFileInput(el) || loweredAttr === 'srcdoc' && tagName === 'iframe')) {
							      var storedAttr = dom_1.default.getStoredAttrName(attr);
							      if (native_methods_1.default.hasAttribute.call(el, storedAttr)) args[0] = storedAttr;
							    }

							    return getAttrMeth.apply(el, args);
							  };

							  _proto.setAttributeCore = function setAttributeCore(el, args, isNs) {
							    var ns = isNs ? args[0] : null;
							    var attr = String(args[isNs ? 1 : 0]);
							    var loweredAttr = attr.toLowerCase();
							    var valueIndex = isNs ? 2 : 1;
							    var value = String(args[valueIndex]);
							    var setAttrMeth = isNs ? native_methods_1.default.setAttributeNS : native_methods_1.default.setAttribute;
							    var tagName = domUtils.getTagName(el);
							    var isUrlAttr = dom_processor_1.default.isUrlAttr(el, attr, ns);
							    var isEventAttr = dom_processor_1.default.EVENTS.indexOf(attr) !== -1;
							    var needToCallTargetChanged = false;
							    var needToRecalcHref = false;
							    var isSpecialPage = urlUtils.isSpecialPage(value);
							    var isSupportedProtocol = urlUtils.isSupportedProtocol(value);

							    if (isUrlAttr && !isSupportedProtocol && !isSpecialPage || isEventAttr) {
							      var isJsProtocol = dom_1.default.isJsProtocol(value);
							      var storedJsAttr = dom_1.default.getStoredAttrName(attr);
							      if (isUrlAttr && isJsProtocol || isEventAttr) args[valueIndex] = dom_1.default.processJsAttrValue(value, {
							        isJsProtocol: isJsProtocol,
							        isEventAttr: isEventAttr
							      });
							      setAttrMeth.apply(el, isNs ? [ns, storedJsAttr, value] : [storedJsAttr, value]);
							    } else if (isUrlAttr && (isSupportedProtocol || isSpecialPage)) {
							      var storedUrlAttr = dom_1.default.getStoredAttrName(attr);
							      setAttrMeth.apply(el, isNs ? [ns, storedUrlAttr, value] : [storedUrlAttr, value]);

							      if (tagName !== 'img' || el[internal_properties_1.default.forceProxySrcForImage]) {
							        if (tagName === 'img') el[internal_properties_1.default.skipNextLoadEventForImage] = false;

							        if (value !== '' && (!isSpecialPage || tagName === 'a')) {
							          var isIframe = tagName === 'iframe' || tagName === 'frame';
							          var isScript = tagName === 'script';
							          var isCrossDomainUrl = isSupportedProtocol && !destination_location_1.sameOriginCheck(location.toString(), value);
							          var resourceType = dom_processor_1.default.getElementResourceType(el);
							          var elCharset = isScript && el.charset; // eslint-disable-line no-extra-parens

							          var currentDocument = el.ownerDocument || this.document;

							          if (loweredAttr === 'formaction' && !native_methods_1.default.hasAttribute.call(el, 'formtarget')) {
							            resourceType = urlUtils.stringifyResourceType({
							              isForm: true
							            });

							            if (el.form && native_methods_1.default.hasAttribute.call(el.form, 'action')) {
							              // eslint-disable-line no-extra-parens
							              var parsedFormAction = urlUtils.parseProxyUrl(native_methods_1.default.formActionGetter.call(el.form)); // eslint-disable-line no-extra-parens

							              if (parsedFormAction) resourceType = parsedFormAction.resourceType;
							            }
							          }

							          if (ElementSandbox._isHrefAttrForBaseElement(el, attr) && domUtils.isElementInDocument(el, currentDocument)) // @ts-ignore
							            urlResolver.updateBase(value, currentDocument);
							          args[valueIndex] = isIframe && isCrossDomainUrl ? urlUtils.getCrossDomainIframeProxyUrl(value) : urlUtils.getProxyUrl(value, {
							            resourceType: resourceType,
							            charset: elCharset,
							            doc: currentDocument
							          });
							        }
							      } else if (value && !isSpecialPage && !urlUtils.parseProxyUrl(value)) {
							        args[valueIndex] = el[internal_properties_1.default.forceProxySrcForImage] ? urlUtils.getProxyUrl(value) : urlUtils.resolveUrlAsDest(value);
							      }
							    } else if (loweredAttr === 'autocomplete') {
							      var storedAutocompleteAttr = dom_1.default.getStoredAttrName(attr);
							      setAttrMeth.apply(el, isNs ? [ns, storedAutocompleteAttr, value] : [storedAutocompleteAttr, value]);
							      args[valueIndex] = 'off';
							    } else if (loweredAttr === 'target' && dom_1.default.isTagWithTargetAttr(tagName) || loweredAttr === 'formtarget' && dom_1.default.isTagWithFormTargetAttr(tagName)) {
							      var currentTarget = native_methods_1.default.getAttribute.call(el, loweredAttr);
							      var newTarget = this.getCorrectedTarget(value);

							      if (newTarget !== currentTarget) {
							        var storedTargetAttr = dom_1.default.getStoredAttrName(attr);
							        setAttrMeth.apply(el, isNs ? [ns, storedTargetAttr, value] : [storedTargetAttr, value]);
							        args[valueIndex] = newTarget;
							        needToCallTargetChanged = true;
							      } else return null;
							    } else if (attr === 'sandbox') {
							      var storedSandboxAttr = dom_1.default.getStoredAttrName(attr);
							      var allowSameOrigin = value.indexOf('allow-same-origin') !== -1;
							      var allowScripts = value.indexOf('allow-scripts') !== -1;
							      setAttrMeth.apply(el, isNs ? [ns, storedSandboxAttr, value] : [storedSandboxAttr, value]);

							      if (!allowSameOrigin || !allowScripts) {
							        args[valueIndex] += !allowSameOrigin ? ' allow-same-origin' : '';
							        args[valueIndex] += !allowScripts ? ' allow-scripts' : '';
							      }

							      if (el[this._nodeSandbox.win.SANDBOX_DOM_TOKEN_LIST_UPDATE_FN]) el[this._nodeSandbox.win.SANDBOX_DOM_TOKEN_LIST_UPDATE_FN](value);
							    } // TODO: remove after https://github.com/DevExpress/testcafe-hammerhead/issues/244 implementation
							    else if (tagName === 'meta' && attr === 'http-equiv') {
							        var loweredValue = value.toLowerCase();
							        if (RESTRICTED_META_HTTP_EQUIV_VALUES.indexOf(loweredValue) !== -1) return null;
							      } else if (loweredAttr === 'xlink:href' && dom_processor_1.default.SVG_XLINK_HREF_TAGS.indexOf(tagName) !== -1 && domUtils.isSVGElement(el)) {
							        var storedXLinkHrefAttr = dom_1.default.getStoredAttrName(attr);
							        setAttrMeth.apply(el, isNs ? [ns, storedXLinkHrefAttr, value] : [storedXLinkHrefAttr, value]);
							        if (!url_1.HASH_RE.test(value)) args[valueIndex] = urlUtils.getProxyUrl(value);
							      } else if (loweredAttr === 'style') args[valueIndex] = style_1.default.process(value, urlUtils.getProxyUrl);else if (!isNs && loweredAttr === 'integrity' && dom_1.default.isTagWithIntegrityAttr(tagName)) {
							        var storedIntegrityAttr = dom_1.default.getStoredAttrName(attr);
							        return setAttrMeth.apply(el, [storedIntegrityAttr, value]);
							      } else if (!isNs && loweredAttr === 'rel' && tagName === 'link') {
							        var currentValue = native_methods_1.default.getAttribute.call(el, 'rel');
							        var formatedValue = string_trim_1.default(value.toLowerCase());
							        var storedRelAttr = dom_1.default.getStoredAttrName(attr);
							        needToRecalcHref = value !== currentValue && (value === dom_processor_1.default.MODULE_PRELOAD_LINK_REL || currentValue === dom_processor_1.default.MODULE_PRELOAD_LINK_REL);

							        if (formatedValue === 'prefetch') {
							          native_methods_1.default.removeAttribute.call(el, attr);
							          args[0] = storedRelAttr;
							        } else native_methods_1.default.removeAttribute.call(el, storedRelAttr);
							      } else if (!isNs && loweredAttr === 'as' && tagName === 'link') {
							        var _currentValue = native_methods_1.default.getAttribute.call(el, 'as');

							        needToRecalcHref = value !== _currentValue && (value === dom_processor_1.default.PROCESSED_PRELOAD_LINK_CONTENT_TYPE || _currentValue === dom_processor_1.default.PROCESSED_PRELOAD_LINK_CONTENT_TYPE);
							      } else if (!isNs && loweredAttr === 'required' && domUtils.isFileInput(el)) {
							        var storedRequiredAttr = dom_1.default.getStoredAttrName(attr);
							        native_methods_1.default.removeAttribute.call(el, attr);
							        args[0] = storedRequiredAttr;
							      } else if (!isNs && loweredAttr === 'type' && domUtils.isInputElement(el)) {
							        var currentType = native_methods_1.default.getAttribute.call(el, loweredAttr);
							        var newType = value.toLowerCase();

							        var _storedRequiredAttr = dom_1.default.getStoredAttrName('required');

							        var currentRequired = native_methods_1.default.hasAttribute.call(el, _storedRequiredAttr) ? native_methods_1.default.getAttribute.call(el, _storedRequiredAttr) : native_methods_1.default.getAttribute.call(el, 'required');
							        var typeIsChanged = !currentType || newType !== currentType.toLowerCase();

							        if (typeIsChanged && currentRequired !== null) {
							          if (newType === 'file') {
							            native_methods_1.default.setAttribute.call(el, _storedRequiredAttr, currentRequired);
							            native_methods_1.default.removeAttribute.call(el, 'required');
							          } else if (currentType === 'file') {
							            native_methods_1.default.setAttribute.call(el, 'required', currentRequired);
							            native_methods_1.default.removeAttribute.call(el, _storedRequiredAttr);
							          }
							        }
							      } else if (!isNs && loweredAttr === 'srcdoc' && tagName === 'iframe') {
							        var storedAttr = dom_1.default.getStoredAttrName(attr);
							        setAttrMeth.apply(el, [storedAttr, value]);
							        args[valueIndex] = dom_processor_1.default.adapter.processSrcdocAttr(value);
							      }

							    var result = setAttrMeth.apply(el, args);
							    if (tagName === 'img' && !el[internal_properties_1.default.forceProxySrcForImage] && el.complete && !browser_1.isFirefox) // eslint-disable-line no-extra-parens
							      el[internal_properties_1.default.cachedImage] = true;
							    if (needToCallTargetChanged) ElementSandbox._onTargetChanged(el);
							    if (needToRecalcHref && native_methods_1.default.hasAttribute.call(el, 'href')) this.setAttributeCore(el, ['href', native_methods_1.default.getAttribute.call(el, 'href')]);
							    return result;
							  };

							  _proto._hasAttributeCore = function _hasAttributeCore(el, args, isNs) {
							    var attributeNameArgIndex = isNs ? 1 : 0;
							    var hasAttrMeth = isNs ? native_methods_1.default.hasAttributeNS : native_methods_1.default.hasAttribute;
							    var storedAutocompleteAttrName = dom_1.default.getStoredAttrName('autocomplete');
							    var storedAutocompleteAttrValue = native_methods_1.default.getAttribute.call(el, storedAutocompleteAttrName);
							    var tagName = domUtils.getTagName(el);
							    if (typeof args[attributeNameArgIndex] === 'string' && dom_1.default.isAddedAutocompleteAttr(args[attributeNameArgIndex], storedAutocompleteAttrValue)) return false; // NOTE: We simply remove the 'integrity' attribute because its value will not be relevant after the script
							    // content changes (http://www.w3.org/TR/SRI/). If this causes problems in the future, we will need to generate
							    // the correct SHA for the changed script.
							    // _hasAttributeCore returns true for 'integrity' attribute if the stored attribute is exists. (GH-235)
							    else if (!isNs && args[0] === 'integrity' && dom_1.default.isTagWithIntegrityAttr(tagName)) args[0] = dom_1.default.getStoredAttrName('integrity'); // NOTE: We simply remove the 'rel' attribute if rel='prefetch' and use stored 'rel' attribute, because the prefetch
							      // resource type is unknown.
							      // _hasAttributeCore returns true for 'rel' attribute if the original 'rel' or stored attribute is exists.
							      // https://github.com/DevExpress/testcafe/issues/2528
							      else if (!isNs && args[0] === 'rel' && tagName === 'link') {
							          var storedRelAttr = dom_1.default.getStoredAttrName(args[0]);
							          return hasAttrMeth.apply(el, args) || hasAttrMeth.apply(el, [storedRelAttr]);
							        } else if (!isNs && args[0] === 'required' && domUtils.isFileInput(el)) {
							          var storedRequiredAttr = dom_1.default.getStoredAttrName(args[0]);
							          return hasAttrMeth.apply(el, args) || hasAttrMeth.call(el, storedRequiredAttr);
							        }
							    return hasAttrMeth.apply(el, args);
							  };

							  _proto.removeAttributeCore = function removeAttributeCore(el, args, isNs) {
							    var attr = String(args[isNs ? 1 : 0]);
							    var formatedAttr = attr.toLowerCase();
							    var removeAttrFunc = isNs ? native_methods_1.default.removeAttributeNS : native_methods_1.default.removeAttribute;
							    var tagName = domUtils.getTagName(el);
							    var result = void 0;

							    if (dom_processor_1.default.isUrlAttr(el, formatedAttr, isNs ? args[0] : null) || formatedAttr === 'sandbox' || formatedAttr === 'autocomplete' || dom_processor_1.default.EVENTS.indexOf(formatedAttr) !== -1 || formatedAttr === 'target' && dom_1.default.isTagWithTargetAttr(tagName) || formatedAttr === 'formtarget' && dom_1.default.isTagWithFormTargetAttr(tagName)) {
							      var storedAttr = dom_1.default.getStoredAttrName(attr);
							      if (formatedAttr === 'autocomplete') native_methods_1.default.setAttribute.call(el, storedAttr, dom_processor_1.default.AUTOCOMPLETE_ATTRIBUTE_ABSENCE_MARKER);else removeAttrFunc.apply(el, isNs ? [args[0], storedAttr] : [storedAttr]);
							    } else if (!isNs && formatedAttr === 'rel' && tagName === 'link') {
							      var storedRelAttr = dom_1.default.getStoredAttrName(attr);
							      removeAttrFunc.apply(el, [storedRelAttr]);
							    } else if (!isNs && formatedAttr === 'required' && domUtils.isFileInput(el)) {
							      var storedRequiredAttr = dom_1.default.getStoredAttrName(attr);
							      removeAttrFunc.call(el, storedRequiredAttr);
							    } else if (!isNs && formatedAttr === 'type' && domUtils.isInputElement(el)) {
							      var _storedRequiredAttr2 = dom_1.default.getStoredAttrName('required');

							      if (native_methods_1.default.hasAttribute.call(el, _storedRequiredAttr2)) {
							        var currentRequired = native_methods_1.default.getAttribute.call(el, _storedRequiredAttr2);
							        native_methods_1.default.setAttribute.call(el, 'required', currentRequired);
							        native_methods_1.default.removeAttribute.call(el, _storedRequiredAttr2);
							      }
							    }

							    if (ElementSandbox._isHrefAttrForBaseElement(el, formatedAttr)) // @ts-ignore
							      urlResolver.updateBase(destination_location_1.get(), this.document);
							    if (formatedAttr !== 'autocomplete') result = removeAttrFunc.apply(el, args);
							    if (formatedAttr === 'target' && dom_1.default.isTagWithTargetAttr(tagName) || formatedAttr === 'formtarget' && dom_1.default.isTagWithFormTargetAttr(tagName)) ElementSandbox._onTargetChanged(el);
							    return result;
							  };

							  _proto._addNodeCore = function _addNodeCore(parentNode, newNodes, args, nativeFn, checkBody) {
							    if (checkBody === void 0) {
							      checkBody = true;
							    }

							    this._prepareNodesForInsertion(newNodes, parentNode);

							    var result = null;
							    var childNodesArray = [];

							    for (var _i2 = 0; _i2 < newNodes.length; _i2++) {
							      var node = newNodes[_i2];

							      if (domUtils.isDocumentFragmentNode(node)) {
							        var childNodes = native_methods_1.default.nodeChildNodesGetter.call(node);
							        childNodesArray.push.apply(childNodesArray, domUtils.nodeListToArray(childNodes));
							      } else if (typeof node !== 'string') childNodesArray.push(node);
							    } // NOTE: Before the page's <body> is processed and added to DOM,
							    // some javascript frameworks create their own body element, perform
							    // certain manipulations and then remove it.
							    // Therefore, we need to check if the body element is present in DOM


							    if (checkBody && domUtils.isBodyElementWithChildren(parentNode) && domUtils.isElementInDocument(parentNode)) result = this._shadowUI.insertBeforeRoot(newNodes);else result = nativeFn.apply(parentNode, args);

							    for (var _i4 = 0; _i4 < childNodesArray.length; _i4++) {
							      var child = childNodesArray[_i4];

							      this._onElementAdded(child);
							    }

							    return result;
							  };

							  _proto._removeNodeCore = function _removeNodeCore(context, args, removingNode, nativeFn) {
							    this._onRemoveFileInputInfo(removingNode);

							    this._onRemoveIframe(removingNode);

							    var result = nativeFn.apply(context, args);

							    this._onElementRemoved(removingNode);

							    return result;
							  };

							  _proto._prepareNodesForInsertion = function _prepareNodesForInsertion(nodes, parentNode) {
							    for (var i = 0; i < nodes.length; i++) {
							      var node = nodes[i];
							      if (typeof node === 'string') nodes[i] = ElementSandbox._processTextContent(node, parentNode);else if (domUtils.isTextNode(node)) node.data = ElementSandbox._processTextContent(node.data, parentNode);else this._nodeSandbox.processNodes(node);
							    }
							  };

							  _proto._createOverriddenMethods = function _createOverriddenMethods() {
							    // NOTE: We need the closure because a context of overridden methods is an html element
							    var sandbox = this;
							    this.overriddenMethods = {
							      appendData: function appendData(text) {
							        var parentNode = native_methods_1.default.nodeParentNodeGetter.call(this);
							        native_methods_1.default.nodeTextContentSetter.call(this, native_methods_1.default.nodeTextContentGetter.call(this) + text);
							        if (parentNode) this.data = ElementSandbox._processTextContent(this.data, parentNode);
							      },
							      insertRow: function insertRow() {
							        var nativeMeth = domUtils.isTableElement(this) ? native_methods_1.default.insertTableRow : native_methods_1.default.insertTBodyRow;
							        var row = nativeMeth.apply(this, arguments);

							        sandbox._nodeSandbox.processNodes(row);

							        return row;
							      },
							      insertCell: function insertCell() {
							        var cell = native_methods_1.default.insertCell.apply(this, arguments);

							        sandbox._nodeSandbox.processNodes(cell);

							        return cell;
							      },
							      insertAdjacentHTML: function insertAdjacentHTML() {
							        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
							          args[_key] = arguments[_key];
							        }

							        var position = args[0];
							        var html = args[1];
							        var el = this;
							        var parentEl = native_methods_1.default.nodeParentNodeGetter.call(el);

							        if (args.length > 1 && html !== null) {
							          args[1] = html_1.processHtml(String(html), {
							            parentTag: parentEl && parentEl['tagName'],
							            processedContext: el[internal_properties_1.default.processedContext]
							          });
							        }

							        native_methods_1.default.insertAdjacentHTML.apply(el, args);

							        sandbox._nodeSandbox.processNodes(parentEl || el);

							        if (position === insert_position_1.default.afterBegin || position === insert_position_1.default.beforeEnd) dom_mutation_tracker_1.default.onChildrenChanged(el);else if (parentEl) dom_mutation_tracker_1.default.onChildrenChanged(parentEl);
							      },
							      formSubmit: function formSubmit() {
							        sandbox._ensureTargetContainsExistingBrowsingContext(this);

							        var args = {
							          form: this,
							          preventSubmit: false
							        };
							        sandbox.emit(sandbox.BEFORE_FORM_SUBMIT_EVENT, args); // HACK: For https://github.com/DevExpress/testcafe/issues/3560
							        // We have to cancel every form submit after a test is done
							        // to prevent requests to a closed session

							        if (!args.preventSubmit) return native_methods_1.default.formSubmit.apply(this, arguments);
							        return null;
							      },
							      insertBefore: function insertBefore() {
							        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
							          args[_key2] = arguments[_key2];
							        }

							        return sandbox._addNodeCore(this, [args[0]], args, native_methods_1.default.insertBefore, !args[1]);
							      },
							      appendChild: function appendChild() {
							        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
							          args[_key3] = arguments[_key3];
							        }

							        return sandbox._addNodeCore(this, [args[0]], args, native_methods_1.default.appendChild);
							      },
							      append: function append() {
							        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
							          args[_key4] = arguments[_key4];
							        }

							        return sandbox._addNodeCore(this, args, args, native_methods_1.default.append);
							      },
							      removeChild: function removeChild() {
							        // NOTE: We are created the args array manually because of the test for the GH-1231 issue.
							        // Babel process the spread operator same as `for..of` loop, and IE11 throws an error
							        // when array is created through `new Array(len)`.
							        var args = [];
							        var length = arguments.length;

							        for (var i = 0; i < length; i++) {
							          args.push(arguments[i]);
							        }

							        return sandbox._removeNodeCore(this, args, args[0], native_methods_1.default.removeChild);
							      },
							      remove: function remove() {
							        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
							          args[_key5] = arguments[_key5];
							        }

							        return sandbox._removeNodeCore(this, args, this, native_methods_1.default.remove);
							      },
							      replaceChild: function replaceChild() {
							        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
							          args[_key6] = arguments[_key6];
							        }

							        var newChild = args[0],
							            oldChild = args[1];
							        if (domUtils.isTextNode(newChild)) newChild.data = ElementSandbox._processTextContent(newChild.data, this);

							        sandbox._onRemoveFileInputInfo(oldChild);

							        var result = native_methods_1.default.replaceChild.apply(this, arguments);

							        sandbox._onAddFileInputInfo(newChild);

							        dom_mutation_tracker_1.default.onElementChanged(newChild);
							        dom_mutation_tracker_1.default.onElementChanged(oldChild);
							        return result;
							      },
							      cloneNode: function cloneNode() {
							        var clone = native_methods_1.default.cloneNode.apply(this, arguments);

							        sandbox._nodeSandbox.processNodes(clone);

							        return clone;
							      },
							      attachShadow: function attachShadow() {
							        for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
							          args[_key7] = arguments[_key7];
							        }

							        var root = native_methods_1.default.attachShadow.apply(this, args);
							        native_methods_1.default.objectDefineProperty(root, domUtils.SHADOW_ROOT_PARENT_ELEMENT, {
							          value: this
							        });
							        return root;
							      },
							      getAttribute: function getAttribute() {
							        return sandbox.getAttributeCore(this, arguments);
							      },
							      getAttributeNS: function getAttributeNS() {
							        return sandbox.getAttributeCore(this, arguments, true);
							      },
							      setAttribute: function setAttribute() {
							        var result = sandbox.setAttributeCore(this, arguments);
							        attributes_1.refreshAttributesWrapper(this);
							        return result;
							      },
							      setAttributeNS: function setAttributeNS() {
							        var result = sandbox.setAttributeCore(this, arguments, true);
							        attributes_1.refreshAttributesWrapper(this);
							        return result;
							      },
							      removeAttribute: function removeAttribute() {
							        var result = sandbox.removeAttributeCore(this, arguments);
							        attributes_1.refreshAttributesWrapper(this);
							        return result;
							      },
							      removeAttributeNS: function removeAttributeNS() {
							        var result = sandbox.removeAttributeCore(this, arguments, true);
							        attributes_1.refreshAttributesWrapper(this);
							        return result;
							      },
							      querySelector: function querySelector() {
							        if (typeof arguments[0] === 'string') arguments[0] = index_1.default.processSelector(arguments[0]);
							        return query_selector_1.getNativeQuerySelector(this).apply(this, arguments);
							      },
							      querySelectorAll: function querySelectorAll() {
							        if (typeof arguments[0] === 'string') arguments[0] = index_1.default.processSelector(arguments[0]);
							        return query_selector_1.getNativeQuerySelectorAll(this).apply(this, arguments);
							      },
							      hasAttribute: function hasAttribute() {
							        return sandbox._hasAttributeCore(this, arguments, false);
							      },
							      hasAttributeNS: function hasAttributeNS() {
							        return sandbox._hasAttributeCore(this, arguments, true);
							      },
							      hasAttributes: function hasAttributes() {
							        if (native_methods_1.default.elementAttributesGetter.call(this).length === 2 && native_methods_1.default.elementAttributesGetter.call(this).getNamedItem('autocomplete') && native_methods_1.default.elementAttributesGetter.call(this).getNamedItem(dom_1.default.getStoredAttrName('autocomplete'))) return sandbox._hasAttributeCore(this, ['autocomplete'], false);
							        return native_methods_1.default.hasAttributes.apply(this, arguments);
							      },
							      anchorToString: function anchorToString() {
							        return url_2.getDestinationUrl(native_methods_1.default.anchorToString.call(this));
							      },
							      registerElement: function registerElement() {
							        for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
							          args[_key8] = arguments[_key8];
							        }

							        var opts = args[1];

							        if (opts && opts.prototype && opts.prototype.createdCallback) {
							          var storedCreatedCallback = opts.prototype.createdCallback;

							          opts.prototype.createdCallback = function () {
							            if (!html_1.isInternalHtmlParserElement(this)) storedCreatedCallback.call(this);
							          };
							        }

							        return native_methods_1.default.registerElement.apply(this, args);
							      }
							    };
							  };

							  ElementSandbox._processTextContent = function _processTextContent(str, parentNode) {
							    if (!parentNode['tagName']) return str;
							    if (domUtils.isScriptElement(parentNode)) return script_1.processScript(str, true, false, urlUtils.convertToProxyUrl);
							    if (domUtils.isStyleElement(parentNode)) return style_1.default.process(str, urlUtils.getProxyUrl);
							    return str;
							  };

							  ElementSandbox._isHrefAttrForBaseElement = function _isHrefAttrForBaseElement(el, attr) {
							    return domUtils.isBaseElement(el) && attr === 'href';
							  };

							  ElementSandbox._removeFileInputInfo = function _removeFileInputInfo(el) {
							    hiddenInfo.removeInputInfo(el);
							  };

							  ElementSandbox._hasShadowUIParentOrContainsShadowUIClassPostfix = function _hasShadowUIParentOrContainsShadowUIClassPostfix(el) {
							    var parent = native_methods_1.default.nodeParentNodeGetter.call(el);
							    return parent && domUtils.isShadowUIElement(parent) || shadow_ui_1.default.containsShadowUIClassPostfix(el);
							  };

							  _proto._isFirstBaseTagOnPage = function _isFirstBaseTagOnPage(el) {
							    var doc = el.ownerDocument || this.document;
							    return native_methods_1.default.querySelector.call(doc, 'base') === el;
							  };

							  _proto._onAddFileInputInfo = function _onAddFileInputInfo(el) {
							    if (!domUtils.isDomElement(el)) return;
							    var fileInputs = domUtils.getFileInputs(el);

							    for (var _i6 = 0; _i6 < fileInputs.length; _i6++) {
							      var fileInput = fileInputs[_i6];
							      this.addFileInputInfo(fileInput);
							    }
							  };

							  _proto._onRemoveFileInputInfo = function _onRemoveFileInputInfo(el) {
							    if (!domUtils.isDomElement(el)) return;
							    if (domUtils.isFileInput(el)) ElementSandbox._removeFileInputInfo(el);else domUtils.find(el, 'input[type=file]', ElementSandbox._removeFileInputInfo);
							  };

							  _proto._onRemoveIframe = function _onRemoveIframe(el) {
							    if (domUtils.isDomElement(el) && domUtils.isIframeElement(el)) windowsStorage.remove(native_methods_1.default.contentWindowGetter.call(el));
							  };

							  _proto._onElementAdded = function _onElementAdded(el) {
							    if (ElementSandbox._hasShadowUIParentOrContainsShadowUIClassPostfix(el)) shadow_ui_1.default.markElementAndChildrenAsShadow(el);

							    if ((domUtils.isDomElement(el) || domUtils.isDocument(el)) && domUtils.isElementInDocument(el)) {
							      var iframes = domUtils.getIframes(el);

							      for (var _i8 = 0; _i8 < iframes.length; _i8++) {
							        var iframe = iframes[_i8];
							        this.onIframeAddedToDOM(iframe);
							        windowsStorage.add(native_methods_1.default.contentWindowGetter.call(iframe));
							      }

							      var scripts = domUtils.getScripts(el);

							      for (var _i10 = 0; _i10 < scripts.length; _i10++) {
							        var script = scripts[_i10];
							        this.emit(this.SCRIPT_ELEMENT_ADDED_EVENT, {
							          el: script
							        });
							      }

							      dom_mutation_tracker_1.default.onElementChanged(el);
							    } // NOTE: recalculate `formaction` attribute value if it placed in the dom


							    if ((domUtils.isInputElement(el) || domUtils.isButtonElement(el)) && el.form && native_methods_1.default.hasAttribute.call(el, 'formaction')) el.setAttribute('formaction', el.getAttribute('formaction'));
							    if (domUtils.isBodyElement(el)) this._shadowUI.onBodyElementMutation();

							    this._onAddFileInputInfo(el);

							    if (domUtils.isBaseElement(el) && this._isFirstBaseTagOnPage(el)) {
							      var storedHrefAttrName = dom_1.default.getStoredAttrName('href');
							      var storedHrefAttrValue = el.getAttribute(storedHrefAttrName);
							      if (storedHrefAttrValue !== null) // @ts-ignore
							        urlResolver.updateBase(storedHrefAttrValue, this.document);
							    }
							  };

							  _proto._onElementRemoved = function _onElementRemoved(el) {
							    if (domUtils.isBodyElement(el)) this._shadowUI.onBodyElementMutation();else if (domUtils.isBaseElement(el)) {
							      var firstBaseEl = native_methods_1.default.querySelector.call(this.document, 'base');
							      var storedHrefAttr = firstBaseEl && firstBaseEl.getAttribute(dom_1.default.getStoredAttrName('href')); // @ts-ignore

							      urlResolver.updateBase(storedHrefAttr || destination_location_1.get(), this.document);
							    }
							    dom_mutation_tracker_1.default.onElementChanged(el);
							  };

							  _proto.addFileInputInfo = function addFileInputInfo(el) {
							    var infoManager = this._uploadSandbox.infoManager;
							    hiddenInfo.addInputInfo(el, infoManager.getFiles(el), infoManager.getValue(el));
							  };

							  _proto.onIframeAddedToDOM = function onIframeAddedToDOM(iframe) {
							    if (!domUtils.isCrossDomainIframe(iframe, true)) this._nodeSandbox.mutation.onIframeAddedToDOM(iframe);
							  };

							  _proto.attach = function attach(window) {
							    _base_1$default.prototype.attach.call(this, window);

							    this._createOverriddenMethods();

							    overriding_1.overrideFunction(window.Element.prototype, 'setAttribute', this.overriddenMethods.setAttribute);
							    overriding_1.overrideFunction(window.Element.prototype, 'setAttributeNS', this.overriddenMethods.setAttributeNS);
							    overriding_1.overrideFunction(window.Element.prototype, 'getAttribute', this.overriddenMethods.getAttribute);
							    overriding_1.overrideFunction(window.Element.prototype, 'getAttributeNS', this.overriddenMethods.getAttributeNS);
							    overriding_1.overrideFunction(window.Element.prototype, 'removeAttribute', this.overriddenMethods.removeAttribute);
							    overriding_1.overrideFunction(window.Element.prototype, 'removeAttributeNS', this.overriddenMethods.removeAttributeNS);
							    overriding_1.overrideFunction(window.Element.prototype, 'cloneNode', this.overriddenMethods.cloneNode);
							    overriding_1.overrideFunction(window.Element.prototype, 'querySelector', this.overriddenMethods.querySelector);
							    overriding_1.overrideFunction(window.Element.prototype, 'querySelectorAll', this.overriddenMethods.querySelectorAll);
							    overriding_1.overrideFunction(window.Element.prototype, 'hasAttribute', this.overriddenMethods.hasAttribute);
							    overriding_1.overrideFunction(window.Element.prototype, 'hasAttributeNS', this.overriddenMethods.hasAttributeNS);
							    overriding_1.overrideFunction(window.Element.prototype, 'hasAttributes', this.overriddenMethods.hasAttributes);
							    if (native_methods_1.default.attachShadow) overriding_1.overrideFunction(window.Element.prototype, 'attachShadow', this.overriddenMethods.attachShadow);
							    overriding_1.overrideFunction(window.Node.prototype, 'cloneNode', this.overriddenMethods.cloneNode);
							    overriding_1.overrideFunction(window.Node.prototype, 'appendChild', this.overriddenMethods.appendChild);
							    overriding_1.overrideFunction(window.Node.prototype, 'removeChild', this.overriddenMethods.removeChild);
							    overriding_1.overrideFunction(window.Node.prototype, 'insertBefore', this.overriddenMethods.insertBefore);
							    overriding_1.overrideFunction(window.Node.prototype, 'replaceChild', this.overriddenMethods.replaceChild);
							    if (native_methods_1.default.append) overriding_1.overrideFunction(window.Element.prototype, 'append', this.overriddenMethods.append);
							    if (native_methods_1.default.remove) overriding_1.overrideFunction(window.Element.prototype, 'remove', this.overriddenMethods.remove);
							    overriding_1.overrideFunction(window.DocumentFragment.prototype, 'querySelector', this.overriddenMethods.querySelector);
							    overriding_1.overrideFunction(window.DocumentFragment.prototype, 'querySelectorAll', this.overriddenMethods.querySelectorAll);
							    overriding_1.overrideFunction(window.HTMLTableElement.prototype, 'insertRow', this.overriddenMethods.insertRow);
							    overriding_1.overrideFunction(window.HTMLTableSectionElement.prototype, 'insertRow', this.overriddenMethods.insertRow);
							    overriding_1.overrideFunction(window.HTMLTableRowElement.prototype, 'insertCell', this.overriddenMethods.insertCell);
							    overriding_1.overrideFunction(window.HTMLFormElement.prototype, 'submit', this.overriddenMethods.formSubmit);
							    overriding_1.overrideFunction(window.HTMLAnchorElement.prototype, 'toString', this.overriddenMethods.anchorToString);
							    overriding_1.overrideFunction(window.CharacterData.prototype, 'appendData', this.overriddenMethods.appendData);
							    if (window.Document.prototype.registerElement) overriding_1.overrideFunction(window.Document.prototype, 'registerElement', this.overriddenMethods.registerElement);
							    if (window.Element.prototype.insertAdjacentHTML) overriding_1.overrideFunction(window.Element.prototype, 'insertAdjacentHTML', this.overriddenMethods.insertAdjacentHTML);else if (window.HTMLElement.prototype.insertAdjacentHTML) overriding_1.overrideFunction(window.HTMLElement.prototype, 'insertAdjacentHTML', this.overriddenMethods.insertAdjacentHTML);

							    this._setValidBrowsingContextOnElementClick(window); // NOTE: Cookie can be set up for the page by using the request initiated by img.
							    // For example: img.src = '<url that responds with the Set-Cookie header>'
							    // If img has the 'load' event handler, we redirect the request through proxy.
							    // For details, see https://github.com/DevExpress/testcafe-hammerhead/issues/651


							    this._eventSandbox.listeners.on(this._eventSandbox.listeners.EVENT_LISTENER_ATTACHED_EVENT, function (e) {
							      if (e.eventType === 'load' && domUtils.isImgElement(e.el)) ElementSandbox._setProxiedSrc(e.el);
							    });

							    overriding_1.overrideDescriptor(window.HTMLElement.prototype, 'onload', {
							      getter: null,
							      setter: function setter(handler) {
							        if (domUtils.isImgElement(this) && event_1.isValidEventListener(handler)) ElementSandbox._setProxiedSrc(this);
							        native_methods_1.default.htmlElementOnloadSetter.call(this, handler);
							      }
							    });
							  };

							  _proto._ensureTargetContainsExistingBrowsingContext = function _ensureTargetContainsExistingBrowsingContext(el) {
							    if (settings_1.default.get().allowMultipleWindows) return;
							    if (!native_methods_1.default.hasAttribute.call(el, 'target')) return;
							    var attr = native_methods_1.default.getAttribute.call(el, 'target');
							    var storedAttr = native_methods_1.default.getAttribute.call(el, dom_1.default.getStoredAttrName('target'));
							    el.setAttribute('target', storedAttr || attr);
							  };

							  _proto._setValidBrowsingContextOnElementClick = function _setValidBrowsingContextOnElementClick(window) {
							    var _this2 = this;

							    this._eventSandbox.listeners.initElementListening(window, ['click']);

							    this._eventSandbox.listeners.addInternalEventBeforeListener(window, ['click'], function (e) {
							      var el = e.target;
							      if (domUtils.isInputElement(el) && el.form) el = el.form;
							      var tagName = domUtils.getTagName(el);
							      if (!dom_1.default.isTagWithTargetAttr(tagName)) return;

							      _this2._ensureTargetContainsExistingBrowsingContext(el);
							    });
							  };

							  _proto._setProxiedSrcUrlOnError = function _setProxiedSrcUrlOnError(img) {
							    img.addEventListener('error', function (e) {
							      var storedAttr = native_methods_1.default.getAttribute.call(img, dom_1.default.getStoredAttrName('src'));
							      var imgSrc = native_methods_1.default.imageSrcGetter.call(img);

							      if (storedAttr && !urlUtils.parseProxyUrl(imgSrc) && urlUtils.isSupportedProtocol(imgSrc) && !urlUtils.isSpecialPage(imgSrc)) {
							        native_methods_1.default.setAttribute.call(img, 'src', urlUtils.getProxyUrl(storedAttr));
							        event_1.stopPropagation(e);
							      }
							    }, false);
							  };

							  _proto.getCorrectedTarget = function getCorrectedTarget(target) {
							    if (target === void 0) {
							      target = '';
							    }

							    if (settings_1.default.get().allowMultipleWindows) return target;
							    if (target && !is_keyword_target_1.default(target) && !windowsStorage.findByName(target) || /_blank/i.test(target)) return '_top';
							    return target;
							  };

							  _proto._handleImageLoadEventRaising = function _handleImageLoadEventRaising(el) {
							    this._eventSandbox.listeners.initElementListening(el, ['load']);

							    this._eventSandbox.listeners.addInternalEventBeforeListener(el, ['load'], function (_e, _dispatched, preventEvent, _cancelHandlers, stopEventPropagation) {
							      if (el[internal_properties_1.default.cachedImage]) el[internal_properties_1.default.cachedImage] = false;
							      if (!el[internal_properties_1.default.skipNextLoadEventForImage]) return;
							      el[internal_properties_1.default.skipNextLoadEventForImage] = false;
							      preventEvent();
							      stopEventPropagation();
							    });

							    if (!el[internal_properties_1.default.forceProxySrcForImage] && !settings_1.default.get().forceProxySrcForImage) this._setProxiedSrcUrlOnError(el);
							  };

							  _proto._processBaseTag = function _processBaseTag(el) {
							    if (!this._isFirstBaseTagOnPage(el)) return;
							    var storedUrlAttr = native_methods_1.default.getAttribute.call(el, dom_1.default.getStoredAttrName('href'));
							    if (storedUrlAttr !== null) // @ts-ignore
							      urlResolver.updateBase(storedUrlAttr, el.ownerDocument || this.document);
							  };

							  _proto._reProcessElementWithTargetAttr = function _reProcessElementWithTargetAttr(el, tagName) {
							    var targetAttr = dom_processor_1.default.getTargetAttr(el);
							    if (dom_1.default.isIframeFlagTag(tagName) && native_methods_1.default.getAttribute.call(el, targetAttr) === '_parent') dom_processor_1.default.processElement(el, urlUtils.convertToProxyUrl);
							  };

							  _proto.processElement = function processElement(el) {
							    var tagName = domUtils.getTagName(el);

							    switch (tagName) {
							      case 'a':
							        this._childWindowSandbox.handleClickOnLinkOrArea(el);

							        break;

							      case 'img':
							        this._handleImageLoadEventRaising(el);

							        break;

							      case 'iframe':
							      case 'frame':
							        this._iframeSandbox.processIframe(el);

							        break;

							      case 'base':
							        this._processBaseTag(el);

							        break;

							      case 'area':
							        this._childWindowSandbox.handleClickOnLinkOrArea(el);

							        break;
							    } // NOTE: we need to reprocess a tag client-side if it wasn't processed on the server.
							    // See the usage of Parse5DomAdapter.needToProcessUrl


							    this._reProcessElementWithTargetAttr(el, tagName);
							  };

							  return ElementSandbox;
							}(base_1.default);

							exports.default = ElementSandbox;
							module.exports = exports.default;
						},
						"index.js": function (exports, module, require) {
							

							function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

							function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

							function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							var __importStar = void 0 && (void 0).__importStar || function (mod) {
							  if (mod && mod.__esModule) return mod;
							  var result = {};
							  if (mod != null) for (var k in mod) {
							    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
							  }
							  result["default"] = mod;
							  return result;
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var internal_properties_1 = __importDefault(require("../../../processing/dom/internal-properties"));

							var base_1 = __importDefault(require("../base"));

							var window_1 = __importDefault(require("./window"));

							var document_1 = __importDefault(require("./document"));

							var element_1 = __importDefault(require("./element"));

							var dom_1 = __importDefault(require("../../../processing/dom"));

							var dom_processor_1 = __importDefault(require("../../dom-processor"));

							var domUtils = __importStar(require("../../utils/dom"));

							var query_selector_1 = require("../../utils/query-selector");

							var native_methods_1 = __importDefault(require("../native-methods"));

							var attributes_1 = require("../../../processing/dom/attributes");

							var internal_attributes_1 = __importDefault(require("../../../processing/dom/internal-attributes"));

							var browserUtils = __importStar(require("../../utils/browser"));

							var title_storage_1 = __importDefault(require("./document/title-storage"));

							var title_storage_initializer_1 = __importDefault(require("./document/title-storage-initializer"));

							var dom_2 = require("../../utils/dom");

							var ATTRIBUTE_SELECTOR_REG_EX = /\[([\w-]+)(\^?=.+?)]/g;
							var ATTRIBUTE_OPERATOR_WITH_HASH_VALUE = /^\W+\s*#/;
							var PSEUDO_CLASS_FOCUS_REG_EX = /\s*:focus\b/gi;
							var PSEUDO_CLASS_HOVER_REG_EX = /:hover\b/gi;

							var NodeSandbox = /*#__PURE__*/function (_base_1$default) {
							  _inheritsLoose(NodeSandbox, _base_1$default);

							  function NodeSandbox(mutation, iframeSandbox, _eventSandbox, _uploadSandbox, shadowUI, _cookieSandbox, _childWindowSandbox) {
							    var _this;

							    _this = _base_1$default.call(this) || this;
							    _this.mutation = mutation;
							    _this.iframeSandbox = iframeSandbox;
							    _this._eventSandbox = _eventSandbox;
							    _this._uploadSandbox = _uploadSandbox;
							    _this.shadowUI = shadowUI;
							    _this._cookieSandbox = _cookieSandbox;
							    _this._childWindowSandbox = _childWindowSandbox;
							    _this.raiseBodyCreatedEvent = _this._onBodyCreated; // NOTE: We need to define the property with the 'writable' descriptor for testing purposes

							    native_methods_1.default.objectDefineProperty(document, internal_properties_1.default.documentCharset, {
							      value: domUtils.parseDocumentCharset(),
							      writable: true
							    });
							    _this._documentTitleStorageInitializer = NodeSandbox._createDocumentTitleStorageInitializer();
							    _this.doc = new document_1.default(_assertThisInitialized(_this), _this.shadowUI, _this._cookieSandbox, _this._documentTitleStorageInitializer);
							    _this.win = new window_1.default(_assertThisInitialized(_this), _this._eventSandbox, _this._uploadSandbox, _this.mutation, _this._childWindowSandbox, _this._documentTitleStorageInitializer);
							    _this.element = new element_1.default(_assertThisInitialized(_this), _this._uploadSandbox, _this.iframeSandbox, _this.shadowUI, _this._eventSandbox, _this._childWindowSandbox);
							    return _this;
							  }

							  NodeSandbox._createDocumentTitleStorageInitializer = function _createDocumentTitleStorageInitializer() {
							    if (dom_2.isIframeWindow(window)) return null;
							    var documentTitleStorage = new title_storage_1.default(document);
							    return new title_storage_initializer_1.default(documentTitleStorage);
							  };

							  var _proto = NodeSandbox.prototype;

							  _proto._onBodyCreated = function _onBodyCreated() {
							    this._eventSandbox.listeners.initDocumentBodyListening(this.document);

							    this.mutation.onBodyCreated(this.document.body);
							  };

							  _proto._processElement = function _processElement(el) {
							    var processedContext = el[internal_properties_1.default.processedContext];
							    if (domUtils.isShadowUIElement(el) || processedContext === this.window) return;
							    var urlAttrName = null;

							    if (processedContext) {
							      urlAttrName = dom_processor_1.default.getUrlAttr(el);
							      urlAttrName = urlAttrName && el.hasAttribute(urlAttrName) ? urlAttrName : null;
							    }

							    var canAddNewProp = native_methods_1.default.objectIsExtensible(el);
							    var canUpdateExistingProp = processedContext && !native_methods_1.default.objectIsFrozen(el);

							    if (canAddNewProp || canUpdateExistingProp) {
							      native_methods_1.default.objectDefineProperty(el, internal_properties_1.default.processedContext, {
							        value: this.window,
							        writable: true
							      });
							    } // NOTE: We need to reprocess url attribute of element, if it's moved to different window (GH-564)


							    if (urlAttrName) el.setAttribute(urlAttrName, el.getAttribute(urlAttrName));
							    this.element.processElement(el);
							  };

							  _proto.onOriginFirstTitleElementInHeadLoaded = function onOriginFirstTitleElementInHeadLoaded() {
							    if (this._documentTitleStorageInitializer) this._documentTitleStorageInitializer.onPageTitleLoaded();
							  };

							  _proto.processNodes = function processNodes(el, doc) {
							    if (!el) {
							      doc = doc || this.document;
							      if (doc.documentElement) this.processNodes(doc.documentElement);
							    } else if (el.querySelectorAll) {
							      if (el.nodeType !== Node.DOCUMENT_FRAGMENT_NODE) this._processElement(el);
							      var children = query_selector_1.getNativeQuerySelectorAll(el).call(el, '*');
							      var length = native_methods_1.default.nodeListLengthGetter.call(children);

							      for (var i = 0; i < length; i++) {
							        this._processElement(children[i]);
							      }
							    }
							  } // NOTE: DOM sandbox hides evidence of the content proxying from a page native script. Proxy replaces URLs for
							  // resources. Our goal is to make the native script think that all resources are fetched from the destination
							  // resource, not from proxy, and also provide proxying for dynamically created elements.
							  ;

							  _proto.attach = function attach(window) {
							    var _this2 = this;

							    var document = window.document;
							    var domContentLoadedEventRaised = false;

							    _base_1$default.prototype.attach.call(this, window, document);

							    if (this._documentTitleStorageInitializer) this._documentTitleStorageInitializer.onAttach();
							    this.iframeSandbox.on(this.iframeSandbox.IFRAME_DOCUMENT_CREATED_EVENT, function (_ref) {
							      var iframe = _ref.iframe;
							      var contentWindow = native_methods_1.default.contentWindowGetter.call(iframe);
							      var contentDocument = native_methods_1.default.contentDocumentGetter.call(iframe); // NOTE: Before overriding the iframe, we must restore native document methods.
							      // Therefore, we save them before they are overridden.
							      // @ts-ignore

							      var iframeNativeMethods = new _this2.nativeMethods.constructor(contentDocument, contentWindow);
							      contentWindow[internal_properties_1.default.iframeNativeMethods] = iframeNativeMethods; // NOTE: Override only the document (in fact, we only need the 'write' and 'writeln' methods).

							      _this2.doc.attach(contentWindow, contentDocument, true);
							    }); // NOTE: In Google Chrome, iframes whose src contains html code raise the 'load' event twice.
							    // So, we need to define code instrumentation functions as 'configurable' so that they can be redefined.

							    native_methods_1.default.objectDefineProperty(window, internal_properties_1.default.processDomMethodName, {
							      value: function value(el, doc) {
							        // NOTE: TestCafe creates a shadow-ui root before the DOMContentLoaded event (once document.body is
							        // available). Sometimes for a very heavy DOM or a very slow loading the body doesn't contain all
							        // elements at that moment and as a result after a full page loading our root element becomes not
							        // the last child of the body. So we need to make the root last body child manually on every script
							        // loading until the DOMContentLoaded event is raised.
							        if (!domContentLoadedEventRaised) _this2.shadowUI.onBodyElementMutation();

							        _this2.processNodes(el, doc);
							      },
							      configurable: true
							    }); // NOTE: In some browsers (for example Firefox), the 'window.document' object is different when iframe is
							    // created and when the document’s ready event is raised. Therefore, we need to update the 'document' object
							    // to override its methods (Q527555).

							    document.addEventListener('DOMContentLoaded', function () {
							      domContentLoadedEventRaised = true;

							      _this2.processNodes(null, document);
							    }, false);
							    this.doc.attach(window, document);
							    this.win.attach(window);
							    this.element.attach(window);
							  };

							  NodeSandbox._processAttributeSelector = function _processAttributeSelector(selector) {
							    if (!ATTRIBUTE_SELECTOR_REG_EX.test(selector)) return selector;
							    return selector + ',' + selector.replace(ATTRIBUTE_SELECTOR_REG_EX, function (str, name, operatorWithValue) {
							      if (attributes_1.URL_ATTRS.indexOf(name) !== -1 && !ATTRIBUTE_OPERATOR_WITH_HASH_VALUE.test(operatorWithValue)) {
							        name = dom_1.default.getStoredAttrName(name);
							        return '[' + name + operatorWithValue + ']';
							      }

							      return str;
							    });
							  };

							  NodeSandbox._processPseudoClassSelectors = function _processPseudoClassSelectors(selector) {
							    // NOTE: When a selector that contains the ':focus' pseudo-class is used in the querySelector and
							    // querySelectorAll functions, these functions return an empty result if the browser is not focused.
							    // This replaces ':focus' with a custom CSS class to return the current active element in that case.
							    // IE returns a valid element, so there is no need to replace the selector for it.
							    if (!browserUtils.isIE) selector = selector.replace(PSEUDO_CLASS_FOCUS_REG_EX, '[' + internal_attributes_1.default.focusPseudoClass + ']');
							    selector = selector.replace(PSEUDO_CLASS_HOVER_REG_EX, '[' + internal_attributes_1.default.hoverPseudoClass + ']');
							    return selector;
							  };

							  NodeSandbox.processSelector = function processSelector(selector) {
							    if (selector) {
							      selector = NodeSandbox._processPseudoClassSelectors(selector);
							      selector = NodeSandbox._processAttributeSelector(selector);
							    }

							    return selector;
							  };

							  return NodeSandbox;
							}(base_1.default);

							exports.default = NodeSandbox;
							module.exports = exports.default;
						},
						"live-node-list": {
							"dom-mutation-tracker.js": function (exports, module, require) {
								

								var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
								  return mod && mod.__esModule ? mod : {
								    "default": mod
								  };
								};

								Object.defineProperty(exports, "__esModule", {
								  value: true
								});

								var native_methods_1 = __importDefault(require("../../native-methods"));

								var dom_1 = require("../../../utils/dom");

								var query_selector_1 = require("../../../utils/query-selector");

								var integer_id_generator_1 = __importDefault(require("../../../utils/integer-id-generator"));

								var DOMMutationTracker = /*#__PURE__*/function () {
								  function DOMMutationTracker() {
								    var _this = this;

								    this._mutations = native_methods_1.default.objectCreate(null);
								    this._isDomContentLoaded = false;
								    native_methods_1.default.addEventListener.call(document, 'DOMContentLoaded', function () {
								      for (var _i2 = 0, _native_methods_1$def2 = native_methods_1.default.objectKeys(_this._mutations); _i2 < _native_methods_1$def2.length; _i2++) {
								        var tagName = _native_methods_1$def2[_i2];

								        _this._updateVersion(tagName);
								      }

								      _this._isDomContentLoaded = true;
								    });
								  }

								  var _proto = DOMMutationTracker.prototype;

								  _proto._updateVersion = function _updateVersion(tagName) {
								    if (tagName in this._mutations) this._mutations[tagName].increment();
								  };

								  _proto._processElement = function _processElement(el) {
								    if (!el.tagName || dom_1.isShadowUIElement(el)) return;
								    var tagName = dom_1.getTagName(el);

								    this._updateVersion('*');

								    this._updateVersion(tagName);
								  };

								  _proto._processChildren = function _processChildren(el) {
								    if (!el.querySelectorAll) return;
								    var children = query_selector_1.getNativeQuerySelectorAll(el).call(el, '*');
								    var length = native_methods_1.default.nodeListLengthGetter.call(children);

								    for (var i = 0; i < length; i++) {
								      this._processElement(children[i]);
								    }
								  };

								  _proto.onElementChanged = function onElementChanged(el) {
								    this._processElement(el);

								    this._processChildren(el);
								  };

								  _proto.onChildrenChanged = function onChildrenChanged(el) {
								    this._processChildren(el);
								  };

								  _proto.isDomContentLoaded = function isDomContentLoaded() {
								    return this._isDomContentLoaded;
								  };

								  _proto.isOutdated = function isOutdated(tagName, version) {
								    var isTagTracked = (tagName in this._mutations);
								    if (!isTagTracked) this._mutations[tagName] = new integer_id_generator_1.default();
								    var lastVersion = this._mutations[tagName].value; // eslint-disable-line no-restricted-properties

								    return version < lastVersion;
								  };

								  _proto.getVersion = function getVersion(tagName) {
								    if (tagName in this._mutations) return this._mutations[tagName].value; // eslint-disable-line no-restricted-properties

								    return -Infinity;
								  };

								  return DOMMutationTracker;
								}();

								exports.default = new DOMMutationTracker();
								module.exports = exports.default;
							},
							"html-collection-wrapper.js": function (exports, module, require) {
								

								function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

								function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

								function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

								function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

								function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

								var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
								  return mod && mod.__esModule ? mod : {
								    "default": mod
								  };
								};

								Object.defineProperty(exports, "__esModule", {
								  value: true
								});

								var dom_mutation_tracker_1 = __importDefault(require("./dom-mutation-tracker"));

								var native_methods_1 = __importDefault(require("../../native-methods"));

								var dom_1 = require("../../../utils/dom"); // NOTE: Tags from https://www.w3schools.com/tags/att_name.asp


								var ELEMENTS_WITH_NAME_ATTRIBUTE = ['button', 'fieldset', 'form', 'iframe', 'input', 'map', 'meta', 'object', 'output', 'param', 'select', 'textarea'];
								var COLLECTION_PROTO_GETTERS_RESERVE = 10;
								var collectionProtoGettersCount = 0;

								var HTMLCollectionInheritor = function HTMLCollectionInheritor() {};

								HTMLCollectionInheritor.prototype = HTMLCollection.prototype;

								var HTMLCollectionWrapper = /*#__PURE__*/function (_HTMLCollectionInheri) {
								  _inheritsLoose(HTMLCollectionWrapper, _HTMLCollectionInheri);

								  function HTMLCollectionWrapper(collection, tagName) {
								    var _this;

								    _this = _HTMLCollectionInheri.call(this) || this;
								    tagName = tagName.toLowerCase();
								    native_methods_1.default.objectDefineProperties(_assertThisInitialized(_this), {
								      _collection: {
								        value: collection
								      },
								      _filteredCollection: {
								        value: []
								      },
								      _tagName: {
								        value: tagName
								      },
								      _version: {
								        value: -Infinity,
								        writable: true
								      },
								      _namedProps: {
								        value: ELEMENTS_WITH_NAME_ATTRIBUTE.indexOf(tagName) !== -1 ? [] : null
								      },
								      _lastNativeLength: {
								        value: 0,
								        writable: true
								      }
								    });

								    _this._refreshCollection();

								    return _this;
								  }

								  var _proto = HTMLCollectionWrapper.prototype;

								  _proto.item = function item(index) {
								    this._refreshCollection();

								    return this._filteredCollection[index];
								  };

								  _proto._refreshCollection = function _refreshCollection() {
								    var storedNativeCollectionLength = this._lastNativeLength;
								    var nativeCollectionLength = native_methods_1.default.htmlCollectionLengthGetter.call(this._collection);
								    this._lastNativeLength = nativeCollectionLength;
								    if (!dom_mutation_tracker_1.default.isOutdated(this._tagName, this._version) && (dom_mutation_tracker_1.default.isDomContentLoaded() || storedNativeCollectionLength === nativeCollectionLength)) return;
								    var storedFilteredCollectionLength = this._filteredCollection.length;
								    var currentNamedProps = filterCollection(this, nativeCollectionLength);
								    this._version = dom_mutation_tracker_1.default.getVersion(this._tagName);
								    updateCollectionIndexGetters(this, storedFilteredCollectionLength, this._filteredCollection.length);
								    updateNamedProps(this, this._namedProps, currentNamedProps);
								  };

								  _createClass(HTMLCollectionWrapper, [{
								    key: "length",
								    get: function get() {
								      this._refreshCollection();

								      return this._filteredCollection.length;
								    }
								  }]);

								  return HTMLCollectionWrapper;
								}(HTMLCollectionInheritor);

								exports.default = HTMLCollectionWrapper;
								var additionalProtoMethods = {
								  constructor: {
								    value: HTMLCollectionWrapper.constructor,
								    configurable: true,
								    enumerable: false,
								    writable: true
								  },
								  _refreshCollection: {
								    value: HTMLCollectionWrapper.prototype._refreshCollection,
								    enumerable: false
								  }
								};

								if (HTMLCollection.prototype.namedItem) {
								  additionalProtoMethods.namedItem = {
								    value: function value() {
								      this._refreshCollection();

								      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
								        args[_key] = arguments[_key];
								      }

								      var namedItem = this._collection.namedItem.apply(this._collection, args);

								      return namedItem && dom_1.isShadowUIElement(namedItem) ? null : namedItem;
								    },
								    enumerable: true,
								    configurable: true,
								    writable: true
								  };
								}

								native_methods_1.default.objectDefineProperties(HTMLCollectionWrapper.prototype, additionalProtoMethods);
								addShadowGetters(COLLECTION_PROTO_GETTERS_RESERVE);

								function addShadowGetters(count) {
								  var _loop = function _loop(i) {
								    var idx = collectionProtoGettersCount++;
								    native_methods_1.default.objectDefineProperty(HTMLCollectionWrapper.prototype, idx, {
								      get: function get() {
								        this.item(idx);
								      }
								    });
								  };

								  for (var i = 0; i < count; i++) {
								    _loop(i);
								  }
								}

								function updateCollectionIndexGetters(wrapper, oldLength, currentLength) {
								  if (oldLength === currentLength) return;

								  var _loop2 = function _loop2() {
								    var idx = oldLength++;
								    native_methods_1.default.objectDefineProperty(wrapper, idx, {
								      enumerable: true,
								      configurable: true,
								      get: function get() {
								        return wrapper.item(idx);
								      }
								    });
								  };

								  while (oldLength < currentLength) {
								    _loop2();
								  }

								  while (oldLength > currentLength) {
								    delete wrapper[--oldLength];
								  }

								  var maxCollectionLength = collectionProtoGettersCount - COLLECTION_PROTO_GETTERS_RESERVE;
								  if (currentLength > maxCollectionLength) addShadowGetters(currentLength - maxCollectionLength);
								}

								function updateNamedProps(wrapper, oldNamedProps, currentNamedProps) {
								  if (!currentNamedProps) return;

								  for (var _i2 = 0; _i2 < oldNamedProps.length; _i2++) {
								    var oldProp = oldNamedProps[_i2];
								    if (currentNamedProps.indexOf(oldProp) === -1) delete wrapper[oldProp];
								  }

								  var _loop3 = function _loop3(_i4) {
								    var prop = currentNamedProps[_i4];
								    if (!wrapper._collection[prop]) return "continue";
								    native_methods_1.default.objectDefineProperty(wrapper, prop, {
								      configurable: true,
								      get: function get() {
								        this._refreshCollection();

								        return wrapper._collection[prop];
								      }
								    });
								  };

								  for (var _i4 = 0; _i4 < currentNamedProps.length; _i4++) {
								    var _ret = _loop3(_i4);

								    if (_ret === "continue") continue;
								  }
								}

								function filterCollection(wrapper, nativeCollectionLength) {
								  var nativeCollection = wrapper._collection;
								  var currentNamedProps = wrapper._namedProps ? [] : null;
								  var filteredCollection = wrapper._filteredCollection;
								  filteredCollection.length = 0;

								  for (var i = 0; i < nativeCollectionLength; i++) {
								    var el = nativeCollection[i];
								    if (dom_1.isShadowUIElement(el)) continue;
								    filteredCollection.push(el);
								    if (!currentNamedProps) continue;
								    var nameAttr = native_methods_1.default.getAttribute.call(el, 'name');
								    if (nameAttr !== null) currentNamedProps.push(nameAttr);
								  }

								  return currentNamedProps;
								}

								module.exports = exports.default;
							}
						},
						"mutation.js": function (exports, module, require) {
							

							function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

							function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var event_emitter_1 = __importDefault(require("../../utils/event-emitter"));

							var NodeMutation = /*#__PURE__*/function (_event_emitter_1$defa) {
							  _inheritsLoose(NodeMutation, _event_emitter_1$defa);

							  function NodeMutation() {
							    var _this;

							    _this = _event_emitter_1$defa.apply(this, arguments) || this;
							    _this.BEFORE_DOCUMENT_CLEANED_EVENT = 'hammerhead|event|before-document-cleaned';
							    _this.DOCUMENT_CLEANED_EVENT = 'hammerhead|event|document-cleaned';
							    _this.DOCUMENT_CLOSED_EVENT = 'hammerhead|event|document-closed';
							    _this.BODY_CONTENT_CHANGED_EVENT = 'hammerhead|event|body-content-changed';
							    _this.BODY_CREATED_EVENT = 'hammerhead|event|body-created';
							    _this.IFRAME_ADDED_TO_DOM_EVENT = 'hammerhead|event|iframe-added-to-dom';
							    return _this;
							  }

							  var _proto = NodeMutation.prototype;

							  _proto.onIframeAddedToDOM = function onIframeAddedToDOM(iframe) {
							    this.emit(this.IFRAME_ADDED_TO_DOM_EVENT, iframe);
							  };

							  _proto.onBeforeDocumentCleaned = function onBeforeDocumentCleaned(document) {
							    this.emit(this.BEFORE_DOCUMENT_CLEANED_EVENT, document);
							  };

							  _proto.onDocumentCleaned = function onDocumentCleaned(window, document) {
							    this.emit(this.DOCUMENT_CLEANED_EVENT, {
							      window: window,
							      document: document
							    });
							  };

							  _proto.onDocumentClosed = function onDocumentClosed(document) {
							    this.emit(this.DOCUMENT_CLOSED_EVENT, document);
							  };

							  _proto.onBodyContentChanged = function onBodyContentChanged(element) {
							    this.emit(this.BODY_CONTENT_CHANGED_EVENT, element);
							  };

							  _proto.onBodyCreated = function onBodyCreated(body) {
							    this.emit(this.BODY_CREATED_EVENT, body);
							  };

							  return NodeMutation;
							}(event_emitter_1.default);

							exports.default = NodeMutation;
							module.exports = exports.default;
						},
						"window.js": function (exports, module, require) {
							

							function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

							function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							var __importStar = void 0 && (void 0).__importStar || function (mod) {
							  if (mod && mod.__esModule) return mod;
							  var result = {};
							  if (mod != null) for (var k in mod) {
							    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
							  }
							  result["default"] = mod;
							  return result;
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});
							/*global navigator*/

							var base_1 = __importDefault(require("../base"));

							var shadow_ui_1 = __importDefault(require("../shadow-ui"));

							var native_methods_1 = __importDefault(require("../native-methods"));

							var script_1 = require("../../../processing/script");

							var style_1 = __importDefault(require("../../../processing/style"));

							var destLocation = __importStar(require("../../utils/destination-location"));

							var html_1 = require("../../utils/html");

							var url_1 = require("../../utils/url");

							var browser_1 = require("../../utils/browser");

							var dom_1 = require("../../utils/dom");

							var types_1 = require("../../utils/types");

							var internal_attributes_1 = __importDefault(require("../../../processing/dom/internal-attributes"));

							var internal_properties_1 = __importDefault(require("../../../processing/dom/internal-properties"));

							var constructor_is_called_without_new_keyword_1 = __importDefault(require("../../utils/constructor-is-called-without-new-keyword"));

							var instruction_1 = __importDefault(require("../../../processing/script/instruction"));

							var pinkie_1 = __importDefault(require("pinkie"));

							var get_mime_type_1 = __importDefault(require("../../utils/get-mime-type"));

							var overriding_1 = require("../../utils/overriding");

							var feature_detection_1 = require("../../utils/feature-detection");

							var url_2 = require("../../../utils/url");

							var upload_1 = __importDefault(require("../upload"));

							var anchor_1 = require("../code-instrumentation/properties/anchor");

							var code_instrumentation_1 = __importDefault(require("../code-instrumentation"));

							var namespaces_1 = require("../../../processing/dom/namespaces");

							var url_resolver_1 = __importDefault(require("../../utils/url-resolver"));

							var header_1 = require("../../../processing/script/header");

							var dom_mutation_tracker_1 = __importDefault(require("./live-node-list/dom-mutation-tracker"));

							var attributes_1 = require("./attributes");

							var stack_processing_1 = require("../../../utils/stack-processing");

							var settings_1 = __importDefault(require("../../settings"));

							var default_target_1 = __importDefault(require("../child-window/default-target"));

							var query_selector_1 = require("../../utils/query-selector");

							var set_settings_command_1 = require("../../worker/set-settings-command");

							var dom_2 = require("../../utils/dom");

							var INSTRUCTION_VALUES = function () {
							  var values = [];
							  var keys = native_methods_1.default.objectKeys(instruction_1.default);

							  for (var _i2 = 0; _i2 < keys.length; _i2++) {
							    var key = keys[_i2];
							    values.push(instruction_1.default[key]);
							  }

							  return values;
							}();

							var HTTP_PROTOCOL_RE = /^http/i;
							var ALLOWED_SERVICE_WORKER_PROTOCOLS = ['https:', 'wss:', 'file:'];
							var ALLOWED_SERVICE_WORKER_HOST_NAMES = ['localhost', '127.0.0.1'];
							var JAVASCRIPT_MIME_TYPES = ['text/javascript', 'application/javascript', 'application/x-javascript']; // NOTE: SVGAnimatedString prototype does not have a way to access the appropriate svg element.
							// This is why we use this property to store svg element for which animVal and baseVal properties were set.
							// It allows us to change the href-hammerhead-stored-value when it needs.

							var CONTEXT_SVG_IMAGE_ELEMENT = 'hammerhead|context-svg-image-element';
							var SANDBOX_DOM_TOKEN_LIST = 'hammerhead|sandbox-dom-token-list';
							var SANDBOX_DOM_TOKEN_LIST_OWNER = 'hammerhead|sandbox-dom-token-list-owner';
							var SANDBOX_DOM_TOKEN_LIST_UPDATE_FN = 'hammerhead|sandbox-dom-token-list-update';
							var IS_PROXY_OBJECT_INTERNAL_PROP_NAME = 'hammerhead|is-proxy-object|internal-prop-name';
							var IS_PROXY_OBJECT_INTERNAL_PROP_VALUE = 'hammerhead|is-proxy-object|internal-prop-value';
							var PROXY_HANDLER_FLAG = 'hammerhead|proxy-handler-flag';
							var NO_STACK_TRACE_AVAILABLE_MESSAGE = 'No stack trace available';
							var DEFAULT_UNHANDLED_REJECTION_REASON_NAME = 'Error';
							var TRACKED_EVENTS = ['error', 'unhandledrejection', 'hashchange'];

							var WindowSandbox = /*#__PURE__*/function (_base_1$default) {
							  _inheritsLoose(WindowSandbox, _base_1$default);

							  function WindowSandbox(nodeSandbox, eventSandbox, uploadSandbox, nodeMutation, _childWindowSandbox, _documentTitleStorageInitializer) {
							    var _this;

							    _this = _base_1$default.call(this) || this;
							    _this._childWindowSandbox = _childWindowSandbox;
							    _this._documentTitleStorageInitializer = _documentTitleStorageInitializer;
							    _this.UNCAUGHT_JS_ERROR_EVENT = 'hammerhead|event|uncaught-js-error';
							    _this.UNHANDLED_REJECTION_EVENT = 'hammerhead|event|unhandled-rejection';
							    _this.HASH_CHANGE_EVENT = 'hammerhead|event|hashchange-event';
							    _this.nodeSandbox = nodeSandbox;
							    _this.messageSandbox = eventSandbox.message;
							    _this.listenersSandbox = eventSandbox.listeners;
							    _this.elementEditingWatcher = eventSandbox.elementEditingWatcher;
							    _this.eventSimulator = eventSandbox.eventSimulator;
							    _this.uploadSandbox = uploadSandbox;
							    _this.shadowUI = nodeSandbox.shadowUI;
							    _this.nodeMutation = nodeMutation;
							    _this.SANDBOX_DOM_TOKEN_LIST_UPDATE_FN = SANDBOX_DOM_TOKEN_LIST_UPDATE_FN;
							    return _this;
							  }

							  WindowSandbox._prepareStack = function _prepareStack(msg, stack) {
							    // NOTE: Firefox does not include an error message in a stack trace (unlike other browsers)
							    // It is possible to get a stack trace for unhandled Promise rejections only if Promise is rejected with the 'Error' instance value.
							    // This is why we should convert the stack to a common format.
							    if (!stack || stack.indexOf(msg) === -1) {
							      stack = stack || "    " + NO_STACK_TRACE_AVAILABLE_MESSAGE;
							      return msg + "\n" + stack;
							    }

							    return stack;
							  };

							  WindowSandbox._isProcessableBlobParts = function _isProcessableBlobParts(parts) {
							    var hasStringItem = false;

							    for (var _i4 = 0; _i4 < parts.length; _i4++) {
							      var item = parts[_i4];

							      if (!hasStringItem && typeof item === 'string') {
							        hasStringItem = true;
							        continue;
							      }

							      if (typeof item !== 'string' && typeof item !== 'number' && typeof item !== 'boolean') return false;
							    }

							    return hasStringItem;
							  };

							  WindowSandbox._isProcessableBlob = function _isProcessableBlob(array, opts) {
							    var type = opts && opts.type && opts.type.toString().toLowerCase() || get_mime_type_1.default(array); // NOTE: If we cannot identify the content type of data, we're trying to process it as a script
							    // (in the case of the "Array<string | number | boolean>" blob parts array: GH-2115).
							    // Unfortunately, we do not have the ability to exactly identify a script. That's why we make such
							    // an assumption. We cannot solve this problem at the Worker level either, because the operation of
							    // creating a new Blob instance is asynchronous. (GH-231)

							    return (!type || JAVASCRIPT_MIME_TYPES.indexOf(type) !== -1) && WindowSandbox._isProcessableBlobParts(array);
							  };

							  var _proto = WindowSandbox.prototype;

							  _proto._getWindowOpenTarget = function _getWindowOpenTarget(originTarget) {
							    if (originTarget) return this.nodeSandbox.element.getCorrectedTarget(String(originTarget));
							    return settings_1.default.get().allowMultipleWindows ? default_target_1.default.windowOpen : '_self';
							  };

							  _proto._raiseUncaughtJsErrorEvent = function _raiseUncaughtJsErrorEvent(type, event, window) {
							    if (dom_1.isCrossDomainWindows(window, window.top)) return;
							    var sendToTopWindow = dom_2.isIframeWindow(window);
							    var pageUrl = destLocation.get();
							    var msg = null;
							    var stack = null;

							    if (type === this.UNHANDLED_REJECTION_EVENT) {
							      msg = WindowSandbox._formatUnhandledRejectionReason(event.reason);
							      stack = event.reason && event.reason.stack;
							    } else if (type === this.UNCAUGHT_JS_ERROR_EVENT) {
							      msg = event.error ? event.error.message : event.message;
							      stack = event.error && event.error.stack;
							    }

							    stack = WindowSandbox._prepareStack(msg, stack);
							    stack = stack_processing_1.replaceProxiedUrlsInStack(stack);

							    if (sendToTopWindow) {
							      this.emit(type, {
							        msg: msg,
							        pageUrl: pageUrl,
							        stack: stack,
							        inIframe: true
							      });
							      this.messageSandbox.sendServiceMsg({
							        msg: msg,
							        pageUrl: pageUrl,
							        stack: stack,
							        cmd: type
							      }, window.top);
							    } else this.emit(type, {
							      msg: msg,
							      pageUrl: pageUrl,
							      stack: stack
							    });
							  };

							  _proto._reattachHandler = function _reattachHandler(window, eventName) {
							    var nativeAddEventListener = native_methods_1.default.windowAddEventListener || native_methods_1.default.addEventListener;
							    var nativeRemoveEventListener = native_methods_1.default.windowRemoveEventListener || native_methods_1.default.removeEventListener;
							    nativeRemoveEventListener.call(window, eventName, this);
							    nativeAddEventListener.call(window, eventName, this);
							  };

							  WindowSandbox._formatUnhandledRejectionReason = function _formatUnhandledRejectionReason(reason) {
							    if (!types_1.isPrimitiveType(reason)) {
							      if (reason instanceof native_methods_1.default.Error) {
							        var name = reason.name || DEFAULT_UNHANDLED_REJECTION_REASON_NAME;
							        return name + ": " + reason.message;
							      }

							      return native_methods_1.default.objectToString.call(reason);
							    }

							    return String(reason);
							  };

							  WindowSandbox._getUrlAttr = function _getUrlAttr(el, attr) {
							    var attrValue = native_methods_1.default.getAttribute.call(el, attr);
							    var currentDocument = el.ownerDocument || document;
							    if (attrValue === '' || attrValue === null && attr === 'action' && feature_detection_1.emptyActionAttrFallbacksToTheLocation) return url_resolver_1.default.resolve('', currentDocument);else if (attrValue === null) return '';else if (url_2.HASH_RE.test(attrValue)) return url_resolver_1.default.resolve(attrValue, currentDocument);else if (!url_2.isValidUrl(attrValue)) return url_resolver_1.default.resolve(attrValue, currentDocument);
							    return url_1.resolveUrlAsDest(attrValue);
							  };

							  WindowSandbox._removeProcessingInstructions = function _removeProcessingInstructions(text) {
							    if (text) {
							      text = header_1.remove(text);
							      return style_1.default.cleanUp(text, url_1.parseProxyUrl);
							    }

							    return text;
							  };

							  WindowSandbox._processTextPropValue = function _processTextPropValue(el, text) {
							    var processedText = text !== null && text !== void 0 ? String(text) : text;

							    if (processedText) {
							      if (dom_1.isScriptElement(el)) return script_1.processScript(processedText, true, false, url_1.convertToProxyUrl);else if (dom_1.isStyleElement(el)) return style_1.default.process(processedText, url_1.getProxyUrl, true);
							    }

							    return processedText;
							  };

							  _proto._overrideUrlAttrDescriptors = function _overrideUrlAttrDescriptors(attr, elementConstructors) {
							    var windowSandbox = this;

							    for (var _i6 = 0; _i6 < elementConstructors.length; _i6++) {
							      var _constructor = elementConstructors[_i6];
							      overriding_1.overrideDescriptor(_constructor.prototype, attr, {
							        getter: function getter() {
							          return WindowSandbox._getUrlAttr(this, attr);
							        },
							        setter: function setter(value) {
							          windowSandbox.nodeSandbox.element.setAttributeCore(this, [attr, value]);
							        }
							      });
							    }
							  };

							  _proto._overrideAttrDescriptors = function _overrideAttrDescriptors(attr, elementConstructors) {
							    var windowSandbox = this;

							    for (var _i8 = 0; _i8 < elementConstructors.length; _i8++) {
							      var _constructor2 = elementConstructors[_i8];
							      overriding_1.overrideDescriptor(_constructor2.prototype, attr, {
							        getter: function getter() {
							          return windowSandbox.nodeSandbox.element.getAttributeCore(this, [attr]) || '';
							        },
							        setter: function setter(value) {
							          windowSandbox.nodeSandbox.element.setAttributeCore(this, [attr, value]);
							        }
							      });
							    }
							  };

							  _proto._overrideUrlPropDescriptor = function _overrideUrlPropDescriptor(prop, nativePropGetter, nativePropSetter) {
							    // @ts-ignore
							    overriding_1.overrideDescriptor(window.HTMLAnchorElement.prototype, prop, {
							      getter: function getter() {
							        return anchor_1.getAnchorProperty(this, nativePropGetter);
							      },
							      setter: function setter(value) {
							        anchor_1.setAnchorProperty(this, nativePropSetter, value);
							      }
							    });
							  };

							  _proto._overrideEventPropDescriptor = function _overrideEventPropDescriptor(window, eventName, nativePropSetter) {
							    var _this2 = this;

							    // @ts-ignore
							    var eventPropsOwner = native_methods_1.default.isEventPropsLocatedInProto ? window.Window.prototype : window;
							    overriding_1.overrideDescriptor(eventPropsOwner, 'on' + eventName, {
							      getter: null,
							      setter: function setter(handler) {
							        nativePropSetter.call(window, handler);

							        _this2.listenersSandbox.emit(_this2.listenersSandbox.EVENT_LISTENER_ATTACHED_EVENT, {
							          el: window,
							          listener: handler,
							          eventType: eventName
							        });
							      }
							    });
							  };

							  _proto._createOverriddenDOMTokenListMethod = function _createOverriddenDOMTokenListMethod(nativeMethod) {
							    var windowSandbox = this;
							    return function () {
							      var executionResult = nativeMethod.apply(this, arguments);
							      var tokenListOwner = this[SANDBOX_DOM_TOKEN_LIST_OWNER];
							      if (tokenListOwner) // eslint-disable-next-line no-restricted-properties
							        windowSandbox.nodeSandbox.element.setAttributeCore(tokenListOwner, ['sandbox', this.toString()]);
							      return executionResult;
							    };
							  };

							  WindowSandbox._isSecureOrigin = function _isSecureOrigin(url) {
							    // NOTE: https://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features
							    var parsedUrl = url_1.parseUrl(url_1.resolveUrlAsDest(url));
							    /*eslint-disable no-restricted-properties*/

							    return ALLOWED_SERVICE_WORKER_PROTOCOLS.indexOf(parsedUrl.protocol) === -1 && ALLOWED_SERVICE_WORKER_HOST_NAMES.indexOf(parsedUrl.hostname) === -1;
							    /*eslint-enable no-restricted-properties*/
							  };

							  _proto._setSandboxedTextForTitleElements = function _setSandboxedTextForTitleElements(el) {
							    if (dom_2.isIframeWindow(window)) return;
							    var titleElements = query_selector_1.getNativeQuerySelectorAll(el).call(el, 'title');

							    for (var _i10 = 0; _i10 < titleElements.length; _i10++) {
							      var titleElement = titleElements[_i10];
							      // NOTE: SVGTitleElement can be here (GH-2364)
							      if (!dom_1.isTitleElement(titleElement)) continue;
							      var nativeText = native_methods_1.default.titleElementTextGetter.call(titleElement);

							      this._documentTitleStorageInitializer.storage.setTitleElementPropertyValue(titleElement, nativeText);
							    }
							  };

							  WindowSandbox.isProxyObject = function isProxyObject(obj) {
							    try {
							      return obj[IS_PROXY_OBJECT_INTERNAL_PROP_NAME] === IS_PROXY_OBJECT_INTERNAL_PROP_VALUE;
							    } catch (e) {
							      return false;
							    }
							  };

							  _proto.handleEvent = function handleEvent(event) {
							    if (event.defaultPrevented) return;
							    if (event.type === 'unhandledrejection') this._raiseUncaughtJsErrorEvent(this.UNHANDLED_REJECTION_EVENT, event, this.window);else if (event.type === 'error') {
							      if (event.message.indexOf('NS_ERROR_NOT_INITIALIZED') !== -1) event.preventDefault();else this._raiseUncaughtJsErrorEvent(this.UNCAUGHT_JS_ERROR_EVENT, event, window);
							    } else if (event.type === 'hashchange') this.emit(this.HASH_CHANGE_EVENT);
							  };

							  _proto.attach = function attach(window) {
							    var _this3 = this;

							    _base_1$default.prototype.attach.call(this, window);

							    var messageSandbox = this.messageSandbox;
							    var nodeSandbox = this.nodeSandbox;
							    var windowSandbox = this;
							    native_methods_1.default.arrayForEach.call(TRACKED_EVENTS, function (event) {
							      _this3._reattachHandler(window, event);
							    });
							    this.listenersSandbox.initElementListening(window, TRACKED_EVENTS);
							    this.listenersSandbox.on(this.listenersSandbox.EVENT_LISTENER_ATTACHED_EVENT, function (e) {
							      if (e.el !== window) return;
							      if (TRACKED_EVENTS.indexOf(e.eventType) !== -1) _this3._reattachHandler(window, e.eventType);
							    });

							    this._overrideEventPropDescriptor(window, 'error', native_methods_1.default.winOnErrorSetter);

							    this._overrideEventPropDescriptor(window, 'hashchange', native_methods_1.default.winOnHashChangeSetter);

							    if (native_methods_1.default.winOnUnhandledRejectionSetter) this._overrideEventPropDescriptor(window, 'unhandledrejection', native_methods_1.default.winOnUnhandledRejectionSetter);
							    messageSandbox.on(messageSandbox.SERVICE_MSG_RECEIVED_EVENT, function (e) {
							      var _e$message = e.message,
							          msg = _e$message.msg,
							          pageUrl = _e$message.pageUrl,
							          stack = _e$message.stack,
							          cmd = _e$message.cmd;
							      if (cmd === _this3.UNCAUGHT_JS_ERROR_EVENT || cmd === _this3.UNHANDLED_REJECTION_EVENT) windowSandbox.emit(cmd, {
							        msg: msg,
							        pageUrl: pageUrl,
							        stack: stack
							      });
							    });
							    overriding_1.overrideFunction(window.CanvasRenderingContext2D.prototype, 'drawImage', function () {
							      var _this4 = this;

							      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
							        args[_key] = arguments[_key];
							      }

							      var image = args[0];

							      if (dom_1.isImgElement(image) && !image[internal_properties_1.default.forceProxySrcForImage]) {
							        var src = native_methods_1.default.imageSrcGetter.call(image);

							        if (destLocation.sameOriginCheck(location.toString(), src)) {
							          image = native_methods_1.default.createElement.call(window.document, 'img');
							          native_methods_1.default.imageSrcSetter.call(image, url_1.getProxyUrl(src));
							          args[0] = image;

							          if (!image.complete) {
							            native_methods_1.default.addEventListener.call(image, 'load', function () {
							              return native_methods_1.default.canvasContextDrawImage.apply(_this4, args);
							            });
							          }
							        }
							      }

							      return native_methods_1.default.canvasContextDrawImage.apply(this, args);
							    });

							    if (native_methods_1.default.objectAssign) {
							      overriding_1.overrideFunction(window.Object, 'assign', function (target) {
							        var args = [target];
							        var targetType = typeof target;

							        for (var _len2 = arguments.length, sources = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
							          sources[_key2 - 1] = arguments[_key2];
							        }

							        if (target && (targetType === 'object' || targetType === 'function') && sources.length) {
							          for (var _i12 = 0; _i12 < sources.length; _i12++) {
							            var source = sources[_i12];
							            var sourceType = typeof source;

							            if (!source || sourceType !== 'object' && sourceType !== 'function') {
							              native_methods_1.default.objectAssign.call(this, target, source);
							              continue;
							            }

							            var sourceSymbols = native_methods_1.default.objectGetOwnPropertySymbols.call(window.Object, source);
							            var sourceKeys = native_methods_1.default.arrayConcat.call(native_methods_1.default.objectKeys.call(window.Object, source), sourceSymbols);

							            for (var _i14 = 0; _i14 < sourceKeys.length; _i14++) {
							              var key = sourceKeys[_i14];
							              window[instruction_1.default.setProperty](target, key, source[key]);
							            }
							          }
							        } else args = native_methods_1.default.arrayConcat.call(args, sources);

							        return native_methods_1.default.objectAssign.apply(this, args);
							      });
							    }

							    overriding_1.overrideFunction(window, 'open', function () {
							      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
							        args[_key3] = arguments[_key3];
							      }

							      args[0] = url_1.getProxyUrl(args[0]);
							      args[1] = windowSandbox._getWindowOpenTarget(args[1]);
							      return windowSandbox._childWindowSandbox.handleWindowOpen(window, args);
							    });

							    if (window.FontFace) {
							      overriding_1.overrideConstructor(window, 'FontFace', function (family, source, descriptors) {
							        source = style_1.default.process(source, url_1.convertToProxyUrl);
							        return new native_methods_1.default.FontFace(family, source, descriptors);
							      });
							    }

							    if (window.Worker) {
							      overriding_1.overrideConstructor(window, 'Worker', function WorkerWrapper() {
							        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
							          args[_key4] = arguments[_key4];
							        }

							        var isCalledWithoutNewKeyword = constructor_is_called_without_new_keyword_1.default(this, WorkerWrapper);
							        if (arguments.length === 0) // @ts-ignore
							          return isCalledWithoutNewKeyword ? native_methods_1.default.Worker() : new native_methods_1.default.Worker();
							        if (isCalledWithoutNewKeyword) return native_methods_1.default.Worker.apply(this, args);
							        var scriptURL = args[0];
							        if (typeof scriptURL !== 'string') scriptURL = String(scriptURL);
							        scriptURL = url_1.getProxyUrl(scriptURL, {
							          resourceType: url_1.stringifyResourceType({
							            isScript: true
							          })
							        });
							        var worker = arguments.length === 1 ? new native_methods_1.default.Worker(scriptURL) : new native_methods_1.default.Worker(scriptURL, args[1]); // eslint-disable-next-line no-restricted-properties

							        if (url_1.parseUrl(scriptURL).protocol == 'blob:') {
							          worker.postMessage({
							            cmd: set_settings_command_1.SET_BLOB_WORKER_SETTINGS,
							            sessionId: settings_1.default.get().sessionId,
							            windowId: settings_1.default.get().windowId,
							            origin: destLocation.getOriginHeader()
							          });
							        }

							        return worker;
							      }, true);
							    }

							    if (window.Blob) {
							      overriding_1.overrideConstructor(window, 'Blob', function (array, opts) {
							        if (arguments.length === 0) return new native_methods_1.default.Blob();
							        if (WindowSandbox._isProcessableBlob(array, opts)) array = [script_1.processScript(array.join(''), true, false, url_1.convertToProxyUrl)]; // NOTE: IE11 throws an error when the second parameter of the Blob function is undefined (GH-44)
							        // If the overridden function is called with one parameter, we need to call the original function
							        // with one parameter as well.

							        return arguments.length === 1 ? new native_methods_1.default.Blob(array) : new native_methods_1.default.Blob(array, opts);
							      });
							    } // NOTE: non-IE11 case. window.File in IE11 is not constructable.


							    if (native_methods_1.default.File) {
							      overriding_1.overrideConstructor(window, 'File', function (array, fileName, opts) {
							        if (arguments.length === 0) return new native_methods_1.default.File();
							        if (WindowSandbox._isProcessableBlob(array, opts)) array = [script_1.processScript(array.join(''), true, false, url_1.convertToProxyUrl)];
							        return new native_methods_1.default.File(array, fileName, opts);
							      });
							    }

							    if (window.EventSource) {
							      overriding_1.overrideConstructor(window, 'EventSource', function (url, opts) {
							        if (arguments.length) {
							          var proxyUrl = url_1.getProxyUrl(url, {
							            resourceType: url_1.stringifyResourceType({
							              isEventSource: true
							            })
							          });
							          if (arguments.length === 1) return new native_methods_1.default.EventSource(proxyUrl);
							          return new native_methods_1.default.EventSource(proxyUrl, opts);
							        }

							        return new native_methods_1.default.EventSource();
							      });
							      window.EventSource.CONNECTING = native_methods_1.default.EventSource.CONNECTING;
							      window.EventSource.OPEN = native_methods_1.default.EventSource.OPEN;
							      window.EventSource.CLOSED = native_methods_1.default.EventSource.CLOSED;
							    }

							    if (window.MutationObserver) {
							      overriding_1.overrideConstructor(window, 'MutationObserver', function (callback) {
							        var wrapper = function wrapper(mutations) {
							          var result = [];

							          for (var _i16 = 0; _i16 < mutations.length; _i16++) {
							            var mutation = mutations[_i16];
							            if (!shadow_ui_1.default.isShadowUIMutation(mutation)) result.push(mutation);
							          }

							          if (result.length) callback.call(this, result, this);
							        };

							        return new native_methods_1.default.MutationObserver(wrapper);
							      });
							      if (window.WebKitMutationObserver) window.WebKitMutationObserver = window.MutationObserver;
							    }

							    if (window.Proxy) {
							      overriding_1.overrideConstructor(window, 'Proxy', function (target, handler) {
							        if (handler.get && !handler.get[PROXY_HANDLER_FLAG]) {
							          var storedGet = handler.get;

							          handler.get = function (getterTarget, name, receiver) {
							            if (name === IS_PROXY_OBJECT_INTERNAL_PROP_NAME) return IS_PROXY_OBJECT_INTERNAL_PROP_VALUE;else if (INSTRUCTION_VALUES.indexOf(name) > -1) return window[name];
							            var result = storedGet.call(this, getterTarget, name, receiver);
							            if (name === 'eval' && result[code_instrumentation_1.default.WRAPPED_EVAL_FN]) return result[code_instrumentation_1.default.WRAPPED_EVAL_FN];
							            return result;
							          };

							          native_methods_1.default.objectDefineProperty(handler.get, PROXY_HANDLER_FLAG, {
							            value: true,
							            enumerable: false
							          });
							        }

							        return new native_methods_1.default.Proxy(target, handler);
							      });
							      window.Proxy.revocable = native_methods_1.default.Proxy.revocable;
							    }

							    if (native_methods_1.default.registerServiceWorker) {
							      overriding_1.overrideFunction(window.navigator.serviceWorker, 'register', function () {
							        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
							          args[_key5] = arguments[_key5];
							        }

							        var url = args[0],
							            opts = args[1];

							        if (typeof url === 'string') {
							          if (WindowSandbox._isSecureOrigin(url)) {
							            // NOTE: We cannot create an instance of the DOMException in the Android 6.0 and in the Edge 17 browsers.
							            // The 'TypeError: Illegal constructor' error is raised if we try to call the constructor.
							            return pinkie_1.default.reject(browser_1.isAndroid || browser_1.isMSEdge && browser_1.version >= 17 ? new Error('Only secure origins are allowed.') : new DOMException('Only secure origins are allowed.', 'SecurityError'));
							          }

							          args[0] = url_1.getProxyUrl(url, {
							            resourceType: url_1.stringifyResourceType({
							              isServiceWorker: true
							            })
							          });
							        }

							        args[1] = {
							          scope: '/'
							        };
							        return native_methods_1.default.registerServiceWorker.apply(window.navigator.serviceWorker, args).then(function (reg) {
							          return new pinkie_1.default(function (resolve, reject) {
							            var parsedProxyUrl = url_1.parseProxyUrl(args[0]);
							            var serviceWorker = reg.installing;

							            if (!serviceWorker) {
							              resolve(reg);
							              return;
							            }

							            var channel = new native_methods_1.default.MessageChannel();
							            serviceWorker.postMessage({
							              cmd: set_settings_command_1.SET_SERVICE_WORKER_SETTINGS,
							              currentScope: url_1.getScope(url),
							              optsScope: url_1.getScope(opts && opts.scope),
							              protocol: parsedProxyUrl.destResourceInfo.protocol,
							              host: parsedProxyUrl.destResourceInfo.host // eslint-disable-line no-restricted-properties

							            }, [channel.port1]);

							            channel.port2.onmessage = function (e) {
							              var data = native_methods_1.default.messageEventDataGetter.call(e);
							              if (data.error) reject(new Error(data.error));else resolve(reg);
							            };
							          });
							        });
							      });
							    }

							    if (native_methods_1.default.getRegistrationServiceWorker) {
							      overriding_1.overrideFunction(window.navigator.serviceWorker, 'getRegistration', function () {
							        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
							          args[_key6] = arguments[_key6];
							        }

							        if (typeof args[0] === 'string') args[0] = '/';
							        return native_methods_1.default.getRegistrationServiceWorker.apply(window.navigator.serviceWorker, args);
							      });
							    }

							    if (window.Range.prototype.createContextualFragment) {
							      overriding_1.overrideFunction(window.Range.prototype, 'createContextualFragment', function () {
							        for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
							          args[_key7] = arguments[_key7];
							        }

							        var tagString = args[0];

							        if (typeof tagString === 'string') {
							          args[0] = html_1.processHtml(tagString, {
							            processedContext: this.startContainer && this.startContainer[internal_properties_1.default.processedContext]
							          });
							        }

							        var fragment = native_methods_1.default.createContextualFragment.apply(this, args);
							        nodeSandbox.processNodes(fragment);
							        return fragment;
							      });
							    }

							    if (window.EventTarget) {
							      var overriddenMethods = this.listenersSandbox.createOverriddenMethods();
							      overriding_1.overrideFunction(window.EventTarget.prototype, 'addEventListener', overriddenMethods.addEventListener);
							      overriding_1.overrideFunction(window.EventTarget.prototype, 'removeEventListener', overriddenMethods.removeEventListener);
							    }

							    overriding_1.overrideConstructor(window, 'Image', function () {
							      var image = null;
							      if (!arguments.length) image = new native_methods_1.default.Image();else if (arguments.length === 1) image = new native_methods_1.default.Image(arguments[0]);else image = new native_methods_1.default.Image(arguments[0], arguments[1]);
							      image[internal_properties_1.default.forceProxySrcForImage] = true;
							      nodeSandbox.processNodes(image);
							      return image;
							    });
							    overriding_1.overrideConstructor(window, 'Function', function () {
							      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
							        args[_key8] = arguments[_key8];
							      }

							      var functionBodyArgIndex = args.length - 1;
							      if (typeof args[functionBodyArgIndex] === 'string') args[functionBodyArgIndex] = script_1.processScript(args[functionBodyArgIndex], false, false, url_1.convertToProxyUrl);
							      return native_methods_1.default.Function.apply(this, args);
							    }, true);
							    overriding_1.overrideFunction(window.Function.prototype, 'toString', function () {
							      if (native_methods_1.default.objectHasOwnProperty.call(this, internal_properties_1.default.nativeStrRepresentation)) return this[internal_properties_1.default.nativeStrRepresentation];
							      return native_methods_1.default.functionToString.call(this);
							    });

							    if (typeof window.history.pushState === 'function' && typeof window.history.replaceState === 'function') {
							      var createWrapperForHistoryStateManipulationFn = function createWrapperForHistoryStateManipulationFn(nativeFn) {
							        return function () {
							          for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
							            args[_key9] = arguments[_key9];
							          }

							          var url = args[2];
							          if (args.length > 2 && url !== null && (browser_1.isIE || url !== void 0)) args[2] = url_1.getProxyUrl(url);
							          return nativeFn.apply(this, args);
							        };
							      };

							      overriding_1.overrideFunction(window.history, 'pushState', createWrapperForHistoryStateManipulationFn(native_methods_1.default.historyPushState));
							      overriding_1.overrideFunction(window.history, 'replaceState', createWrapperForHistoryStateManipulationFn(native_methods_1.default.historyReplaceState));
							    }

							    if (window.navigator.sendBeacon) {
							      overriding_1.overrideFunction(window.navigator, 'sendBeacon', function () {
							        if (typeof arguments[0] === 'string') arguments[0] = url_1.getProxyUrl(arguments[0]);
							        return native_methods_1.default.sendBeacon.apply(this, arguments);
							      });
							    }

							    if (window.navigator.registerProtocolHandler) {
							      overriding_1.overrideFunction(window.navigator, 'registerProtocolHandler', function () {
							        var urlIndex = 1;

							        for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
							          args[_key10] = arguments[_key10];
							        }

							        if (typeof args[urlIndex] === 'string') {
							          // eslint-disable-next-line no-restricted-properties
							          var destHostname = destLocation.getParsed().hostname;
							          var isDestUrl = false;

							          if (browser_1.isFirefox) {
							            var parsedUrl = url_1.parseUrl(args[urlIndex]); // eslint-disable-next-line no-restricted-properties

							            isDestUrl = parsedUrl.hostname && destHostname === parsedUrl.hostname;
							          } else isDestUrl = destLocation.sameOriginCheck(destLocation.get(), args[urlIndex]);

							          if (isDestUrl) args[urlIndex] = url_1.getProxyUrl(args[urlIndex]);
							        }

							        return native_methods_1.default.registerProtocolHandler.apply(navigator, args);
							      });
							    }

							    if (window.FormData) {
							      overriding_1.overrideFunction(window.FormData.prototype, 'append', function () {
							        for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
							          args[_key11] = arguments[_key11];
							        }

							        var name = args[0],
							            value = args[1]; // NOTE: We should not send our hidden input's value along with the file info,
							        // because our input may have incorrect value if the input with the file has been removed from DOM.

							        if (name === internal_attributes_1.default.uploadInfoHiddenInputName) return; // NOTE: If we append our file wrapper to FormData, we will lose the file name.
							        // This happens because the file wrapper is an instance of Blob
							        // and a browser thinks that Blob does not contain the "name" property.

							        if (args.length === 2 && dom_1.isBlob(value) && 'name' in value) args[2] = value['name'];
							        native_methods_1.default.formDataAppend.apply(this, args);
							      });
							    }

							    if (window.WebSocket) {
							      overriding_1.overrideConstructor(window, 'WebSocket', function (url, protocols) {
							        if (arguments.length === 0) return new native_methods_1.default.WebSocket();
							        var proxyUrl = url_1.getProxyUrl(url, {
							          resourceType: url_1.stringifyResourceType({
							            isWebSocket: true
							          })
							        });
							        if (arguments.length === 1) return new native_methods_1.default.WebSocket(proxyUrl);else if (arguments.length === 2) return new native_methods_1.default.WebSocket(proxyUrl, protocols);
							        return new native_methods_1.default.WebSocket(proxyUrl, protocols, arguments[2]);
							      });
							      window.WebSocket.CONNECTING = native_methods_1.default.WebSocket.CONNECTING;
							      window.WebSocket.OPEN = native_methods_1.default.WebSocket.OPEN;
							      window.WebSocket.CLOSING = native_methods_1.default.WebSocket.CLOSING;
							      window.WebSocket.CLOSED = native_methods_1.default.WebSocket.CLOSED;

							      if (native_methods_1.default.webSocketUrlGetter) {
							        overriding_1.overrideDescriptor(window.WebSocket.prototype, 'url', {
							          getter: function getter() {
							            var url = native_methods_1.default.webSocketUrlGetter.call(this);
							            var parsedUrl = url_1.parseProxyUrl(url);
							            if (parsedUrl && parsedUrl.destUrl) return parsedUrl.destUrl.replace(HTTP_PROTOCOL_RE, 'ws');
							            return url;
							          }
							        });
							      }
							    }

							    overriding_1.overrideDescriptor(window.MessageEvent.prototype, 'origin', {
							      getter: function getter() {
							        var target = this.target;
							        var origin = native_methods_1.default.messageEventOriginGetter.call(this);

							        if (dom_1.isWebSocket(target)) {
							          var parsedUrl = url_1.parseUrl(target.url);
							          if (parsedUrl) // eslint-disable-next-line no-restricted-properties
							            return parsedUrl.protocol + '//' + parsedUrl.host;
							        } else if (dom_1.isWindow(target)) {
							          var data = native_methods_1.default.messageEventDataGetter.call(this);
							          if (data) return data.originUrl;
							        }

							        return origin;
							      }
							    });
							    overriding_1.overrideDescriptor(window.HTMLCollection.prototype, 'length', {
							      getter: function getter() {
							        var length = native_methods_1.default.htmlCollectionLengthGetter.call(this);
							        if (shadow_ui_1.default.isShadowContainerCollection(this, length)) return windowSandbox.shadowUI.getShadowUICollectionLength(this, length);
							        return length;
							      }
							    });
							    overriding_1.overrideDescriptor(window.NodeList.prototype, 'length', {
							      getter: function getter() {
							        var length = native_methods_1.default.nodeListLengthGetter.call(this);
							        if (shadow_ui_1.default.isShadowContainerCollection(this)) return windowSandbox.shadowUI.getShadowUICollectionLength(this, length);
							        return length;
							      }
							    });
							    overriding_1.overrideDescriptor(window.Element.prototype, 'childElementCount', {
							      getter: function getter() {
							        if (shadow_ui_1.default.isShadowContainer(this)) {
							          var childrenLength = native_methods_1.default.htmlCollectionLengthGetter.call(this.children);
							          return windowSandbox.shadowUI.getShadowUICollectionLength(this.children, childrenLength);
							        }

							        return native_methods_1.default.elementChildElementCountGetter.call(this);
							      }
							    });

							    if (native_methods_1.default.performanceEntryNameGetter) {
							      overriding_1.overrideDescriptor(window.PerformanceEntry.prototype, 'name', {
							        getter: function getter() {
							          var name = native_methods_1.default.performanceEntryNameGetter.call(this);

							          if (dom_1.isPerformanceNavigationTiming(this)) {
							            var parsedProxyUrl = url_1.parseProxyUrl(name);
							            if (parsedProxyUrl) return parsedProxyUrl.destUrl;
							          }

							          return name;
							        }
							      });
							    }

							    overriding_1.overrideDescriptor(window.HTMLInputElement.prototype, 'files', {
							      getter: function getter() {
							        if (this.type.toLowerCase() === 'file') return upload_1.default.getFiles(this);
							        return native_methods_1.default.inputFilesGetter.call(this);
							      }
							    });
							    overriding_1.overrideDescriptor(window.HTMLInputElement.prototype, 'value', {
							      getter: function getter() {
							        if (this.type.toLowerCase() === 'file') return upload_1.default.getUploadElementValue(this);
							        return native_methods_1.default.inputValueGetter.call(this);
							      },
							      setter: function setter(value) {
							        if (this.type.toLowerCase() === 'file') return windowSandbox.uploadSandbox.setUploadElementValue(this, value);
							        native_methods_1.default.inputValueSetter.call(this, value);
							        var valueChanged = value !== native_methods_1.default.inputValueGetter.call(this);
							        if (valueChanged && !dom_1.isShadowUIElement(this) && dom_1.isTextEditableElementAndEditingAllowed(this)) windowSandbox.elementEditingWatcher.restartWatchingElementEditing(this);
							      }
							    }); // NOTE: HTMLInputElement raises the `change` event on `disabled` only in Chrome

							    if (browser_1.isChrome) {
							      overriding_1.overrideDescriptor(window.HTMLInputElement.prototype, 'disabled', {
							        getter: null,
							        setter: function setter(value) {
							          if (native_methods_1.default.documentActiveElementGetter.call(document) === this) {
							            var savedValue = windowSandbox.elementEditingWatcher.getElementSavedValue(this);
							            var currentValue = native_methods_1.default.inputValueGetter.call(this);
							            if (windowSandbox.elementEditingWatcher.isEditingObserved(this) && currentValue !== savedValue) windowSandbox.eventSimulator.change(this);
							            windowSandbox.elementEditingWatcher.stopWatching(this);
							          }

							          native_methods_1.default.inputDisabledSetter.call(this, value);
							        }
							      });
							    }

							    overriding_1.overrideDescriptor(window.HTMLInputElement.prototype, 'required', {
							      getter: function getter() {
							        return windowSandbox.nodeSandbox.element.getAttributeCore(this, ['required']) !== null;
							      },
							      setter: function setter(value) {
							        if (this.type.toLowerCase() !== 'file') native_methods_1.default.inputRequiredSetter.call(this, value);else if (value) windowSandbox.nodeSandbox.element.setAttributeCore(this, ['required', '']);else windowSandbox.nodeSandbox.element.removeAttributeCore(this, ['required']);
							      }
							    });
							    overriding_1.overrideDescriptor(window.HTMLTextAreaElement.prototype, 'value', {
							      getter: null,
							      setter: function setter(value) {
							        native_methods_1.default.textAreaValueSetter.call(this, value);
							        if (!dom_1.isShadowUIElement(this) && dom_1.isTextEditableElementAndEditingAllowed(this)) windowSandbox.elementEditingWatcher.restartWatchingElementEditing(this);
							      }
							    });

							    this._overrideUrlAttrDescriptors('data', [window.HTMLObjectElement]);

							    this._overrideUrlAttrDescriptors('src', [window.HTMLImageElement, window.HTMLScriptElement, window.HTMLEmbedElement, window.HTMLSourceElement, window.HTMLMediaElement, window.HTMLInputElement, window.HTMLFrameElement, window.HTMLIFrameElement]);

							    this._overrideUrlAttrDescriptors('action', [window.HTMLFormElement]);

							    this._overrideUrlAttrDescriptors('formAction', [window.HTMLInputElement, window.HTMLButtonElement]);

							    this._overrideUrlAttrDescriptors('href', [window.HTMLAnchorElement, window.HTMLLinkElement, window.HTMLAreaElement, window.HTMLBaseElement]);

							    if (native_methods_1.default.htmlManifestGetter) this._overrideUrlAttrDescriptors('manifest', [window.HTMLHtmlElement]);

							    this._overrideAttrDescriptors('target', [window.HTMLAnchorElement, window.HTMLFormElement, window.HTMLAreaElement, window.HTMLBaseElement]);

							    this._overrideAttrDescriptors('formTarget', [window.HTMLInputElement, window.HTMLButtonElement]);

							    this._overrideAttrDescriptors('autocomplete', [window.HTMLInputElement]); // NOTE: Some browsers (for example, Edge, Internet Explorer 11, Safari) don't support the 'integrity' property.


							    if (native_methods_1.default.scriptIntegrityGetter && native_methods_1.default.linkIntegrityGetter) {
							      this._overrideAttrDescriptors('integrity', [window.HTMLScriptElement]);

							      this._overrideAttrDescriptors('integrity', [window.HTMLLinkElement]);
							    }

							    this._overrideAttrDescriptors('rel', [window.HTMLLinkElement]);

							    if (native_methods_1.default.linkAsSetter) this._overrideAttrDescriptors('as', [window.HTMLLinkElement]);
							    overriding_1.overrideDescriptor(window.HTMLInputElement.prototype, 'type', {
							      getter: null,
							      setter: function setter(value) {
							        windowSandbox.nodeSandbox.element.setAttributeCore(this, ['type', value]);
							      }
							    });
							    overriding_1.overrideDescriptor(window.HTMLIFrameElement.prototype, 'sandbox', {
							      getter: function getter() {
							        var domTokenList = this[SANDBOX_DOM_TOKEN_LIST];

							        if (!domTokenList) {
							          var span = native_methods_1.default.createElement.call(document, 'span');
							          domTokenList = native_methods_1.default.elementClassListGetter.call(span);
							          span.className = windowSandbox.nodeSandbox.element.getAttributeCore(this, ['sandbox']) || '';
							          native_methods_1.default.objectDefineProperty(domTokenList, SANDBOX_DOM_TOKEN_LIST_OWNER, {
							            value: this
							          });
							          native_methods_1.default.objectDefineProperty(this, SANDBOX_DOM_TOKEN_LIST, {
							            value: domTokenList
							          });
							          native_methods_1.default.objectDefineProperty(this, SANDBOX_DOM_TOKEN_LIST_UPDATE_FN, {
							            value: function value(_value) {
							              span.className = _value;
							            }
							          });
							        }

							        return domTokenList;
							      },
							      setter: function setter(value) {
							        windowSandbox.nodeSandbox.element.setAttributeCore(this, ['sandbox', value]);
							        if (this[SANDBOX_DOM_TOKEN_LIST_UPDATE_FN]) this[SANDBOX_DOM_TOKEN_LIST_UPDATE_FN](windowSandbox.nodeSandbox.element.getAttributeCore(this, ['sandbox']) || '');
							      }
							    });

							    if (native_methods_1.default.iframeSrcdocGetter) {
							      overriding_1.overrideDescriptor(window.HTMLIFrameElement.prototype, 'srcdoc', {
							        getter: function getter() {
							          return windowSandbox.nodeSandbox.element.getAttributeCore(this, ['srcdoc']) || '';
							        },
							        setter: function setter(value) {
							          windowSandbox.nodeSandbox.element.setAttributeCore(this, ['srcdoc', value]);
							        }
							      });
							    }

							    this._overrideUrlPropDescriptor('port', native_methods_1.default.anchorPortGetter, native_methods_1.default.anchorPortSetter);

							    this._overrideUrlPropDescriptor('host', native_methods_1.default.anchorHostGetter, native_methods_1.default.anchorHostSetter);

							    this._overrideUrlPropDescriptor('hostname', native_methods_1.default.anchorHostnameGetter, native_methods_1.default.anchorHostnameSetter);

							    this._overrideUrlPropDescriptor('pathname', native_methods_1.default.anchorPathnameGetter, native_methods_1.default.anchorPathnameSetter);

							    this._overrideUrlPropDescriptor('protocol', native_methods_1.default.anchorProtocolGetter, native_methods_1.default.anchorProtocolSetter);

							    this._overrideUrlPropDescriptor('search', native_methods_1.default.anchorSearchGetter, native_methods_1.default.anchorSearchSetter);

							    overriding_1.overrideDescriptor(window.SVGImageElement.prototype, 'href', {
							      getter: function getter() {
							        var imageHref = native_methods_1.default.svgImageHrefGetter.call(this);

							        if (!imageHref[CONTEXT_SVG_IMAGE_ELEMENT]) {
							          native_methods_1.default.objectDefineProperty(imageHref, CONTEXT_SVG_IMAGE_ELEMENT, {
							            value: this,
							            configurable: true
							          });
							        }

							        return imageHref;
							      }
							    });
							    overriding_1.overrideDescriptor(window.SVGAnimatedString.prototype, 'baseVal', {
							      getter: function getter() {
							        var baseVal = native_methods_1.default.svgAnimStrBaseValGetter.call(this);
							        if (this[CONTEXT_SVG_IMAGE_ELEMENT]) baseVal = url_1.getDestinationUrl(baseVal);
							        return baseVal;
							      },
							      setter: function setter(value) {
							        var contextSVGImageElement = this[CONTEXT_SVG_IMAGE_ELEMENT];

							        if (contextSVGImageElement) {
							          var hasXlinkHrefAttr = native_methods_1.default.hasAttributeNS.call(contextSVGImageElement, namespaces_1.XLINK_NAMESPACE, 'href');
							          windowSandbox.nodeSandbox.element.setAttributeCore(contextSVGImageElement, [hasXlinkHrefAttr ? 'xlink:href' : 'href', value]);
							          value = url_1.getProxyUrl(value);
							        }

							        native_methods_1.default.svgAnimStrBaseValSetter.call(this, value);
							      }
							    });
							    overriding_1.overrideDescriptor(window.SVGAnimatedString.prototype, 'animVal', {
							      getter: function getter() {
							        var animVal = native_methods_1.default.svgAnimStrAnimValGetter.call(this);
							        if (this[CONTEXT_SVG_IMAGE_ELEMENT]) return url_1.getDestinationUrl(animVal);
							        return animVal;
							      }
							    });

							    if (native_methods_1.default.anchorOriginGetter) {
							      overriding_1.overrideDescriptor(window.HTMLAnchorElement.prototype, 'origin', {
							        getter: function getter() {
							          return anchor_1.getAnchorProperty(this, native_methods_1.default.anchorOriginGetter);
							        }
							      });
							    }

							    overriding_1.overrideDescriptor(window.StyleSheet.prototype, 'href', {
							      getter: function getter() {
							        return url_1.getDestinationUrl(native_methods_1.default.styleSheetHrefGetter.call(this));
							      }
							    });

							    if (native_methods_1.default.cssStyleSheetHrefGetter) {
							      overriding_1.overrideDescriptor(window.CSSStyleSheet.prototype, 'href', {
							        getter: function getter() {
							          return url_1.getDestinationUrl(native_methods_1.default.cssStyleSheetHrefGetter.call(this));
							        }
							      });
							    }

							    if (native_methods_1.default.nodeBaseURIGetter) {
							      overriding_1.overrideDescriptor(window.Node.prototype, 'baseURI', {
							        getter: function getter() {
							          return url_1.getDestinationUrl(native_methods_1.default.nodeBaseURIGetter.call(this));
							        }
							      });
							    }

							    if (window.DOMParser) {
							      overriding_1.overrideFunction(window.DOMParser.prototype, 'parseFromString', function () {
							        for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
							          args[_key12] = arguments[_key12];
							        }

							        var str = args[0];
							        var type = args[1];
							        var processedHtml;

							        if (args.length > 1 && typeof str === 'string' && type === 'text/html') {
							          processedHtml = html_1.processHtml(str);
							          args[0] = processedHtml;
							        }

							        var document = native_methods_1.default.DOMParserParseFromString.apply(this, args);
							        if (processedHtml) shadow_ui_1.default.removeSelfRemovingScripts(document);
							        return document;
							      });
							    }

							    overriding_1.overrideDescriptor(window.Node.prototype, 'firstChild', {
							      getter: function getter() {
							        if (shadow_ui_1.default.isShadowContainer(this)) return windowSandbox.shadowUI.getFirstChild(this);
							        return native_methods_1.default.nodeFirstChildGetter.call(this);
							      }
							    });
							    overriding_1.overrideDescriptor(window.Element.prototype, 'firstElementChild', {
							      getter: function getter() {
							        if (shadow_ui_1.default.isShadowContainer(this)) return windowSandbox.shadowUI.getFirstElementChild(this);
							        return native_methods_1.default.elementFirstElementChildGetter.call(this);
							      }
							    });
							    overriding_1.overrideDescriptor(window.Node.prototype, 'lastChild', {
							      getter: function getter() {
							        if (shadow_ui_1.default.isShadowContainer(this)) return windowSandbox.shadowUI.getLastChild(this);
							        return native_methods_1.default.nodeLastChildGetter.call(this);
							      }
							    });
							    overriding_1.overrideDescriptor(window.Element.prototype, 'lastElementChild', {
							      getter: function getter() {
							        if (shadow_ui_1.default.isShadowContainer(this)) return windowSandbox.shadowUI.getLastElementChild(this);
							        return native_methods_1.default.elementLastElementChildGetter.call(this);
							      }
							    });
							    overriding_1.overrideDescriptor(window.Node.prototype, 'nextSibling', {
							      getter: function getter() {
							        return windowSandbox.shadowUI.getNextSibling(this);
							      }
							    });
							    overriding_1.overrideDescriptor(window.Node.prototype, 'previousSibling', {
							      getter: function getter() {
							        return windowSandbox.shadowUI.getPrevSibling(this);
							      }
							    });
							    overriding_1.overrideDescriptor(window.Element.prototype, 'nextElementSibling', {
							      getter: function getter() {
							        return windowSandbox.shadowUI.getNextElementSibling(this);
							      }
							    });
							    overriding_1.overrideDescriptor(window.Element.prototype, 'previousElementSibling', {
							      getter: function getter() {
							        return windowSandbox.shadowUI.getPrevElementSibling(this);
							      }
							    });
							    overriding_1.overrideDescriptor(window[native_methods_1.default.elementHTMLPropOwnerName].prototype, 'innerHTML', {
							      getter: function getter() {
							        if (windowSandbox._documentTitleStorageInitializer && dom_1.isTitleElement(this)) return windowSandbox._documentTitleStorageInitializer.storage.getTitleElementPropertyValue(this);
							        var innerHTML = native_methods_1.default.elementInnerHTMLGetter.call(this);
							        if (dom_1.isScriptElement(this)) return header_1.remove(innerHTML);else if (dom_1.isStyleElement(this)) return style_1.default.cleanUp(innerHTML, url_1.parseProxyUrl);
							        return html_1.cleanUpHtml(innerHTML);
							      },
							      setter: function setter(value) {
							        if (windowSandbox._documentTitleStorageInitializer && dom_1.isTitleElement(this)) {
							          windowSandbox._documentTitleStorageInitializer.storage.setTitleElementPropertyValue(this, value);

							          return;
							        }

							        var el = this;
							        var isStyleEl = dom_1.isStyleElement(el);
							        var isScriptEl = dom_1.isScriptElement(el);
							        var processedValue = value !== null && value !== void 0 ? String(value) : value;

							        if (processedValue) {
							          if (isStyleEl) processedValue = style_1.default.process(processedValue, url_1.getProxyUrl, true);else if (isScriptEl) processedValue = script_1.processScript(processedValue, true, false, url_1.convertToProxyUrl);else {
							            processedValue = html_1.processHtml(processedValue, {
							              parentTag: el.tagName,
							              processedContext: el[internal_properties_1.default.processedContext]
							            });
							          }
							        }

							        if (!isStyleEl && !isScriptEl) dom_mutation_tracker_1.default.onChildrenChanged(el);
							        native_methods_1.default.elementInnerHTMLSetter.call(el, processedValue);

							        windowSandbox._setSandboxedTextForTitleElements(el);

							        if (isStyleEl || isScriptEl) return;
							        dom_mutation_tracker_1.default.onChildrenChanged(el);

							        if (windowSandbox.document.body === el) {
							          var shadowUIRoot = windowSandbox.shadowUI.getRoot();
							          windowSandbox.shadowUI.markShadowUIContainers(windowSandbox.document.head, el);
							          shadow_ui_1.default.markElementAndChildrenAsShadow(shadowUIRoot);
							        } else if (dom_1.isShadowUIElement(el)) shadow_ui_1.default.markElementAndChildrenAsShadow(el);

							        var parentDocument = dom_1.findDocument(el);
							        var parentWindow = parentDocument ? parentDocument.defaultView : null; // NOTE: For the iframe with an empty src.

							        if (parentWindow && parentWindow !== window && parentWindow[internal_properties_1.default.processDomMethodName]) parentWindow[internal_properties_1.default.processDomMethodName](el, parentDocument);else if (window[internal_properties_1.default.processDomMethodName]) window[internal_properties_1.default.processDomMethodName](el); // NOTE: Fix for B239138 - unroll.me 'Cannot read property 'document' of null' error raised
							        // during recording. There was an issue when the document.body was replaced, so we need to
							        // reattach UI to a new body manually.
							        // NOTE: This check is required because jQuery calls the set innerHTML method for an element
							        // in an unavailable window.

							        if (window.self) {
							          // NOTE: Use timeout, so that changes take effect.
							          if (dom_1.isHtmlElement(el) || dom_1.isBodyElement(el)) native_methods_1.default.setTimeout.call(window, function () {
							            return windowSandbox.nodeMutation.onBodyContentChanged(el);
							          }, 0);
							        }
							      }
							    });
							    overriding_1.overrideDescriptor(window[native_methods_1.default.elementHTMLPropOwnerName].prototype, 'outerHTML', {
							      getter: function getter() {
							        var outerHTML = native_methods_1.default.elementOuterHTMLGetter.call(this);
							        return html_1.cleanUpHtml(outerHTML);
							      },
							      setter: function setter(value) {
							        var el = this;
							        var parentEl = native_methods_1.default.nodeParentNodeGetter.call(el);
							        dom_mutation_tracker_1.default.onElementChanged(el);

							        if (parentEl && value !== null && value !== void 0) {
							          var parentDocument = dom_1.findDocument(parentEl);
							          var parentWindow = parentDocument ? parentDocument.defaultView : null;
							          native_methods_1.default.elementOuterHTMLSetter.call(el, html_1.processHtml(String(value), {
							            parentTag: parentEl && parentEl['tagName'],
							            processedContext: el[internal_properties_1.default.processedContext]
							          }));

							          windowSandbox._setSandboxedTextForTitleElements(parentEl);

							          dom_mutation_tracker_1.default.onChildrenChanged(parentEl); // NOTE: For the iframe with an empty src.

							          if (parentWindow && parentWindow !== window && parentWindow[internal_properties_1.default.processDomMethodName]) parentWindow[internal_properties_1.default.processDomMethodName](parentEl, parentDocument);else if (window[internal_properties_1.default.processDomMethodName]) window[internal_properties_1.default.processDomMethodName](parentEl); // NOTE: This check is required for an element in an unavailable window.
							          // NOTE: Use timeout, so that changes take effect.

							          if (window.self && dom_1.isBodyElement(el)) native_methods_1.default.setTimeout.call(window, function () {
							            return windowSandbox.shadowUI.onBodyElementMutation();
							          }, 0);
							        } else native_methods_1.default.elementOuterHTMLSetter.call(el, value);
							      }
							    });
							    overriding_1.overrideDescriptor(window.HTMLElement.prototype, 'innerText', {
							      getter: function getter() {
							        if (windowSandbox._documentTitleStorageInitializer && dom_1.isTitleElement(this)) return windowSandbox._documentTitleStorageInitializer.storage.getTitleElementPropertyValue(this);
							        var textContent = native_methods_1.default.htmlElementInnerTextGetter.call(this);
							        return WindowSandbox._removeProcessingInstructions(textContent);
							      },
							      setter: function setter(value) {
							        if (windowSandbox._documentTitleStorageInitializer && dom_1.isTitleElement(this)) {
							          windowSandbox._documentTitleStorageInitializer.storage.setTitleElementPropertyValue(this, value);

							          return;
							        }

							        var processedValue = WindowSandbox._processTextPropValue(this, value);

							        dom_mutation_tracker_1.default.onChildrenChanged(this);
							        native_methods_1.default.htmlElementInnerTextSetter.call(this, processedValue);
							      }
							    });
							    overriding_1.overrideDescriptor(window.HTMLScriptElement.prototype, 'text', {
							      getter: function getter() {
							        var text = native_methods_1.default.scriptTextGetter.call(this);
							        return header_1.remove(text);
							      },
							      setter: function setter(value) {
							        var processedValue = value ? script_1.processScript(String(value), true, false, url_1.convertToProxyUrl) : value;
							        native_methods_1.default.scriptTextSetter.call(this, processedValue);
							      }
							    });
							    overriding_1.overrideDescriptor(window.HTMLAnchorElement.prototype, 'text', {
							      getter: function getter() {
							        var textContent = native_methods_1.default.anchorTextGetter.call(this);
							        return WindowSandbox._removeProcessingInstructions(textContent);
							      },
							      setter: function setter(value) {
							        var processedValue = WindowSandbox._processTextPropValue(this, value);

							        dom_mutation_tracker_1.default.onChildrenChanged(this);
							        native_methods_1.default.anchorTextSetter.call(this, processedValue);
							      }
							    });
							    overriding_1.overrideDescriptor(window.Node.prototype, 'textContent', {
							      getter: function getter() {
							        if (windowSandbox._documentTitleStorageInitializer && dom_1.isTitleElement(this)) return windowSandbox._documentTitleStorageInitializer.storage.getTitleElementPropertyValue(this);
							        var textContent = native_methods_1.default.nodeTextContentGetter.call(this);
							        return WindowSandbox._removeProcessingInstructions(textContent);
							      },
							      setter: function setter(value) {
							        if (windowSandbox._documentTitleStorageInitializer && dom_1.isTitleElement(this)) {
							          windowSandbox._documentTitleStorageInitializer.storage.setTitleElementPropertyValue(this, value);

							          return;
							        }

							        var processedValue = WindowSandbox._processTextPropValue(this, value);

							        dom_mutation_tracker_1.default.onChildrenChanged(this);
							        native_methods_1.default.nodeTextContentSetter.call(this, processedValue);
							      }
							    });
							    overriding_1.overrideDescriptor(window[native_methods_1.default.elementAttributesPropOwnerName].prototype, 'attributes', {
							      getter: function getter() {
							        return attributes_1.getAttributes(this);
							      }
							    });
							    overriding_1.overrideFunction(window.DOMTokenList.prototype, 'add', this._createOverriddenDOMTokenListMethod(native_methods_1.default.tokenListAdd));
							    overriding_1.overrideFunction(window.DOMTokenList.prototype, 'remove', this._createOverriddenDOMTokenListMethod(native_methods_1.default.tokenListRemove));
							    overriding_1.overrideFunction(window.DOMTokenList.prototype, 'toggle', this._createOverriddenDOMTokenListMethod(native_methods_1.default.tokenListToggle));
							    if (native_methods_1.default.tokenListReplace) overriding_1.overrideFunction(window.DOMTokenList.prototype, 'replace', this._createOverriddenDOMTokenListMethod(native_methods_1.default.tokenListReplace));

							    if (native_methods_1.default.tokenListSupports) {
							      overriding_1.overrideFunction(window.DOMTokenList.prototype, 'supports', function () {
							        if (this[SANDBOX_DOM_TOKEN_LIST_OWNER]) {
							          var nativeTokenList = native_methods_1.default.iframeSandboxGetter.call(this[SANDBOX_DOM_TOKEN_LIST_OWNER]);
							          return native_methods_1.default.tokenListSupports.apply(nativeTokenList, arguments);
							        }

							        return native_methods_1.default.tokenListSupports.apply(this, arguments);
							      });
							    }

							    if (native_methods_1.default.tokenListValueSetter) {
							      overriding_1.overrideDescriptor(window.DOMTokenList.prototype, 'value', {
							        getter: null,
							        setter: function setter(value) {
							          var tokenListOwner = this[SANDBOX_DOM_TOKEN_LIST_OWNER];
							          native_methods_1.default.tokenListValueSetter.call(this, value);
							          if (tokenListOwner) // eslint-disable-next-line no-restricted-properties
							            windowSandbox.nodeSandbox.element.setAttributeCore(tokenListOwner, ['sandbox', this.value]);
							        }
							      });
							    }

							    overriding_1.overrideFunction(window.DOMImplementation.prototype, 'createHTMLDocument', function () {
							      for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
							        args[_key13] = arguments[_key13];
							      }

							      var doc = native_methods_1.default.createHTMLDocument.apply(this, args);
							      url_resolver_1.default.init(doc);
							      return doc;
							    });
							    overriding_1.overrideDescriptor(window.MutationRecord.prototype, 'nextSibling', {
							      getter: function getter() {
							        var originNextSibling = native_methods_1.default.mutationRecordNextSiblingGetter.call(this);
							        return windowSandbox.shadowUI.getMutationRecordNextSibling(originNextSibling);
							      }
							    });
							    overriding_1.overrideDescriptor(window.MutationRecord.prototype, 'previousSibling', {
							      getter: function getter() {
							        var originPrevSibling = native_methods_1.default.mutationRecordPrevSiblingGetter.call(this);
							        return windowSandbox.shadowUI.getMutationRecordPrevSibling(originPrevSibling);
							      }
							    });

							    if (native_methods_1.default.windowOriginGetter) {
							      overriding_1.overrideDescriptor(window, 'origin', {
							        getter: function getter() {
							          var proxyOrigin = native_methods_1.default.windowOriginGetter.call(this);
							          if (!proxyOrigin || proxyOrigin === 'null') return proxyOrigin;
							          var frame = dom_1.getFrameElement(windowSandbox.window);

							          if (frame) {
							            var sandbox = windowSandbox.nodeSandbox.element.getAttributeCore(frame, ['sandbox']);
							            if (typeof sandbox === 'string' && sandbox.indexOf('allow-same-origin') === -1) return 'null';
							          }

							          var parsedDestLocation = destLocation.getParsed(); // eslint-disable-next-line no-restricted-properties

							          if (parsedDestLocation && parsedDestLocation.protocol === 'file:') return 'null';
							          return destLocation.getOriginHeader();
							        },
							        setter: function setter(value) {
							          return native_methods_1.default.windowOriginSetter.call(this, value);
							        }
							      });
							    }

							    if (this._documentTitleStorageInitializer) {
							      overriding_1.overrideDescriptor(window.HTMLTitleElement.prototype, 'text', {
							        getter: function getter() {
							          return windowSandbox._documentTitleStorageInitializer.storage.getTitleElementPropertyValue(this);
							        },
							        setter: function setter(value) {
							          windowSandbox._documentTitleStorageInitializer.storage.setTitleElementPropertyValue(this, value);
							        }
							      });
							    }
							  };

							  return WindowSandbox;
							}(base_1.default);

							exports.default = WindowSandbox;
							module.exports = exports.default;
						}
					},
					"shadow-ui.js": function (exports, module, require) {
						

						function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

						function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						var __importStar = void 0 && (void 0).__importStar || function (mod) {
						  if (mod && mod.__esModule) return mod;
						  var result = {};
						  if (mod != null) for (var k in mod) {
						    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
						  }
						  result["default"] = mod;
						  return result;
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var internal_properties_1 = __importDefault(require("../../processing/dom/internal-properties"));

						var base_1 = __importDefault(require("./base"));

						var index_1 = __importDefault(require("./node/index"));

						var native_methods_1 = __importDefault(require("./native-methods"));

						var domUtils = __importStar(require("../utils/dom"));

						var dom_processor_1 = __importDefault(require("../dom-processor"));

						var position_1 = require("../utils/position");

						var class_name_1 = __importDefault(require("../../shadow-ui/class-name"));

						var style_1 = require("../utils/style");

						var event_1 = require("../utils/event");

						var query_selector_1 = require("../utils/query-selector");

						var html_collection_wrapper_1 = __importDefault(require("./node/live-node-list/html-collection-wrapper"));

						var feature_detection_1 = require("../utils/feature-detection");

						var browser_1 = require("../utils/browser");

						var remove_element_1 = __importDefault(require("../utils/remove-element"));

						var overriding_1 = require("../utils/overriding");

						var IS_NON_STATIC_POSITION_RE = /fixed|relative|absolute/;
						var CLASSNAME_RE = /\.((?:\\.|[-\w]|[^\x00-\xa0])+)/g;
						var IS_SHADOW_CONTAINER_FLAG = 'hammerhead|shadow-ui|container-flag';
						var IS_SHADOW_CONTAINER_COLLECTION_FLAG = 'hammerhead|shadow-ui|container-collection-flag';
						var HTML_COLLECTION_WRAPPER = 'hammerhead|shadow-ui|html-collection-wrapper';

						var ShadowUI = /*#__PURE__*/function (_base_1$default) {
						  _inheritsLoose(ShadowUI, _base_1$default);

						  function ShadowUI(_nodeMutation, _messageSandbox, _iframeSandbox, _ieDebugSandbox) {
						    var _this;

						    _this = _base_1$default.call(this) || this;
						    _this._nodeMutation = _nodeMutation;
						    _this._messageSandbox = _messageSandbox;
						    _this._iframeSandbox = _iframeSandbox;
						    _this._ieDebugSandbox = _ieDebugSandbox;
						    _this.BODY_CONTENT_CHANGED_COMMAND = 'hammerhead|command|body-content-changed';
						    _this.ROOT_CLASS = 'root';
						    _this.ROOT_ID = 'root';
						    _this.HIDDEN_CLASS = 'hidden';
						    _this.BLIND_CLASS = 'blind';
						    _this.root = null;
						    _this.lastActiveElement = null;
						    _this.uiStyleSheetsHtmlBackup = null;
						    _this.wrapperCreators = _this._createWrapperCreators();

						    _this._initEventCallbacks();

						    return _this;
						  }

						  var _proto = ShadowUI.prototype;

						  _proto._initEventCallbacks = function _initEventCallbacks() {
						    var _this2 = this;

						    this.runTaskScriptEventCallback = function (iframe) {
						      var contentDocument = native_methods_1.default.contentDocumentGetter.call(iframe);
						      var iframeHead = contentDocument.head;
						      var iframeBody = contentDocument.body;

						      _this2._restoreUIStyleSheets(iframeHead, _this2._getUIStyleSheetsHtml());

						      _this2.markShadowUIContainers(iframeHead, iframeBody);
						    };

						    this.beforeDocumentCleanedEventCallback = function () {
						      _this2.uiStyleSheetsHtmlBackup = _this2._getUIStyleSheetsHtml();
						    };

						    this.documentCleanedEventCallback = function (e) {
						      _this2._restoreUIStyleSheets(e.document.head, _this2.uiStyleSheetsHtmlBackup);

						      _this2.uiStyleSheetsHtmlBackup = null;

						      _this2.markShadowUIContainers(_this2.document.head, _this2.document.body);
						    };

						    this.documentClosedEventCallback = function (document) {
						      _this2._restoreUIStyleSheets(document.head, _this2.uiStyleSheetsHtmlBackup);

						      _this2.uiStyleSheetsHtmlBackup = null;

						      _this2.markShadowUIContainers(document.head, document.body);
						    };

						    this.bodyContentChangedEventCallback = function (body) {
						      var elContextWindow = body[internal_properties_1.default.processedContext];

						      if (elContextWindow !== window) {
						        _this2._messageSandbox.sendServiceMsg({
						          cmd: _this2.BODY_CONTENT_CHANGED_COMMAND
						        }, elContextWindow);
						      } else _this2.onBodyElementMutation();
						    };

						    this.serviceMsgReceivedEventCallback = function (e) {
						      if (e.message.cmd === _this2.BODY_CONTENT_CHANGED_COMMAND) _this2.onBodyElementMutation();
						    };

						    this.bodyCreatedEventCallback = function (body) {
						      return _this2.markShadowUIContainers(_this2.document.head, body);
						    };
						  };

						  ShadowUI._filterElement = function _filterElement(el) {
						    return el && domUtils.isShadowUIElement(el) ? null : el;
						  };

						  _proto._filterList = function _filterList(list, listLength, predicate) {
						    var filteredList = [];

						    for (var i = 0; i < listLength; i++) {
						      var el = predicate(list[i]);
						      if (el) filteredList.push(list[i]);
						    }

						    native_methods_1.default.objectDefineProperty(filteredList, 'item', {
						      value: function value(index) {
						        return index >= filteredList.length ? null : filteredList[index];
						      }
						    });

						    if (list.namedItem) {
						      native_methods_1.default.objectDefineProperty(filteredList, 'namedItem', {
						        value: function value(name) {
						          return list.namedItem(name);
						        }
						      });
						    }

						    return filteredList.length === listLength ? list : filteredList;
						  };

						  _proto._filterNodeList = function _filterNodeList(nodeList, originLength) {
						    return this._filterList(nodeList, originLength, function (item) {
						      return ShadowUI._filterElement(item);
						    });
						  };

						  _proto._filterStyleSheetList = function _filterStyleSheetList(styleSheetList, originLength) {
						    return this._filterList(styleSheetList, originLength, function (item) {
						      return ShadowUI._filterElement(item.ownerNode);
						    });
						  };

						  ShadowUI._getFirstNonShadowElement = function _getFirstNonShadowElement(nodeList) {
						    var length = native_methods_1.default.nodeListLengthGetter.call(nodeList);

						    for (var i = 0; i < length; i++) {
						      if (ShadowUI._filterElement(nodeList[i])) return nodeList[i];
						    }

						    return null;
						  };

						  _proto._createWrapperCreators = function _createWrapperCreators() {
						    var sandbox = this;
						    return {
						      getElementsByClassName: function getElementsByClassName(nativeGetElementsByClassNameFnName) {
						        return function () {
						          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
						            args[_key] = arguments[_key];
						          }

						          var elements = native_methods_1.default[nativeGetElementsByClassNameFnName].apply(this, args);
						          var length = native_methods_1.default.htmlCollectionLengthGetter.call(elements);
						          return sandbox._filterNodeList(elements, length);
						        };
						      },
						      getElementsByTagName: function getElementsByTagName(nativeGetElementsByTagNameFnName) {
						        return function () {
						          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
						            args[_key2] = arguments[_key2];
						          }

						          var nativeCollection = native_methods_1.default[nativeGetElementsByTagNameFnName].apply(this, args);
						          var tagName = args[0];
						          if (typeof tagName !== 'string' || !domUtils.isHeadOrBodyOrHtmlElement(this) && !domUtils.isFormElement(this) && tagName.toLowerCase() !== 'input' && nativeGetElementsByTagNameFnName !== 'getElementsByTagName') return nativeCollection;
						          if (!nativeCollection[HTML_COLLECTION_WRAPPER]) // NOTE: This changes how the native method behaves. The returned collection will have this wrapper attached
						            // if the method was called with the same tagName parameter.
						            // This allows skipping the search if the DOM tree has not changed since the last call.
						            nativeCollection[HTML_COLLECTION_WRAPPER] = new html_collection_wrapper_1.default(nativeCollection, tagName);else nativeCollection[HTML_COLLECTION_WRAPPER]._refreshCollection();
						          return nativeCollection[HTML_COLLECTION_WRAPPER];
						        };
						      },
						      querySelector: function querySelector(nativeQuerySelectorFnName, nativeQuerySelectorAllFnName) {
						        return function () {
						          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
						            args[_key3] = arguments[_key3];
						          }

						          if (typeof args[0] === 'string') args[0] = index_1.default.processSelector(args[0]);
						          var element = native_methods_1.default[nativeQuerySelectorFnName].apply(this, args);

						          var filteredElement = ShadowUI._filterElement(element);

						          if (!element || filteredElement) return filteredElement;
						          return ShadowUI._getFirstNonShadowElement(native_methods_1.default[nativeQuerySelectorAllFnName].apply(this, args));
						        };
						      },
						      querySelectorAll: function querySelectorAll(nativeQuerySelectorAllFnName) {
						        return function () {
						          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
						            args[_key4] = arguments[_key4];
						          }

						          if (typeof args[0] === 'string') args[0] = index_1.default.processSelector(args[0]);
						          var list = native_methods_1.default[nativeQuerySelectorAllFnName].apply(this, args);
						          var length = native_methods_1.default.nodeListLengthGetter.call(list);
						          return sandbox._filterNodeList(list, length);
						        };
						      }
						    };
						  };

						  _proto._markShadowUIContainerAndCollections = function _markShadowUIContainerAndCollections(containerEl) {
						    ShadowUI._markAsShadowContainer(containerEl);

						    ShadowUI.markAsShadowContainerCollection(containerEl.children);
						    ShadowUI.markAsShadowContainerCollection(native_methods_1.default.nodeChildNodesGetter.call(containerEl));
						  };

						  _proto.markShadowUIContainers = function markShadowUIContainers(head, body) {
						    if (head) this._markShadowUIContainerAndCollections(head);
						    if (body) this._markShadowUIContainerAndCollections(body);
						  };

						  _proto._bringRootToWindowTopLeft = function _bringRootToWindowTopLeft() {
						    var rootHasParentWithNonStaticPosition = false;
						    var parent = native_methods_1.default.nodeParentNodeGetter.call(this.root);

						    while (parent) {
						      var elementPosition = style_1.get(parent, 'position');
						      if (IS_NON_STATIC_POSITION_RE.test(elementPosition)) rootHasParentWithNonStaticPosition = true;
						      parent = native_methods_1.default.nodeParentNodeGetter.call(parent);
						    }

						    if (rootHasParentWithNonStaticPosition) {
						      var rootOffset = position_1.getOffsetPosition(this.root);

						      if (rootOffset.left !== 0 || rootOffset.top !== 0) {
						        var currentRootLeft = parseFloat(style_1.get(this.root, 'left')) || 0;
						        var currentRootTop = parseFloat(style_1.get(this.root, 'top')) || 0;
						        var newRootLeft = currentRootLeft - rootOffset.left + 'px';
						        var newRootTop = currentRootTop - rootOffset.top + 'px';
						        style_1.set(this.root, 'left', newRootLeft);
						        style_1.set(this.root, 'top', newRootTop);
						      }
						    }
						  };

						  _proto._overrideDocumentMethods = function _overrideDocumentMethods(window, document) {
						    var shadowUI = this;
						    var docProto = window.Document.prototype;
						    overriding_1.overrideFunction(docProto, 'elementFromPoint', function () {
						      // NOTE: T212974
						      shadowUI.addClass(shadowUI.getRoot(), shadowUI.HIDDEN_CLASS);

						      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
						        args[_key5] = arguments[_key5];
						      }

						      var res = ShadowUI._filterElement(native_methods_1.default.elementFromPoint.apply(this, args));

						      shadowUI.removeClass(shadowUI.getRoot(), shadowUI.HIDDEN_CLASS);
						      return res;
						    });

						    if (document.caretRangeFromPoint) {
						      overriding_1.overrideFunction(docProto, 'caretRangeFromPoint', function () {
						        shadowUI.addClass(shadowUI.getRoot(), shadowUI.HIDDEN_CLASS);

						        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
						          args[_key6] = arguments[_key6];
						        }

						        var res = native_methods_1.default.caretRangeFromPoint.apply(this, args);
						        if (res && res.startContainer && !ShadowUI._filterElement(res.startContainer)) res = null;
						        shadowUI.removeClass(shadowUI.getRoot(), shadowUI.HIDDEN_CLASS);
						        return res;
						      });
						    }

						    if (document.caretPositionFromPoint) {
						      overriding_1.overrideFunction(docProto, 'caretPositionFromPoint', function () {
						        shadowUI.addClass(shadowUI.getRoot(), shadowUI.HIDDEN_CLASS);

						        for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
						          args[_key7] = arguments[_key7];
						        }

						        var res = native_methods_1.default.caretPositionFromPoint.apply(this, args);
						        if (res && res.offsetNode && !ShadowUI._filterElement(res.offsetNode)) res = null;
						        shadowUI.removeClass(shadowUI.getRoot(), shadowUI.HIDDEN_CLASS);
						        return res;
						      });
						    }

						    overriding_1.overrideFunction(docProto, 'getElementById', function () {
						      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
						        args[_key8] = arguments[_key8];
						      }

						      return ShadowUI._filterElement(native_methods_1.default.getElementById.apply(this, args));
						    });
						    overriding_1.overrideFunction(docProto, 'getElementsByName', function () {
						      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
						        args[_key9] = arguments[_key9];
						      }

						      var elements = native_methods_1.default.getElementsByName.apply(this, args);
						      var length = feature_detection_1.getElementsByNameReturnsHTMLCollection ? native_methods_1.default.htmlCollectionLengthGetter.call(elements) : native_methods_1.default.nodeListLengthGetter.call(elements);
						      return shadowUI._filterNodeList(elements, length);
						    });
						    overriding_1.overrideFunction(docProto, 'getElementsByClassName', this.wrapperCreators.getElementsByClassName('getElementsByClassName'));
						    overriding_1.overrideFunction(docProto, 'getElementsByTagName', this.wrapperCreators.getElementsByTagName('getElementsByTagName'));
						    overriding_1.overrideFunction(docProto, 'querySelector', this.wrapperCreators.querySelector('querySelector', 'querySelectorAll'));
						    overriding_1.overrideFunction(docProto, 'querySelectorAll', this.wrapperCreators.querySelectorAll('querySelectorAll'));
						  };

						  _proto._overrideElementMethods = function _overrideElementMethods(window) {
						    var elementProto = window.Element.prototype;
						    var bodyProto = window.HTMLBodyElement.prototype;
						    var headProto = window.HTMLHeadElement.prototype;
						    overriding_1.overrideFunction(elementProto, 'getElementsByTagName', this.wrapperCreators.getElementsByTagName('elementGetElementsByTagName'));
						    overriding_1.overrideFunction(bodyProto, 'getElementsByClassName', this.wrapperCreators.getElementsByClassName('elementGetElementsByClassName'));
						    overriding_1.overrideFunction(bodyProto, 'querySelector', this.wrapperCreators.querySelector('elementQuerySelector', 'elementQuerySelectorAll'));
						    overriding_1.overrideFunction(bodyProto, 'querySelectorAll', this.wrapperCreators.querySelectorAll('elementQuerySelectorAll'));
						    overriding_1.overrideFunction(headProto, 'getElementsByClassName', bodyProto.getElementsByClassName);
						    overriding_1.overrideFunction(headProto, 'querySelector', bodyProto.querySelector);
						    overriding_1.overrideFunction(headProto, 'querySelectorAll', bodyProto.querySelectorAll);
						  };

						  _proto._getUIStyleSheetsHtml = function _getUIStyleSheetsHtml() {
						    var stylesSelector = 'link.' + class_name_1.default.uiStylesheet;
						    var stylesheets = this.nativeMethods.querySelectorAll.call(this.document, stylesSelector);
						    var length = this.nativeMethods.nodeListLengthGetter.call(stylesheets);
						    var result = '';

						    for (var i = 0; i < length; i++) {
						      result += native_methods_1.default.elementOuterHTMLGetter.call(stylesheets[i]);
						    }

						    return result;
						  };

						  _proto._restoreUIStyleSheets = function _restoreUIStyleSheets(head, uiStyleSheetsHtml) {
						    if (!head || !uiStyleSheetsHtml) return;
						    var parser = this.nativeMethods.createElement.call(this.document, 'div');
						    native_methods_1.default.elementInnerHTMLSetter.call(parser, uiStyleSheetsHtml);
						    var length = native_methods_1.default.htmlCollectionLengthGetter.call(parser.children);

						    for (var i = 0; i < length; i++) {
						      var refNode = head.children[i] || null;
						      var newNode = native_methods_1.default.cloneNode.call(parser.children[i]);
						      ShadowUI.markElementAsShadow(newNode);
						      this.nativeMethods.insertBefore.call(head, newNode, refNode);
						    }
						  };

						  _proto._markScriptsAndStylesAsShadowInHead = function _markScriptsAndStylesAsShadowInHead(head) {
						    // NOTE: document.head equals null after call 'document.open' function
						    if (!head) return;
						    var length = native_methods_1.default.htmlCollectionLengthGetter.call(head.children);

						    for (var i = 0; i < length; i++) {
						      var headChild = head.children[i];
						      if (ShadowUI.containsShadowUIClassPostfix(headChild)) ShadowUI.markElementAsShadow(headChild);
						    }
						  };

						  _proto.getRoot = function getRoot() {
						    var _this3 = this;

						    // GH-2418
						    if (browser_1.isChrome && !ShadowUI.isShadowContainer(this.document.body)) this._markShadowUIContainerAndCollections(this.document.body);

						    if (!this.root ||
						    /* NOTE: T225944 */
						    !this.document.body.contains(this.root)) {
						      if (!this.root) {
						        // NOTE: B254893
						        this.root = native_methods_1.default.createElement.call(this.document, 'div');
						        native_methods_1.default.setAttribute.call(this.root, 'id', ShadowUI.patchId(this.ROOT_ID));
						        native_methods_1.default.setAttribute.call(this.root, 'contenteditable', 'false');
						        this.addClass(this.root, this.ROOT_CLASS);
						        ShadowUI.markElementAsShadow(this.root);
						        native_methods_1.default.appendChild.call(this.document.body, this.root);
						        var nativeDocumentAddEventListener = native_methods_1.default.documentAddEventListener || native_methods_1.default.addEventListener;

						        for (var _i2 = 0, _dom_processor_1$defa2 = dom_processor_1.default.EVENTS; _i2 < _dom_processor_1$defa2.length; _i2++) {
						          var event = _dom_processor_1$defa2[_i2];
						          native_methods_1.default.addEventListener.call(this.root, event, event_1.stopPropagation);
						        }

						        this._bringRootToWindowTopLeft();

						        nativeDocumentAddEventListener.call(this.document, 'DOMContentLoaded', function () {
						          _this3.onBodyElementMutation();

						          _this3._bringRootToWindowTopLeft();
						        });
						      } else native_methods_1.default.appendChild.call(this.document.body, this.root);
						    }

						    return this.root;
						  };

						  _proto.attach = function attach(window) {
						    _base_1$default.prototype.attach.call(this, window, window.document);

						    this.markShadowUIContainers(this.document.head, this.document.body);

						    this._overrideDocumentMethods(window, window.document);

						    this._overrideElementMethods(window);

						    this._markScriptsAndStylesAsShadowInHead(window.document.head);

						    this._initEvents();
						  };

						  _proto._initEvents = function _initEvents() {
						    this._iframeSandbox.on(this._iframeSandbox.RUN_TASK_SCRIPT_EVENT, this.runTaskScriptEventCallback);

						    this._nodeMutation.on(this._nodeMutation.BEFORE_DOCUMENT_CLEANED_EVENT, this.beforeDocumentCleanedEventCallback);

						    this._nodeMutation.on(this._nodeMutation.DOCUMENT_CLEANED_EVENT, this.documentCleanedEventCallback);

						    this._nodeMutation.on(this._nodeMutation.DOCUMENT_CLOSED_EVENT, this.documentClosedEventCallback);

						    this._nodeMutation.on(this._nodeMutation.BODY_CONTENT_CHANGED_EVENT, this.bodyContentChangedEventCallback);

						    this._messageSandbox.on(this._messageSandbox.SERVICE_MSG_RECEIVED_EVENT, this.serviceMsgReceivedEventCallback);

						    this._nodeMutation.on(this._nodeMutation.BODY_CREATED_EVENT, this.bodyCreatedEventCallback);
						  };

						  _proto.onBodyElementMutation = function onBodyElementMutation() {
						    if (!this.root || !this.document.body) return;
						    var isRootInDom = domUtils.closest(this.root, 'html');
						    var isRootLastChild = !this.nativeMethods.elementNextElementSiblingGetter.call(this.root); // NOTE: Fix for B239138 - The 'Cannot read property 'document' of null' error
						    // is thrown on recording on the unroll.me site. There was an issue when
						    // document.body was replaced, so we need to reattach a UI to a new body manually.

						    var isRootInBody = native_methods_1.default.nodeParentNodeGetter.call(this.root) === this.document.body;
						    if (!(isRootInDom && isRootLastChild && isRootInBody)) this.nativeMethods.appendChild.call(this.document.body, this.root);
						    this.markShadowUIContainers(this.document.head, this.document.body);
						  } // Accessors
						  ;

						  _proto.getFirstChild = function getFirstChild(el) {
						    var childNodes = native_methods_1.default.nodeChildNodesGetter.call(el);
						    var length = native_methods_1.default.nodeListLengthGetter.call(childNodes);

						    var filteredNodes = this._filterNodeList(childNodes, length);

						    return filteredNodes[0] || null;
						  };

						  _proto.getFirstElementChild = function getFirstElementChild(el) {
						    var length = native_methods_1.default.htmlCollectionLengthGetter.call(el.children);

						    var filteredNodes = this._filterNodeList(el.children, length);

						    return filteredNodes[0] || null;
						  };

						  _proto.getLastChild = function getLastChild(el) {
						    var childNodes = native_methods_1.default.nodeChildNodesGetter.call(el);
						    var length = native_methods_1.default.nodeListLengthGetter.call(childNodes);

						    var filteredNodes = this._filterNodeList(childNodes, length);

						    var index = childNodes === filteredNodes ? length - 1 : filteredNodes.length - 1;
						    return index >= 0 ? filteredNodes[index] : null;
						  };

						  _proto.getLastElementChild = function getLastElementChild(el) {
						    var length = native_methods_1.default.htmlCollectionLengthGetter.call(el.children);

						    var filteredNodes = this._filterNodeList(el.children, length);

						    var index = el.children === filteredNodes ? length - 1 : filteredNodes.length - 1;
						    return index >= 0 ? filteredNodes[index] : null;
						  };

						  _proto.getNextSibling = function getNextSibling(el) {
						    if (!el) return el;

						    do {
						      el = native_methods_1.default.nodeNextSiblingGetter.call(el);
						    } while (el && domUtils.isShadowUIElement(el));

						    return el;
						  };

						  _proto.getPrevSibling = function getPrevSibling(el) {
						    if (!el) return el;

						    do {
						      el = native_methods_1.default.nodePrevSiblingGetter.call(el);
						    } while (el && domUtils.isShadowUIElement(el));

						    return el;
						  };

						  _proto.getMutationRecordNextSibling = function getMutationRecordNextSibling(el) {
						    if (!el) return el;

						    while (el && domUtils.isShadowUIElement(el)) {
						      el = native_methods_1.default.nodeNextSiblingGetter.call(el);
						    }

						    return el;
						  };

						  _proto.getMutationRecordPrevSibling = function getMutationRecordPrevSibling(el) {
						    if (!el) return el;

						    while (el && domUtils.isShadowUIElement(el)) {
						      el = native_methods_1.default.nodePrevSiblingGetter.call(el);
						    }

						    return el;
						  };

						  _proto.getNextElementSibling = function getNextElementSibling(el) {
						    do {
						      el = native_methods_1.default.elementNextElementSiblingGetter.call(el);
						    } while (el && domUtils.isShadowUIElement(el));

						    return el;
						  };

						  _proto.getPrevElementSibling = function getPrevElementSibling(el) {
						    do {
						      el = native_methods_1.default.elementPrevElementSiblingGetter.call(el);
						    } while (el && domUtils.isShadowUIElement(el));

						    return el;
						  } // Utils
						  ;

						  ShadowUI._checkElementsPosition = function _checkElementsPosition(collection, length) {
						    if (!length) return;
						    var shadowUIElements = [];

						    for (var i = 0; i < length; i++) {
						      var item = collection[i];
						      if (domUtils.isShadowUIElement(item)) shadowUIElements.push(item);
						    }

						    var collectionOwner = shadowUIElements.length && native_methods_1.default.nodeParentNodeGetter.call(shadowUIElements[0]);

						    for (var _i4 = 0; _i4 < shadowUIElements.length; _i4++) {
						      var shadowUIElement = shadowUIElements[_i4];
						      native_methods_1.default.appendChild.call(collectionOwner, shadowUIElement);
						    }
						  };

						  ShadowUI._hasFlag = function _hasFlag(obj, flag) {
						    try {
						      return !!obj[flag];
						    } catch (e) {
						      return false;
						    }
						  } // IE11 and Edge have a strange behavior: shadow container collection flag may be lost (GH-1763 and GH-2034)
						  ;

						  ShadowUI._hasCollectionFlagForIE = function _hasCollectionFlagForIE(obj, flag) {
						    try {
						      if (flag in obj) return obj[flag];
						      var parent = native_methods_1.default.nodeParentNodeGetter.call(obj[0]);
						      var result = domUtils.isHeadOrBodyElement(parent) || domUtils.isFormElement(parent);
						      native_methods_1.default.objectDefineProperty(obj, IS_SHADOW_CONTAINER_COLLECTION_FLAG, {
						        value: result,
						        configurable: true
						      });
						      return result;
						    } catch (e) {
						      return false;
						    }
						  };

						  ShadowUI.isShadowContainer = function isShadowContainer(el) {
						    return ShadowUI._hasFlag(el, IS_SHADOW_CONTAINER_FLAG);
						  };

						  ShadowUI.isShadowContainerCollection = function isShadowContainerCollection(collection, length) {
						    return browser_1.isIE && length ? ShadowUI._hasCollectionFlagForIE(collection, IS_SHADOW_CONTAINER_COLLECTION_FLAG) : ShadowUI._hasFlag(collection, IS_SHADOW_CONTAINER_COLLECTION_FLAG);
						  };

						  ShadowUI._isShadowUIChildListMutation = function _isShadowUIChildListMutation(mutation) {
						    if (domUtils.isShadowUIElement(mutation.target)) return true;
						    var removedNodesLength = native_methods_1.default.nodeListLengthGetter.call(mutation.removedNodes);

						    for (var i = 0; i < removedNodesLength; i++) {
						      if (domUtils.isShadowUIElement(mutation.removedNodes[i])) return true;
						    }

						    var addedNodesLength = native_methods_1.default.nodeListLengthGetter.call(mutation.addedNodes);

						    for (var _i5 = 0; _i5 < addedNodesLength; _i5++) {
						      if (domUtils.isShadowUIElement(mutation.addedNodes[_i5])) return true;
						    }

						    return false;
						  };

						  ShadowUI._isShadowUIAttributeMutation = function _isShadowUIAttributeMutation(mutation) {
						    return domUtils.isShadowUIElement(mutation.target) || domUtils.isHammerheadAttr(mutation.attributeName);
						  };

						  ShadowUI._isShadowUICharacterDataMutation = function _isShadowUICharacterDataMutation(mutation) {
						    return domUtils.isShadowUIElement(mutation.target);
						  };

						  ShadowUI.isShadowUIMutation = function isShadowUIMutation(mutation) {
						    switch (mutation.type) {
						      case 'childList':
						        return ShadowUI._isShadowUIChildListMutation(mutation);

						      case 'attributes':
						        return ShadowUI._isShadowUIAttributeMutation(mutation);

						      case 'characterData':
						        return ShadowUI._isShadowUICharacterDataMutation(mutation);

						      default:
						        return false;
						    }
						  };

						  ShadowUI.removeSelfRemovingScripts = function removeSelfRemovingScripts(document) {
						    var selfRemovingScripts = native_methods_1.default.querySelectorAll.call(document, '.' + class_name_1.default.selfRemovingScript);
						    var length = native_methods_1.default.nodeListLengthGetter.call(selfRemovingScripts);

						    for (var i = 0; i < length; i++) {
						      remove_element_1.default(selfRemovingScripts[i]);
						    }
						  } // API
						  ;

						  _proto.getShadowUICollectionLength = function getShadowUICollectionLength(collection, length) {
						    var shadowUIElementCount = 0;

						    for (var i = 0; i < length; i++) {
						      if (domUtils.isShadowUIElement(collection[i])) shadowUIElementCount++;
						    }

						    if (shadowUIElementCount && !this._ieDebugSandbox.isDebuggerInitiator()) ShadowUI._checkElementsPosition(collection, length);
						    return length - shadowUIElementCount;
						  } // NOTE: this method cannot be static because it is a part of the public API
						  ;

						  _proto.addClass = function addClass(el, value) {
						    var patchedClass = ShadowUI.patchClassNames(value);
						    domUtils.addClass(el, patchedClass);
						  } // NOTE: this method cannot be static because it is a part of the public API
						  ;

						  _proto.removeClass = function removeClass(elem, value) {
						    var patchedClass = ShadowUI.patchClassNames(value);
						    domUtils.removeClass(elem, patchedClass);
						  };

						  ShadowUI.hasClass = function hasClass(el, value) {
						    var patchedClass = ShadowUI.patchClassNames(value);
						    return domUtils.hasClass(el, patchedClass);
						  };

						  ShadowUI.patchId = function patchId(value) {
						    return value + class_name_1.default.postfix;
						  };

						  ShadowUI.patchClassNames = function patchClassNames(value) {
						    var names = value.split(/\s+/);

						    for (var i = 0; i < names.length; i++) {
						      names[i] += class_name_1.default.postfix;
						    }

						    return names.join(' ');
						  };

						  _proto.select = function select(selector, context) {
						    var patchedSelector = selector.replace(CLASSNAME_RE, function (className) {
						      return className + class_name_1.default.postfix;
						    });
						    return context ? native_methods_1.default.elementQuerySelectorAll.call(context, patchedSelector) : native_methods_1.default.querySelectorAll.call(this.document, patchedSelector);
						  };

						  _proto.setBlind = function setBlind(value) {
						    if (value) this.addClass(this.getRoot(), this.BLIND_CLASS);else this.removeClass(this.getRoot(), this.BLIND_CLASS);
						  };

						  _proto.getLastActiveElement = function getLastActiveElement() {
						    return this.lastActiveElement;
						  };

						  _proto.setLastActiveElement = function setLastActiveElement(el) {
						    this.lastActiveElement = el;
						  };

						  _proto.insertBeforeRoot = function insertBeforeRoot(newNodes) {
						    var rootEl = this.getRoot();
						    var rootParent = this.nativeMethods.nodeParentNodeGetter.call(rootEl);
						    var lastParentChild = this.nativeMethods.nodeLastChildGetter.call(rootParent); // GH-2418

						    if (lastParentChild != rootEl) native_methods_1.default.appendChild.call(rootParent, rootEl);

						    if (newNodes.length > 1 || typeof newNodes[0] !== 'object') {
						      var fragment = document.createDocumentFragment.call(this.document);

						      for (var _i7 = 0; _i7 < newNodes.length; _i7++) {
						        var node = newNodes[_i7];
						        if (typeof node === 'string') node = native_methods_1.default.createTextNode.call(this.document, node);
						        native_methods_1.default.appendChild.call(fragment, node);
						      }

						      return native_methods_1.default.insertBefore.call(rootParent, fragment, rootEl);
						    }

						    return native_methods_1.default.insertBefore.call(rootParent, newNodes[0], rootEl);
						  };

						  ShadowUI.markElementAsShadow = function markElementAsShadow(el) {
						    el[internal_properties_1.default.shadowUIElement] = true;
						  } // GH-2009
						  ;

						  ShadowUI.markFormAsShadow = function markFormAsShadow(form) {
						    ShadowUI._markAsShadowContainer(form);

						    ShadowUI.markAsShadowContainerCollection(form.elements);
						    ShadowUI.markAsShadowContainerCollection(form.children);
						    var childNodes = native_methods_1.default.nodeChildNodesGetter.call(form);
						    ShadowUI.markAsShadowContainerCollection(childNodes);
						  };

						  ShadowUI.markElementAndChildrenAsShadow = function markElementAndChildrenAsShadow(el) {
						    ShadowUI.markElementAsShadow(el); // NOTE: For Text, Comment and ProcessingInstruction nodes

						    if (!el.querySelectorAll) return;
						    var childElements = query_selector_1.getNativeQuerySelectorAll(el).call(el, '*');
						    var length = native_methods_1.default.nodeListLengthGetter.call(childElements);

						    for (var i = 0; i < length; i++) {
						      ShadowUI.markElementAsShadow(childElements[i]);
						    }
						  };

						  ShadowUI._markAsShadowContainer = function _markAsShadowContainer(container) {
						    native_methods_1.default.objectDefineProperty(container, IS_SHADOW_CONTAINER_FLAG, {
						      value: true
						    });
						  };

						  ShadowUI.markAsShadowContainerCollection = function markAsShadowContainerCollection(collection) {
						    native_methods_1.default.objectDefineProperty(collection, IS_SHADOW_CONTAINER_COLLECTION_FLAG, {
						      value: true,
						      configurable: true
						    });
						  };

						  ShadowUI.containsShadowUIClassPostfix = function containsShadowUIClassPostfix(element) {
						    return typeof element.className === 'string' && element.className.indexOf(class_name_1.default.postfix) !== -1;
						  };

						  return ShadowUI;
						}(base_1.default);

						exports.default = ShadowUI;
						module.exports = exports.default;
					},
					"storages": {
						"index.js": function (exports, module, require) {
							

							function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

							function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							var __importStar = void 0 && (void 0).__importStar || function (mod) {
							  if (mod && mod.__esModule) return mod;
							  var result = {};
							  if (mod != null) for (var k in mod) {
							    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
							  }
							  result["default"] = mod;
							  return result;
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var base_1 = __importDefault(require("../base"));

							var wrapper_1 = __importDefault(require("./wrapper"));

							var settings_1 = __importDefault(require("../../settings"));

							var destLocation = __importStar(require("../../utils/destination-location"));

							var dom_1 = require("../../utils/dom");

							var get_storage_key_1 = __importDefault(require("../../../utils/get-storage-key"));

							var internal_properties_1 = __importDefault(require("../../../processing/dom/internal-properties"));

							var JSON = __importStar(require("json-hammerhead"));

							var overriding_1 = require("../../utils/overriding");

							var index_1 = __importDefault(require("../../index"));

							var native_methods_1 = __importDefault(require("../native-methods"));

							var API_KEY_PREFIX = 'hammerhead|api-key-prefix|';
							var STORAGE_PROPS = native_methods_1.default.arrayConcat.call(native_methods_1.default.objectKeys(Storage.prototype), wrapper_1.default.INTERNAL_METHODS);

							var StorageSandbox = /*#__PURE__*/function (_base_1$default) {
							  _inheritsLoose(StorageSandbox, _base_1$default);

							  function StorageSandbox(_listeners, _unloadSandbox, _eventSimulator) {
							    var _this;

							    _this = _base_1$default.call(this) || this;
							    _this._listeners = _listeners;
							    _this._unloadSandbox = _unloadSandbox;
							    _this._eventSimulator = _eventSimulator;
							    _this.localStorageProxy = null;
							    _this.sessionStorageProxy = null;
							    _this.intervalId = null;
							    _this.isLocked = false;
							    return _this;
							  }

							  var _proto = StorageSandbox.prototype;

							  _proto._simulateStorageEvent = function _simulateStorageEvent(storageArea, e) {
							    if (this.isDeactivated() || storageArea.unwrapProxy().getContext() === this.window) return;
							    var event = e;
							    event.storageArea = storageArea;

							    this._eventSimulator.storage(this.window, event);
							  } // NOTE: We are using a single storage wrapper instance for all same-domain windows.
							  // This wrapper is saved in the top same-domain window's sandbox.
							  ;

							  _proto._createStorageWrappers = function _createStorageWrappers() {
							    var _this2 = this;

							    // eslint-disable-next-line no-restricted-properties
							    var host = destLocation.getParsed().host;
							    var sessionId = settings_1.default.get().sessionId;
							    var storageKey = get_storage_key_1.default(sessionId, host);
							    var topSameDomainWindow = dom_1.getTopSameDomainWindow(this.window);
							    var topSameDomainHammerhead = topSameDomainWindow[internal_properties_1.default.hammerhead];
							    var topSameDomainStorageSandbox = topSameDomainHammerhead.sandbox.storageSandbox; // NOTE: Use the already created wrappers.

							    if (topSameDomainStorageSandbox !== this) {
							      this.localStorageProxy = topSameDomainStorageSandbox.localStorageProxy;
							      this.sessionStorageProxy = topSameDomainStorageSandbox.sessionStorageProxy;
							    } // NOTE: Or create new.
							    else {
							        var nativeLocalStorage = this.nativeMethods.winLocalStorageGetter.call(this.window);
							        var nativeSessionStorage = this.nativeMethods.winSessionStorageGetter.call(this.window);
							        this.localStorageProxy = wrapper_1.default.create(this.window, nativeLocalStorage, storageKey);
							        this.sessionStorageProxy = wrapper_1.default.create(this.window, nativeSessionStorage, storageKey);

							        var saveToNativeStorages = function saveToNativeStorages() {
							          if (_this2.isLocked) return;

							          _this2.localStorageProxy.unwrapProxy().saveToNativeStorage();

							          _this2.sessionStorageProxy.unwrapProxy().saveToNativeStorage();
							        };

							        this._unloadSandbox.on(this._unloadSandbox.UNLOAD_EVENT, saveToNativeStorages); // NOTE: In some case, a browser does not emit the onBeforeUnload event and we need manually watch navigation (GH-1999).
							        // Also, on iOS devices, we realize the BEFORE_UNLOAD_EVENT through the onPageHide event that browser emits too late
							        // and we do not have time to save the localStorage wrapper to the native localStorage (GH-1507).


							        index_1.default.pageNavigationWatch.on(index_1.default.pageNavigationWatch.PAGE_NAVIGATION_TRIGGERED_EVENT, saveToNativeStorages);
							      }
							  };

							  _proto._overrideStorageEvent = function _overrideStorageEvent() {
							    // NOTE: IE11 has the StorageEvent property, but it is not a constructor
							    if (typeof StorageEvent === 'object') return;
							    overriding_1.overrideConstructor(this.window, 'StorageEvent', function (type, opts) {
							      var _a;

							      var storedArea = (_a = opts) === null || _a === void 0 ? void 0 : _a.storageArea;
							      if (storedArea) delete opts.storageArea;
							      var event;
							      if (arguments.length === 0) event = new native_methods_1.default.StorageEvent();else if (arguments.length === 1) event = new native_methods_1.default.StorageEvent(type);else event = new native_methods_1.default.StorageEvent(type, opts);

							      if (storedArea) {
							        native_methods_1.default.objectDefineProperty(event, 'storageArea', {
							          get: function get() {
							            return storedArea;
							          },
							          set: function set() {
							            return void 0;
							          }
							        });
							      }

							      return event;
							    });
							  };

							  _proto.clear = function clear() {
							    var localStorageWrapper = this.localStorageProxy.unwrapProxy();
							    var sessionStorageWrapper = this.sessionStorageProxy.unwrapProxy();
							    native_methods_1.default.storageRemoveItem.call(localStorageWrapper.internal.nativeStorage, localStorageWrapper.internal.nativeStorageKey);
							    native_methods_1.default.storageRemoveItem.call(sessionStorageWrapper.internal.nativeStorage, sessionStorageWrapper.internal.nativeStorageKey);
							  };

							  _proto.lock = function lock() {
							    this.isLocked = true;
							  };

							  _proto.backup = function backup() {
							    return {
							      localStorage: JSON.stringify(this.localStorageProxy.unwrapProxy().getCurrentState()),
							      sessionStorage: JSON.stringify(this.sessionStorageProxy.unwrapProxy().getCurrentState())
							    };
							  };

							  _proto.restore = function restore(_ref) {
							    var localStorage = _ref.localStorage,
							        sessionStorage = _ref.sessionStorage;
							    this.localStorageProxy.unwrapProxy().restore(localStorage);
							    this.sessionStorageProxy.unwrapProxy().restore(sessionStorage);
							  };

							  _proto._overrideStorageProps = function _overrideStorageProps() {
							    overriding_1.overrideFunction(window.Storage.prototype, 'clear', function () {
							      var storage = this.unwrapProxy();
							      if (!storage.clearStorage()) return;
							      storage.raiseStorageChanged(null, null, null);
							    });
							    overriding_1.overrideFunction(window.Storage.prototype, 'getItem', function (key) {
							      if (arguments.length === 0) throw new TypeError("Failed to execute 'getItem' on 'Storage': 1 argument required, but only 0 present.");
							      var storage = this.unwrapProxy();

							      var validKey = StorageSandbox._wrapKey(key);

							      return native_methods_1.default.objectHasOwnProperty.call(storage, validKey) ? storage[validKey] : null;
							    });
							    overriding_1.overrideFunction(window.Storage.prototype, 'key', function (keyNum) {
							      if (arguments.length === 0) throw new TypeError("TypeError: Failed to execute 'key' on 'Storage': 1 argument required, but only 0 present."); // NOTE: http://w3c-test.org/webstorage/storage_key.html

							      keyNum %= 0x100000000;
							      if (isNaN(keyNum)) keyNum = 0;
							      var storage = this.unwrapProxy();
							      var addedProperties = native_methods_1.default.objectKeys(storage);
							      var isValidNum = keyNum >= 0 && keyNum < addedProperties.length;
							      return isValidNum ? StorageSandbox._unwrapKey(addedProperties[keyNum]) : null;
							    });
							    overriding_1.overrideFunction(window.Storage.prototype, 'removeItem', function (key) {
							      if (arguments.length === 0) throw new TypeError("Failed to execute 'removeItem' on 'Storage': 1 argument required, but only 0 present.");
							      var storage = this.unwrapProxy();

							      var validKey = StorageSandbox._wrapKey(key);

							      delete storage[validKey];
							      storage.checkStorageChanged();
							    });
							    overriding_1.overrideFunction(window.Storage.prototype, 'setItem', function (key, value) {
							      if (arguments.length < 2) throw new TypeError("Failed to execute 'setItem' on 'Storage': 2 arguments required, but only " + arguments.length + " present.");
							      var storage = this.unwrapProxy();

							      var validKey = StorageSandbox._wrapKey(key);

							      storage[validKey] = String(value);
							      storage.checkStorageChanged();
							    });
							    overriding_1.overrideDescriptor(window.Storage.prototype, 'length', {
							      getter: function getter() {
							        return native_methods_1.default.objectKeys(this).length;
							      },
							      setter: null
							    });
							  };

							  _proto._overrideStoragesGetters = function _overrideStoragesGetters() {
							    var _this3 = this;

							    var storagesPropsOwner = this.nativeMethods.getStoragesPropsOwner(window); // NOTE: Storage properties is located in Window.prototype in the IE11 and these are non configurable.
							    // We define descriptors from a prototype with an overridden getter on a window instance.
							    // We don't need define descriptors again if these was overridden.

							    var shouldDefineStorageProps = !this.nativeMethods.isStoragePropsLocatedInProto || !this.nativeMethods.objectHasOwnProperty.call(window, 'localStorage');
							    if (!shouldDefineStorageProps) return;
							    this.nativeMethods.objectDefineProperties(window, {
							      'localStorage': overriding_1.createOverriddenDescriptor(storagesPropsOwner, 'localStorage', {
							        // @ts-ignore
							        getter: function getter() {
							          _this3.localStorageProxy.unwrapProxy().setContext(window);

							          return _this3.localStorageProxy;
							        }
							      }),
							      'sessionStorage': overriding_1.createOverriddenDescriptor(storagesPropsOwner, 'sessionStorage', {
							        // @ts-ignore
							        getter: function getter() {
							          _this3.sessionStorageProxy.unwrapProxy().setContext(window);

							          return _this3.sessionStorageProxy;
							        }
							      })
							    });
							  };

							  StorageSandbox._wrapKey = function _wrapKey(key) {
							    var keyStr = String(key);
							    return STORAGE_PROPS.indexOf(keyStr) !== -1 ? API_KEY_PREFIX + keyStr : keyStr;
							  };

							  StorageSandbox._unwrapKey = function _unwrapKey(key) {
							    return key.replace(API_KEY_PREFIX, '');
							  };

							  _proto.attach = function attach(window) {
							    var _this4 = this;

							    _base_1$default.prototype.attach.call(this, window);

							    this._overrideStorageProps();

							    this._createStorageWrappers();

							    var localStorageWrapper = this.localStorageProxy.unwrapProxy();
							    var sessionStorageWrapper = this.sessionStorageProxy.unwrapProxy();
							    this.intervalId = native_methods_1.default.setInterval.call(this.window, function () {
							      localStorageWrapper.checkStorageChanged();
							      sessionStorageWrapper.checkStorageChanged();
							    }, 10);

							    this.localStorageChangeHandler = function (e) {
							      return _this4._simulateStorageEvent(_this4.localStorageProxy, e);
							    };

							    this.sessionStorageChangeHandler = function (e) {
							      return _this4._simulateStorageEvent(_this4.sessionStorageProxy, e);
							    };

							    localStorageWrapper.addChangeEventListener(this.localStorageChangeHandler);
							    sessionStorageWrapper.addChangeEventListener(this.sessionStorageChangeHandler);

							    this._listeners.initElementListening(window, ['storage']);

							    this._listeners.addInternalEventBeforeListener(window, ['storage'], function (_, dispatched, preventEvent) {
							      return !dispatched && preventEvent();
							    });

							    this._overrideStorageEvent();

							    this._overrideStoragesGetters();
							  };

							  _proto.dispose = function dispose() {
							    this.localStorageProxy.unwrapProxy().removeChangeEventListener(this.localStorageChangeHandler);
							    this.sessionStorageProxy.unwrapProxy().removeChangeEventListener(this.sessionStorageChangeHandler);
							    var topSameDomainWindow = dom_1.getTopSameDomainWindow(this.window); // NOTE: For removed iframe without src in IE11 window.top equals iframe's window

							    if (this.window === topSameDomainWindow && !topSameDomainWindow.frameElement) native_methods_1.default.clearInterval.call(this.window, this.intervalId);
							  };

							  return StorageSandbox;
							}(base_1.default);

							exports.default = StorageSandbox;
							module.exports = exports.default;
						},
						"wrapper.js": function (exports, module, require) {
							

							function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

							function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

							function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

							function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

							function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							var __importStar = void 0 && (void 0).__importStar || function (mod) {
							  if (mod && mod.__esModule) return mod;
							  var result = {};
							  if (mod != null) for (var k in mod) {
							    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
							  }
							  result["default"] = mod;
							  return result;
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var event_emitter_1 = __importDefault(require("../../utils/event-emitter"));

							var browser_1 = require("../../utils/browser");

							var url_1 = require("../../utils/url");

							var destLocation = __importStar(require("../../utils/destination-location"));

							var JSON = __importStar(require("json-hammerhead"));

							var native_methods_1 = __importDefault(require("../native-methods"));

							var STORAGE_WRAPPER_KEY = 'hammerhead|get-storage-wrapper';
							var EMPTY_OLD_VALUE_ARG = browser_1.isIE ? '' : null;
							var storageWrappersInternalInfo = new WeakMap();
							var KEY = 0;
							var VALUE = 1;

							var StorageInheritor = function StorageInheritor() {};

							StorageInheritor.prototype = Storage.prototype;

							var StorageWrapper = /*#__PURE__*/function (_StorageInheritor) {
							  _inheritsLoose(StorageWrapper, _StorageInheritor);

							  function StorageWrapper(window, nativeStorage, nativeStorageKey) {
							    var _this;

							    _this = _StorageInheritor.call(this) || this;
							    storageWrappersInternalInfo.set(_assertThisInitialized(_this), {
							      win: window,
							      ctx: window,
							      lastState: null,
							      eventEmitter: new event_emitter_1.default(),
							      nativeStorage: nativeStorage,
							      nativeStorageKey: nativeStorageKey
							    });

							    _this.loadStorage();

							    return _this;
							  }

							  StorageWrapper.create = function create(window, nativeStorage, nativeStorageKey) {
							    var storageWrapper = new StorageWrapper(window, nativeStorage, nativeStorageKey);
							    if (!window.Proxy) // @ts-ignore
							      return storageWrapper;
							    return new native_methods_1.default.Proxy(storageWrapper, {
							      get: function get(target, property) {
							        if (property === STORAGE_WRAPPER_KEY) return target;
							        return target[property];
							      },
							      set: function set(target, property, value) {
							        target['setItem'](property, value);
							        return true;
							      },
							      deleteProperty: function deleteProperty(target, key) {
							        target['removeItem'](key);
							        return true;
							      }
							    });
							  };

							  var _proto = StorageWrapper.prototype;

							  _proto.setContext = function setContext(context) {
							    this.internal.ctx = context;
							  };

							  _proto.getContext = function getContext() {
							    return this.internal.ctx;
							  };

							  _proto.saveToNativeStorage = function saveToNativeStorage() {
							    var state = JSON.stringify(this.getCurrentState());
							    if (this.internal.nativeStorage[this.internal.nativeStorageKey] !== state) this.internal.nativeStorage[this.internal.nativeStorageKey] = state;
							  };

							  _proto.getCurrentState = function getCurrentState() {
							    var addedProperties = native_methods_1.default.objectKeys(this);
							    var state = [[], []];

							    for (var _i2 = 0; _i2 < addedProperties.length; _i2++) {
							      var addedProperty = addedProperties[_i2];
							      state[KEY].push(addedProperty);
							      state[VALUE].push(this[addedProperty]);
							    }

							    return state;
							  };

							  _proto.restore = function restore(storageStr) {
							    this.clearStorage();
							    this.loadStorage(storageStr);
							  };

							  _proto.clearStorage = function clearStorage() {
							    var addedProperties = native_methods_1.default.objectKeys(this);
							    var changed = false;

							    for (var _i4 = 0; _i4 < addedProperties.length; _i4++) {
							      var addedProperty = addedProperties[_i4];
							      delete this[addedProperty];
							      changed = true;
							    }

							    if (changed) this.internal.lastState = this.getCurrentState();
							    return changed;
							  };

							  _proto.loadStorage = function loadStorage(storageStateStr) {
							    if (!storageStateStr) storageStateStr = this.internal.nativeStorage[this.internal.nativeStorageKey];
							    var storageState = JSON.parse(storageStateStr || '[[],[]]');
							    var storageStateLength = storageState[KEY].length;

							    for (var i = 0; i < storageStateLength; i++) {
							      this[storageState[KEY][i]] = storageState[VALUE][i];
							    }

							    this.internal.lastState = storageState;
							  };

							  _proto.raiseStorageChanged = function raiseStorageChanged(key, oldValue, newValue) {
							    var url = null;

							    try {
							      var parsedContextUrl = url_1.parseProxyUrl(this.internal.ctx.location.toString());
							      url = parsedContextUrl ? parsedContextUrl.destUrl : destLocation.get();
							    } catch (e) {
							      this.internal.ctx = this.internal.win;
							      url = destLocation.get();
							    }

							    this.internal.eventEmitter.emit('change', {
							      key: key,
							      oldValue: oldValue,
							      newValue: newValue,
							      url: url
							    });
							  };

							  _proto.checkStorageChanged = function checkStorageChanged() {
							    var lastState = this.internal.lastState;
							    var currentState = this.getCurrentState();

							    for (var i = 0; i < lastState[KEY].length; i++) {
							      var lastStateKey = lastState[KEY][i];
							      var lastStateValue = lastState[VALUE][i];
							      var keyIndex = currentState[KEY].indexOf(lastStateKey);

							      if (keyIndex !== -1) {
							        if (currentState[VALUE][keyIndex] !== lastStateValue) this.raiseStorageChanged(currentState[KEY][keyIndex], lastStateValue, currentState[VALUE][keyIndex]);
							        currentState[KEY].splice(keyIndex, 1);
							        currentState[VALUE].splice(keyIndex, 1);
							      } else this.raiseStorageChanged(lastStateKey, lastStateValue, null);
							    }

							    for (var j = 0; j < currentState[KEY].length; j++) {
							      this.raiseStorageChanged(currentState[KEY][j], EMPTY_OLD_VALUE_ARG, currentState[VALUE][j]);
							    }

							    this.internal.lastState = this.getCurrentState();
							  };

							  _proto.addChangeEventListener = function addChangeEventListener(fn) {
							    this.internal.eventEmitter.on('change', fn);
							  };

							  _proto.removeChangeEventListener = function removeChangeEventListener(fn) {
							    this.internal.eventEmitter.off('change', fn);
							  };

							  _proto.unwrapProxy = function unwrapProxy() {
							    if (native_methods_1.default.Proxy) {
							      var wrapper = this[STORAGE_WRAPPER_KEY];
							      return wrapper || this;
							    }

							    return this;
							  };

							  _createClass(StorageWrapper, [{
							    key: "internal",
							    get: function get() {
							      return storageWrappersInternalInfo.get(this);
							    }
							  }]);

							  return StorageWrapper;
							}(StorageInheritor);

							var ourMethods = native_methods_1.default.objectKeys(StorageWrapper.prototype);
							if (ourMethods.indexOf('internal') === -1) ourMethods.push('internal');

							for (var _i6 = 0; _i6 < ourMethods.length; _i6++) {
							  var method = ourMethods[_i6];
							  if (method === 'constructor' || method === 'internal') continue;
							  native_methods_1.default.objectDefineProperty(StorageWrapper.prototype, method, {
							    value: StorageWrapper.prototype[method],
							    configurable: false,
							    enumerable: false,
							    writable: false
							  });
							}

							var internalDescriptor = native_methods_1.default.objectGetOwnPropertyDescriptor(StorageWrapper.prototype, 'internal');
							internalDescriptor.configurable = false;
							internalDescriptor.enumerable = false;
							native_methods_1.default.objectDefineProperty(StorageWrapper.prototype, 'internal', internalDescriptor);
							native_methods_1.default.objectDefineProperty(StorageWrapper.prototype, 'constructor', native_methods_1.default.objectGetOwnPropertyDescriptor(Storage.prototype, 'constructor'));
							native_methods_1.default.objectDefineProperty(StorageWrapper, 'INTERNAL_METHODS', {
							  value: ourMethods
							});
							exports.default = StorageWrapper;
							module.exports = exports.default;
						}
					},
					"style.js": function (exports, module, require) {
						

						function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

						function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var base_1 = __importDefault(require("./base"));

						var overriding_1 = require("../utils/overriding");

						var style_1 = __importDefault(require("./../../processing/style"));

						var url_1 = require("./../utils/url");

						var CSS_STYLE_IS_PROCESSED = 'hammerhead|style|is-processed';
						var CSS_STYLE_PROXY_OBJECT = 'hammerhead|style|proxy-object';
						var CSS_STYLE_PROXY_TARGET = 'hammerhead|style|proxy-target';

						var StyleSandbox = /*#__PURE__*/function (_base_1$default) {
						  _inheritsLoose(StyleSandbox, _base_1$default);

						  function StyleSandbox() {
						    var _this;

						    _this = _base_1$default.call(this) || this;
						    _this.URL_PROPS = ['background', 'backgroundImage', 'borderImage', 'borderImageSource', 'listStyle', 'listStyleImage', 'cursor'];
						    _this.DASHED_URL_PROPS = StyleSandbox._generateDashedProps(_this.URL_PROPS);
						    _this.FEATURES = _this._detectBrowserFeatures();
						    return _this;
						  }

						  StyleSandbox._convertToDashed = function _convertToDashed(prop) {
						    return prop.replace(/[A-Z]/g, '-$&').toLowerCase();
						  };

						  StyleSandbox._generateDashedProps = function _generateDashedProps(props) {
						    var dashedProps = [];

						    for (var _i2 = 0; _i2 < props.length; _i2++) {
						      var prop = props[_i2];

						      var dashedProp = StyleSandbox._convertToDashed(prop);

						      if (prop !== dashedProp) dashedProps.push(dashedProp);
						    }

						    return dashedProps;
						  };

						  var _proto = StyleSandbox.prototype;

						  _proto._detectBrowserFeatures = function _detectBrowserFeatures() {
						    var features = {}; // NOTE: The CSS2Properties class is supported only in the Firefox
						    // and its prototype contains all property descriptors
						    // @ts-ignore

						    features.protoContainsAllProps = !!window.CSS2Properties; // NOTE: The CSSStyleDeclaration class contains not dashed url properties only in the IE

						    features.protoContainsUrlProps = this.nativeMethods.objectHasOwnProperty // @ts-ignore
						    .call(window.CSSStyleDeclaration.prototype, 'background');

						    if (!features.protoContainsAllProps && !features.protoContainsUrlProps) {
						      var testDiv = this.nativeMethods.createElement.call(document, 'div');
						      var propertySetterIsCalled = false;
						      var testDivDescriptor = this.nativeMethods.objectGetOwnPropertyDescriptor // @ts-ignore
						      .call(window.Object, testDiv.style, 'background');

						      if (testDivDescriptor.configurable) {
						        // eslint-disable-next-line no-restricted-properties
						        delete testDivDescriptor.value;
						        delete testDivDescriptor.writable;

						        testDivDescriptor.set = function () {
						          propertySetterIsCalled = true;
						        };

						        this.nativeMethods.objectDefineProperty(testDiv.style, 'background', testDivDescriptor);
						        testDiv.style.background = 'url';
						      } // NOTE: A style instance contains all url properties.
						      // They are non-configurable in Safari less than 11.1.
						      // Their setter cannot be called in Safari 11.1.


						      features.propsCannotBeOverridden = !testDivDescriptor.configurable || !propertySetterIsCalled;
						    }

						    return features;
						  };

						  _proto._overrideStyleProp = function _overrideStyleProp(proto, prop) {
						    var nativeMethods = this.nativeMethods;

						    var dashedProp = StyleSandbox._convertToDashed(prop);

						    overriding_1.overrideDescriptor(proto, prop, {
						      getter: function getter() {
						        var value = nativeMethods.styleGetPropertyValue.call(this, dashedProp);
						        return style_1.default.cleanUp(value, url_1.parseProxyUrl);
						      },
						      setter: function setter(value) {
						        if (typeof value === 'string') value = style_1.default.process(value, url_1.getProxyUrl);
						        nativeMethods.styleSetProperty.call(this, dashedProp, value);
						      }
						    });
						  };

						  _proto._overrideStyleInstanceProp = function _overrideStyleInstanceProp(style, prop) {
						    var nativeMethods = this.nativeMethods;

						    var dashedProp = StyleSandbox._convertToDashed(prop);

						    overriding_1.overrideDescriptor(style, prop, {
						      getter: function getter() {
						        var value = nativeMethods.styleGetPropertyValue.call(this, dashedProp);
						        return style_1.default.cleanUp(value, url_1.parseProxyUrl);
						      },
						      setter: function setter(value) {
						        if (typeof value === 'string') value = style_1.default.process(value, url_1.getProxyUrl);
						        nativeMethods.styleSetProperty.call(this, dashedProp, value);
						      }
						    });
						  };

						  _proto._processStyleInstance = function _processStyleInstance(style) {
						    var isProcessed = style[CSS_STYLE_IS_PROCESSED];

						    if (!isProcessed) {
						      for (var _i4 = 0, _this$DASHED_URL_PROP2 = this.DASHED_URL_PROPS; _i4 < _this$DASHED_URL_PROP2.length; _i4++) {
						        var prop = _this$DASHED_URL_PROP2[_i4];

						        this._overrideStyleInstanceProp(style, prop);
						      }

						      if (!this.FEATURES.protoContainsUrlProps) {
						        for (var _i6 = 0, _this$URL_PROPS2 = this.URL_PROPS; _i6 < _this$URL_PROPS2.length; _i6++) {
						          var _prop = _this$URL_PROPS2[_i6];

						          this._overrideStyleInstanceProp(style, _prop);
						        }
						      }

						      this.nativeMethods.objectDefineProperty(style, CSS_STYLE_IS_PROCESSED, {
						        value: true
						      });
						    }

						    return style;
						  };

						  _proto._getStyleProxy = function _getStyleProxy(style) {
						    var _this2 = this;

						    var proxyObject = style[CSS_STYLE_PROXY_OBJECT];

						    if (!proxyObject) {
						      proxyObject = new this.nativeMethods.Proxy(style, {
						        get: function get(target, prop) {
						          if (_this2.URL_PROPS.indexOf(prop) !== -1 || _this2.DASHED_URL_PROPS.indexOf(prop) !== -1) return style_1.default.cleanUp(target[prop], url_1.parseProxyUrl);
						          if (prop === CSS_STYLE_PROXY_TARGET) return target;
						          return target[prop];
						        },
						        set: function set(target, prop, value) {
						          if (_this2.URL_PROPS.indexOf(prop) !== -1 || _this2.DASHED_URL_PROPS.indexOf(prop) !== -1) {
						            if (typeof value === 'string') value = style_1.default.process(value, url_1.getProxyUrl);
						          }

						          target[prop] = value;
						          return true;
						        }
						      });
						      this.nativeMethods.objectDefineProperty(style, CSS_STYLE_PROXY_OBJECT, {
						        value: proxyObject
						      });
						    }

						    return proxyObject;
						  };

						  _proto._overrideCSSStyleDeclarationFunctionsCtx = function _overrideCSSStyleDeclarationFunctionsCtx(window) {
						    var _this3 = this;

						    var styleDeclarationProto = window.CSSStyleDeclaration.prototype;

						    var _loop = function _loop(prop) {
						      var nativeFn = _this3.nativeMethods.objectGetOwnPropertyDescriptor.call(window.Object, styleDeclarationProto, prop).value; // eslint-disable-line no-restricted-properties


						      if (_this3.nativeMethods.objectHasOwnProperty.call(styleDeclarationProto, prop) && typeof nativeFn === 'function') {
						        styleDeclarationProto[prop] = function () {
						          return nativeFn.apply(this[CSS_STYLE_PROXY_TARGET] || this, arguments);
						        }; // NOTE: we cannot use 'overrideFunction' here since the function may not exist


						        overriding_1.overrideStringRepresentation(styleDeclarationProto[prop], nativeFn);
						      }
						    };

						    for (var prop in styleDeclarationProto) {
						      _loop(prop);
						    }
						  };

						  _proto.attach = function attach(window) {
						    _base_1$default.prototype.attach.call(this, window);

						    var nativeMethods = this.nativeMethods;
						    var styleSandbox = this;
						    overriding_1.overrideDescriptor(window[nativeMethods.htmlElementStylePropOwnerName].prototype, 'style', {
						      getter: this.FEATURES.protoContainsAllProps ? null : function () {
						        var style = nativeMethods.htmlElementStyleGetter.call(this);
						        if (styleSandbox.FEATURES.propsCannotBeOverridden) return styleSandbox._getStyleProxy(style);
						        return styleSandbox._processStyleInstance(style);
						      },
						      setter: nativeMethods.htmlElementStyleSetter ? function (value) {
						        var processedCss = style_1.default.process(value, url_1.getProxyUrl);
						        nativeMethods.htmlElementStyleSetter.call(this, processedCss);
						      } : null
						    });

						    if (this.FEATURES.protoContainsAllProps) {
						      for (var _i8 = 0, _this$URL_PROPS4 = this.URL_PROPS; _i8 < _this$URL_PROPS4.length; _i8++) {
						        var prop = _this$URL_PROPS4[_i8];

						        // @ts-ignore
						        this._overrideStyleProp(window.CSS2Properties.prototype, prop);
						      }

						      for (var _i10 = 0, _this$DASHED_URL_PROP4 = this.DASHED_URL_PROPS; _i10 < _this$DASHED_URL_PROP4.length; _i10++) {
						        var _prop2 = _this$DASHED_URL_PROP4[_i10];

						        // @ts-ignore
						        this._overrideStyleProp(window.CSS2Properties.prototype, _prop2);
						      }
						    } else if (this.FEATURES.protoContainsUrlProps) {
						      for (var _i12 = 0, _this$URL_PROPS6 = this.URL_PROPS; _i12 < _this$URL_PROPS6.length; _i12++) {
						        var _prop3 = _this$URL_PROPS6[_i12];

						        this._overrideStyleProp(window.CSSStyleDeclaration.prototype, _prop3);
						      }
						    }

						    overriding_1.overrideDescriptor(window.CSSStyleDeclaration.prototype, 'cssText', {
						      getter: function getter() {
						        var cssText = nativeMethods.styleCssTextGetter.call(this);
						        return style_1.default.cleanUp(cssText, url_1.parseProxyUrl);
						      },
						      setter: function setter(value) {
						        if (typeof value === 'string') value = style_1.default.process(value, url_1.getProxyUrl);
						        nativeMethods.styleCssTextSetter.call(this, value);
						      }
						    });
						    overriding_1.overrideFunction(window.CSSStyleSheet.prototype, 'insertRule', function (rule, index) {
						      var newRule = style_1.default.process(rule, url_1.getProxyUrl);
						      return nativeMethods.styleInsertRule.call(this, newRule, index);
						    });
						    overriding_1.overrideFunction(window.CSSStyleDeclaration.prototype, 'getPropertyValue', function () {
						      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
						        args[_key] = arguments[_key];
						      }

						      var value = nativeMethods.styleGetPropertyValue.apply(this, args);
						      return style_1.default.cleanUp(value, url_1.parseProxyUrl);
						    });
						    overriding_1.overrideFunction(window.CSSStyleDeclaration.prototype, 'setProperty', function () {
						      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
						        args[_key2] = arguments[_key2];
						      }

						      var value = args[1];
						      if (typeof value === 'string') args[1] = style_1.default.process(value, url_1.getProxyUrl);
						      return nativeMethods.styleSetProperty.apply(this, args);
						    });
						    overriding_1.overrideFunction(window.CSSStyleDeclaration.prototype, 'removeProperty', function () {
						      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
						        args[_key3] = arguments[_key3];
						      }

						      var oldValue = nativeMethods.styleRemoveProperty.apply(this, args);
						      return style_1.default.cleanUp(oldValue, url_1.parseProxyUrl);
						    }); // NOTE: We need to override context of all functions from the CSSStyleDeclaration prototype if we use the Proxy feature.
						    // Can only call CSSStyleDeclaration.<function name> on instances of CSSStyleDeclaration
						    // The error above occurs if functions will be called on a proxy instance.

						    if (this.FEATURES.propsCannotBeOverridden) this._overrideCSSStyleDeclarationFunctionsCtx(window);
						  };

						  return StyleSandbox;
						}(base_1.default);

						exports.default = StyleSandbox;
						module.exports = exports.default;
					},
					"timers.js": function (exports, module, require) {
						

						function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

						function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var base_1 = __importDefault(require("./base"));

						var native_methods_1 = __importDefault(require("./native-methods"));

						var script_1 = require("../../processing/script");

						var browser_1 = require("../utils/browser");

						var overriding_1 = require("../utils/overriding"); // NOTE: When you call the focus and blur function for some elements in IE, the event handlers  must be raised
						// asynchronously, but before executing functions that are called by using the window.setTimeout function. So,
						// we need to raise the handlers with a timeout, but do it before calling other asynchronous functions.


						var TimersSandbox = /*#__PURE__*/function (_base_1$default) {
						  _inheritsLoose(TimersSandbox, _base_1$default);

						  function TimersSandbox() {
						    var _this;

						    _this = _base_1$default.call(this) || this;
						    _this.timeouts = [];
						    _this.deferredFunctions = [];
						    _this.setTimeout = native_methods_1.default.setTimeout;
						    return _this;
						  }

						  var _proto = TimersSandbox.prototype;

						  _proto._wrapTimeoutFunctionsArguments = function _wrapTimeoutFunctionsArguments(args) {
						    var _this2 = this;

						    var isScriptFirstArg = typeof args[0] === 'string';
						    var func = !isScriptFirstArg ? args[0] : null;
						    var script = isScriptFirstArg ? script_1.processScript(args[0], false) : null;

						    if (browser_1.isIE && browser_1.version < 12) {
						      var timersSandbox = this;
						      var fnToRun = isScriptFirstArg ? function () {
						        // NOTE: We are switching eval to the global context with this assignment.
						        // Unlike eval, the setTimeout/setInterval functions always work in the global context.
						        var ev = _this2.window.eval;
						        return ev(script);
						      } : func;

						      args[0] = function () {
						        return timersSandbox._callDeferredFunction(fnToRun, arguments);
						      };
						    } else if (isScriptFirstArg) args[0] = script;

						    return args;
						  };

						  _proto._callDeferredFunction = function _callDeferredFunction(fn, args) {
						    if (this.timeouts.length) {
						      var curTimeouts = [];
						      var curHandlers = [];

						      for (var i = 0; i < this.timeouts.length; i++) {
						        curTimeouts.push(this.timeouts[i]);
						        curHandlers.push(this.deferredFunctions[i]);
						      }

						      this.timeouts = [];
						      this.deferredFunctions = [];

						      for (var j = 0; j < curTimeouts.length; j++) {
						        native_methods_1.default.clearInterval.call(this.window, curTimeouts[j]);
						        curHandlers[j]();
						      } // NOTE: Handlers can create new deferred functions.


						      return this._callDeferredFunction(fn, args);
						    }

						    return fn.apply(this.window, args);
						  };

						  _proto.attach = function attach(window) {
						    _base_1$default.prototype.attach.call(this, window);

						    var timersSandbox = this;
						    overriding_1.overrideFunction(window, 'setTimeout', function () {
						      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
						        args[_key] = arguments[_key];
						      }

						      return native_methods_1.default.setTimeout.apply(window, timersSandbox._wrapTimeoutFunctionsArguments(args));
						    });
						    overriding_1.overrideFunction(window, 'setInterval', function () {
						      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
						        args[_key2] = arguments[_key2];
						      }

						      return native_methods_1.default.setInterval.apply(window, timersSandbox._wrapTimeoutFunctionsArguments(args));
						    }); // NOTE: We are saving the setTimeout wrapper for internal use in case the page-script replaces
						    // it with an invalid value.

						    this.setTimeout = window.setTimeout;
						  };

						  _proto.deferFunction = function deferFunction(fn) {
						    var _this3 = this;

						    var deferredFunction = function deferredFunction() {
						      fn();

						      for (var i = 0; i < _this3.deferredFunctions.length; i++) {
						        if (_this3.deferredFunctions[i] === deferredFunction) {
						          _this3.deferredFunctions.splice(i, 1);

						          _this3.timeouts.splice(i, 1);

						          break;
						        }
						      }
						    };

						    this.deferredFunctions.push(deferredFunction);
						    this.timeouts.push(native_methods_1.default.setTimeout.call(window, deferredFunction, 0));
						  };

						  return TimersSandbox;
						}(base_1.default);

						exports.default = TimersSandbox;
						module.exports = exports.default;
					},
					"upload": {
						"file-list-wrapper.js": function (exports, module, require) {
							

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var native_methods_1 = __importDefault(require("../native-methods"));

							var FileListWrapper = /*#__PURE__*/function () {
							  function FileListWrapper(fileList) {
							    var _this = this;

							    native_methods_1.default.objectDefineProperty(this, 'length', {
							      get: function get() {
							        return fileList.length;
							      }
							    });

							    for (var i = 0; i < fileList.length; i++) {
							      this[i] = FileListWrapper._createFileWrapper(fileList[i]);
							    }

							    this.item = function (index) {
							      return _this[index];
							    };
							  }

							  FileListWrapper._base64ToBlob = function _base64ToBlob(base64Data, fileInfo, sliceSize) {
							    var mimeType = fileInfo.info.type || '';
							    sliceSize = sliceSize || 512;
							    var byteCharacters = atob(base64Data);
							    var byteArrays = [];

							    for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
							      var slice = byteCharacters.slice(offset, offset + sliceSize);
							      var byteNumbers = new Array(slice.length);

							      for (var i = 0; i < slice.length; i++) {
							        byteNumbers[i] = slice.charCodeAt(i);
							      }

							      byteArrays.push(new Uint8Array(byteNumbers));
							    } // NOTE: window.File in IE11 is not constructable.


							    return native_methods_1.default.File ? new File(byteArrays, fileInfo.info.name, {
							      type: mimeType,
							      lastModified: fileInfo.info.lastModified
							    }) : new Blob(byteArrays, {
							      type: mimeType
							    });
							  };

							  FileListWrapper._createFileWrapper = function _createFileWrapper(fileInfo) {
							    var wrapper = null;

							    if (!window.Blob) {
							      wrapper = {
							        size: fileInfo.info.size,
							        type: fileInfo.info.type
							      };
							    } else if (fileInfo.blob) {
							      // NOTE: window.File in IE11 is not constructable.
							      wrapper = native_methods_1.default.File ? new File([fileInfo.blob], fileInfo.info.name, {
							        type: fileInfo.info.type,
							        lastModified: fileInfo.info.lastModified
							      }) : new Blob([fileInfo.blob], {
							        type: fileInfo.info.type
							      });
							    } else wrapper = FileListWrapper._base64ToBlob(fileInfo.data, fileInfo);

							    wrapper.name = fileInfo.info.name;
							    if (fileInfo.info.lastModifiedDate) wrapper.lastModifiedDate = fileInfo.info.lastModifiedDate;
							    wrapper.base64 = fileInfo.data;
							    return wrapper;
							  };

							  return FileListWrapper;
							}();

							exports.default = FileListWrapper; //@ts-ignore

							if (window.FileList) FileListWrapper.prototype = FileList.prototype;
							module.exports = exports.default;
						},
						"hidden-info.js": function (exports, module, require) {
							

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							var __importStar = void 0 && (void 0).__importStar || function (mod) {
							  if (mod && mod.__esModule) return mod;
							  var result = {};
							  if (mod != null) for (var k in mod) {
							    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
							  }
							  result["default"] = mod;
							  return result;
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var internal_attributes_1 = __importDefault(require("../../../processing/dom/internal-attributes"));

							var native_methods_1 = __importDefault(require("../native-methods"));

							var JSON = __importStar(require("json-hammerhead"));

							var shadow_ui_1 = __importDefault(require("../shadow-ui"));

							function createInput(form) {
							  var hiddenInput = native_methods_1.default.createElement.call(document, 'input');
							  hiddenInput.type = 'hidden';
							  hiddenInput.name = internal_attributes_1.default.uploadInfoHiddenInputName;
							  shadow_ui_1.default.markElementAsShadow(hiddenInput);
							  native_methods_1.default.inputValueSetter.call(hiddenInput, '[]');
							  native_methods_1.default.appendChild.call(form, hiddenInput);
							  shadow_ui_1.default.markFormAsShadow(form);
							  return hiddenInput;
							}

							function getInput(form) {
							  var inputSelector = '[name="' + internal_attributes_1.default.uploadInfoHiddenInputName + '"]';
							  return native_methods_1.default.elementQuerySelector.call(form, inputSelector) || createInput(form);
							}

							function indexOf(info, input) {
							  for (var index = 0; index < info.length; index++) {
							    if (info[index].id === input.id || info[index].name === input.name) return index;
							  }

							  return -1;
							}

							function addInputInfo(input, fileList, value) {
							  var formInfo = getFormInfo(input);

							  if (formInfo) {
							    var files = [];
							    fileList = native_methods_1.default.arraySlice.call(fileList);

							    for (var i = 0, len = fileList.length; i < len; i++) {
							      var file = fileList[i];
							      files.push({
							        name: file.name,
							        type: file.type,
							        data: file.base64
							      });
							    }

							    var inputInfoIndex = indexOf(formInfo, input);
							    var inputInfo = {
							      id: input.id,
							      name: input.name,
							      files: files,
							      value: value
							    };
							    if (inputInfoIndex === -1) formInfo.push(inputInfo);else formInfo[inputInfoIndex] = inputInfo;
							    setFormInfo(input, formInfo);
							  }
							}

							exports.addInputInfo = addInputInfo;

							function getFormInfo(input) {
							  return input.form ? JSON.parse(native_methods_1.default.inputValueGetter.call(getInput(input.form))) : null;
							}

							exports.getFormInfo = getFormInfo;

							function setFormInfo(input, info) {
							  if (input.form) {
							    var hiddenInput = getInput(input.form);
							    native_methods_1.default.inputValueSetter.call(hiddenInput, JSON.stringify(info));
							  }
							}

							exports.setFormInfo = setFormInfo;

							function removeInputInfo(input) {
							  var uploadInfo = getFormInfo(input);

							  if (uploadInfo) {
							    var inputInfoIndex = indexOf(uploadInfo, input);

							    if (inputInfoIndex !== -1) {
							      uploadInfo.splice(inputInfoIndex, 1);
							      setFormInfo(input, uploadInfo);
							      return true;
							    }
							  }

							  return false;
							}

							exports.removeInputInfo = removeInputInfo;
						},
						"index.js": function (exports, module, require) {
							

							function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

							function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var internal_properties_1 = __importDefault(require("../../../processing/dom/internal-properties"));

							var base_1 = __importDefault(require("../base"));

							var info_manager_1 = __importDefault(require("./info-manager"));

							var dom_1 = require("../../utils/dom");

							var browser_1 = require("../../utils/browser");

							var event_1 = require("../../utils/event");

							var backup_1 = require("../backup");

							var native_methods_1 = __importDefault(require("../native-methods"));

							var settings_1 = __importDefault(require("../../settings"));

							var UploadSandbox = /*#__PURE__*/function (_base_1$default) {
							  _inheritsLoose(UploadSandbox, _base_1$default);

							  function UploadSandbox(_listeners, _eventSimulator, transport) {
							    var _this;

							    _this = _base_1$default.call(this) || this;
							    _this._listeners = _listeners;
							    _this._eventSimulator = _eventSimulator;
							    _this.START_FILE_UPLOADING_EVENT = 'hammerhead|event|start-file-uploading';
							    _this.END_FILE_UPLOADING_EVENT = 'hammerhead|event|end-file-uploading';
							    _this.infoManager = new info_manager_1.default(transport);
							    return _this;
							  }

							  var _proto = UploadSandbox.prototype;

							  _proto._riseChangeEvent = function _riseChangeEvent(input) {
							    this._eventSimulator.change(input);
							  };

							  UploadSandbox._getCurrentInfoManager = function _getCurrentInfoManager(input) {
							    var contextWindow = input[internal_properties_1.default.processedContext];
							    return backup_1.get(contextWindow).upload.infoManager;
							  }
							  /*eslint-disable max-nested-callbacks */
							  ;

							  _proto.attach = function attach(window) {
							    var _this2 = this;

							    _base_1$default.prototype.attach.call(this, window);

							    this._listeners.addInternalEventBeforeListener(window, ['change'], function (e, dispatched) {
							      var input = e.target;

							      var currentInfoManager = UploadSandbox._getCurrentInfoManager(input);

							      if (!dispatched && dom_1.isFileInput(input)) {
							        event_1.stopPropagation(e);
							        event_1.preventDefault(e);
							        var value = native_methods_1.default.inputValueGetter.call(input);

							        if (!!value || !!currentInfoManager.getValue(input)) {
							          var files = native_methods_1.default.inputFilesGetter.call(input);
							          var fileNames = info_manager_1.default.getFileNames(files, value);

							          _this2.emit(_this2.START_FILE_UPLOADING_EVENT, fileNames, input);

							          currentInfoManager.loadFileListData(input, files).then(function (fileList) {
							            currentInfoManager.setUploadInfo(input, fileList, value);
							            return _this2.infoManager.sendFilesInfoToServer(fileList, fileNames);
							          }).then(function (uploadInfo) {
							            _this2._riseChangeEvent(input);

							            _this2.emit(_this2.END_FILE_UPLOADING_EVENT, uploadInfo);
							          });
							        }
							      }
							    });

							    if (!settings_1.default.get().isRecordMode && (browser_1.isIE || browser_1.isFirefox)) {
							      // NOTE: Google Chrome and Safari don't open the native browser dialog when TestCafe clicks on the input.
							      // 'Click' is a complex emulated action that uses 'dispatchEvent' method internally.
							      // Another browsers open the native browser dialog in this case.
							      // This is why, we are forced to prevent the browser's open file dialog.
							      this._listeners.addInternalEventBeforeListener(window, ['click'], function (e, dispatched) {
							        if (dispatched && dom_1.isFileInput(e.target)) event_1.preventDefault(e, true);
							      });
							    }
							  }
							  /*eslint-enable max-nested-callbacks */
							  ;

							  UploadSandbox.getFiles = function getFiles(input) {
							    var files = native_methods_1.default.inputFilesGetter.call(input);
							    return files !== void 0 ? UploadSandbox._getCurrentInfoManager(input).getFiles(input) : void 0;
							  };

							  UploadSandbox.getUploadElementValue = function getUploadElementValue(input) {
							    return UploadSandbox._getCurrentInfoManager(input).getValue(input);
							  };

							  _proto.setUploadElementValue = function setUploadElementValue(input, value) {
							    if (value === '' && UploadSandbox._getCurrentInfoManager(input).clearUploadInfo(input) && browser_1.isIE11) this._riseChangeEvent(input);
							  } // GH-1844, GH-2007
							  ;

							  UploadSandbox._shouldRaiseChangeEvent = function _shouldRaiseChangeEvent(filesToUpload, currentUploadInfo) {
							    if (!currentUploadInfo) return true; // eslint-disable-next-line no-restricted-properties

							    var currentFiles = currentUploadInfo.files;
							    if (filesToUpload.length !== currentFiles.length || browser_1.isFirefox || browser_1.isMacPlatform && browser_1.isChrome || browser_1.isSafari) return true;

							    for (var _i2 = 0; _i2 < filesToUpload.length; _i2++) {
							      var file = filesToUpload[_i2];
							      var found = false;

							      for (var _i4 = 0; _i4 < currentFiles.length; _i4++) {
							        var currentFile = currentFiles[_i4];

							        if (file.name === currentFile.name) {
							          found = true;
							          break;
							        }
							      }

							      if (found === false) return true;
							    }

							    return false;
							  };

							  _proto.doUpload = function doUpload(input, filePaths) {
							    var _this3 = this;

							    var currentInfoManager = UploadSandbox._getCurrentInfoManager(input);

							    filePaths = filePaths || [];
							    return this.infoManager.loadFilesInfoFromServer(filePaths).then(function (filesInfo) {
							      return info_manager_1.default.prepareFileListWrapper(filesInfo);
							    }).then(function (data) {
							      if (!data.errs.length) {
							        var value = info_manager_1.default.formatValue(filePaths);
							        var inputInfo = currentInfoManager.getUploadInfo(input);

							        var shouldRaiseChangeEvent = UploadSandbox._shouldRaiseChangeEvent(data.fileList, inputInfo);

							        currentInfoManager.setUploadInfo(input, data.fileList, value);
							        if (shouldRaiseChangeEvent) _this3._riseChangeEvent(input);
							      }

							      return data.errs;
							    });
							  };

							  return UploadSandbox;
							}(base_1.default);

							exports.default = UploadSandbox;
							module.exports = exports.default;
						},
						"info-manager.js": function (exports, module, require) {
							

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							var __importStar = void 0 && (void 0).__importStar || function (mod) {
							  if (mod && mod.__esModule) return mod;
							  var result = {};
							  if (mod != null) for (var k in mod) {
							    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
							  }
							  result["default"] = mod;
							  return result;
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var command_1 = __importDefault(require("../../../session/command"));

							var file_list_wrapper_1 = __importDefault(require("./file-list-wrapper"));

							var Browser = __importStar(require("../../utils/browser"));

							var HiddenInfo = __importStar(require("./hidden-info"));

							var pinkie_1 = __importDefault(require("pinkie")); // NOTE: https://html.spec.whatwg.org/multipage/forms.html#fakepath-srsly.


							var FAKE_PATH_STRING = 'C:\\fakepath\\';

							var UploadInfoManager = /*#__PURE__*/function () {
							  function UploadInfoManager(_transport) {
							    this._transport = _transport;
							    this.uploadInfo = [];
							  }

							  UploadInfoManager._getFileListData = function _getFileListData(fileList) {
							    var data = [];

							    for (var _i2 = 0; _i2 < fileList.length; _i2++) {
							      var file = fileList[_i2];
							      data.push(file.base64);
							    }

							    return data;
							  };

							  UploadInfoManager.formatValue = function formatValue(fileNames) {
							    var value = '';
							    fileNames = typeof fileNames === 'string' ? [fileNames] : fileNames;

							    if (fileNames && fileNames.length) {
							      if (Browser.isWebKit) value = FAKE_PATH_STRING + fileNames[0].split('/').pop();else return fileNames[0].split('/').pop();
							    }

							    return value;
							  };

							  UploadInfoManager.getFileNames = function getFileNames(fileList, value) {
							    var result = [];

							    if (fileList) {
							      for (var _i4 = 0; _i4 < fileList.length; _i4++) {
							        var file = fileList[_i4];
							        result.push(file.name);
							      }
							    } else if (value.lastIndexOf('\\') !== -1) result.push(value.substr(value.lastIndexOf('\\') + 1));

							    return result;
							  };

							  var _proto = UploadInfoManager.prototype;

							  _proto.loadFilesInfoFromServer = function loadFilesInfoFromServer(filePaths) {
							    return this._transport.asyncServiceMsg({
							      cmd: command_1.default.getUploadedFiles,
							      filePaths: typeof filePaths === 'string' ? [filePaths] : filePaths
							    });
							  };

							  UploadInfoManager.prepareFileListWrapper = function prepareFileListWrapper(filesInfo) {
							    var errs = [];
							    var validFilesInfo = [];

							    for (var _i6 = 0; _i6 < filesInfo.length; _i6++) {
							      var fileInfo = filesInfo[_i6];
							      if (fileInfo.err) errs.push(fileInfo);else validFilesInfo.push(fileInfo);
							    }

							    return {
							      errs: errs,
							      fileList: new file_list_wrapper_1.default(validFilesInfo)
							    };
							  };

							  _proto.sendFilesInfoToServer = function sendFilesInfoToServer(fileList, fileNames) {
							    return this._transport.asyncServiceMsg({
							      cmd: command_1.default.uploadFiles,
							      data: UploadInfoManager._getFileListData(fileList),
							      fileNames: fileNames
							    });
							  };

							  _proto.clearUploadInfo = function clearUploadInfo(input) {
							    var inputInfo = this.getUploadInfo(input);

							    if (inputInfo) {
							      /*eslint-disable no-restricted-properties*/
							      inputInfo.files = new file_list_wrapper_1.default([]);
							      inputInfo.value = '';
							      /*eslint-enable no-restricted-properties*/

							      return HiddenInfo.removeInputInfo(input);
							    }

							    return null;
							  };

							  _proto.getFiles = function getFiles(input) {
							    var inputInfo = this.getUploadInfo(input); // eslint-disable-next-line no-restricted-properties

							    return inputInfo ? inputInfo.files : new file_list_wrapper_1.default([]);
							  };

							  _proto.getUploadInfo = function getUploadInfo(input) {
							    for (var _i8 = 0, _this$uploadInfo2 = this.uploadInfo; _i8 < _this$uploadInfo2.length; _i8++) {
							      var uploadInfoItem = _this$uploadInfo2[_i8];
							      if (uploadInfoItem.input === input) return uploadInfoItem;
							    }

							    return null;
							  };

							  _proto.getValue = function getValue(input) {
							    var inputInfo = this.getUploadInfo(input); // eslint-disable-next-line no-restricted-properties

							    return inputInfo ? inputInfo.value : '';
							  };

							  _proto.loadFileListData = function loadFileListData(_input, fileList) {
							    if (!fileList.length) return pinkie_1.default.resolve(new file_list_wrapper_1.default([]));
							    return new pinkie_1.default(function (resolve) {
							      var fileReader = new FileReader();
							      var readedFiles = [];
							      var index = 0;
							      var file = fileList[index];
							      fileReader.addEventListener('load', function (e) {
							        var info = {
							          type: file.type,
							          name: file.name
							        };
							        if (typeof file.lastModified === 'number') info.lastModified = file.lastModified;
							        if (file.lastModifiedDate) info.lastModifiedDate = file.lastModifiedDate;
							        readedFiles.push({
							          data: e.target.result.substr(e.target.result.indexOf(',') + 1),
							          blob: file.slice(0, file.size),
							          info: info
							        });

							        if (fileList[++index]) {
							          file = fileList[index];
							          fileReader.readAsDataURL(file);
							        } else resolve(new file_list_wrapper_1.default(readedFiles));
							      });
							      fileReader.readAsDataURL(file);
							    });
							  };

							  _proto.setUploadInfo = function setUploadInfo(input, fileList, value) {
							    var inputInfo = this.getUploadInfo(input);

							    if (!inputInfo) {
							      inputInfo = {
							        input: input
							      };
							      this.uploadInfo.push(inputInfo);
							    }
							    /*eslint-disable no-restricted-properties*/


							    inputInfo.files = fileList;
							    inputInfo.value = value;
							    /*eslint-enable no-restricted-properties*/

							    HiddenInfo.addInputInfo(input, fileList, value);
							  };

							  return UploadInfoManager;
							}();

							exports.default = UploadInfoManager;
							module.exports = exports.default;
						}
					},
					"windows-storage.js": function (exports, module, require) {
						

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var dom_1 = require("../utils/dom");

						var native_methods_1 = __importDefault(require("./native-methods"));

						var WINDOWS_STORAGE = 'hammerhead|windows-storage';

						function getStorage() {
						  var topSameDomainWindow = dom_1.getTopSameDomainWindow(window);
						  var storage = topSameDomainWindow[WINDOWS_STORAGE];

						  if (!storage) {
						    storage = [];
						    native_methods_1.default.objectDefineProperty(topSameDomainWindow, WINDOWS_STORAGE, {
						      value: storage
						    });
						  }

						  return storage;
						}

						function add(wnd) {
						  var storage = getStorage();

						  for (var i = storage.length - 1; i >= 0; i--) {
						    try {
						      if (storage[i] === wnd) return;
						    } catch (e) {
						      storage.splice(i, 1);
						    }
						  }

						  storage.push(wnd);
						}

						exports.add = add;

						function remove(wnd) {
						  var storage = getStorage();
						  var index = storage.indexOf(wnd);
						  if (index !== -1) storage.splice(index, 1);
						}

						exports.remove = remove;

						function findByName(name) {
						  var storage = getStorage();

						  for (var i = 0; i < storage.length; i++) {
						    try {
						      if (storage[i].name === name) return storage[i];
						    } catch (e) {
						      // NOTE: During loading, an iframe can be changed from same-domain to cross-domain.
						      // Iframe's window is reinitialized, and we add 2 windows to the window storages:
						      // one to the same-domain storage and another one to the cross-domain storage.
						      // We remove the cross-domain window from this storage
						      // because it is already added to the cross-domain window storage.
						      storage.splice(i, 1);
						      i--;
						    }
						  }

						  return null;
						}

						exports.findByName = findByName;
					},
					"xhr.js": function (exports, module, require) {
						

						function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

						function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var sandbox_base_with_delayed_settings_1 = __importDefault(require("../worker/sandbox-base-with-delayed-settings"));

						var native_methods_1 = __importDefault(require("./native-methods"));

						var url_1 = require("../utils/url");

						var builtin_header_names_1 = __importDefault(require("../../request-pipeline/builtin-header-names"));

						var overriding_1 = require("../utils/overriding");

						var url_2 = require("../../utils/url");

						var headers_1 = require("../../utils/headers");

						var XHR_READY_STATES = ['UNSENT', 'OPENED', 'HEADERS_RECEIVED', 'LOADING', 'DONE'];

						var XhrSandbox = /*#__PURE__*/function (_sandbox_base_with_de) {
						  _inheritsLoose(XhrSandbox, _sandbox_base_with_de);

						  function XhrSandbox(_cookieSandbox, waitHammerheadSettings) {
						    var _this;

						    _this = _sandbox_base_with_de.call(this, waitHammerheadSettings) || this;
						    _this._cookieSandbox = _cookieSandbox;
						    _this.XHR_COMPLETED_EVENT = 'hammerhead|event|xhr-completed';
						    _this.XHR_ERROR_EVENT = 'hammerhead|event|xhr-error';
						    _this.BEFORE_XHR_SEND_EVENT = 'hammerhead|event|before-xhr-send';
						    return _this;
						  }

						  XhrSandbox.createNativeXHR = function createNativeXHR() {
						    var xhr = new native_methods_1.default.XMLHttpRequest();
						    xhr.open = native_methods_1.default.xhrOpen;
						    xhr.abort = native_methods_1.default.xhrAbort;
						    xhr.send = native_methods_1.default.xhrSend;
						    xhr.addEventListener = native_methods_1.default.xhrAddEventListener || native_methods_1.default.addEventListener;
						    xhr.removeEventListener = native_methods_1.default.xhrRemoveEventListener || native_methods_1.default.removeEventListener;
						    xhr.setRequestHeader = native_methods_1.default.xhrSetRequestHeader;
						    xhr.getResponseHeader = native_methods_1.default.xhrGetResponseHeader;
						    xhr.getAllResponseHeaders = native_methods_1.default.xhrGetAllResponseHeaders;
						    xhr.overrideMimeType = native_methods_1.default.xhrOverrideMimeType;
						    xhr.dispatchEvent = native_methods_1.default.xhrDispatchEvent || native_methods_1.default.dispatchEvent;
						    return xhr;
						  };

						  XhrSandbox.openNativeXhr = function openNativeXhr(xhr, url, isAsync) {
						    xhr.open('POST', url, isAsync);
						    xhr.setRequestHeader(builtin_header_names_1.default.cacheControl, 'no-cache, no-store, must-revalidate');
						  };

						  XhrSandbox._reopenXhr = function _reopenXhr(xhr, reqOpts) {
						    var url = reqOpts.openArgs[1];
						    var withCredentials = xhr.withCredentials;
						    reqOpts.withCredentials = withCredentials;
						    reqOpts.openArgs[1] = url_1.getAjaxProxyUrl(url, withCredentials ? url_2.Credentials.include : url_2.Credentials.sameOrigin);
						    native_methods_1.default.xhrOpen.apply(xhr, reqOpts.openArgs);
						    reqOpts.openArgs[1] = url;

						    for (var _i2 = 0, _reqOpts$headers2 = reqOpts.headers; _i2 < _reqOpts$headers2.length; _i2++) {
						      var header = _reqOpts$headers2[_i2];
						      native_methods_1.default.xhrSetRequestHeader.apply(xhr, header);
						    }
						  };

						  var _proto = XhrSandbox.prototype;

						  _proto.attach = function attach(window) {
						    _sandbox_base_with_de.prototype.attach.call(this, window);

						    var xhrSandbox = this;
						    var xmlHttpRequestProto = window.XMLHttpRequest.prototype;

						    var emitXhrCompletedEvent = function emitXhrCompletedEvent() {
						      var nativeRemoveEventListener = native_methods_1.default.xhrRemoveEventListener || native_methods_1.default.removeEventListener;
						      xhrSandbox.emit(xhrSandbox.XHR_COMPLETED_EVENT, {
						        xhr: this
						      });
						      nativeRemoveEventListener.call(this, 'loadend', emitXhrCompletedEvent);
						    };

						    var syncCookieWithClientIfNecessary = function syncCookieWithClientIfNecessary() {
						      if (this.readyState < this.HEADERS_RECEIVED) return;
						      var nativeRemoveEventListener = native_methods_1.default.xhrRemoveEventListener || native_methods_1.default.removeEventListener;

						      xhrSandbox._cookieSandbox.syncCookie();

						      nativeRemoveEventListener.call(this, 'readystatechange', syncCookieWithClientIfNecessary);
						    };

						    var xmlHttpRequestWrapper = function xmlHttpRequestWrapper() {
						      var nativeAddEventListener = native_methods_1.default.xhrAddEventListener || native_methods_1.default.addEventListener;
						      var xhr = new native_methods_1.default.XMLHttpRequest();
						      nativeAddEventListener.call(xhr, 'loadend', emitXhrCompletedEvent);
						      nativeAddEventListener.call(xhr, 'readystatechange', syncCookieWithClientIfNecessary);
						      return xhr;
						    };

						    for (var _i4 = 0; _i4 < XHR_READY_STATES.length; _i4++) {
						      var readyState = XHR_READY_STATES[_i4];
						      native_methods_1.default.objectDefineProperty(xmlHttpRequestWrapper, readyState, native_methods_1.default.objectGetOwnPropertyDescriptor(native_methods_1.default.XMLHttpRequest, readyState));
						    } // NOTE: We cannot just assign constructor property of the prototype of XMLHttpRequest starts from safari 9.0


						    overriding_1.overrideConstructor(window, 'XMLHttpRequest', xmlHttpRequestWrapper);
						    native_methods_1.default.objectDefineProperty(xmlHttpRequestProto, 'constructor', {
						      value: xmlHttpRequestWrapper
						    });
						    overriding_1.overrideFunction(xmlHttpRequestProto, 'abort', function () {
						      var _this2 = this;

						      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
						        args[_key] = arguments[_key];
						      }

						      if (xhrSandbox.gettingSettingInProgress()) return void xhrSandbox.delayUntilGetSettings(function () {
						        return _this2.abort.apply(_this2, args);
						      });
						      native_methods_1.default.xhrAbort.apply(this, args);
						      xhrSandbox.emit(xhrSandbox.XHR_ERROR_EVENT, {
						        err: new Error('XHR aborted'),
						        xhr: this
						      });
						    }); // NOTE: Redirect all requests to the Hammerhead proxy and ensure that requests don't
						    // violate Same Origin Policy.

						    overriding_1.overrideFunction(xmlHttpRequestProto, 'open', function () {
						      var _this3 = this;

						      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
						        args[_key2] = arguments[_key2];
						      }

						      var url = args[1];
						      if (url_1.getProxyUrl(url) === url) return void native_methods_1.default.xhrOpen.apply(this, args);
						      if (xhrSandbox.gettingSettingInProgress()) return void xhrSandbox.delayUntilGetSettings(function () {
						        return _this3.open.apply(_this3, args);
						      });
						      url = typeof url === 'string' ? url : String(url);
						      args[1] = url_1.getAjaxProxyUrl(url, this.withCredentials ? url_2.Credentials.include : url_2.Credentials.sameOrigin);
						      native_methods_1.default.xhrOpen.apply(this, args);
						      args[1] = url;
						      XhrSandbox.REQUESTS_OPTIONS.set(this, {
						        withCredentials: this.withCredentials,
						        openArgs: args,
						        headers: []
						      });
						    });
						    overriding_1.overrideFunction(xmlHttpRequestProto, 'send', function () {
						      var _this4 = this;

						      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
						        args[_key3] = arguments[_key3];
						      }

						      if (xhrSandbox.gettingSettingInProgress()) return void xhrSandbox.delayUntilGetSettings(function () {
						        return _this4.send.apply(_this4, args);
						      });
						      var reqOpts = XhrSandbox.REQUESTS_OPTIONS.get(this);
						      if (reqOpts.withCredentials !== this.withCredentials) XhrSandbox._reopenXhr(this, reqOpts);
						      xhrSandbox.emit(xhrSandbox.BEFORE_XHR_SEND_EVENT, {
						        xhr: this
						      });
						      native_methods_1.default.xhrSend.apply(this, args); // NOTE: For xhr with the sync mode

						      if (this.readyState === this.DONE) emitXhrCompletedEvent.call(this);
						      syncCookieWithClientIfNecessary.call(this);
						    });
						    overriding_1.overrideFunction(xmlHttpRequestProto, 'setRequestHeader', function () {
						      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
						        args[_key4] = arguments[_key4];
						      }

						      if (headers_1.isAuthorizationHeader(args[0])) args[1] = headers_1.addAuthorizationPrefix(args[1]);
						      native_methods_1.default.xhrSetRequestHeader.apply(this, args);
						      var reqOpts = XhrSandbox.REQUESTS_OPTIONS.get(this);
						      if (reqOpts) reqOpts.headers.push([String(args[0]), String(args[1])]);
						    });

						    if (native_methods_1.default.xhrResponseURLGetter) {
						      overriding_1.overrideDescriptor(window.XMLHttpRequest.prototype, 'responseURL', {
						        getter: function getter() {
						          return url_1.getDestinationUrl(native_methods_1.default.xhrResponseURLGetter.call(this));
						        }
						      });
						    }

						    overriding_1.overrideFunction(xmlHttpRequestProto, 'getResponseHeader', function () {
						      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
						        args[_key5] = arguments[_key5];
						      }

						      var value = native_methods_1.default.xhrGetResponseHeader.apply(this, args);
						      if (value && headers_1.isAuthenticateHeader(args[0])) value = headers_1.removeAuthenticatePrefix(value);
						      return value;
						    });
						    overriding_1.overrideFunction(xmlHttpRequestProto, 'getAllResponseHeaders', function () {
						      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
						        args[_key6] = arguments[_key6];
						      }

						      var allHeaders = native_methods_1.default.xhrGetAllResponseHeaders.apply(this, args);

						      while (headers_1.hasAuthenticatePrefix(allHeaders)) {
						        allHeaders = headers_1.removeAuthenticatePrefix(allHeaders);
						      }

						      return allHeaders;
						    });
						  };

						  return XhrSandbox;
						}(sandbox_base_with_delayed_settings_1.default);

						exports.default = XhrSandbox;
						XhrSandbox.REQUESTS_OPTIONS = new WeakMap();
						module.exports = exports.default;
					}
				},
				"settings.js": function (exports, module, require) {
					

					Object.defineProperty(exports, "__esModule", {
					  value: true
					});

					var Settings = /*#__PURE__*/function () {
					  function Settings() {
					    this._settings = {
					      isFirstPageLoad: true,
					      sessionId: '',
					      forceProxySrcForImage: false,
					      crossDomainProxyPort: '',
					      referer: '',
					      serviceMsgUrl: '',
					      transportWorkerUrl: '',
					      iframeTaskScriptTemplate: '',
					      cookie: '',
					      allowMultipleWindows: false,
					      isRecordMode: false,
					      windowId: ''
					    };
					  }

					  var _proto = Settings.prototype;

					  _proto.set = function set(value) {
					    this._settings = value;
					  };

					  _proto.get = function get() {
					    return this._settings;
					  };

					  return Settings;
					}();

					var settings = new Settings();
					exports.default = settings;
					module.exports = exports.default;
				},
				"transport": {
					"consts.js": function (exports, module, require) {
						

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});
						exports.SET_INITIAL_WORKER_SETTINGS_CMD = 'hammerhead|transport|set-initial-worker-settings';
						exports.HANDLE_PORT_CMD = 'hammerhead|transport|handle-port';
					},
					"index.js": function (exports, module, require) {
						

						function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

						function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var native_methods_1 = __importDefault(require("../sandbox/native-methods"));

						var settings_1 = __importDefault(require("../settings"));

						var browser_1 = require("../utils/browser");

						var pinkie_1 = __importDefault(require("pinkie"));

						var dom_1 = require("../utils/dom");

						var integer_id_generator_1 = __importDefault(require("../utils/integer-id-generator"));

						var transport_legacy_1 = __importDefault(require("./transport-legacy"));

						var consts_1 = require("./consts");

						var GET_MESSAGE_PORT = 'hammerhead|command|get-message-port';
						var SET_MESSAGE_PORT = 'hammerhead|command|set-message-port';

						var Transport = /*#__PURE__*/function (_transport_legacy_1$d) {
						  _inheritsLoose(Transport, _transport_legacy_1$d);

						  function Transport() {
						    var _this;

						    _this = _transport_legacy_1$d.apply(this, arguments) || this;
						    _this._transportWorker = null;
						    _this._idGenerator = new integer_id_generator_1.default();
						    _this._messageCallbacks = new Map();
						    _this._queue = [];
						    _this._shouldAddReferer = Transport._shouldAddReferer();
						    return _this;
						  }

						  var _proto = Transport.prototype;

						  _proto.start = function start(messageSandbox) {
						    var _this2 = this;

						    if (window === window.top) {
						      // @ts-ignore
						      this._transportWorker = new native_methods_1.default.Worker(settings_1.default.get().transportWorkerUrl, {
						        name: 'Transport'
						      });

						      this._transportWorker.postMessage({
						        cmd: consts_1.SET_INITIAL_WORKER_SETTINGS_CMD,
						        sessionId: settings_1.default.get().sessionId,
						        serviceMsgUrl: settings_1.default.get().serviceMsgUrl
						      });

						      this._transportWorker.addEventListener('message', function (e) {
						        return _this2._onWorkerMessage(e);
						      });

						      this._processQueue();
						    } else messageSandbox.sendServiceMsg({
						      cmd: GET_MESSAGE_PORT
						    }, window.top);

						    messageSandbox.on(messageSandbox.SERVICE_MSG_RECEIVED_EVENT, function (_ref) {
						      var message = _ref.message,
						          source = _ref.source,
						          ports = _ref.ports;

						      if (message.cmd === GET_MESSAGE_PORT) {
						        var channel = new native_methods_1.default.MessageChannel();
						        messageSandbox.sendServiceMsg({
						          cmd: SET_MESSAGE_PORT
						        }, source, [channel.port1]);

						        _this2._transportWorker.postMessage({
						          cmd: consts_1.HANDLE_PORT_CMD
						        }, [channel.port2]);
						      } else if (message.cmd === SET_MESSAGE_PORT) {
						        _this2._transportWorker = ports[0];

						        _this2._transportWorker.onmessage = function (e) {
						          return _this2._onWorkerMessage(e);
						        };

						        _this2._processQueue();
						      }
						    });
						  };

						  _proto._processQueue = function _processQueue() {
						    for (var _i2 = 0, _this$_queue2 = this._queue; _i2 < _this$_queue2.length; _i2++) {
						      var msgWrapper = _this$_queue2[_i2];

						      this._transportWorker.postMessage(msgWrapper);
						    }

						    this._queue.length = 0;
						  };

						  Transport._shouldAddReferer = function _shouldAddReferer() {
						    var frameElement = dom_1.getFrameElement(window);
						    return frameElement && dom_1.isIframeWithoutSrc(frameElement);
						  };

						  _proto._onWorkerMessage = function _onWorkerMessage(e) {
						    var _e$data = e.data,
						        id = _e$data.id,
						        result = _e$data.result;
						    if (!this._messageCallbacks.has(id)) return;

						    this._messageCallbacks.get(id)(result.err, result.data);

						    this._messageCallbacks.delete(id);
						  };

						  _proto.asyncServiceMsg = function asyncServiceMsg(msg, queued) {
						    var _this3 = this;

						    if (queued === void 0) {
						      queued = false;
						    }

						    return new pinkie_1.default(function (resolve, reject) {
						      var id = _this3._idGenerator.increment();

						      ++_this3._activeServiceMsgCount;
						      if (_this3._shouldAddReferer) msg.referer = settings_1.default.get().referer;

						      _this3._messageCallbacks.set(id, function (err, data) {
						        --_this3._activeServiceMsgCount;
						        if (!err) resolve(data);else {
						          if (!msg.disableResending && (browser_1.isWebKit || browser_1.isFirefox)) {
						            transport_legacy_1.default._removeMessageFromStore(msg.cmd);

						            transport_legacy_1.default._storeMessage(msg);

						            resolve();
						          }

						          if (msg.allowRejecting) reject(new Error(err));
						        }
						      });

						      if (_this3._transportWorker) _this3._transportWorker.postMessage({
						        id: id,
						        queued: queued,
						        msg: msg
						      });else _this3._queue.push({
						        id: id,
						        queued: queued,
						        msg: msg
						      });
						    });
						  };

						  _proto.queuedAsyncServiceMsg = function queuedAsyncServiceMsg(msg) {
						    return this.asyncServiceMsg(msg, true);
						  };

						  return Transport;
						}(transport_legacy_1.default);

						exports.default = Transport;
						module.exports = exports.default;
					},
					"transport-legacy.js": function (exports, module, require) {
						

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var pinkie_1 = __importDefault(require("pinkie"));

						var native_methods_1 = __importDefault(require("../sandbox/native-methods"));

						var settings_1 = __importDefault(require("../settings"));

						var json_hammerhead_1 = require("json-hammerhead");

						var SERVICE_MESSAGES_WAITING_INTERVAL = 50;

						var TransportLegacy = /*#__PURE__*/function () {
						  function TransportLegacy() {
						    this._activeServiceMsgCount = 0;
						  }

						  TransportLegacy._getStoredMessages = function _getStoredMessages() {
						    var nativeLocalStorage = native_methods_1.default.winLocalStorageGetter.call(window);
						    var storedMessagesStr = native_methods_1.default.storageGetItem.call(nativeLocalStorage, settings_1.default.get().sessionId);
						    return storedMessagesStr ? json_hammerhead_1.parse(storedMessagesStr) : [];
						  };

						  TransportLegacy._storeMessage = function _storeMessage(msg) {
						    var storedMessages = TransportLegacy._getStoredMessages();

						    var nativeLocalStorage = native_methods_1.default.winLocalStorageGetter.call(window);
						    storedMessages.push(msg);
						    native_methods_1.default.storageSetItem.call(nativeLocalStorage, settings_1.default.get().sessionId, json_hammerhead_1.stringify(storedMessages));
						  };

						  TransportLegacy._removeMessageFromStore = function _removeMessageFromStore(cmd) {
						    var messages = TransportLegacy._getStoredMessages();

						    var nativeLocalStorage = native_methods_1.default.winLocalStorageGetter.call(window);

						    for (var i = 0; i < messages.length; i++) {
						      if (messages[i].cmd === cmd) {
						        messages.splice(i, 1);
						        break;
						      }
						    }

						    native_methods_1.default.storageSetItem.call(nativeLocalStorage, settings_1.default.get().sessionId, json_hammerhead_1.stringify(messages));
						  };

						  var _proto = TransportLegacy.prototype;

						  _proto.batchUpdate = function batchUpdate() {
						    var storedMessages = TransportLegacy._getStoredMessages();

						    if (!storedMessages.length) return pinkie_1.default.resolve();
						    var tasks = [];
						    var nativeLocalStorage = native_methods_1.default.winLocalStorageGetter.call(window);
						    native_methods_1.default.storageRemoveItem.call(nativeLocalStorage, settings_1.default.get().sessionId);

						    for (var _i2 = 0; _i2 < storedMessages.length; _i2++) {
						      var storedMessage = storedMessages[_i2];
						      tasks.push(this.queuedAsyncServiceMsg(storedMessage));
						    }

						    return pinkie_1.default.all(tasks);
						  };

						  _proto.waitForServiceMessagesCompleted = function waitForServiceMessagesCompleted(timeout) {
						    var _this = this;

						    return new pinkie_1.default(function (resolve) {
						      if (!_this._activeServiceMsgCount) {
						        resolve();
						        return;
						      }

						      var intervalId = null;
						      var timeoutId = native_methods_1.default.setTimeout.call(window, function () {
						        native_methods_1.default.clearInterval.call(window, intervalId);
						        resolve();
						      }, timeout);
						      intervalId = native_methods_1.default.setInterval.call(window, function () {
						        if (_this._activeServiceMsgCount) return;
						        native_methods_1.default.clearInterval.call(window, intervalId);
						        native_methods_1.default.clearTimeout.call(window, timeoutId);
						        resolve();
						      }, SERVICE_MESSAGES_WAITING_INTERVAL);
						    });
						  };

						  return TransportLegacy;
						}();

						exports.default = TransportLegacy;
						module.exports = exports.default;
					}
				},
				"utils": {
					"browser.js": function (exports, module, require) {
						

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var bowser_1 = __importDefault(require("bowser"));

						var userAgent = navigator.userAgent.toLowerCase(); //@ts-ignore

						var info = bowser_1.default._detect(userAgent);

						var webkitVersionMatch = userAgent.match(/applewebkit\/(\d+(:?\.\d+)*)/); //Helper
						//@ts-ignore

						exports.compareVersions = bowser_1.default.compareVersions; //Platforms

						exports.isMacPlatform = !!info.mac;
						exports.isAndroid = !!info.android;
						exports.isIOS = !!info.ios;
						exports.isMobile = !!info.mobile;
						exports.isTablet = !!info.tablet; //Browsers

						exports.version = parseInt(info.version, 10);
						exports.fullVersion = info.version;
						exports.webkitVersion = webkitVersionMatch && webkitVersionMatch[1] || '';
						exports.isIE = !!(info.msie || info.msedge);
						exports.isIE11 = exports.isIE && exports.version === 11;
						exports.isIE10 = exports.isIE && exports.version === 10;
						exports.isIE9 = exports.isIE && exports.version === 9;
						exports.isFirefox = !!info.firefox;
						exports.isMSEdge = !!info.msedge;
						exports.isChrome = !!info.chrome;
						exports.isSafari = !!info.safari;
						exports.isWebKit = !!(info.webkit || info.blink);
						exports.isElectron = /electron/g.test(userAgent);
					},
					"constructor-is-called-without-new-keyword.js": function (exports, module, require) {
						

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						function default_1(callingContext, constructor) {
						  return callingContext instanceof constructor === false;
						}

						exports.default = default_1;
						module.exports = exports.default;
					},
					"cookie.js": function (exports, module, require) {
						

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var string_trim_1 = __importDefault(require("../../utils/string-trim"));

						var native_methods_1 = __importDefault(require("../sandbox/native-methods"));

						var COOKIE_PAIR_REGEX = /^((?:=)?([^=;]*)\s*=\s*)?([^\n\r\0]*)/;
						var TRAILING_SEMICOLON_REGEX = /;+$/;
						var FIX_COOKIE_DATE = /((?:\s|,)[0-9]{1,2})(?:\s|-)([A-Za-z]{3})(?:\s|-)([0-9]{4}\s)/;

						function parse(str) {
						  str = string_trim_1.default(str);
						  var trailingSemicolonCheck = TRAILING_SEMICOLON_REGEX.exec(str);
						  if (trailingSemicolonCheck) str = str.slice(0, trailingSemicolonCheck.index);
						  var firstSemicolonIdx = str.indexOf(';');
						  var keyValueString = firstSemicolonIdx > -1 ? str.substr(0, firstSemicolonIdx) : str;
						  var keyValueParsingResult = COOKIE_PAIR_REGEX.exec(keyValueString);
						  if (!keyValueParsingResult) return null;
						  var parsedCookie = {
						    key: keyValueParsingResult[1] ? string_trim_1.default(keyValueParsingResult[2]) : '',
						    value: string_trim_1.default(keyValueParsingResult[3])
						  };
						  if (firstSemicolonIdx === -1) return parsedCookie;
						  var attributesString = string_trim_1.default(str.slice(firstSemicolonIdx).replace(/^\s*;\s*/, ''));
						  if (attributesString.length === 0) return parsedCookie;
						  var attrValStrings = attributesString.split(/\s*;\s*/);

						  while (attrValStrings.length) {
						    var attrValueStr = attrValStrings.shift();
						    var separatorIdx = attrValueStr.indexOf('=');
						    var key = null;
						    var value = null;
						    var date = null;
						    if (separatorIdx === -1) key = attrValueStr;else {
						      key = attrValueStr.substr(0, separatorIdx);
						      value = string_trim_1.default(attrValueStr.substr(separatorIdx + 1));
						    }
						    key = string_trim_1.default(key.toLowerCase());

						    switch (key) {
						      case 'expires':
						        value = value.replace(FIX_COOKIE_DATE, '$1 $2 $3');
						        date = getUTCDate(Date.parse(value));
						        if (date) parsedCookie.expires = date;
						        break;

						      case 'max-age':
						        parsedCookie.maxAge = value;
						        break;

						      case 'path':
						        parsedCookie.path = value;
						        break;

						      case 'secure':
						        parsedCookie.secure = true;
						        break;

						      case 'httponly':
						        parsedCookie.httpOnly = true;
						        break;

						      case 'domain':
						        // NOTE: Remove leading '.'.
						        parsedCookie.domain = string_trim_1.default(value.replace(/^\./, ''));
						        break;

						      default:
						        break;
						    }
						  }

						  return parsedCookie;
						}

						exports.parse = parse;

						function formatClientString(parsedCookie) {
						  // eslint-disable-next-line no-restricted-properties
						  var cookieStr = parsedCookie.value || '';
						  if (parsedCookie.key !== '') cookieStr = parsedCookie.key + '=' + cookieStr;
						  return cookieStr;
						}

						exports.formatClientString = formatClientString;

						function setDefaultValues(parsedCookie, _ref) {
						  var hostname = _ref.hostname,
						      pathname = _ref.pathname;
						  if (!parsedCookie.domain) parsedCookie.domain = hostname; // eslint-disable-line no-restricted-properties

						  if (!parsedCookie.path || parsedCookie.path.charAt(0) !== '/') {
						    var path = pathname; // eslint-disable-line no-restricted-properties

						    var defaultPath = path.slice(0, path.lastIndexOf('/'));
						    parsedCookie.path = defaultPath || '/';
						  }

						  if (!parsedCookie.expires) parsedCookie.expires = 'Infinity';
						}

						exports.setDefaultValues = setDefaultValues;

						function domainMatch(currentDomain, cookieDomain) {
						  if (!cookieDomain) return true;
						  currentDomain = currentDomain.toLowerCase();
						  cookieDomain = cookieDomain.toLowerCase();
						  if (currentDomain === cookieDomain) return true;
						  var cookieDomainIdx = currentDomain.indexOf(cookieDomain);
						  return cookieDomainIdx > 0 && currentDomain.length === cookieDomain.length + cookieDomainIdx && currentDomain.charAt(cookieDomainIdx - 1) === '.';
						}

						exports.domainMatch = domainMatch;

						function pathMatch(currentPath, cookiePath) {
						  if (!cookiePath || cookiePath.charAt(0) !== '/' || currentPath === cookiePath) return true;
						  return currentPath.length > cookiePath.length && currentPath.indexOf(cookiePath) === 0 && (cookiePath.charAt(cookiePath.length - 1) === '/' || currentPath.charAt(cookiePath.length) === '/');
						}

						exports.pathMatch = pathMatch;

						function getUTCDate(timestamp) {
						  if (!arguments.length) timestamp = native_methods_1.default.dateNow();else if (isNaN(timestamp)) return null; // NOTE: remove milliseconds

						  timestamp = Math.floor(timestamp / 1000) * 1000;
						  return new native_methods_1.default.date(timestamp);
						}

						exports.getUTCDate = getUTCDate;
					},
					"create-property-desc.js": function (exports, module, require) {
						

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						function createPropertyDesc(descBase) {
						  descBase.configurable = true;
						  descBase.enumerable = true;
						  return descBase;
						}

						exports.default = createPropertyDesc;
						module.exports = exports.default;
					},
					"destination-location.js": function (exports, module, require) {
						

						var __importStar = void 0 && (void 0).__importStar || function (mod) {
						  if (mod && mod.__esModule) return mod;
						  var result = {};
						  if (mod != null) for (var k in mod) {
						    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
						  }
						  result["default"] = mod;
						  return result;
						};

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var sharedUrlUtils = __importStar(require("../../utils/url"));

						var domUtils = __importStar(require("./dom"));

						var urlResolver = __importStar(require("./url-resolver"));

						var settings_1 = __importDefault(require("../settings"));

						var native_methods_1 = __importDefault(require("../sandbox/native-methods"));

						var global_context_info_1 = __importDefault(require("./global-context-info"));

						var forcedLocation = null; // NOTE: exposed only for tests

						function getLocation() {
						  // NOTE: Used for testing. Unfortunately, we cannot override the 'getLocation' method in a test.
						  if (forcedLocation) return forcedLocation;
						  var frameElement = domUtils.getFrameElement(global_context_info_1.default.global); // NOTE: Fallback to the owner page's URL if we are in an iframe without src.

						  if (frameElement && domUtils.isIframeWithoutSrc(frameElement)) return settings_1.default.get().referer;
						  return global_context_info_1.default.global.location.toString();
						}

						exports.getLocation = getLocation; // NOTE: We need to be able to force the page location. During the test, Hammerhead should think that it is on the
						// proxied page, not in the test environment. Unfortunately, we cannot do it in any other way.

						function forceLocation(url) {
						  forcedLocation = url;
						}

						exports.forceLocation = forceLocation;

						function sameOriginCheck(location, checkedUrl) {
						  if (checkedUrl) checkedUrl = resolveUrl(checkedUrl);
						  return sharedUrlUtils.sameOriginCheck(location, checkedUrl);
						}

						exports.sameOriginCheck = sameOriginCheck;

						function resolveUrl(url, doc) {
						  var preProcessedUrl = sharedUrlUtils.getURLString(url);

						  if (preProcessedUrl && preProcessedUrl.indexOf('//') === 0) {
						    // eslint-disable-next-line no-restricted-properties
						    var pageProtocol = getParsed().protocol;
						    preProcessedUrl = pageProtocol + sharedUrlUtils.correctMultipleSlashes(preProcessedUrl, pageProtocol);
						  } else preProcessedUrl = sharedUrlUtils.correctMultipleSlashes(preProcessedUrl);

						  if (global_context_info_1.default.isInWorker) {
						    if (self.location.protocol !== 'blob:') // eslint-disable-line no-restricted-properties
						      return new native_methods_1.default.URL(preProcessedUrl, get()).href; // eslint-disable-line no-restricted-properties
						    else return url;
						  } else {
						    // @ts-ignore
						    return urlResolver.resolve(preProcessedUrl, doc || document);
						  }
						}

						exports.resolveUrl = resolveUrl;

						function get() {
						  var location = getLocation();
						  var parsedProxyUrl = sharedUrlUtils.parseProxyUrl(location);
						  return parsedProxyUrl ? parsedProxyUrl.destUrl : location;
						}

						exports.get = get;

						function withHash(hash) {
						  var location = get(); // NOTE: Remove the previous hash if there is any.

						  location = location.replace(/(#.*)$/, '');
						  return location + hash;
						}

						exports.withHash = withHash;

						function parseLocationThroughAnchor(url) {
						  // @ts-ignore
						  var resolver = urlResolver.getResolverElement(document); // eslint-disable-next-line no-restricted-properties

						  var destPort = sharedUrlUtils.parseUrl(url).port; // NOTE: IE browser adds the default port for the https protocol while resolving.

						  native_methods_1.default.anchorHrefSetter.call(resolver, get());
						  var hostname = native_methods_1.default.anchorHostnameGetter.call(resolver);
						  var pathname = native_methods_1.default.anchorPathnameGetter.call(resolver); // NOTE: IE ignores the first '/' symbol in the pathname.

						  if (pathname.charAt(0) !== '/') pathname = '/' + pathname; // TODO: Describe default ports logic.

						  return {
						    protocol: native_methods_1.default.anchorProtocolGetter.call(resolver),
						    // NOTE: Remove the default port.
						    port: destPort ? native_methods_1.default.anchorPortGetter.call(resolver) : '',
						    hostname: hostname,
						    // NOTE: Remove the default port from the host.
						    host: destPort ? native_methods_1.default.anchorHostGetter.call(resolver) : hostname,
						    pathname: pathname,
						    hash: resolver.hash,
						    search: native_methods_1.default.anchorSearchGetter.call(resolver)
						  };
						}

						function parseLocationThroughURL(url) {
						  var parsedUrl = new native_methods_1.default.URL(url);
						  /* eslint-disable no-restricted-properties */

						  return {
						    protocol: parsedUrl.protocol,
						    port: parsedUrl.port,
						    hostname: parsedUrl.hostname,
						    host: parsedUrl.host,
						    pathname: parsedUrl.pathname,
						    hash: parsedUrl.hash,
						    search: parsedUrl.search
						  };
						  /* eslint-enable no-restricted-properties */
						}

						function getParsed() {
						  var dest = get();
						  return global_context_info_1.default.isInWorker ? parseLocationThroughURL(dest) : parseLocationThroughAnchor(dest);
						}

						exports.getParsed = getParsed;

						function getOriginHeader() {
						  return sharedUrlUtils.getDomain(getParsed());
						}

						exports.getOriginHeader = getOriginHeader;
					},
					"dom.js": function (exports, module, require) {
						

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						var __importStar = void 0 && (void 0).__importStar || function (mod) {
						  if (mod && mod.__esModule) return mod;
						  var result = {};
						  if (mod != null) for (var k in mod) {
						    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
						  }
						  result["default"] = mod;
						  return result;
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var internal_attributes_1 = __importDefault(require("../../processing/dom/internal-attributes"));

						var internal_properties_1 = __importDefault(require("../../processing/dom/internal-properties"));

						var class_name_1 = __importDefault(require("../../shadow-ui/class-name"));

						var native_methods_1 = __importDefault(require("../sandbox/native-methods"));

						var urlUtils = __importStar(require("./url"));

						var style_1 = require("./style");

						var destination_location_1 = require("./destination-location");

						var browser_1 = require("./browser");

						var query_selector_1 = require("./query-selector");

						var feature_detection_1 = require("./feature-detection");

						var scrollbarSize = 0;
						var NATIVE_MAP_ELEMENT_STRINGS = ['[object HTMLMapElement]', '[object HTMLAreaElement]'];
						var WINDOW_IS_UNDEFINED = typeof window === 'undefined';
						var NATIVE_WINDOW_STR = WINDOW_IS_UNDEFINED ? '' : instanceToString(window);
						var IS_DOCUMENT_RE = /^\[object .*?Document]$/i;
						var IS_PROCESSING_INSTRUCTION_RE = /^\[object .*?ProcessingInstruction]$/i;
						var IS_SVG_ELEMENT_RE = /^\[object SVG\w+?Element]$/i;
						var IS_HTML_ELEMENT_RE = /^\[object HTML.*?Element]$/i;
						var IS_ARRAY_BUFFER_RE = /^\[object ArrayBuffer]$/i;
						var IS_DATA_VIEW_RE = /^\[object DataView]$/i;
						var NATIVE_TABLE_CELL_STR = WINDOW_IS_UNDEFINED ? '' : instanceToString(native_methods_1.default.createElement.call(document, 'td'));
						var ELEMENT_NODE_TYPE = WINDOW_IS_UNDEFINED ? -1 : Node.ELEMENT_NODE;
						var NOT_CONTENT_EDITABLE_ELEMENTS_RE = /^(select|option|applet|area|audio|canvas|datalist|keygen|map|meter|object|progress|source|track|video|img)$/;
						var INPUT_ELEMENTS_RE = /^(input|textarea|button)$/;
						var SCRIPT_OR_STYLE_RE = /^(script|style)$/i;
						var EDITABLE_INPUT_TYPES_RE = /^(email|number|password|search|tel|text|url)$/;
						var NUMBER_OR_EMAIL_INPUT_RE = /^(number|email)$/; // NOTE: input with 'file' type processed separately in 'UploadSandbox'

						var INPUT_WITH_NATIVE_DIALOG = /^(color|date|datetime-local|month|week)$/; // NOTE: We don't take into account the case of embedded contentEditable elements, and we
						// specify the contentEditable attribute for focusable elements.

						var FOCUSABLE_SELECTOR = 'input, select, textarea, button, body, iframe, [contenteditable="true"], [contenteditable=""], [tabIndex]';

						function isHidden(el) {
						  return el.offsetWidth <= 0 && el.offsetHeight <= 0;
						}

						function isAlwaysNotEditableElement(el) {
						  var tagName = getTagName(el);
						  return !!tagName && (NOT_CONTENT_EDITABLE_ELEMENTS_RE.test(tagName) || INPUT_ELEMENTS_RE.test(tagName));
						}

						function isLocationByProto(instance) {
						  var instanceCtor = null;

						  try {
						    // eslint-disable-next-line no-proto
						    instanceCtor = instance.__proto__;
						  } catch (e) {
						    // NOTE: Try to detect cross-domain window location.
						    // A cross-domain location has no the "assign" function in Safari and Chrome.
						    var shouldNotHaveAssign = browser_1.isSafari || browser_1.isChrome;
						    return instance.replace && (shouldNotHaveAssign || !!instance.assign);
						  }

						  if (!instanceCtor) return false;
						  var stringifiedInstanceCtor = native_methods_1.default.objectToString.call(instanceCtor);
						  return stringifiedInstanceCtor === '[object LocationPrototype]' || stringifiedInstanceCtor === '[object Location]'; // NOTE: "iPhone" Chrome device emulation case (GH-2080)
						}

						function closestFallback(el, selector) {
						  while (el) {
						    if (matches(el, selector)) return el;
						    el = native_methods_1.default.nodeParentNodeGetter.call(el);
						  }

						  return null;
						}

						function instanceToString(instance) {
						  if (!feature_detection_1.instanceAndPrototypeToStringAreEqual) return native_methods_1.default.objectToString.call(instance);
						  return instance && typeof instance === 'object' ? native_methods_1.default.objectToString.call(native_methods_1.default.objectGetPrototypeOf(instance)) : '';
						}

						exports.instanceToString = instanceToString;

						function getActiveElement(currentDocument) {
						  // NOTE: Sometimes document.activeElement returns an empty object or null (IE11).
						  // https://github.com/DevExpress/testcafe-hammerhead/issues/768
						  var doc = currentDocument || document;
						  var activeElement = native_methods_1.default.documentActiveElementGetter.call(doc);
						  var el = isDomElement(activeElement) ? activeElement : doc.body;

						  while (el && el.shadowRoot) {
						    // eslint-disable-next-line no-restricted-properties
						    var shadowEl = el.shadowRoot.activeElement;
						    if (!shadowEl) break;
						    el = shadowEl;
						  }

						  return el;
						}

						exports.getActiveElement = getActiveElement;

						function getChildVisibleIndex(select, child) {
						  var childrenArray = getSelectVisibleChildren(select);
						  return childrenArray.indexOf(child);
						}

						exports.getChildVisibleIndex = getChildVisibleIndex;

						function getIframeByElement(el) {
						  var elWindow = el[internal_properties_1.default.processedContext];
						  return getFrameElement(elWindow);
						}

						exports.getIframeByElement = getIframeByElement;

						function getIframeLocation(iframe) {
						  var documentLocation = null;

						  try {
						    // eslint-disable-next-line no-restricted-properties
						    documentLocation = native_methods_1.default.contentDocumentGetter.call(iframe).location.href;
						  } catch (e) {
						    documentLocation = null;
						  }

						  var srcLocation = native_methods_1.default.getAttribute.call(iframe, 'src' + internal_attributes_1.default.storedAttrPostfix) || native_methods_1.default.getAttribute.call(iframe, 'src') || native_methods_1.default.iframeSrcGetter.call(iframe);
						  var parsedProxyDocumentLocation = documentLocation && urlUtils.isSupportedProtocol(documentLocation) && urlUtils.parseProxyUrl(documentLocation);
						  var parsedProxySrcLocation = srcLocation && urlUtils.isSupportedProtocol(srcLocation) && urlUtils.parseProxyUrl(srcLocation);
						  return {
						    documentLocation: parsedProxyDocumentLocation ? parsedProxyDocumentLocation.destUrl : documentLocation,
						    srcLocation: parsedProxySrcLocation ? parsedProxySrcLocation.destUrl : srcLocation
						  };
						}

						exports.getIframeLocation = getIframeLocation;

						function getFrameElement(win) {
						  try {
						    return win.frameElement;
						  } catch (e) {
						    return null;
						  }
						}

						exports.getFrameElement = getFrameElement;

						function getMapContainer(el) {
						  var closestMap = closest(el, 'map');
						  var closestMapName = native_methods_1.default.getAttribute.call(closestMap, 'name');
						  var containerSelector = '[usemap="#' + closestMapName + '"]';
						  return native_methods_1.default.querySelector.call(findDocument(el), containerSelector);
						}

						exports.getMapContainer = getMapContainer;

						function getParentWindowWithSrc(window) {
						  var parent = window.parent;
						  var parentFrameElement = null;
						  if (window === window.top) return window;
						  if (parent === window.top || isCrossDomainWindows(window, parent)) return parent;

						  try {
						    parentFrameElement = parent.frameElement;
						  } catch (e) {
						    parentFrameElement = null;
						  }

						  if (parentFrameElement === null || !isIframeWithoutSrc(parentFrameElement)) return parent;
						  return getParentWindowWithSrc(parent);
						}

						exports.getParentWindowWithSrc = getParentWindowWithSrc;

						function getScrollbarSize() {
						  if (!scrollbarSize) {
						    var scrollDiv = native_methods_1.default.createElement.call(document, 'div');
						    scrollDiv.style.height = '100px';
						    scrollDiv.style.overflow = 'scroll';
						    scrollDiv.style.position = 'absolute';
						    scrollDiv.style.top = '-9999px';
						    scrollDiv.style.width = '100px';
						    native_methods_1.default.appendChild.call(document.body, scrollDiv);
						    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
						    scrollbarSize = scrollbarWidth;
						    var parent = native_methods_1.default.nodeParentNodeGetter.call(scrollDiv);
						    parent.removeChild(scrollDiv);
						  }

						  return scrollbarSize;
						}

						exports.getScrollbarSize = getScrollbarSize;

						function getSelectParent(child) {
						  var parent = native_methods_1.default.nodeParentNodeGetter.call(child);
						  return closest(parent, 'select');
						}

						exports.getSelectParent = getSelectParent;

						function getSelectVisibleChildren(select) {
						  var children = native_methods_1.default.elementQuerySelectorAll.call(select, 'optgroup, option');
						  var result = [];
						  var length = native_methods_1.default.nodeListLengthGetter.call(children);

						  for (var i = 0; i < length; i++) {
						    var child = children[i]; // NOTE: Firefox does not display groups without a label and with an empty label.

						    var shouldAdd = browser_1.isFirefox ? getTagName(child) !== 'optgroup' || child.label : true;
						    if (shouldAdd) result.push(child);
						  }

						  return result;
						}

						exports.getSelectVisibleChildren = getSelectVisibleChildren;

						function getTopSameDomainWindow(window) {
						  var result = window;
						  var currentWindow = window.parent;
						  if (result === window.top) return result;

						  while (currentWindow) {
						    if (!isCrossDomainWindows(window, currentWindow)) {
						      var frameElement = getFrameElement(currentWindow);
						      if (!frameElement || !isIframeWithoutSrc(frameElement)) result = currentWindow;
						    }

						    currentWindow = currentWindow !== window.top ? currentWindow.parent : null;
						  }

						  return result;
						}

						exports.getTopSameDomainWindow = getTopSameDomainWindow;

						function find(parent, selector, handler) {
						  var nodeList = query_selector_1.getNativeQuerySelectorAll(parent).call(parent, selector);

						  if (handler) {
						    var length = native_methods_1.default.nodeListLengthGetter.call(nodeList);

						    for (var i = 0; i < length; i++) {
						      handler(nodeList[i]);
						    }
						  }

						  return nodeList;
						}

						exports.find = find;

						function findDocument(el) {
						  if (el.documentElement) return el;
						  if (el.ownerDocument && el.ownerDocument.defaultView) return el.ownerDocument;
						  var parent = isElementNode(el) && native_methods_1.default.nodeParentNodeGetter.call(el);
						  return parent ? findDocument(parent) : document;
						}

						exports.findDocument = findDocument;

						function isContentEditableElement(el) {
						  var isContentEditable = false;
						  var element = null;
						  if (isTextNode(el)) element = el.parentElement || native_methods_1.default.nodeParentNodeGetter.call(el);else element = el;

						  if (element) {
						    isContentEditable = element.isContentEditable && !isAlwaysNotEditableElement(element);
						    return isRenderedNode(element) && (isContentEditable || findDocument(el).designMode === 'on');
						  }

						  return false;
						}

						exports.isContentEditableElement = isContentEditableElement;

						function isCrossDomainIframe(iframe, bySrc) {
						  var iframeLocation = getIframeLocation(iframe);
						  if (!bySrc && iframeLocation.documentLocation === null) return true;
						  var currentLocation = bySrc ? iframeLocation.srcLocation : iframeLocation.documentLocation;
						  if (currentLocation && urlUtils.isSupportedProtocol(currentLocation)) return !destination_location_1.sameOriginCheck(location.toString(), currentLocation);
						  return false;
						}

						exports.isCrossDomainIframe = isCrossDomainIframe;

						function isCrossDomainWindows(window1, window2) {
						  try {
						    if (window1 === window2) return false;
						    var window1Location = window1.location.toString();
						    var window2Location = window2.location.toString();
						    if (!urlUtils.isSupportedProtocol(window1Location) || !urlUtils.isSupportedProtocol(window2Location)) return false;
						    return !destination_location_1.sameOriginCheck(window1Location, window2Location);
						  } catch (e) {
						    return true;
						  }
						}

						exports.isCrossDomainWindows = isCrossDomainWindows;

						function isIframeWindow(wnd) {
						  return wnd !== wnd.top;
						}

						exports.isIframeWindow = isIframeWindow;

						function isDomElement(el) {
						  if (el instanceof native_methods_1.default.elementClass) return true;
						  return el && IS_HTML_ELEMENT_RE.test(instanceToString(el)) && isElementNode(el) && el.tagName;
						}

						exports.isDomElement = isDomElement;

						function getTagName(el) {
						  // NOTE: Check for tagName being a string, because it may be a function in an Angular app (T175340).
						  return el && typeof el.tagName === 'string' ? el.tagName.toLowerCase() : '';
						}

						exports.getTagName = getTagName;
						exports.SHADOW_ROOT_PARENT_ELEMENT = 'hammerhead|element|shadow-root-parent';

						function getNodeShadowRootParent(el) {
						  var parent = native_methods_1.default.nodeParentNodeGetter.call(el);

						  while (parent && parent.nodeType !== Node.DOCUMENT_FRAGMENT_NODE) {
						    parent = native_methods_1.default.nodeParentNodeGetter.call(parent);
						  }

						  return parent && parent[exports.SHADOW_ROOT_PARENT_ELEMENT];
						}

						exports.getNodeShadowRootParent = getNodeShadowRootParent;

						function getParentExceptShadowRoot(el) {
						  var parent = native_methods_1.default.nodeParentNodeGetter.call(el);
						  return parent && parent.nodeType === Node.DOCUMENT_FRAGMENT_NODE && parent[exports.SHADOW_ROOT_PARENT_ELEMENT] ? parent[exports.SHADOW_ROOT_PARENT_ELEMENT] : parent;
						}

						exports.getParentExceptShadowRoot = getParentExceptShadowRoot;

						function isElementInDocument(el, currentDocument) {
						  var doc = currentDocument || document;
						  if (!doc.documentElement) return false;
						  if (doc.documentElement.contains(el)) return true;
						  var shadowRootParent = getNodeShadowRootParent(el);
						  return shadowRootParent ? isElementInDocument(shadowRootParent) : false;
						}

						exports.isElementInDocument = isElementInDocument;

						function isElementInIframe(el, currentDocument) {
						  var doc = currentDocument || findDocument(el);
						  return window.document !== doc;
						}

						exports.isElementInIframe = isElementInIframe;

						function isHammerheadAttr(attr) {
						  return attr === internal_attributes_1.default.focusPseudoClass || attr === internal_attributes_1.default.hoverPseudoClass || attr.indexOf(internal_attributes_1.default.storedAttrPostfix) !== -1;
						}

						exports.isHammerheadAttr = isHammerheadAttr;

						function isIframeElement(el) {
						  return instanceToString(el) === '[object HTMLIFrameElement]';
						}

						exports.isIframeElement = isIframeElement;

						function isFrameElement(el) {
						  return instanceToString(el) === '[object HTMLFrameElement]';
						}

						exports.isFrameElement = isFrameElement;

						function isIframeWithoutSrc(iframe) {
						  var iframeLocation = getIframeLocation(iframe);
						  var iframeSrcLocation = iframeLocation.srcLocation;
						  var iframeDocumentLocation = iframeLocation.documentLocation; // NOTE: is a cross-domain iframe

						  if (iframeDocumentLocation === null) return false; // NOTE: after 'document.write' or 'document.open' call for iframe with/without src
						  // we will process it as iframe without src

						  if (native_methods_1.default.contentWindowGetter.call(iframe)[internal_properties_1.default.documentWasCleaned]) return true;
						  var iframeDocumentLocationHaveSupportedProtocol = urlUtils.isSupportedProtocol(iframeDocumentLocation); // NOTE: When an iframe has an empty src attribute (<iframe src></iframe>) or has no src attribute (<iframe></iframe>),
						  // the iframe.src property is not empty but has different values in different browsers.
						  // Its document location is 'about:blank'. Therefore, we should check the src attribute.

						  if (!iframeDocumentLocationHaveSupportedProtocol && !native_methods_1.default.getAttribute.call(iframe, 'src')) return true; // In Chrome, when an iframe with the src attribute is added to DOM,
						  // its documentLocation is set to "about:blank" until the iframe has been loaded.
						  // So, we should check srcLocation in this case.

						  if (iframeSrcLocation && urlUtils.isSupportedProtocol(iframeSrcLocation)) return false;
						  return !iframeDocumentLocationHaveSupportedProtocol;
						}

						exports.isIframeWithoutSrc = isIframeWithoutSrc;

						function isIframeWithSrcdoc(iframe) {
						  return native_methods_1.default.iframeSrcdocGetter && native_methods_1.default.hasAttribute.call(iframe, 'srcdoc');
						}

						exports.isIframeWithSrcdoc = isIframeWithSrcdoc;

						function isImgElement(el) {
						  return instanceToString(el) === '[object HTMLImageElement]';
						}

						exports.isImgElement = isImgElement;

						function isInputElement(el) {
						  return instanceToString(el) === '[object HTMLInputElement]';
						}

						exports.isInputElement = isInputElement;

						function isTitleElement(el) {
						  return instanceToString(el) === '[object HTMLTitleElement]';
						}

						exports.isTitleElement = isTitleElement;

						function isButtonElement(el) {
						  return instanceToString(el) === '[object HTMLButtonElement]';
						}

						exports.isButtonElement = isButtonElement;

						function isFieldSetElement(el) {
						  return instanceToString(el) === '[object HTMLFieldSetElement]';
						}

						exports.isFieldSetElement = isFieldSetElement;

						function isOptGroupElement(el) {
						  return instanceToString(el) === '[object HTMLOptGroupElement]';
						}

						exports.isOptGroupElement = isOptGroupElement;

						function isHtmlElement(el) {
						  return instanceToString(el) === '[object HTMLHtmlElement]';
						}

						exports.isHtmlElement = isHtmlElement;

						function isBodyElement(el) {
						  return instanceToString(el) === '[object HTMLBodyElement]';
						}

						exports.isBodyElement = isBodyElement;

						function isHeadElement(el) {
						  return instanceToString(el) === '[object HTMLHeadElement]';
						}

						exports.isHeadElement = isHeadElement;

						function isHeadOrBodyElement(el) {
						  var elString = instanceToString(el);
						  return elString === '[object HTMLHeadElement]' || elString === '[object HTMLBodyElement]';
						}

						exports.isHeadOrBodyElement = isHeadOrBodyElement;

						function isHeadOrBodyOrHtmlElement(el) {
						  var elString = instanceToString(el);
						  return elString === '[object HTMLHeadElement]' || elString === '[object HTMLBodyElement]' || elString === '[object HTMLHtmlElement]';
						}

						exports.isHeadOrBodyOrHtmlElement = isHeadOrBodyOrHtmlElement;

						function isBaseElement(el) {
						  return instanceToString(el) === '[object HTMLBaseElement]';
						}

						exports.isBaseElement = isBaseElement;

						function isScriptElement(el) {
						  return instanceToString(el) === '[object HTMLScriptElement]';
						}

						exports.isScriptElement = isScriptElement;

						function isStyleElement(el) {
						  return instanceToString(el) === '[object HTMLStyleElement]';
						}

						exports.isStyleElement = isStyleElement;

						function isLabelElement(el) {
						  return instanceToString(el) === '[object HTMLLabelElement]';
						}

						exports.isLabelElement = isLabelElement;

						function isTextAreaElement(el) {
						  return instanceToString(el) === '[object HTMLTextAreaElement]';
						}

						exports.isTextAreaElement = isTextAreaElement;

						function isOptionElement(el) {
						  return instanceToString(el) === '[object HTMLOptionElement]';
						}

						exports.isOptionElement = isOptionElement;

						function isRadioButtonElement(el) {
						  return isInputElement(el) && el.type.toLowerCase() === 'radio';
						}

						exports.isRadioButtonElement = isRadioButtonElement;

						function isColorInputElement(el) {
						  return isInputElement(el) && el.type.toLowerCase() === 'color';
						}

						exports.isColorInputElement = isColorInputElement;

						function isCheckboxElement(el) {
						  return isInputElement(el) && el.type.toLowerCase() === 'checkbox';
						}

						exports.isCheckboxElement = isCheckboxElement;

						function isSelectElement(el) {
						  return instanceToString(el) === '[object HTMLSelectElement]';
						}

						exports.isSelectElement = isSelectElement;

						function isFormElement(el) {
						  return instanceToString(el) === '[object HTMLFormElement]';
						}

						exports.isFormElement = isFormElement;

						function isFileInput(el) {
						  return isInputElement(el) && el.type.toLowerCase() === 'file';
						}

						exports.isFileInput = isFileInput;

						function isInputWithNativeDialog(el) {
						  return isInputElement(el) && INPUT_WITH_NATIVE_DIALOG.test(el.type.toLowerCase());
						}

						exports.isInputWithNativeDialog = isInputWithNativeDialog;

						function isBodyElementWithChildren(el) {
						  return isBodyElement(el) && native_methods_1.default.htmlCollectionLengthGetter.call(el.children);
						}

						exports.isBodyElementWithChildren = isBodyElementWithChildren;

						function isMapElement(el) {
						  return NATIVE_MAP_ELEMENT_STRINGS.indexOf(instanceToString(el)) !== -1;
						}

						exports.isMapElement = isMapElement;

						function isRenderedNode(node) {
						  return !(isProcessingInstructionNode(node) || isCommentNode(node) || SCRIPT_OR_STYLE_RE.test(node.nodeName));
						}

						exports.isRenderedNode = isRenderedNode;

						function getTabIndex(el) {
						  // NOTE: we obtain the tabIndex value from an attribute because the el.tabIndex
						  // property returns -1 for some elements (e.g. for body) with no tabIndex assigned
						  var tabIndex = native_methods_1.default.getAttribute.call(el, 'tabIndex');
						  tabIndex = parseInt(tabIndex, 10);
						  return isNaN(tabIndex) ? null : tabIndex;
						}

						exports.getTabIndex = getTabIndex;

						function isElementFocusable(el) {
						  if (!el) return false;
						  var tabIndex = getTabIndex(el);
						  var isDisabledElement = matches(el, ':disabled');
						  var isInvisibleElement = style_1.get(el, 'visibility') === 'hidden';
						  var isNotDisplayedElement = style_1.get(el, 'display') === 'none';
						  var isHiddenElement = browser_1.isWebKit ? isHidden(el) && !isOptionElement(el) : isHidden(el);
						  if (isDisabledElement || isInvisibleElement || isNotDisplayedElement || isHiddenElement) return false;
						  if (isOptionElement(el) && browser_1.isIE) return false;

						  if (isAnchorElement(el)) {
						    if (tabIndex !== null) return true;
						    return matches(el, 'a[href]');
						  }

						  if (isTableDataCellElement(el) && browser_1.isIE) return true;
						  return matches(el, FOCUSABLE_SELECTOR) || tabIndex !== null;
						}

						exports.isElementFocusable = isElementFocusable;

						function isShadowUIElement(element) {
						  // @ts-ignore
						  return !!element[internal_properties_1.default.shadowUIElement];
						}

						exports.isShadowUIElement = isShadowUIElement;

						function isWindow(instance) {
						  if (instance instanceof native_methods_1.default.windowClass) return true;

						  try {
						    // NOTE: The instanceToString call result has a strange values for the MessageEvent.target property:
						    // * [object DispHTMLWindow2] for IE11
						    // * [object Object] for MSEdge.
						    if ((browser_1.isIE || browser_1.isMSEdge) && instance && instance === instance.window) instance = instance.window;
						    return instance && instance.toString && NATIVE_WINDOW_STR === instanceToString(instance);
						  } catch (e) {
						    try {
						      // NOTE: If a cross-domain object has the 'top' field, this object is a window
						      // (not a document or location).
						      return !!instance.top;
						    } catch (x) {
						      return false;
						    }
						  }
						}

						exports.isWindow = isWindow;

						function isDocument(instance) {
						  if (instance instanceof native_methods_1.default.documentClass) return true;

						  try {
						    return instance && IS_DOCUMENT_RE.test(instanceToString(instance));
						  } catch (e) {
						    // NOTE: For cross-domain objects (windows, documents or locations), we return false because
						    // it's impossible to work with them in any case.
						    return false;
						  }
						}

						exports.isDocument = isDocument;

						function isBlob(instance) {
						  return instance && instanceToString(instance) === '[object Blob]';
						}

						exports.isBlob = isBlob;

						function isLocation(instance) {
						  if (!instance) return false;
						  if (browser_1.isIE || browser_1.isSafari || browser_1.isChrome) return isLocationByProto(instance);
						  return instance instanceof native_methods_1.default.locationClass || native_methods_1.default.objectToString.call(instance) === '[object Location]';
						}

						exports.isLocation = isLocation;

						function isSVGElement(instance) {
						  if (instance instanceof native_methods_1.default.svgElementClass) return true;
						  return instance && IS_SVG_ELEMENT_RE.test(instanceToString(instance));
						}

						exports.isSVGElement = isSVGElement;

						function isSVGElementOrChild(el) {
						  return !!closest(el, 'svg');
						}

						exports.isSVGElementOrChild = isSVGElementOrChild;

						function isFetchHeaders(instance) {
						  if (native_methods_1.default.Headers && instance instanceof native_methods_1.default.Headers) return true;
						  return instance && instanceToString(instance) === '[object Headers]';
						}

						exports.isFetchHeaders = isFetchHeaders;

						function isFetchRequest(instance) {
						  if (native_methods_1.default.Request && instance instanceof native_methods_1.default.Request) return true;
						  return instance && instanceToString(instance) === '[object Request]';
						}

						exports.isFetchRequest = isFetchRequest;

						function isElementReadOnly(el) {
						  return el.readOnly || el.getAttribute('readonly') === 'readonly';
						}

						exports.isElementReadOnly = isElementReadOnly;

						function isTextEditableInput(el) {
						  var attrType = el.getAttribute('type');
						  return isInputElement(el) && attrType ? EDITABLE_INPUT_TYPES_RE.test(attrType) : EDITABLE_INPUT_TYPES_RE.test(el.type);
						}

						exports.isTextEditableInput = isTextEditableInput;

						function isTextEditableElement(el) {
						  return isTextEditableInput(el) || isTextAreaElement(el);
						}

						exports.isTextEditableElement = isTextEditableElement;

						function isTextEditableElementAndEditingAllowed(el) {
						  return isTextEditableElement(el) && !isElementReadOnly(el);
						}

						exports.isTextEditableElementAndEditingAllowed = isTextEditableElementAndEditingAllowed;

						function isElementNode(node) {
						  return node && node.nodeType === ELEMENT_NODE_TYPE;
						}

						exports.isElementNode = isElementNode;

						function isTextNode(node) {
						  return instanceToString(node) === '[object Text]';
						}

						exports.isTextNode = isTextNode;

						function isProcessingInstructionNode(node) {
						  return IS_PROCESSING_INSTRUCTION_RE.test(instanceToString(node));
						}

						exports.isProcessingInstructionNode = isProcessingInstructionNode;

						function isCommentNode(node) {
						  return instanceToString(node) === '[object Comment]';
						}

						exports.isCommentNode = isCommentNode;

						function isDocumentFragmentNode(node) {
						  return instanceToString(node) === '[object DocumentFragment]';
						}

						exports.isDocumentFragmentNode = isDocumentFragmentNode;

						function isShadowRoot(root) {
						  return instanceToString(root) === '[object ShadowRoot]';
						}

						exports.isShadowRoot = isShadowRoot;

						function isAnchorElement(el) {
						  return instanceToString(el) === '[object HTMLAnchorElement]';
						}

						exports.isAnchorElement = isAnchorElement;

						function isTableElement(el) {
						  return instanceToString(el) === '[object HTMLTableElement]';
						}

						exports.isTableElement = isTableElement;

						function isTableDataCellElement(el) {
						  return instanceToString(el) === NATIVE_TABLE_CELL_STR;
						}

						exports.isTableDataCellElement = isTableDataCellElement;

						function isWebSocket(ws) {
						  return instanceToString(ws) === '[object WebSocket]';
						}

						exports.isWebSocket = isWebSocket;

						function isMessageEvent(e) {
						  return instanceToString(e) === '[object MessageEvent]';
						}

						exports.isMessageEvent = isMessageEvent;

						function isPerformanceNavigationTiming(entry) {
						  return instanceToString(entry) === '[object PerformanceNavigationTiming]';
						}

						exports.isPerformanceNavigationTiming = isPerformanceNavigationTiming;

						function isArrayBuffer(data) {
						  if (data instanceof native_methods_1.default.ArrayBuffer) return true;
						  return data && IS_ARRAY_BUFFER_RE.test(instanceToString(data));
						}

						exports.isArrayBuffer = isArrayBuffer;

						function isArrayBufferView(data) {
						  return data && native_methods_1.default.arrayBufferIsView(data);
						}

						exports.isArrayBufferView = isArrayBufferView;

						function isDataView(data) {
						  if (data instanceof native_methods_1.default.DataView) return true;
						  return data && IS_DATA_VIEW_RE.test(instanceToString(data));
						}

						exports.isDataView = isDataView;

						function matches(el, selector) {
						  if (!isElementNode(el)) return false;
						  return native_methods_1.default.matches.call(el, selector);
						}

						exports.matches = matches;

						function closest(el, selector) {
						  if (!isElementNode(el)) return null;
						  if (native_methods_1.default.closest) return native_methods_1.default.closest.call(el, selector);
						  return closestFallback(el, selector);
						}

						exports.closest = closest;

						function addClass(el, className) {
						  if (!el) return;
						  var classNames = className.split(/\s+/);

						  for (var _i2 = 0; _i2 < classNames.length; _i2++) {
						    var currentClassName = classNames[_i2];
						    native_methods_1.default.tokenListAdd.call(native_methods_1.default.elementClassListGetter.call(el), currentClassName);
						  }
						}

						exports.addClass = addClass;

						function removeClass(el, className) {
						  if (!el) return;
						  var classNames = className.split(/\s+/);

						  for (var _i4 = 0; _i4 < classNames.length; _i4++) {
						    var currentClassName = classNames[_i4];
						    native_methods_1.default.tokenListRemove.call(native_methods_1.default.elementClassListGetter.call(el), currentClassName);
						  }
						}

						exports.removeClass = removeClass;

						function hasClass(el, className) {
						  if (!el) return false;
						  return native_methods_1.default.tokenListContains.call(native_methods_1.default.elementClassListGetter.call(el), className);
						}

						exports.hasClass = hasClass;

						function parseDocumentCharset() {
						  var metaCharset = native_methods_1.default.querySelector.call(document, '.' + class_name_1.default.charset);
						  return metaCharset && metaCharset.getAttribute('charset');
						}

						exports.parseDocumentCharset = parseDocumentCharset;

						function getParents(el, selector) {
						  var parents = [];
						  var parent = getParent(el);

						  while (parent) {
						    if (!selector && isElementNode(parent) || selector && matches(parent, selector)) parents.push(parent);
						    parent = getParent(parent);
						  }

						  return parents;
						}

						exports.getParents = getParents;

						function getParent(el) {
						  el = el.assignedSlot || el; // eslint-disable-next-line no-restricted-properties

						  return native_methods_1.default.nodeParentNodeGetter.call(el) || el.host;
						}

						function findParent(node, includeSelf, predicate) {
						  if (includeSelf === void 0) {
						    includeSelf = false;
						  }

						  if (!includeSelf) node = native_methods_1.default.nodeParentNodeGetter.call(node);

						  while (node) {
						    if (typeof predicate !== 'function' || predicate(node)) return node;
						    node = native_methods_1.default.nodeParentNodeGetter.call(node);
						  }

						  return null;
						}

						exports.findParent = findParent;

						function nodeListToArray(nodeList) {
						  var result = [];
						  var length = native_methods_1.default.nodeListLengthGetter.call(nodeList);

						  for (var i = 0; i < length; i++) {
						    result.push(nodeList[i]);
						  }

						  return result;
						}

						exports.nodeListToArray = nodeListToArray;

						function getFileInputs(el) {
						  return isFileInput(el) ? [el] : nodeListToArray(query_selector_1.getNativeQuerySelectorAll(el).call(el, 'input[type=file]'));
						}

						exports.getFileInputs = getFileInputs;

						function getIframes(el) {
						  return isIframeElement(el) ? [el] : nodeListToArray(query_selector_1.getNativeQuerySelectorAll(el).call(el, 'iframe,frame'));
						}

						exports.getIframes = getIframes;

						function getScripts(el) {
						  return isScriptElement(el) ? [el] : nodeListToArray(query_selector_1.getNativeQuerySelectorAll(el).call(el, 'script'));
						}

						exports.getScripts = getScripts;

						function isNumberOrEmailInput(el) {
						  return isInputElement(el) && NUMBER_OR_EMAIL_INPUT_RE.test(el.type);
						}

						exports.isNumberOrEmailInput = isNumberOrEmailInput;

						function isInputWithoutSelectionProperties(el) {
						  if (!isNumberOrEmailInput(el)) return false;
						  var hasSelectionProperties = typeof el.selectionStart === 'number' && typeof el.selectionEnd === 'number';
						  return !hasSelectionProperties;
						}

						exports.isInputWithoutSelectionProperties = isInputWithoutSelectionProperties;
					},
					"event-emitter.js": function (exports, module, require) {
						

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var native_methods_1 = __importDefault(require("../sandbox/native-methods"));

						var browser_1 = require("./browser");

						var EventEmitter = /*#__PURE__*/function () {
						  function EventEmitter() {
						    this.eventsListeners = native_methods_1.default.objectCreate(null);
						  }

						  var _proto = EventEmitter.prototype;

						  _proto.emit = function emit(evt) {
						    var listeners = this.eventsListeners[evt];
						    if (!listeners) return;
						    var index = 0;

						    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
						      args[_key - 1] = arguments[_key];
						    }

						    while (listeners[index]) {
						      // HACK: For IE: after calling document.write, the IFrameSandbox event handler throws the
						      // 'Can't execute code from a freed script' exception because the document has been
						      // recreated.
						      if (browser_1.isIE) {
						        try {
						          listeners[index].toString();
						        } catch (e) {
						          native_methods_1.default.arraySplice.call(listeners, index, 1);
						          continue;
						        }
						      }

						      listeners[index++].apply(this, args);
						    }
						  };

						  _proto.off = function off(evt, listener) {
						    var listeners = this.eventsListeners[evt];
						    if (!listeners) return;
						    this.eventsListeners[evt] = native_methods_1.default.arrayFilter.call(listeners, function (currentListener) {
						      return currentListener !== listener;
						    });
						  };

						  _proto.on = function on(evt, listener) {
						    this.eventsListeners[evt] = this.eventsListeners[evt] || [];
						    if (this.eventsListeners[evt].indexOf(listener) === -1) this.eventsListeners[evt].push(listener);
						    return listener;
						  };

						  return EventEmitter;
						}();

						exports.default = EventEmitter;
						module.exports = exports.default;
					},
					"event.js": function (exports, module, require) {
						

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var native_methods_1 = __importDefault(require("../sandbox/native-methods"));

						var COMPOSED_EVENTS = ['blur', 'focus', 'focusin', 'focusout', 'click', 'dblclick', 'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'beforeinput', 'input', 'keydown', 'keyup'];
						exports.BUTTON = {
						  left: 0,
						  middle: 1,
						  right: 2
						};
						exports.BUTTONS_PARAMETER = {
						  noButton: 0,
						  leftButton: 1,
						  rightButton: 2
						};
						exports.WHICH_PARAMETER = {
						  noButton: 0,
						  leftButton: 1,
						  middleButton: 2,
						  rightButton: 3
						};
						exports.KEYBOARD_MODIFIERS_PARAMETER = {
						  altKey: 'Alt',
						  ctrlKey: 'Control',
						  shiftKey: 'Shift',
						  metaKey: 'Meta'
						};
						exports.DOM_EVENTS = ['click', 'dblclick', 'contextmenu', 'mousedown', 'mouseup', 'mousemove', 'mouseover', 'mouseout', 'mouseenter', 'mouseleave', 'touchstart', 'touchmove', 'touchend', 'keydown', 'keypress', 'keyup', 'textInput', 'textinput', 'input', 'change', 'focus', 'blur', 'MSPointerDown', 'MSPointerMove', 'MSPointerOver', 'MSPointerOut', 'MSPointerUp', 'pointerdown', 'pointermove', 'pointerover', 'pointerout', 'pointerup', 'pointerenter', 'pointerleave', 'dragstart', 'drop', 'focusin', 'focusout'];

						function preventDefault(ev, allowBubbling) {
						  if (ev.preventDefault) ev.preventDefault();else ev.returnValue = false;
						  if (!allowBubbling) stopPropagation(ev);
						}

						exports.preventDefault = preventDefault;

						function stopPropagation(ev) {
						  if (ev.stopImmediatePropagation) ev.stopImmediatePropagation();else if (ev.stopPropagation) ev.stopPropagation();
						  ev.cancelBubble = true;
						}

						exports.stopPropagation = stopPropagation;

						function isObjectEventListener(listener) {
						  return typeof listener === 'object' && listener && typeof listener.handleEvent === 'function';
						}

						exports.isObjectEventListener = isObjectEventListener;

						function isValidEventListener(listener) {
						  return typeof listener === 'function' || isObjectEventListener(listener);
						}

						exports.isValidEventListener = isValidEventListener;

						function callEventListener(ctx, listener, e) {
						  if (isObjectEventListener(listener)) return listener.handleEvent.call(listener, e);
						  return listener.call(ctx, e);
						}

						exports.callEventListener = callEventListener;

						function isComposedEvent(event) {
						  return COMPOSED_EVENTS.indexOf(event) !== -1;
						}

						exports.isComposedEvent = isComposedEvent;
						exports.hasPointerEvents = !!(native_methods_1.default.WindowPointerEvent || native_methods_1.default.WindowMSPointerEvent);
					},
					"extend.js": function (exports, module, require) {
						

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						function extend(target) {
						  target = target || {};
						  var currentObj = null;
						  var copy = null;
						  if (typeof target !== 'object' && target.toString() !== '[object Function]') target = {};

						  for (var i = 0; i < (arguments.length <= 1 ? 0 : arguments.length - 1); i++) {
						    currentObj = i + 1 < 1 || arguments.length <= i + 1 ? undefined : arguments[i + 1];

						    if (currentObj !== null) {
						      for (var name in currentObj) {
						        copy = currentObj[name];
						        if (target !== copy && copy !== void 0) target[name] = copy;
						      }
						    }
						  }

						  return target;
						}

						exports.default = extend;
						module.exports = exports.default;
					},
					"fast-apply.js": function (exports, module, require) {
						

						Object.defineProperty(exports, "__esModule", {
						  value: true
						}); // OPTIMIZATION: http://jsperf.com/call-apply-optimization

						function fastApply(owner, methName, args) {
						  var meth = owner[methName];

						  switch (args.length) {
						    case 1:
						      return meth.call(owner, args[0]);

						    case 2:
						      return meth.call(owner, args[0], args[1]);

						    case 3:
						      return meth.call(owner, args[0], args[1], args[2]);

						    case 4:
						      return meth.call(owner, args[0], args[1], args[2], args[3]);

						    case 5:
						      return meth.call(owner, args[0], args[1], args[2], args[3], args[4]);

						    default:
						      return meth.apply(owner, args);
						  }
						}

						exports.default = fastApply;
						module.exports = exports.default;
					},
					"feature-detection.js": function (exports, module, require) {
						

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						var __importStar = void 0 && (void 0).__importStar || function (mod) {
						  if (mod && mod.__esModule) return mod;
						  var result = {};
						  if (mod != null) for (var k in mod) {
						    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
						  }
						  result["default"] = mod;
						  return result;
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var native_methods_1 = __importDefault(require("../sandbox/native-methods"));

						var browserUtils = __importStar(require("./browser"));

						exports.emptyActionAttrFallbacksToTheLocation = false;
						exports.instanceAndPrototypeToStringAreEqual = false;
						exports.hasTouchEvents = false;
						exports.hasTouchPoints = false;
						exports.isTouchDevice = false;
						exports.hasDataTransfer = false;
						exports.attrGetNamedItemIsNotEnumerable = false;
						exports.getElementsByNameReturnsHTMLCollection = false;

						if (native_methods_1.default.createElement) {
						  var form = native_methods_1.default.createElement.call(document, 'form');
						  var elements = native_methods_1.default.getElementsByName.call(document, ''); // NOTE: In some browsers, elements without the url attribute return the location url
						  // when accessing this attribute directly. See form.action in Edge 25 as an example.

						  exports.emptyActionAttrFallbacksToTheLocation = native_methods_1.default.formActionGetter.call(form) === window.location.toString(); // NOTE: In Chrome, toString(window) equals '[object Window]' and toString(Window.prototype) equals '[object Blob]',
						  // this condition is also satisfied for Blob, Document, XMLHttpRequest, etc

						  exports.instanceAndPrototypeToStringAreEqual = native_methods_1.default.objectToString.call(window) === native_methods_1.default.objectToString.call(Window.prototype);
						  exports.hasTouchEvents = 'ontouchstart' in window; // NOTE: We need to check touch points only for IE, because it has PointerEvent and MSPointerEvent (IE10, IE11)
						  // instead of TouchEvent (T109295).

						  exports.hasTouchPoints = browserUtils.isIE && (navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0);
						  exports.isTouchDevice = (browserUtils.isMobile || browserUtils.isTablet) && exports.hasTouchEvents; // @ts-ignore

						  exports.hasDataTransfer = !!window.DataTransfer; // NOTE: In the Edge 17, the getNamedItem method of attributes object is not enumerable

						  exports.attrGetNamedItemIsNotEnumerable = !!native_methods_1.default.objectGetOwnPropertyDescriptor.call(window.Object, NamedNodeMap.prototype, 'getNamedItem'); // Both IE and Edge return an HTMLCollection, not a NodeList
						  // @ts-ignore

						  exports.getElementsByNameReturnsHTMLCollection = native_methods_1.default.objectGetPrototypeOf.call(window.Object, elements) === native_methods_1.default.HTMLCollection.prototype;
						}
					},
					"fn-bind.js": function (exports, module, require) {
						

						Object.defineProperty(exports, "__esModule", {
						  value: true
						}); // OPTIMIZATION: http://jsperf.com/bind-apply

						function fnBind(func, thisObj) {
						  return function () {
						    return func.apply(thisObj, arguments);
						  };
						}

						exports.default = fnBind;
						module.exports = exports.default;
					},
					"get-mime-type.js": function (exports, module, require) {
						

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var dom_1 = require("./dom");

						var native_methods_1 = __importDefault(require("../sandbox/native-methods")); // https://mimesniff.spec.whatwg.org/


						var IMAGE_TYPE_PATTERNS = [{
						  mime: 'image/x-icon',
						  pattern: [0x00, 0x00, 0x01, 0x00],
						  mask: [0xFF, 0xFF, 0xFF, 0xFF]
						}, {
						  mime: 'image/x-icon',
						  pattern: [0x00, 0x00, 0x02, 0x00],
						  mask: [0xFF, 0xFF, 0xFF, 0xFF]
						}, {
						  mime: 'image/bmp',
						  pattern: [0x42, 0x4D],
						  mask: [0xFF, 0xFF]
						}, {
						  mime: 'image/gif',
						  pattern: [0x47, 0x49, 0x46, 0x38, 0x37, 0x61],
						  mask: [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
						}, {
						  mime: 'image/gif',
						  pattern: [0x47, 0x49, 0x46, 0x38, 0x39, 0x61],
						  mask: [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
						}, {
						  mime: 'image/webp',
						  pattern: [0x52, 0x49, 0x46, 0x46, 0x00, 0x00, 0x00, 0x00, 0x57, 0x45, 0x42, 0x50, 0x56, 0x50],
						  mask: [0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
						}, {
						  mime: 'image/png',
						  pattern: [0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A],
						  mask: [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
						}, {
						  mime: 'image/jpeg',
						  pattern: [0xFF, 0xD8, 0xFF],
						  mask: [0xFF, 0xFF, 0xFF]
						}];
						var AUDIO_VIDEO_TYPE_PATTERNS = [{
						  mime: 'audio/basic',
						  pattern: [0x2E, 0x73, 0x6E, 0x64],
						  mask: [0xFF, 0xFF, 0xFF, 0xFF]
						}, {
						  mime: 'audio/aiff',
						  pattern: [0x46, 0x4F, 0x52, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x41, 0x49, 0x46, 0x46],
						  mask: [0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF]
						}, {
						  mime: 'audio/mpeg',
						  pattern: [0x49, 0x44, 0x33],
						  mask: [0xFF, 0xFF, 0xFF]
						}, {
						  mime: 'application/ogg',
						  pattern: [0x4F, 0x67, 0x67, 0x53, 0x00],
						  mask: [0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
						}, {
						  mime: 'audio/midi',
						  pattern: [0x4D, 0x54, 0x68, 0x64, 0x00, 0x00, 0x00, 0x06],
						  mask: [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
						}, {
						  mime: 'video/avi',
						  pattern: [0x52, 0x49, 0x46, 0x46, 0x00, 0x00, 0x00, 0x00, 0x41, 0x56, 0x49, 0x20],
						  mask: [0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF]
						}, {
						  mime: 'audio/wave',
						  pattern: [0x52, 0x49, 0x46, 0x46, 0x00, 0x00, 0x00, 0x00, 0x57, 0x41, 0x56, 0x45],
						  mask: [0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF]
						}];
						var FONT_TYPE_PATTERNS = [{
						  mime: 'application/vnd.ms-fontobject',
						  pattern: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x50],
						  mask: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF]
						}, {
						  mime: 'application/octet-stream',
						  pattern: [0x00, 0x01, 0x00, 0x00],
						  mask: [0xFF, 0xFF, 0xFF, 0xFF]
						}, {
						  mime: 'application/octet-stream',
						  pattern: [0x4F, 0x54, 0x54, 0x4F],
						  mask: [0xFF, 0xFF, 0xFF, 0xFF]
						}, {
						  mime: 'application/octet-stream',
						  pattern: [0x74, 0x74, 0x63, 0x66],
						  mask: [0xFF, 0xFF, 0xFF, 0xFF]
						}, {
						  mime: 'application/font-woff',
						  pattern: [0x77, 0x4F, 0x46, 0x46],
						  mask: [0xFF, 0xFF, 0xFF, 0xFF]
						}];
						var ARCHIVE_TYPE_PATTERNS = [{
						  mime: 'application/x-gzip',
						  pattern: [0x1F, 0x8B, 0x08],
						  mask: [0xFF, 0xFF, 0xFF]
						}, {
						  mime: 'application/zip',
						  pattern: [0x50, 0x4B, 0x03, 0x04],
						  mask: [0xFF, 0xFF, 0xFF, 0xFF]
						}, {
						  mime: 'application/x-rar-compressed',
						  pattern: [0x52, 0x61, 0x72, 0x20, 0x1A, 0x07, 0x00],
						  mask: [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
						}];

						function matchPattern(pattern, data) {
						  if (data.length < pattern.pattern.length) return false;
						  var p = 0;
						  var s = 0;
						  var maskedData = null;

						  while (p < pattern.pattern.length) {
						    maskedData = data[s] & pattern.mask[p];
						    if (maskedData !== pattern.pattern[p]) return false;
						    s++;
						    p++;
						  }

						  return true;
						}

						function matchMime(patternGroup, data) {
						  // Now, we don't support the cases when the data is is divided into several parts and its parts have different types
						  if (dom_1.isArrayBuffer(data[0])) data = data[0];else if (dom_1.isArrayBufferView(data[0])) data = dom_1.isDataView(data[0]) ? data[0].buffer : data[0];
						  var byteArray = new native_methods_1.default.Uint8Array(data);

						  for (var _i2 = 0; _i2 < patternGroup.length; _i2++) {
						    var pattern = patternGroup[_i2];
						    if (matchPattern(pattern, byteArray)) return pattern.mime;
						  }

						  byteArray = null;
						  return '';
						}

						function default_1(data) {
						  return matchMime(IMAGE_TYPE_PATTERNS, data) || matchMime(AUDIO_VIDEO_TYPE_PATTERNS, data) || matchMime(FONT_TYPE_PATTERNS, data) || matchMime(ARCHIVE_TYPE_PATTERNS, data);
						}

						exports.default = default_1;
						module.exports = exports.default;
					},
					"get-random-int-16-value.js": function (exports, module, require) {
						

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var native_methods_1 = __importDefault(require("../sandbox/native-methods"));

						function default_1() {
						  var array = new native_methods_1.default.Uint16Array(1);
						  native_methods_1.default.cryptoGetRandomValues.call(native_methods_1.default.crypto, array);
						  return array[0];
						}

						exports.default = default_1;
						module.exports = exports.default;
					},
					"get-top-opener-window.js": function (exports, module, require) {
						

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});
						var topOpenerWindow = null;

						function getTopOpenerWindow() {
						  if (!topOpenerWindow) {
						    topOpenerWindow = window.top;

						    while (topOpenerWindow.opener && topOpenerWindow !== topOpenerWindow.opener) {
						      topOpenerWindow = topOpenerWindow.opener.top;
						    }
						  }

						  return topOpenerWindow;
						}

						exports.default = getTopOpenerWindow;
						module.exports = exports.default;
					},
					"global-context-info.js": function (exports, module, require) {
						

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});
						var isInWorker = typeof window === 'undefined' && typeof self === 'object';
						var global = isInWorker ? self : window;
						exports.default = {
						  isInWorker: isInWorker,
						  global: global,
						  isServiceWorker: isInWorker && !global.XMLHttpRequest
						};
						module.exports = exports.default;
					},
					"html.js": function (exports, module, require) {
						

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						var __importStar = void 0 && (void 0).__importStar || function (mod) {
						  if (mod && mod.__esModule) return mod;
						  var result = {};
						  if (mod != null) for (var k in mod) {
						    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
						  }
						  result["default"] = mod;
						  return result;
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var internal_attributes_1 = __importDefault(require("../../processing/dom/internal-attributes"));

						var class_name_1 = __importDefault(require("../../shadow-ui/class-name"));

						var native_methods_1 = __importDefault(require("../sandbox/native-methods"));

						var dom_1 = __importDefault(require("../../processing/dom"));

						var dom_processor_1 = __importDefault(require("../dom-processor"));

						var header_1 = require("../../processing/script/header");

						var style_1 = __importDefault(require("../../processing/style"));

						var dom_2 = require("./dom");

						var url_1 = require("./url");

						var browser_1 = require("./browser");

						var urlResolver = __importStar(require("./url-resolver"));

						var internal_properties_1 = __importDefault(require("../../processing/dom/internal-properties"));

						var attributes_1 = require("../../processing/dom/attributes");

						var self_removing_scripts_1 = __importDefault(require("../../utils/self-removing-scripts"));

						var insert_position_1 = __importDefault(require("./insert-position"));

						var remove_element_1 = __importDefault(require("../utils/remove-element"));

						var FAKE_TAG_NAME_PREFIX = 'hh_fake_tag_name_';
						var FAKE_DOCTYPE_TAG_NAME = 'hh_fake_doctype';
						var FAKE_HEAD_TAG_NAME = FAKE_TAG_NAME_PREFIX + "head";
						var FAKE_BODY_TAG_NAME = FAKE_TAG_NAME_PREFIX + "body";
						var FAKE_ATTR_WITH_TAG_NAME = 'hh_fake_attr';
						var FAKE_TAG_NAME_RE = new RegExp('(<\\/?)' + FAKE_TAG_NAME_PREFIX, 'ig');
						var WRAP_TAGS_RE = /(<\/?)(html|head|body|table|tbody|tfoot|thead|tr|td|th|caption|colgroup)((?:\s[^>]*)?>)/ig;
						var WRAP_TAGS_TEMPLATE = "$1" + FAKE_TAG_NAME_PREFIX + "$2$3";
						var WRAP_COL_NOSCRIPT_TAGS_RE = /<(\/?(?:col|noscript))(\s[^>]*?)?(\s?\/)?>/ig;
						var WRAP_COL_NOSCRIPT_TAGS_TEMPLATE = "<br " + FAKE_ATTR_WITH_TAG_NAME + "=\"$1|$3\"$2>";
						var UNWRAP_COL_NOSCRIPT_TAGS_RE = new RegExp("<br([^>]*?) " + FAKE_ATTR_WITH_TAG_NAME + "=\"([^|]+)\\|([^\"]*)\"([^>]*)", 'ig');
						var WRAP_DOCTYPE_RE = /<!doctype([^>]*)>/ig;
						var WRAP_DOCTYPE_TEMPLATE = "<" + FAKE_DOCTYPE_TAG_NAME + ">$1</" + FAKE_DOCTYPE_TAG_NAME + ">";
						var UNWRAP_DOCTYPE_RE = new RegExp("<" + FAKE_DOCTYPE_TAG_NAME + ">([\\S\\s]*?)</" + FAKE_DOCTYPE_TAG_NAME + ">", 'ig');
						var FIND_SVG_RE = /<svg\s?[^>]*>/ig;
						var FIND_NS_ATTRS_RE = /\s(?:NS[0-9]+:[^"']+('|")[\S\s]*?\1|[^:]+:NS[0-9]+=(?:""|''))/g;

						var STORED_ATTRS_SELECTOR = function () {
						  var storedAttrs = [];

						  for (var _i2 = 0, _attributes_1$URL_ATT2 = attributes_1.URL_ATTRS; _i2 < _attributes_1$URL_ATT2.length; _i2++) {
						    var attr = _attributes_1$URL_ATT2[_i2];
						    storedAttrs.push(dom_1.default.getStoredAttrName(attr));
						  }

						  for (var _i4 = 0, _attributes_1$ATTRS_W2 = attributes_1.ATTRS_WITH_SPECIAL_PROXYING_LOGIC; _i4 < _attributes_1$ATTRS_W2.length; _i4++) {
						    var _attr = _attributes_1$ATTRS_W2[_i4];
						    storedAttrs.push(dom_1.default.getStoredAttrName(_attr));
						  }

						  return '[' + storedAttrs.join('],[') + ']';
						}();

						var SHADOW_UI_ELEMENTS_SELECTOR = "[class*=\"" + class_name_1.default.postfix + "\"]";
						var HOVER_AND_FOCUS_PSEUDO_CLASS_ELEMENTS_SELECTOR = "[" + internal_attributes_1.default.hoverPseudoClass + "],[" + internal_attributes_1.default.focusPseudoClass + "]";
						var FAKE_ELEMENTS_SELECTOR = FAKE_HEAD_TAG_NAME + ", " + FAKE_BODY_TAG_NAME;
						var HTML_PARSER_ELEMENT_FLAG = 'hammerhead|html-parser-element-flag';
						var SCRIPT_AND_STYLE_SELECTOR = 'script,link[rel="stylesheet"]';
						var htmlDocument = native_methods_1.default.createHTMLDocument.call(document.implementation, 'title');
						var htmlParser = native_methods_1.default.createDocumentFragment.call(htmlDocument);
						htmlParser[HTML_PARSER_ELEMENT_FLAG] = true;

						function getHtmlDocument() {
						  try {
						    // NOTE: IE bug: access denied.
						    if (htmlDocument.location) htmlDocument.location.toString();
						  } catch (e) {
						    htmlDocument = native_methods_1.default.createHTMLDocument.call(document.implementation, 'title');
						    htmlParser = native_methods_1.default.createDocumentFragment.call(htmlDocument);
						    htmlParser[HTML_PARSER_ELEMENT_FLAG] = true;
						  }

						  return htmlDocument;
						}

						function wrapHtmlText(html) {
						  return html.replace(WRAP_DOCTYPE_RE, WRAP_DOCTYPE_TEMPLATE).replace(WRAP_COL_NOSCRIPT_TAGS_RE, WRAP_COL_NOSCRIPT_TAGS_TEMPLATE).replace(WRAP_TAGS_RE, WRAP_TAGS_TEMPLATE);
						}

						function unwrapHtmlText(html) {
						  return html.replace(UNWRAP_DOCTYPE_RE, '<!doctype$1>').replace(UNWRAP_COL_NOSCRIPT_TAGS_RE, '<$2$1$4$3').replace(FAKE_TAG_NAME_RE, '$1');
						}

						function isPageHtml(html) {
						  return /^\s*(<\s*(!doctype|html|head|body)[^>]*>)/i.test(html);
						}

						exports.isPageHtml = isPageHtml;

						function processHtmlInternal(html, process) {
						  var container = native_methods_1.default.createElement.call(getHtmlDocument(), 'div');
						  html = wrapHtmlText(html);
						  native_methods_1.default.appendChild.call(htmlParser, container);
						  native_methods_1.default.elementInnerHTMLSetter.call(container, html);
						  var processedHtml = process(container) ? native_methods_1.default.elementInnerHTMLGetter.call(container) : html;
						  remove_element_1.default(container);
						  processedHtml = unwrapHtmlText(processedHtml); // NOTE: hack for IE (GH-1083)

						  if (browser_1.isIE && !browser_1.isMSEdge && html !== processedHtml) processedHtml = removeExtraSvgNamespaces(html, processedHtml);
						  return processedHtml;
						}

						function cleanUpUrlAttr(el) {
						  var urlAttr = dom_processor_1.default.getUrlAttr(el);
						  if (!urlAttr || !native_methods_1.default.hasAttribute.call(el, urlAttr)) return;
						  var storedAttr = dom_1.default.getStoredAttrName(urlAttr);

						  if (native_methods_1.default.hasAttribute.call(el, storedAttr)) {
						    native_methods_1.default.setAttribute.call(el, urlAttr, native_methods_1.default.getAttribute.call(el, storedAttr));
						    native_methods_1.default.removeAttribute.call(el, storedAttr);
						  }
						}

						function cleanUpAutocompleteAttr(el) {
						  if (!native_methods_1.default.hasAttribute.call(el, 'autocomplete')) return;
						  var storedAttr = dom_1.default.getStoredAttrName('autocomplete');

						  if (native_methods_1.default.hasAttribute.call(el, storedAttr)) {
						    var storedAttrValue = native_methods_1.default.getAttribute.call(el, storedAttr);
						    if (dom_1.default.isAddedAutocompleteAttr('autocomplete', storedAttrValue)) native_methods_1.default.removeAttribute.call(el, 'autocomplete');else native_methods_1.default.setAttribute.call(el, 'autocomplete', storedAttrValue);
						    native_methods_1.default.removeAttribute.call(el, storedAttr);
						  }
						}

						function cleanUpTargetAttr(el) {
						  var targetAttr = dom_processor_1.default.getTargetAttr(el);
						  if (!targetAttr || !native_methods_1.default.hasAttribute.call(el, targetAttr)) return;
						  var storedAttr = dom_1.default.getStoredAttrName(targetAttr);

						  if (native_methods_1.default.hasAttribute.call(el, storedAttr)) {
						    native_methods_1.default.setAttribute.call(el, targetAttr, native_methods_1.default.getAttribute.call(el, storedAttr));
						    native_methods_1.default.removeAttribute.call(el, storedAttr);
						  }
						}

						function cleanUpSandboxAttr(el) {
						  if (dom_processor_1.default.adapter.getTagName(el) !== 'iframe' || !native_methods_1.default.hasAttribute.call(el, 'sandbox')) return;
						  var storedAttr = dom_1.default.getStoredAttrName('sandbox');

						  if (native_methods_1.default.hasAttribute.call(el, storedAttr)) {
						    native_methods_1.default.setAttribute.call(el, 'sandbox', native_methods_1.default.getAttribute.call(el, storedAttr));
						    native_methods_1.default.removeAttribute.call(el, storedAttr);
						  }
						}

						function cleanUpStyleAttr(el) {
						  if (!native_methods_1.default.hasAttribute.call(el, 'style')) return;
						  var storedAttr = dom_1.default.getStoredAttrName('style');

						  if (native_methods_1.default.hasAttribute.call(el, storedAttr)) {
						    native_methods_1.default.setAttribute.call(el, 'style', native_methods_1.default.getAttribute.call(el, storedAttr));
						    native_methods_1.default.removeAttribute.call(el, storedAttr);
						  }
						}

						function cleanUpHtml(html) {
						  return processHtmlInternal(html, function (container) {
						    var changed = false;
						    dom_2.find(container, STORED_ATTRS_SELECTOR, function (el) {
						      cleanUpUrlAttr(el);
						      cleanUpAutocompleteAttr(el);
						      cleanUpTargetAttr(el);
						      cleanUpSandboxAttr(el);
						      cleanUpStyleAttr(el);
						      changed = true;
						    });
						    dom_2.find(container, SHADOW_UI_ELEMENTS_SELECTOR, function (el) {
						      var parent = native_methods_1.default.nodeParentNodeGetter.call(el);

						      if (parent) {
						        native_methods_1.default.removeChild.call(parent, el);
						        changed = true;
						      }
						    });
						    dom_2.find(container, 'script', function (el) {
						      var textContent = native_methods_1.default.nodeTextContentGetter.call(el);
						      var cleanedTextContent = header_1.remove(textContent);

						      if (textContent !== cleanedTextContent) {
						        native_methods_1.default.nodeTextContentSetter.call(el, cleanedTextContent);
						        changed = true;
						      }
						    });
						    dom_2.find(container, 'style', function (el) {
						      var textContent = native_methods_1.default.nodeTextContentGetter.call(el);
						      var cleanedTextContent = style_1.default.cleanUp(textContent, url_1.parseProxyUrl);

						      if (textContent !== cleanedTextContent) {
						        native_methods_1.default.nodeTextContentSetter.call(el, cleanedTextContent);
						        changed = true;
						      }
						    });
						    dom_2.find(container, HOVER_AND_FOCUS_PSEUDO_CLASS_ELEMENTS_SELECTOR, function (el) {
						      native_methods_1.default.removeAttribute.call(el, internal_attributes_1.default.hoverPseudoClass);
						      native_methods_1.default.removeAttribute.call(el, internal_attributes_1.default.focusPseudoClass);
						      changed = true;
						    });
						    dom_2.find(container, FAKE_ELEMENTS_SELECTOR, function (el) {
						      var innerHtml = native_methods_1.default.elementInnerHTMLGetter.call(el);

						      if (innerHtml.indexOf(self_removing_scripts_1.default.iframeInit) !== -1) {
						        native_methods_1.default.elementInnerHTMLSetter.call(el, innerHtml.replace(self_removing_scripts_1.default.iframeInit, ''));
						        changed = true;
						      }
						    });
						    return changed;
						  });
						}

						exports.cleanUpHtml = cleanUpHtml;

						function processHtml(html, options) {
						  if (options === void 0) {
						    options = {};
						  }

						  var _options = options,
						      parentTag = _options.parentTag,
						      prepareDom = _options.prepareDom,
						      processedContext = _options.processedContext,
						      isPage = _options.isPage;
						  return processHtmlInternal(html, function (container) {
						    var doctypeElement = null;
						    var htmlElements = [];
						    var children = [];
						    var length = 0; // @ts-ignore

						    var storedBaseUrl = urlResolver.getBaseUrl(document);
						    if (prepareDom) prepareDom(container);

						    if (native_methods_1.default.htmlCollectionLengthGetter.call(container.children)) {
						      children = native_methods_1.default.elementQuerySelectorAll.call(container, '*');
						      length = native_methods_1.default.nodeListLengthGetter.call(children);
						    }

						    var base = native_methods_1.default.elementQuerySelector.call(container, 'base');
						    if (base) // @ts-ignore
						      urlResolver.updateBase(native_methods_1.default.getAttribute.call(base, 'href'), document);

						    for (var i = 0; i < length; i++) {
						      var child = children[i];

						      if (dom_2.isScriptElement(child)) {
						        var scriptContent = native_methods_1.default.nodeTextContentGetter.call(child);
						        native_methods_1.default.nodeTextContentSetter.call(child, unwrapHtmlText(scriptContent));
						      }

						      child[internal_properties_1.default.processedContext] = processedContext;
						      dom_processor_1.default.processElement(child, url_1.convertToProxyUrl);
						      var elTagName = dom_2.getTagName(child);
						      if (elTagName === FAKE_HEAD_TAG_NAME || elTagName === FAKE_BODY_TAG_NAME) htmlElements.push(child);else if (elTagName === FAKE_DOCTYPE_TAG_NAME) doctypeElement = child;
						    }

						    if (!parentTag) {
						      if (htmlElements.length) {
						        for (var _i6 = 0; _i6 < htmlElements.length; _i6++) {
						          var htmlElement = htmlElements[_i6];
						          var firstScriptOrStyle = native_methods_1.default.elementQuerySelector.call(htmlElement, SCRIPT_AND_STYLE_SELECTOR);
						          if (firstScriptOrStyle) native_methods_1.default.insertAdjacentHTML.call(firstScriptOrStyle, insert_position_1.default.beforeBegin, self_removing_scripts_1.default.iframeInit);else native_methods_1.default.insertAdjacentHTML.call(htmlElement, insert_position_1.default.beforeEnd, self_removing_scripts_1.default.iframeInit);
						        }
						      } else if (doctypeElement && browser_1.isIE) native_methods_1.default.insertAdjacentHTML.call(doctypeElement, insert_position_1.default.afterEnd, self_removing_scripts_1.default.iframeInit);else if (isPage) native_methods_1.default.insertAdjacentHTML.call(container, insert_position_1.default.afterBegin, self_removing_scripts_1.default.iframeInit);
						    } // @ts-ignore


						    urlResolver.updateBase(storedBaseUrl, document);
						    return true;
						  });
						}

						exports.processHtml = processHtml;

						function dispose() {
						  htmlParser = null;
						  htmlDocument = null;
						}

						exports.dispose = dispose;

						function isInternalHtmlParserElement(el) {
						  while (native_methods_1.default.nodeParentNodeGetter.call(el)) {
						    el = native_methods_1.default.nodeParentNodeGetter.call(el);
						  }

						  return !!el[HTML_PARSER_ELEMENT_FLAG];
						}

						exports.isInternalHtmlParserElement = isInternalHtmlParserElement;

						function removeExtraSvgNamespaces(html, processedHtml) {
						  var initialSvgStrs = html.match(FIND_SVG_RE);
						  var index = 0;
						  if (!initialSvgStrs) return processedHtml;
						  return processedHtml.replace(FIND_SVG_RE, function (svgStr) {
						    var initialSvgStr = initialSvgStrs[index];
						    var initialNSAttrs = initialSvgStr ? initialSvgStr.match(FIND_NS_ATTRS_RE) : null;
						    if (initialSvgStr) index++;
						    return initialSvgStr ? svgStr.replace(FIND_NS_ATTRS_RE, function () {
						      var replacement = initialNSAttrs ? initialNSAttrs.join('') : '';
						      if (initialNSAttrs) initialNSAttrs = null;
						      return replacement;
						    }) : svgStr;
						  });
						}
					},
					"insert-position.js": function (exports, module, require) {
						

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});
						var InsertPosition;

						(function (InsertPosition) {
						  InsertPosition["beforeBegin"] = "beforebegin";
						  InsertPosition["afterBegin"] = "afterbegin";
						  InsertPosition["beforeEnd"] = "beforeend";
						  InsertPosition["afterEnd"] = "afterend";
						})(InsertPosition || (InsertPosition = {}));

						exports.default = InsertPosition;
						module.exports = exports.default;
					},
					"integer-id-generator.js": function (exports, module, require) {
						

						function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

						function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});
						var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
						var MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;

						var IntegerIdGenerator = /*#__PURE__*/function () {
						  function IntegerIdGenerator() {
						    this._id = MIN_SAFE_INTEGER;
						  }

						  var _proto = IntegerIdGenerator.prototype;

						  _proto.increment = function increment() {
						    this._id = this._id === MAX_SAFE_INTEGER ? MIN_SAFE_INTEGER : this._id + 1;
						    return this._id;
						  };

						  _createClass(IntegerIdGenerator, [{
						    key: "value",
						    get: function get() {
						      return this._id;
						    }
						  }]);

						  return IntegerIdGenerator;
						}();

						exports.default = IntegerIdGenerator;
						module.exports = exports.default;
					},
					"next-tick.js": function (exports, module, require) {
						

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var pinkie_1 = __importDefault(require("pinkie"));

						var native_methods_1 = __importDefault(require("../sandbox/native-methods"));

						function default_1() {
						  return new pinkie_1.default(function (resolve) {
						    return native_methods_1.default.setTimeout.call(window, resolve, 0);
						  });
						}

						exports.default = default_1;
						module.exports = exports.default;
					},
					"noop.js": function (exports, module, require) {
						

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						function default_1() {// NOTE: empty function
						}

						exports.default = default_1;
						module.exports = exports.default;
					},
					"overriding.js": function (exports, module, require) {
						

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var native_methods_1 = __importDefault(require("../sandbox/native-methods"));

						var internal_properties_1 = __importDefault(require("../../processing/dom/internal-properties"));

						function replaceNativeAccessor(descriptor, accessorName, newAccessor) {
						  if (newAccessor && descriptor[accessorName]) {
						    var stringifiedNativeAccessor = descriptor[accessorName].toString();

						    newAccessor.toString = function () {
						      return stringifiedNativeAccessor;
						    };
						  }

						  descriptor[accessorName] = newAccessor;
						}

						function createOverriddenDescriptor(obj, prop, _ref) {
						  var getter = _ref.getter,
						      setter = _ref.setter,
						      value = _ref.value;
						  var descriptor = native_methods_1.default.objectGetOwnPropertyDescriptor(obj, prop);
						  if ((getter || setter) && value) throw new Error('Cannot both specify accessors and a value or writable attribute.');

						  if (value) {
						    if (!native_methods_1.default.objectHasOwnProperty.call(descriptor, 'writable')) {
						      descriptor.writable = !!descriptor.set;
						      delete descriptor.get;
						      delete descriptor.set;
						    }

						    descriptor.value = value; // eslint-disable-line no-restricted-properties
						  } else {
						    if (native_methods_1.default.objectHasOwnProperty.call(descriptor, 'writable')) {
						      delete descriptor.value; // eslint-disable-line no-restricted-properties

						      delete descriptor.writable;
						    }

						    if (getter !== null) replaceNativeAccessor(descriptor, 'get', getter);
						    if (setter !== null) replaceNativeAccessor(descriptor, 'set', setter);
						  }

						  return descriptor;
						}

						exports.createOverriddenDescriptor = createOverriddenDescriptor;

						function overrideDescriptor(obj, prop, propertyAccessors) {
						  var descriptor = createOverriddenDescriptor(obj, prop, propertyAccessors);
						  native_methods_1.default.objectDefineProperty(obj, prop, descriptor);
						}

						exports.overrideDescriptor = overrideDescriptor;

						function overrideFunctionName(fn, name) {
						  var nameDescriptor = native_methods_1.default.objectGetOwnPropertyDescriptor(fn, 'name');
						  if (!nameDescriptor) return;
						  nameDescriptor.value = name; // eslint-disable-line no-restricted-properties

						  native_methods_1.default.objectDefineProperty(fn, 'name', nameDescriptor);
						}

						function overrideToString(nativeFnWrapper, nativeFn) {
						  native_methods_1.default.objectDefineProperty(nativeFnWrapper, internal_properties_1.default.nativeStrRepresentation, {
						    value: native_methods_1.default.Function.prototype.toString.call(nativeFn),
						    configurable: true
						  });
						} // TODO: this function should not be used outside this file
						// for now it's used to flag cases in which we assign our wrapper to a native function when it is missing


						function overrideStringRepresentation(nativeFnWrapper, nativeFn) {
						  overrideFunctionName(nativeFnWrapper, nativeFn.name);
						  overrideToString(nativeFnWrapper, nativeFn);
						}

						exports.overrideStringRepresentation = overrideStringRepresentation;

						function isNativeFunction(fn) {
						  return !native_methods_1.default.objectHasOwnProperty.call(fn, internal_properties_1.default.nativeStrRepresentation);
						}

						exports.isNativeFunction = isNativeFunction;

						function overrideFunction(obj, fnName, wrapper) {
						  var fn = obj[fnName];

						  if (isNativeFunction(fn)) {
						    overrideStringRepresentation(wrapper, fn);
						    obj[fnName] = wrapper;
						  }
						}

						exports.overrideFunction = overrideFunction;

						function overrideConstructor(obj, fnName, wrapper, overrideProtoConstructor) {
						  if (overrideProtoConstructor === void 0) {
						    overrideProtoConstructor = false;
						  }

						  var nativePrototype = obj[fnName]['prototype'];
						  overrideFunction(obj, fnName, wrapper); // NOTE: restore native prototype (to make `instanceof` work as expected)

						  obj[fnName]['prototype'] = nativePrototype; // NOTE: we need to override the `constructor` property of a prototype
						  // because sometimes native constructor can be retrieved from it

						  if (overrideProtoConstructor) obj[fnName]['prototype']['constructor'] = wrapper;
						}

						exports.overrideConstructor = overrideConstructor;
					},
					"position.js": function (exports, module, require) {
						

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						var __importStar = void 0 && (void 0).__importStar || function (mod) {
						  if (mod && mod.__esModule) return mod;
						  var result = {};
						  if (mod != null) for (var k in mod) {
						    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
						  }
						  result["default"] = mod;
						  return result;
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var native_methods_1 = __importDefault(require("../sandbox/native-methods"));

						var domUtils = __importStar(require("./dom"));

						var styleUtils = __importStar(require("./style"));

						var browser_1 = require("./browser");

						function getAreaElementRectangle(el, mapContainer) {
						  var shape = native_methods_1.default.getAttribute.call(el, 'shape');
						  var coords = native_methods_1.default.getAttribute.call(el, 'coords');
						  var i = 0;
						  if (shape === 'default') return getElementRectangle(mapContainer);
						  if (!shape || !coords) return null;
						  coords = coords.split(',');
						  if (!coords.length) return null;

						  for (i = 0; i < coords.length; i++) {
						    coords[i] = parseInt(coords[i], 10);
						    if (typeof coords[i] !== 'number') return null;
						  }

						  var rectangle = null;

						  switch (shape) {
						    case 'rect':
						      if (coords.length === 4) {
						        rectangle = {
						          height: coords[3] - coords[1],
						          left: coords[0],
						          top: coords[1],
						          width: coords[2] - coords[0]
						        };
						      }

						      break;

						    case 'circle':
						      if (coords.length === 3) {
						        rectangle = {
						          height: coords[2] * 2,
						          left: coords[0] - coords[2],
						          top: coords[1] - coords[2],
						          width: coords[2] * 2
						        };
						      }

						      break;

						    case 'poly':
						      if (coords.length >= 6 && coords.length % 2 === 0) {
						        rectangle = {};
						        rectangle.left = rectangle.right = coords[0];
						        rectangle.top = rectangle.bottom = coords[1];

						        for (i = 2; i < coords.length; i += 2) {
						          rectangle.left = coords[i] < rectangle.left ? coords[i] : rectangle.left;
						          rectangle.right = coords[i] > rectangle.right ? coords[i] : rectangle.right;
						        }

						        for (i = 3; i < coords.length; i += 2) {
						          rectangle.top = coords[i] < rectangle.top ? coords[i] : rectangle.top;
						          rectangle.bottom = coords[i] > rectangle.bottom ? coords[i] : rectangle.bottom;
						        }

						        rectangle.height = rectangle.bottom - rectangle.top;
						        rectangle.width = rectangle.right - rectangle.left;
						      }

						      break;
						  }

						  if (rectangle) {
						    var containerOffset = getOffsetPosition(mapContainer);
						    rectangle.left += containerOffset.left;
						    rectangle.top += containerOffset.top;
						  }

						  return rectangle;
						}

						function getMapElementRectangle(el) {
						  var mapContainer = domUtils.getMapContainer(el);

						  if (mapContainer) {
						    if (/^map$/i.test(el.tagName)) return getElementRectangle(mapContainer);else if (/^area$/i.test(el.tagName)) {
						      var areaElementRectangle = getAreaElementRectangle(el, mapContainer);
						      if (areaElementRectangle) return areaElementRectangle;
						    }
						  }

						  return {
						    height: 0,
						    left: 0,
						    top: 0,
						    width: 0
						  };
						}

						function getSelectChildRectangle(el) {
						  var select = domUtils.getSelectParent(el);

						  if (select) {
						    var selectRectangle = getElementRectangle(select);
						    var selectBorders = styleUtils.getBordersWidth(select);
						    var selectRightScrollbar = styleUtils.getInnerWidth(select) === select.clientWidth ? 0 : domUtils.getScrollbarSize();
						    var optionHeight = styleUtils.getOptionHeight(select);
						    var optionRealIndex = domUtils.getChildVisibleIndex(select, el);
						    var optionVisibleIndex = Math.max(optionRealIndex - styleUtils.getScrollTop(select) / optionHeight, 0);
						    return {
						      height: optionHeight,
						      left: selectRectangle.left + selectBorders.left,
						      top: selectRectangle.top + selectBorders.top + styleUtils.getElementPadding(select).top + optionVisibleIndex * optionHeight,
						      width: selectRectangle.width - (selectBorders.left + selectBorders.right) - selectRightScrollbar
						    };
						  }

						  return getElementRectangle(el);
						}

						function getSvgElementRelativeRectangle(el) {
						  var isSvgTextElement = domUtils.matches(el, 'tspan') || domUtils.matches(el, 'tref') || domUtils.getTagName(el) === 'textpath';
						  var boundingClientRect = el.getBoundingClientRect();
						  var elementRect = {
						    height: !isSvgTextElement ? boundingClientRect.height : el.offsetHeight,
						    left: boundingClientRect.left + (document.body.scrollLeft || document.documentElement.scrollLeft),
						    top: boundingClientRect.top + (document.body.scrollTop || document.documentElement.scrollTop),
						    width: !isSvgTextElement ? boundingClientRect.width : el.offsetWidth
						  };

						  if (isSvgTextElement) {
						    var offsetParent = styleUtils.getOffsetParent(el);
						    var elOffset = styleUtils.getOffset(el);
						    var offsetParentOffset = styleUtils.getOffset(offsetParent);
						    var offsetParentIsBody = domUtils.matches(offsetParent, 'body');
						    return {
						      height: elementRect.height || boundingClientRect.height,
						      left: offsetParentIsBody ? el.offsetLeft || elOffset.left : offsetParentOffset.left + el.offsetLeft,
						      top: offsetParentIsBody ? el.offsetTop || elOffset.top : offsetParentOffset.top + el.offsetTop,
						      width: elementRect.width || boundingClientRect.width
						    };
						  }

						  if (browser_1.isFirefox || browser_1.isIE) return elementRect;
						  var strokeWidth = native_methods_1.default.getAttribute.call(el, 'stroke-width') || styleUtils.get(el, 'stroke-width'); // NOTE: We assume that the 'stroke-width' attribute can only be set in pixels.

						  strokeWidth = strokeWidth ? +strokeWidth.replace(/px|em|ex|pt|pc|cm|mm|in/, '') : 1;
						  if (strokeWidth && +strokeWidth % 2 !== 0) strokeWidth = +strokeWidth + 1;

						  if ((domUtils.matches(el, 'line') || domUtils.matches(el, 'polyline') || domUtils.matches(el, 'polygon') || domUtils.matches(el, 'path')) && (!elementRect.width || !elementRect.height)) {
						    if (!elementRect.width && elementRect.height) {
						      elementRect.left -= strokeWidth / 2;
						      elementRect.width = strokeWidth;
						    } else if (elementRect.width && !elementRect.height) {
						      elementRect.height = strokeWidth;
						      elementRect.top -= strokeWidth / 2;
						    }
						  } else {
						    if (domUtils.matches(el, 'polygon')) {
						      elementRect.height += 2 * strokeWidth;
						      elementRect.left -= strokeWidth;
						      elementRect.top -= strokeWidth;
						      elementRect.width += 2 * strokeWidth;
						    }

						    elementRect.height += strokeWidth;
						    elementRect.left -= strokeWidth / 2;
						    elementRect.top -= strokeWidth / 2;
						    elementRect.width += strokeWidth;
						  }

						  return elementRect;
						}

						function getElementRectangle(el) {
						  var rectangle = {};
						  if (domUtils.isMapElement(el)) rectangle = getMapElementRectangle(el);else if (styleUtils.isVisibleChild(el)) rectangle = getSelectChildRectangle(el);else {
						    var elementOffset = getOffsetPosition(el);
						    var relativeRectangle = domUtils.isSVGElementOrChild(el) ? getSvgElementRelativeRectangle(el) : el.getBoundingClientRect();
						    rectangle = {
						      height: relativeRectangle.height,
						      left: elementOffset.left,
						      top: elementOffset.top,
						      width: relativeRectangle.width
						    };
						  }
						  rectangle.height = Math.round(rectangle.height);
						  rectangle.left = Math.round(rectangle.left);
						  rectangle.top = Math.round(rectangle.top);
						  rectangle.width = Math.round(rectangle.width);
						  return rectangle;
						}

						exports.getElementRectangle = getElementRectangle;

						function shouldIgnoreMouseEventInsideIframe(el, x, y) {
						  if (domUtils.getTagName(el) !== 'iframe') return false;
						  var rect = getElementRectangle(el);
						  var borders = styleUtils.getBordersWidth(el);
						  var padding = styleUtils.getElementPadding(el); // NOTE: we detect element's 'content' position: left, right, top and bottom
						  // which does not consider borders and paddings, so we need to
						  // subtract it for right and bottom, and add for left and top

						  var left = rect.left + borders.left + padding.left;
						  var top = rect.top + borders.top + padding.top;
						  var right = rect.left + rect.width - borders.right - padding.right;
						  var bottom = rect.top + rect.height - borders.bottom - padding.bottom;
						  return x >= left && x <= right && y >= top && y <= bottom;
						}

						exports.shouldIgnoreMouseEventInsideIframe = shouldIgnoreMouseEventInsideIframe;

						function calcOffsetPosition(el, borders, offsetPosition) {
						  var isSvg = domUtils.isSVGElementOrChild(el);
						  var relativeRectangle = isSvg ? getSvgElementRelativeRectangle(el) : null;
						  return {
						    left: isSvg ? relativeRectangle.left + borders.left : offsetPosition.left + borders.left,
						    top: isSvg ? relativeRectangle.top + borders.top : offsetPosition.top + borders.top
						  };
						}

						function calcOffsetPositionInIframe(el, borders, offsetPosition, doc, currentIframe) {
						  var iframeBorders = styleUtils.getBordersWidth(currentIframe);
						  borders.left += iframeBorders.left;
						  borders.top += iframeBorders.top;
						  var iframeOffset = getOffsetPosition(currentIframe);
						  var iframePadding = styleUtils.getElementPadding(currentIframe);
						  var clientPosition = null;

						  if (domUtils.isSVGElementOrChild(el)) {
						    var relativeRectangle = getSvgElementRelativeRectangle(el);
						    clientPosition = {
						      x: relativeRectangle.left - (document.body.scrollLeft || document.documentElement.scrollLeft) + borders.left,
						      y: relativeRectangle.top - (document.body.scrollTop || document.documentElement.scrollTop) + borders.top
						    };
						  } else {
						    clientPosition = offsetToClientCoords({
						      x: offsetPosition.left + borders.left,
						      y: offsetPosition.top + borders.top
						    }, doc);
						  }

						  return {
						    left: iframeOffset.left + clientPosition.x + iframePadding.left,
						    top: iframeOffset.top + clientPosition.y + iframePadding.top
						  };
						}

						function getOffsetPosition(el, roundFn) {
						  if (roundFn === void 0) {
						    roundFn = Math.round;
						  }

						  if (domUtils.isMapElement(el)) {
						    var rectangle = getMapElementRectangle(el);
						    return {
						      left: rectangle.left,
						      top: rectangle.top
						    };
						  }

						  var doc = domUtils.findDocument(el);
						  var isInIframe = domUtils.isElementInIframe(el, doc);
						  var currentIframe = isInIframe ? domUtils.getIframeByElement(doc) : null;
						  var offsetPosition = doc === el ? styleUtils.getOffset(doc.documentElement) : styleUtils.getOffset(el); // NOTE: The jquery .offset() function doesn't take the body's border into account (except IE7)
						  // http://bugs.jquery.com/ticket/7948.
						  // NOTE: Sometimes, in IE, the getElementFromPoint method returns a cross-domain iframe's documentElement,
						  // but there’s no way to access its body.

						  var borders = doc.body ? styleUtils.getBordersWidth(doc.body) : {
						    left: 0,
						    top: 0
						  };
						  var calcOffsetPositionFn = !isInIframe || !currentIframe ? calcOffsetPosition : calcOffsetPositionInIframe;

						  var _calcOffsetPositionFn = calcOffsetPositionFn(el, borders, offsetPosition, doc, currentIframe),
						      left = _calcOffsetPositionFn.left,
						      top = _calcOffsetPositionFn.top;

						  if (typeof roundFn === 'function') {
						    left = roundFn(left);
						    top = roundFn(top);
						  }

						  return {
						    left: left,
						    top: top
						  };
						}

						exports.getOffsetPosition = getOffsetPosition;

						function offsetToClientCoords(coords, currentDocument) {
						  var doc = currentDocument || document;
						  var documentScrollLeft = styleUtils.getScrollLeft(doc);
						  var documentScrollTop = styleUtils.getScrollTop(doc);
						  var bodyScrollLeft = styleUtils.getScrollLeft(doc.body);
						  var bodyScrollTop = styleUtils.getScrollTop(doc.body);
						  var scrollLeft = documentScrollLeft === 0 && bodyScrollLeft !== 0 ? bodyScrollLeft : documentScrollLeft;
						  var scrollTop = documentScrollTop === 0 && bodyScrollTop !== 0 ? bodyScrollTop : documentScrollTop;
						  return {
						    x: coords.x - scrollLeft,
						    y: coords.y - scrollTop
						  };
						}

						exports.offsetToClientCoords = offsetToClientCoords;
					},
					"query-selector.js": function (exports, module, require) {
						

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var native_methods_1 = __importDefault(require("../sandbox/native-methods"));

						var dom_1 = require("./dom");

						function getNativeQuerySelector(el) {
						  if (dom_1.isDomElement(el)) return native_methods_1.default.elementQuerySelector;
						  return dom_1.isDocumentFragmentNode(el) || dom_1.isShadowRoot(el) ? native_methods_1.default.documentFragmentQuerySelector : native_methods_1.default.querySelector;
						}

						exports.getNativeQuerySelector = getNativeQuerySelector;

						function getNativeQuerySelectorAll(el) {
						  // NOTE: Do not return the isDocument function instead of the isDomElement
						  // it leads to the `Invalid calling object` error in some cases in IE11 (GH-1846)
						  if (dom_1.isDomElement(el)) return native_methods_1.default.elementQuerySelectorAll;
						  return dom_1.isDocumentFragmentNode(el) || dom_1.isShadowRoot(el) ? native_methods_1.default.documentFragmentQuerySelectorAll : native_methods_1.default.querySelectorAll;
						}

						exports.getNativeQuerySelectorAll = getNativeQuerySelectorAll;
					},
					"remove-element.js": function (exports, module, require) {
						

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var native_methods_1 = __importDefault(require("../sandbox/native-methods"));

						function default_1(element) {
						  var parent = native_methods_1.default.nodeParentNodeGetter.call(element);
						  if (parent) native_methods_1.default.removeChild.call(parent, element);
						  return element;
						}

						exports.default = default_1;
						module.exports = exports.default;
					},
					"style.js": function (exports, module, require) {
						

						var __importStar = void 0 && (void 0).__importStar || function (mod) {
						  if (mod && mod.__esModule) return mod;
						  var result = {};
						  if (mod != null) for (var k in mod) {
						    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
						  }
						  result["default"] = mod;
						  return result;
						};

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var domUtils = __importStar(require("./dom"));

						var browserUtils = __importStar(require("./browser"));

						var featureDetection = __importStar(require("./feature-detection"));

						var native_methods_1 = __importDefault(require("../sandbox/native-methods")); // NOTE: For Chrome.


						var MIN_SELECT_SIZE_VALUE = 4;

						function getIntValue(value) {
						  value = value || '';
						  var parsedValue = parseInt(value.replace('px', ''), 10);
						  return isNaN(parsedValue) ? 0 : parsedValue;
						}

						function get(el, property, doc, win) {
						  el = el.documentElement || el;
						  var computedStyle = getComputedStyle(el, doc, win);
						  return computedStyle && computedStyle[property];
						}

						exports.get = get;

						function set(el, property, value) {
						  el = el.documentElement || el;
						  el.style[property] = value;
						}

						exports.set = set;

						function getBordersWidth(el) {
						  return {
						    bottom: getIntValue(get(el, 'borderBottomWidth')),
						    left: getIntValue(get(el, 'borderLeftWidth')),
						    right: getIntValue(get(el, 'borderRightWidth')),
						    top: getIntValue(get(el, 'borderTopWidth'))
						  };
						}

						exports.getBordersWidth = getBordersWidth;

						function getComputedStyle(el, doc, win) {
						  // NOTE: In Firefox, after calling the 'document.write' function for nested iframes with html src value
						  // document.defaultView equals 'null'. But 'window.document' equals 'document'.
						  // This is why, we are forced to calculate the targetWindow instead of use document.defaultView.
						  doc = doc || document;
						  win = win || window;
						  var targetWin = doc.defaultView || win;
						  return targetWin.getComputedStyle(el, null);
						}

						exports.getComputedStyle = getComputedStyle;

						function getElementMargin(el) {
						  return {
						    bottom: getIntValue(get(el, 'marginBottom')),
						    left: getIntValue(get(el, 'marginLeft')),
						    right: getIntValue(get(el, 'marginRight')),
						    top: getIntValue(get(el, 'marginTop'))
						  };
						}

						exports.getElementMargin = getElementMargin;

						function getElementPadding(el) {
						  return {
						    bottom: getIntValue(get(el, 'paddingBottom')),
						    left: getIntValue(get(el, 'paddingLeft')),
						    right: getIntValue(get(el, 'paddingRight')),
						    top: getIntValue(get(el, 'paddingTop'))
						  };
						}

						exports.getElementPadding = getElementPadding;

						function getElementScroll(el) {
						  var isHtmlElement = domUtils.isHtmlElement(el);
						  var currentWindow = window;

						  if (isHtmlElement && domUtils.isElementInIframe(el)) {
						    var currentIframe = domUtils.getIframeByElement(el);
						    if (currentIframe) currentWindow = native_methods_1.default.contentWindowGetter.call(currentIframe);
						  }

						  var targetEl = isHtmlElement ? currentWindow : el;
						  return {
						    left: getScrollLeft(targetEl),
						    top: getScrollTop(targetEl)
						  };
						}

						exports.getElementScroll = getElementScroll;

						function getWidth(el) {
						  if (!el) return null;
						  if (domUtils.isWindow(el)) return el.document.documentElement.clientWidth;

						  if (domUtils.isDocument(el)) {
						    var doc = el.documentElement;
						    var clientProp = 'clientWidth';
						    var scrollProp = 'scrollWidth';
						    var offsetProp = 'offsetWidth';
						    if (doc[clientProp] >= doc[scrollProp]) return doc[clientProp];
						    return Math.max(el.body[scrollProp], doc[scrollProp], el.body[offsetProp], doc[offsetProp]);
						  }

						  var value = el.offsetWidth;
						  value -= getIntValue(get(el, 'paddingLeft'));
						  value -= getIntValue(get(el, 'paddingRight'));
						  value -= getIntValue(get(el, 'borderLeftWidth'));
						  value -= getIntValue(get(el, 'borderRightWidth'));
						  return value;
						}

						exports.getWidth = getWidth;

						function getHeight(el) {
						  if (!el) return null;
						  if (domUtils.isWindow(el)) return el.document.documentElement.clientHeight;

						  if (domUtils.isDocument(el)) {
						    var doc = el.documentElement;
						    var clientProp = 'clientHeight';
						    var scrollProp = 'scrollHeight';
						    var offsetProp = 'offsetHeight';
						    if (doc[clientProp] >= doc[scrollProp]) return doc[clientProp];
						    return Math.max(el.body[scrollProp], doc[scrollProp], el.body[offsetProp], doc[offsetProp]);
						  }

						  var value = el.offsetHeight;
						  value -= getIntValue(get(el, 'paddingTop'));
						  value -= getIntValue(get(el, 'paddingBottom'));
						  value -= getIntValue(get(el, 'borderTopWidth'));
						  value -= getIntValue(get(el, 'borderBottomWidth'));
						  return value;
						}

						exports.getHeight = getHeight;

						function getInnerWidth(el) {
						  if (!el) return null;
						  if (domUtils.isWindow(el)) return el.document.documentElement.clientWidth;
						  if (domUtils.isDocument(el)) return el.documentElement.clientWidth;
						  var value = el.offsetWidth;
						  value -= getIntValue(get(el, 'borderLeftWidth'));
						  value -= getIntValue(get(el, 'borderRightWidth'));
						  return value;
						}

						exports.getInnerWidth = getInnerWidth;

						function getInnerHeight(el) {
						  if (!el) return null;
						  if (domUtils.isWindow(el)) return el.document.documentElement.clientHeight;
						  if (domUtils.isDocument(el)) return el.documentElement.clientHeight;
						  var value = el.offsetHeight;
						  value -= getIntValue(get(el, 'borderTopWidth'));
						  value -= getIntValue(get(el, 'borderBottomWidth'));
						  return value;
						}

						exports.getInnerHeight = getInnerHeight;

						function getOptionHeight(select) {
						  var realSizeValue = getSelectElementSize(select);
						  var selectPadding = getElementPadding(select);
						  var selectScrollHeight = select.scrollHeight - (selectPadding.top + selectPadding.bottom);
						  var childrenCount = domUtils.getSelectVisibleChildren(select).length;
						  if (realSizeValue === 1) return getHeight(select);
						  return browserUtils.isIE && realSizeValue > childrenCount ? Math.round(selectScrollHeight / childrenCount) : Math.round(selectScrollHeight / Math.max(childrenCount, realSizeValue));
						}

						exports.getOptionHeight = getOptionHeight;

						function getSelectElementSize(select) {
						  // NOTE: iOS and Android ignore 'size' and 'multiple' attributes,
						  // all select elements behave like a select with size=1.
						  if (browserUtils.isSafari && featureDetection.hasTouchEvents || browserUtils.isAndroid) return 1;
						  var sizeAttr = native_methods_1.default.getAttribute.call(select, 'size');
						  var multipleAttr = native_methods_1.default.getAttribute.call(select, 'multiple');
						  var size = !sizeAttr ? 1 : parseInt(sizeAttr, 10);
						  if (multipleAttr && (!sizeAttr || size < 1)) size = MIN_SELECT_SIZE_VALUE;
						  return size;
						}

						exports.getSelectElementSize = getSelectElementSize;

						function isVisibleChild(el) {
						  var select = domUtils.getSelectParent(el);
						  var tagName = domUtils.getTagName(el);
						  return domUtils.isSelectElement(select) && getSelectElementSize(select) > 1 && (tagName === 'option' || tagName === 'optgroup') && ( // NOTE: Firefox does not display groups without a label or with an empty label.
						  !browserUtils.isFirefox || el.label);
						}

						exports.isVisibleChild = isVisibleChild;

						function getScrollLeft(el) {
						  if (!el) return null;
						  if (domUtils.isWindow(el)) return el.pageXOffset;
						  if (domUtils.isDocument(el)) return el.defaultView.pageXOffset;
						  return el.scrollLeft;
						}

						exports.getScrollLeft = getScrollLeft;

						function getScrollTop(el) {
						  if (!el) return null;
						  if (domUtils.isWindow(el)) return el.pageYOffset;
						  if (domUtils.isDocument(el)) return el.defaultView.pageYOffset;
						  return el.scrollTop;
						}

						exports.getScrollTop = getScrollTop;

						function setScrollLeft(el, value) {
						  if (!el) return;

						  if (domUtils.isWindow(el) || domUtils.isDocument(el)) {
						    var win = domUtils.findDocument(el).defaultView;
						    var scrollTop = getScrollTop(el);
						    native_methods_1.default.scrollTo.call(win, value, scrollTop);
						  } else el.scrollLeft = value;
						}

						exports.setScrollLeft = setScrollLeft;

						function setScrollTop(el, value) {
						  if (!el) return;

						  if (domUtils.isWindow(el) || domUtils.isDocument(el)) {
						    var win = domUtils.findDocument(el).defaultView;
						    var scrollLeft = getScrollLeft(el);
						    native_methods_1.default.scrollTo.call(win, scrollLeft, value);
						  } else el.scrollTop = value;
						}

						exports.setScrollTop = setScrollTop;

						function getOffsetParent(el) {
						  if (el) {
						    var offsetParent = el.offsetParent || document.body;

						    while (offsetParent && !/^(?:body|html)$/i.test(offsetParent.nodeName) && get(offsetParent, 'position') === 'static') {
						      offsetParent = offsetParent.offsetParent;
						    }

						    return offsetParent;
						  }

						  return void 0;
						}

						exports.getOffsetParent = getOffsetParent;

						function getOffset(el) {
						  if (!el || domUtils.isWindow(el) || domUtils.isDocument(el)) return null;
						  var clientRect = el.getBoundingClientRect(); // NOTE: A detached node or documentElement.

						  var doc = el.ownerDocument;
						  var docElement = doc.documentElement;

						  if (!docElement.contains(el) || el === docElement) {
						    return {
						      top: clientRect.top,
						      left: clientRect.left
						    };
						  }

						  var win = doc.defaultView;
						  var clientTop = docElement.clientTop || doc.body.clientTop || 0;
						  var clientLeft = docElement.clientLeft || doc.body.clientLeft || 0;
						  var scrollTop = win.pageYOffset || docElement.scrollTop || doc.body.scrollTop;
						  var scrollLeft = win.pageXOffset || docElement.scrollLeft || doc.body.scrollLeft;
						  clientRect = el.getBoundingClientRect();
						  return {
						    top: clientRect.top + scrollTop - clientTop,
						    left: clientRect.left + scrollLeft - clientLeft
						  };
						}

						exports.getOffset = getOffset;

						function isElementVisible(el, doc) {
						  if (!domUtils.isElementInDocument(el, doc)) return false;

						  while (el) {
						    if (get(el, 'display', doc) === 'none' || get(el, 'visibility', doc) === 'hidden') return false;
						    el = domUtils.getParentExceptShadowRoot(el);
						  }

						  return true;
						}

						exports.isElementVisible = isElementVisible;

						function isElementInInvisibleIframe(el) {
						  var frameElement = domUtils.getIframeByElement(el);
						  return frameElement && !isElementVisible(frameElement, domUtils.findDocument(frameElement));
						}

						exports.isElementInInvisibleIframe = isElementInInvisibleIframe;
					},
					"types.js": function (exports, module, require) {
						 // -------------------------------------------------------------
						// WARNING: this file is used by both the client and the server.
						// Do not use any browser or node-specific API!
						// -------------------------------------------------------------

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						function inaccessibleTypeToStr(obj) {
						  return obj === null ? 'null' : 'undefined';
						}

						exports.inaccessibleTypeToStr = inaccessibleTypeToStr;

						function isNullOrUndefined(obj) {
						  return obj === null || obj === void 0;
						}

						exports.isNullOrUndefined = isNullOrUndefined;

						function isPrimitiveType(obj) {
						  var objType = typeof obj;
						  return objType !== 'object' && objType !== 'function';
						}

						exports.isPrimitiveType = isPrimitiveType;
					},
					"url-resolver.js": function (exports, module, require) {
						

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						var __importStar = void 0 && (void 0).__importStar || function (mod) {
						  if (mod && mod.__esModule) return mod;
						  var result = {};
						  if (mod != null) for (var k in mod) {
						    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
						  }
						  result["default"] = mod;
						  return result;
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var native_methods_1 = __importDefault(require("../sandbox/native-methods"));

						var destLocation = __importStar(require("../utils/destination-location"));

						var url_1 = require("../../utils/url");

						var dom_1 = require("./dom");

						var DOCUMENT_URL_RESOLVER = 'hammerhead|document-url-resolver';
						exports.default = {
						  _createResolver: function _createResolver(doc) {
						    var htmlDocument = native_methods_1.default.createHTMLDocument.call(doc.implementation, 'title');
						    var a = native_methods_1.default.createElement.call(htmlDocument, 'a');
						    var base = native_methods_1.default.createElement.call(htmlDocument, 'base');
						    native_methods_1.default.appendChild.call(htmlDocument.body, a);
						    native_methods_1.default.appendChild.call(htmlDocument.head, base);
						    return htmlDocument;
						  },
						  _getResolver: function _getResolver(doc) {
						    // NOTE: Once a document is recreated (document.open, document.write is called), nativeMethods will be refreshed.
						    // If we call urlResolve.updateBase after this,
						    // we will use native methods from an actual document.
						    // However, a document that contains an element for url resolving is created using a previous version of nativeMethods.
						    if (!doc[DOCUMENT_URL_RESOLVER]) {
						      native_methods_1.default.objectDefineProperty(doc, DOCUMENT_URL_RESOLVER, {
						        value: this._createResolver(doc),
						        writable: true
						      });
						    }

						    return doc[DOCUMENT_URL_RESOLVER];
						  },
						  _isNestedIframeWithoutSrc: function _isNestedIframeWithoutSrc(win) {
						    if (!win || !win.parent || win.parent === win || win.parent.parent === win.parent) return false;
						    var iframeElement = dom_1.getFrameElement(window);
						    return !!iframeElement && dom_1.isIframeWithoutSrc(iframeElement);
						  },
						  init: function init(doc) {
						    this.updateBase(destLocation.get(), doc);
						  },
						  getResolverElement: function getResolverElement(doc) {
						    return native_methods_1.default.nodeFirstChildGetter.call(this._getResolver(doc).body);
						  },
						  resolve: function resolve(url, doc) {
						    var resolver = this.getResolverElement(doc);
						    var href = null;
						    if (url === null) native_methods_1.default.removeAttribute.call(resolver, 'href');else {
						      native_methods_1.default.anchorHrefSetter.call(resolver, url);
						      href = native_methods_1.default.anchorHrefGetter.call(resolver); // NOTE: It looks like a Chrome bug: in a nested iframe without src (when an iframe is placed into another
						      // iframe) you cannot set a relative link href while the iframe loading is not completed. So, we'll do it with
						      // the parent's urlResolver Safari demonstrates similar behavior, but urlResolver.href has a relative URL value.

						      var needUseParentResolver = url && (!href || href.charAt(0) === '/') && this._isNestedIframeWithoutSrc(doc.defaultView);

						      if (needUseParentResolver) return this.resolve(url, window.parent.document);
						    }
						    return url_1.ensureTrailingSlash(url, href);
						  },
						  updateBase: function updateBase(url, doc) {
						    var resolverDocument = this._getResolver(doc);

						    var baseElement = native_methods_1.default.elementGetElementsByTagName.call(resolverDocument.head, 'base')[0];
						    url = url || destLocation.get();
						    /*eslint-disable no-restricted-properties*/

						    var parsedUrl = url_1.parseUrl(url);
						    var isRelativeUrl = parsedUrl.protocol !== 'file:' && !parsedUrl.host;
						    var isProtocolRelativeUrl = /^\/\//.test(url) && !!parsedUrl.host;
						    /*eslint-enable no-restricted-properties*/

						    if (isRelativeUrl || isProtocolRelativeUrl) {
						      var destinationLocation = destLocation.get();
						      this.updateBase(destinationLocation, doc);
						      url = this.resolve(url, doc);
						    }

						    native_methods_1.default.setAttribute.call(baseElement, 'href', url);
						  },
						  getBaseUrl: function getBaseUrl(doc) {
						    var baseElement = native_methods_1.default.elementGetElementsByTagName.call(this._getResolver(doc).head, 'base')[0];
						    return native_methods_1.default.getAttribute.call(baseElement, 'href');
						  },
						  changeUrlPart: function changeUrlPart(url, nativePropSetter, value, doc) {
						    var resolver = this.getResolverElement(doc);
						    native_methods_1.default.anchorHrefSetter.call(resolver, url);
						    nativePropSetter.call(resolver, value);
						    return native_methods_1.default.anchorHrefGetter.call(resolver);
						  },
						  dispose: function dispose(doc) {
						    doc[DOCUMENT_URL_RESOLVER] = null;
						  }
						};
						module.exports = exports.default;
					},
					"url.js": function (exports, module, require) {
						

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						var __importStar = void 0 && (void 0).__importStar || function (mod) {
						  if (mod && mod.__esModule) return mod;
						  var result = {};
						  if (mod != null) for (var k in mod) {
						    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
						  }
						  result["default"] = mod;
						  return result;
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var internal_properties_1 = __importDefault(require("../../processing/dom/internal-properties"));

						var sharedUrlUtils = __importStar(require("../../utils/url"));

						var destLocation = __importStar(require("./destination-location"));

						var urlResolver = __importStar(require("./url-resolver"));

						var settings_1 = __importDefault(require("../settings"));

						var global_context_info_1 = __importDefault(require("./global-context-info"));

						var destination_location_1 = require("./destination-location");

						var HASH_RE = /#[\S\s]*$/;
						var SUPPORTED_WEB_SOCKET_PROTOCOL_RE = /^wss?:/i;
						var SCOPE_RE = /\/[^/]*$/; // NOTE: The window.location equals 'about:blank' in iframes without src
						// therefore we need to find a window with src to get the proxy settings

						exports.DEFAULT_PROXY_SETTINGS = function () {
						  /*eslint-disable no-restricted-properties*/
						  var locationWindow = global_context_info_1.default.isInWorker ? {
						    location: parseUrl(self.location.origin),
						    parent: null
						  } : window;
						  var proxyLocation = locationWindow.location;

						  while (!proxyLocation.hostname) {
						    locationWindow = locationWindow.parent;
						    proxyLocation = locationWindow.location;
						  }

						  return {
						    hostname: proxyLocation.hostname,
						    port: proxyLocation.port.toString(),
						    protocol: proxyLocation.protocol
						  };
						  /*eslint-enable no-restricted-properties*/
						}();

						exports.REQUEST_DESCRIPTOR_VALUES_SEPARATOR = sharedUrlUtils.REQUEST_DESCRIPTOR_VALUES_SEPARATOR;

						function getProxyUrl(url, opts) {
						  url = sharedUrlUtils.getURLString(url);
						  var resourceType = opts && opts.resourceType;
						  var parsedResourceType = sharedUrlUtils.parseResourceType(resourceType);
						  if (!parsedResourceType.isWebSocket && !isSupportedProtocol(url) && !isSpecialPage(url)) return url; // NOTE: Resolves relative URLs.

						  var resolvedUrl = destLocation.resolveUrl(url, opts && opts.doc);
						  if (parsedResourceType.isWebSocket && !isValidWebSocketUrl(resolvedUrl) || !sharedUrlUtils.isValidUrl(resolvedUrl)) return url;
						  /*eslint-disable no-restricted-properties*/

						  var proxyHostname = opts && opts.proxyHostname || exports.DEFAULT_PROXY_SETTINGS.hostname;
						  var proxyPort = opts && opts.proxyPort || exports.DEFAULT_PROXY_SETTINGS.port;
						  var proxyServerProtocol = opts && opts.proxyProtocol || exports.DEFAULT_PROXY_SETTINGS.protocol;
						  /*eslint-enable no-restricted-properties*/

						  var proxyProtocol = parsedResourceType.isWebSocket ? proxyServerProtocol.replace('http', 'ws') : proxyServerProtocol;
						  var sessionId = opts && opts.sessionId || settings_1.default.get().sessionId;
						  var windowId = opts && opts.windowId || settings_1.default.get().windowId;
						  var credentials = opts && opts.credentials;
						  var charset = opts && opts.charset;
						  var reqOrigin = opts && opts.reqOrigin;
						  var crossDomainPort = getCrossDomainProxyPort(proxyPort); // NOTE: If the relative URL contains no slash (e.g. 'img123'), the resolver will keep
						  // the original proxy information, so that we can return such URL as is.
						  // TODO: Implement the isProxyURL function.

						  var parsedProxyUrl = sharedUrlUtils.parseProxyUrl(resolvedUrl);
						  /*eslint-disable no-restricted-properties*/

						  var isValidProxyUrl = !!parsedProxyUrl && parsedProxyUrl.proxy.hostname === proxyHostname && (parsedProxyUrl.proxy.port === proxyPort || parsedProxyUrl.proxy.port === crossDomainPort);
						  /*eslint-enable no-restricted-properties*/

						  if (isValidProxyUrl) {
						    if (resourceType && parsedProxyUrl.resourceType === resourceType) return resolvedUrl; // NOTE: Need to change the proxy URL resource type.

						    var destUrl = sharedUrlUtils.formatUrl(parsedProxyUrl.destResourceInfo);
						    return getProxyUrl(destUrl, {
						      proxyProtocol: proxyProtocol,
						      proxyHostname: proxyHostname,
						      proxyPort: proxyPort,
						      sessionId: sessionId,
						      resourceType: resourceType,
						      charset: charset,
						      reqOrigin: reqOrigin,
						      credentials: credentials
						    });
						  }

						  var parsedUrl = sharedUrlUtils.parseUrl(resolvedUrl);
						  if (!parsedUrl.protocol) // eslint-disable-line no-restricted-properties
						    return url;
						  charset = charset || (parsedResourceType.isScript || parsedResourceType.isServiceWorker) && document[internal_properties_1.default.documentCharset]; // NOTE: It seems that the relative URL had the leading slash or dots, so that the proxy info path part was
						  // removed by the resolver and we have an origin URL with the incorrect host and protocol.

						  /*eslint-disable no-restricted-properties*/

						  if (parsedUrl.protocol === proxyServerProtocol && parsedUrl.hostname === proxyHostname && parsedUrl.port === proxyPort) {
						    var parsedDestLocation = destLocation.getParsed();
						    parsedUrl.protocol = parsedDestLocation.protocol;
						    parsedUrl.host = parsedDestLocation.host;
						    parsedUrl.hostname = parsedDestLocation.hostname;
						    parsedUrl.port = parsedDestLocation.port || '';
						    resolvedUrl = sharedUrlUtils.formatUrl(parsedUrl);
						  }
						  /*eslint-enable no-restricted-properties*/


						  if (parsedResourceType.isWebSocket) {
						    // eslint-disable-next-line no-restricted-properties
						    parsedUrl.protocol = parsedUrl.protocol.replace('ws', 'http');
						    resolvedUrl = sharedUrlUtils.formatUrl(parsedUrl);
						    reqOrigin = reqOrigin || destLocation.getOriginHeader();
						  }

						  return sharedUrlUtils.getProxyUrl(resolvedUrl, {
						    proxyProtocol: proxyProtocol,
						    proxyHostname: proxyHostname,
						    proxyPort: proxyPort,
						    sessionId: sessionId,
						    resourceType: resourceType,
						    charset: charset,
						    reqOrigin: reqOrigin,
						    windowId: windowId,
						    credentials: credentials
						  });
						}

						exports.getProxyUrl = getProxyUrl;

						function getNavigationUrl(url, win) {
						  // NOTE: For the 'about:blank' page, we perform url proxing only for the top window, 'location' object and links.
						  // For images and iframes, we keep urls as they were.
						  // See details in https://github.com/DevExpress/testcafe-hammerhead/issues/339
						  var destinationLocation = null;
						  var isIframe = win.top !== win;
						  var winLocation = win.location.toString();
						  if (isIframe) destinationLocation = winLocation;else {
						    var parsedProxyUrl = parseProxyUrl(winLocation);
						    destinationLocation = parsedProxyUrl && parsedProxyUrl.destUrl;
						  }
						  if (isSpecialPage(destinationLocation) && sharedUrlUtils.isRelativeUrl(url)) return '';
						  url = sharedUrlUtils.prepareUrl(url);
						  return getProxyUrl(url);
						}

						exports.getNavigationUrl = getNavigationUrl;

						function getCrossDomainIframeProxyUrl(url) {
						  return getProxyUrl(url, {
						    proxyPort: settings_1.default.get().crossDomainProxyPort,
						    resourceType: sharedUrlUtils.getResourceTypeString({
						      isIframe: true
						    })
						  });
						}

						exports.getCrossDomainIframeProxyUrl = getCrossDomainIframeProxyUrl;

						function getPageProxyUrl(url, windowId) {
						  var parsedProxyUrl = parseProxyUrl(url);
						  var resourceType = null;

						  if (parsedProxyUrl) {
						    url = parsedProxyUrl.destUrl;
						    resourceType = parsedProxyUrl.resourceType;
						  }

						  if (resourceType) {
						    var parsedResourceType = parseResourceType(resourceType);
						    parsedResourceType.isIframe = false;
						    resourceType = stringifyResourceType(parsedResourceType);
						  }

						  var isCrossDomainUrl = !destLocation.sameOriginCheck(destLocation.getLocation(), url);
						  var proxyPort = isCrossDomainUrl ? settings_1.default.get().crossDomainProxyPort : location.port.toString(); // eslint-disable-line no-restricted-properties

						  return getProxyUrl(url, {
						    windowId: windowId,
						    proxyPort: proxyPort,
						    resourceType: resourceType
						  });
						}

						exports.getPageProxyUrl = getPageProxyUrl;

						function getCrossDomainProxyPort(proxyPort) {
						  return settings_1.default.get().crossDomainProxyPort === proxyPort // eslint-disable-next-line no-restricted-properties
						  ? location.port.toString() : settings_1.default.get().crossDomainProxyPort;
						}

						exports.getCrossDomainProxyPort = getCrossDomainProxyPort;

						function resolveUrlAsDest(url) {
						  return sharedUrlUtils.resolveUrlAsDest(url, getProxyUrl);
						}

						exports.resolveUrlAsDest = resolveUrlAsDest;

						function formatUrl(parsedUrl) {
						  return sharedUrlUtils.formatUrl(parsedUrl);
						}

						exports.formatUrl = formatUrl;

						function parseProxyUrl(proxyUrl) {
						  return sharedUrlUtils.parseProxyUrl(proxyUrl);
						}

						exports.parseProxyUrl = parseProxyUrl;

						function parseUrl(url) {
						  return sharedUrlUtils.parseUrl(url);
						}

						exports.parseUrl = parseUrl;

						function convertToProxyUrl(url, resourceType, charset, isCrossDomain) {
						  if (isCrossDomain === void 0) {
						    isCrossDomain = false;
						  }

						  return getProxyUrl(url, {
						    resourceType: resourceType,
						    charset: charset,
						    // eslint-disable-next-line no-restricted-properties
						    proxyPort: isCrossDomain ? settings_1.default.get().crossDomainProxyPort : exports.DEFAULT_PROXY_SETTINGS.port
						  });
						}

						exports.convertToProxyUrl = convertToProxyUrl;

						function changeDestUrlPart(proxyUrl, nativePropSetter, value, resourceType) {
						  var parsed = sharedUrlUtils.parseProxyUrl(proxyUrl);

						  if (parsed) {
						    var sessionId = parsed.sessionId;
						    var proxy = parsed.proxy; // @ts-ignore

						    var destUrl = urlResolver.changeUrlPart(parsed.destUrl, nativePropSetter, value, document);
						    return getProxyUrl(destUrl, {
						      /*eslint-disable no-restricted-properties*/
						      proxyHostname: proxy.hostname,
						      proxyPort: proxy.port,

						      /*eslint-enable no-restricted-properties*/
						      sessionId: sessionId,
						      resourceType: resourceType
						    });
						  }

						  return proxyUrl;
						}

						exports.changeDestUrlPart = changeDestUrlPart;

						function isValidWebSocketUrl(url) {
						  var resolvedUrl = resolveUrlAsDest(url);
						  return SUPPORTED_WEB_SOCKET_PROTOCOL_RE.test(resolvedUrl);
						}

						exports.isValidWebSocketUrl = isValidWebSocketUrl;

						function isSubDomain(domain, subDomain) {
						  return sharedUrlUtils.isSubDomain(domain, subDomain);
						}

						exports.isSubDomain = isSubDomain;

						function isSupportedProtocol(url) {
						  return sharedUrlUtils.isSupportedProtocol(url);
						}

						exports.isSupportedProtocol = isSupportedProtocol;

						function isSpecialPage(url) {
						  return sharedUrlUtils.isSpecialPage(url);
						}

						exports.isSpecialPage = isSpecialPage;

						function parseResourceType(resourceType) {
						  return sharedUrlUtils.parseResourceType(resourceType);
						}

						exports.parseResourceType = parseResourceType;

						function stringifyResourceType(resourceType) {
						  return sharedUrlUtils.getResourceTypeString(resourceType);
						}

						exports.stringifyResourceType = stringifyResourceType;

						function isChangedOnlyHash(currentUrl, newUrl) {
						  // NOTE: we compare proxied urls because urls passed into the function may be proxied, non-proxied
						  // or relative. The getProxyUrl function solves all the corresponding problems.
						  return getProxyUrl(currentUrl).replace(HASH_RE, '') === getProxyUrl(newUrl).replace(HASH_RE, '');
						}

						exports.isChangedOnlyHash = isChangedOnlyHash;

						function getDestinationUrl(proxyUrl) {
						  var parsedProxyUrl = parseProxyUrl(proxyUrl);
						  return parsedProxyUrl ? parsedProxyUrl.destUrl : proxyUrl;
						}

						exports.getDestinationUrl = getDestinationUrl;

						function getScope(url) {
						  if (!isSupportedProtocol(url)) return null;
						  var parsedUrl = parseUrl(resolveUrlAsDest(url));
						  if (!parsedUrl) return null;
						  return parsedUrl.partAfterHost.replace(SCOPE_RE, '/') || '/';
						}

						exports.getScope = getScope;

						function getAjaxProxyUrl(url, credentials) {
						  var isCrossDomain = !destination_location_1.sameOriginCheck(destination_location_1.getLocation(), url);
						  var opts = {
						    resourceType: stringifyResourceType({
						      isAjax: true
						    }),
						    credentials: credentials
						  };

						  if (isCrossDomain) {
						    opts.proxyPort = settings_1.default.get().crossDomainProxyPort;
						    opts.reqOrigin = destLocation.getOriginHeader();
						  }

						  return getProxyUrl(url, opts);
						}

						exports.getAjaxProxyUrl = getAjaxProxyUrl;
					}
				},
				"worker": {
					"sandbox-base-with-delayed-settings.js": function (exports, module, require) {
						

						function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

						function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var base_1 = __importDefault(require("../sandbox/base"));

						var SandboxBaseWithDelayedSettings = /*#__PURE__*/function (_base_1$default) {
						  _inheritsLoose(SandboxBaseWithDelayedSettings, _base_1$default);

						  function SandboxBaseWithDelayedSettings(_waitHammerheadSettings) {
						    var _this;

						    _this = _base_1$default.call(this) || this;
						    _this._waitHammerheadSettings = _waitHammerheadSettings;

						    if (_waitHammerheadSettings) {
						      _waitHammerheadSettings.then(function () {
						        _this._waitHammerheadSettings = null;
						      });
						    }

						    return _this;
						  }

						  var _proto = SandboxBaseWithDelayedSettings.prototype;

						  _proto.gettingSettingInProgress = function gettingSettingInProgress() {
						    return !!this._waitHammerheadSettings;
						  };

						  _proto.delayUntilGetSettings = function delayUntilGetSettings(action) {
						    return this._waitHammerheadSettings.then(action);
						  };

						  return SandboxBaseWithDelayedSettings;
						}(base_1.default);

						exports.default = SandboxBaseWithDelayedSettings;
						module.exports = exports.default;
					},
					"set-settings-command.js": function (exports, module, require) {
						

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});
						exports.SET_SERVICE_WORKER_SETTINGS = 'hammerhead|set-service-worker-settings';
						exports.SET_BLOB_WORKER_SETTINGS = 'hammerhead|set-blob-worker-settings';
					}
				}
			},
			"processing": {
				"dom": {
					"attributes.js": function (exports, module, require) {
						 // -------------------------------------------------------------
						// WARNING: this file is used by both the client and the server.
						// Do not use any browser or node-specific API!
						// -------------------------------------------------------------

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});
						exports.URL_ATTR_TAGS = {
						  href: ['a', 'link', 'image', 'area', 'base'],
						  src: ['img', 'embed', 'script', 'source', 'video', 'audio', 'input', 'frame', 'iframe'],
						  action: ['form'],
						  formaction: ['button', 'input'],
						  manifest: ['html'],
						  data: ['object']
						};
						exports.URL_ATTRS = ['href', 'src', 'action', 'formaction', 'manifest', 'data'];
						exports.TARGET_ATTR_TAGS = {
						  target: ['a', 'form', 'area', 'base'],
						  formtarget: ['input', 'button']
						};
						exports.TARGET_ATTRS = ['target', 'formtarget'];
						exports.ATTRS_WITH_SPECIAL_PROXYING_LOGIC = ['sandbox', 'autocomplete', 'target', 'formtarget', 'style'];
					},
					"base-dom-adapter.js": function (exports, module, require) {
						

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var BaseDomAdapter = function BaseDomAdapter() {
						  this.EVENTS = ['onblur', 'onchange', 'onclick', 'oncontextmenu', 'oncopy', 'oncut', 'ondblclick', 'onerror', 'onfocus', 'onfocusin', 'onfocusout', 'onhashchange', 'onkeydown', 'onkeypress', 'onkeyup', 'onload', 'onmousedown', 'onmouseenter', 'onmouseleave', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel', 'onpaste', 'onreset', 'onresize', 'onscroll', 'onselect', 'onsubmit', 'ontextinput', 'onunload', 'onwheel', 'onpointerdown', 'onpointerup', 'onpointercancel', 'onpointermove', 'onpointerover', 'onpointerout', 'onpointerenter', 'onpointerleave', 'ongotpointercapture', 'onlostpointercapture', 'onmspointerdown', 'onmspointerup', 'onmspointercancel', 'onmspointermove', 'onmspointerover', 'onmspointerout', 'onmspointerenter', 'onmspointerleave', 'onmsgotpointercapture', 'onmslostpointercapture'];
						};

						exports.default = BaseDomAdapter;
						module.exports = exports.default;
					},
					"index.js": function (exports, module, require) {
						 // -------------------------------------------------------------
						// WARNING: this file is used by both the client and the server.
						// Do not use any browser or node-specific API!
						// -------------------------------------------------------------

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var internal_attributes_1 = __importDefault(require("../../processing/dom/internal-attributes"));

						var class_name_1 = __importDefault(require("../../shadow-ui/class-name"));

						var script_1 = require("../script");

						var style_1 = __importDefault(require("../../processing/style"));

						var url_1 = require("../../utils/url");

						var string_trim_1 = __importDefault(require("../../utils/string-trim"));

						var builtin_header_names_1 = __importDefault(require("../../request-pipeline/builtin-header-names"));

						var namespaces_1 = require("./namespaces");

						var attributes_1 = require("./attributes");

						var CDATA_REG_EX = /^(\s)*\/\/<!\[CDATA\[([\s\S]*)\/\/\]\]>(\s)*$/;
						var HTML_COMMENT_POSTFIX_REG_EX = /(\/\/[^\n]*|\n\s*)-->[^\n]*([\n\s]*)?$/;
						var HTML_COMMENT_PREFIX_REG_EX = /^(\s)*<!--[^\n]*\n/;
						var HTML_COMMENT_SIMPLE_POSTFIX_REG_EX = /-->\s*$/;
						var JAVASCRIPT_PROTOCOL_REG_EX = /^\s*javascript\s*:/i;
						var EXECUTABLE_SCRIPT_TYPES_REG_EX = /^\s*(application\/(x-)?(ecma|java)script|text\/(javascript(1\.[0-5])?|((x-)?ecma|x-java|js|live)script)|module)\s*$/i;
						var SVG_XLINK_HREF_TAGS = ['animate', 'animateColor', 'animateMotion', 'animateTransform', 'mpath', 'set', 'linearGradient', 'radialGradient', 'stop', 'a', 'altglyph', 'color-profile', 'cursor', 'feimage', 'filter', 'font-face-uri', 'glyphref', 'image', 'mpath', 'pattern', 'script', 'textpath', 'use', 'tref'];
						var INTEGRITY_ATTR_TAGS = ['script', 'link'];
						var IFRAME_FLAG_TAGS = ['a', 'form', 'area', 'input', 'button'];
						var PROCESSED_PRELOAD_LINK_CONTENT_TYPE = 'script';
						var MODULE_PRELOAD_LINK_REL = 'modulepreload';
						var ELEMENT_PROCESSED = 'hammerhead|element-processed';
						var AUTOCOMPLETE_ATTRIBUTE_ABSENCE_MARKER = 'hammerhead|autocomplete-attribute-absence-marker';

						var DomProcessor = /*#__PURE__*/function () {
						  function DomProcessor(adapter) {
						    this.adapter = adapter;
						    this.HTML_PROCESSING_REQUIRED_EVENT = 'hammerhead|event|html-processing-required';
						    this.SVG_XLINK_HREF_TAGS = SVG_XLINK_HREF_TAGS;
						    this.AUTOCOMPLETE_ATTRIBUTE_ABSENCE_MARKER = AUTOCOMPLETE_ATTRIBUTE_ABSENCE_MARKER;
						    this.PROCESSED_PRELOAD_LINK_CONTENT_TYPE = PROCESSED_PRELOAD_LINK_CONTENT_TYPE;
						    this.MODULE_PRELOAD_LINK_REL = MODULE_PRELOAD_LINK_REL;
						    this.forceProxySrcForImage = false;
						    this.allowMultipleWindows = false;
						    this.EVENTS = this.adapter.EVENTS;
						    this.elementProcessorPatterns = this._createProcessorPatterns(this.adapter);
						  }

						  DomProcessor.isTagWithTargetAttr = function isTagWithTargetAttr(tagName) {
						    return !!tagName && attributes_1.TARGET_ATTR_TAGS.target.indexOf(tagName) > -1;
						  };

						  DomProcessor.isTagWithFormTargetAttr = function isTagWithFormTargetAttr(tagName) {
						    return !!tagName && attributes_1.TARGET_ATTR_TAGS.formtarget.indexOf(tagName) > -1;
						  };

						  DomProcessor.isTagWithIntegrityAttr = function isTagWithIntegrityAttr(tagName) {
						    return !!tagName && INTEGRITY_ATTR_TAGS.indexOf(tagName) !== -1;
						  };

						  DomProcessor.isIframeFlagTag = function isIframeFlagTag(tagName) {
						    return !!tagName && IFRAME_FLAG_TAGS.indexOf(tagName) !== -1;
						  };

						  DomProcessor.isAddedAutocompleteAttr = function isAddedAutocompleteAttr(attrName, storedAttrValue) {
						    return attrName === 'autocomplete' && storedAttrValue === AUTOCOMPLETE_ATTRIBUTE_ABSENCE_MARKER;
						  };

						  DomProcessor.processJsAttrValue = function processJsAttrValue(value, _ref) {
						    var isJsProtocol = _ref.isJsProtocol,
						        isEventAttr = _ref.isEventAttr;
						    if (isJsProtocol) value = value.replace(JAVASCRIPT_PROTOCOL_REG_EX, '');
						    value = script_1.processScript(value, false, isJsProtocol && !isEventAttr, void 0);
						    if (isJsProtocol) value = 'javascript:' + value; // eslint-disable-line no-script-url

						    return value;
						  };

						  DomProcessor.getStoredAttrName = function getStoredAttrName(attr) {
						    return attr + internal_attributes_1.default.storedAttrPostfix;
						  };

						  DomProcessor.isJsProtocol = function isJsProtocol(value) {
						    return JAVASCRIPT_PROTOCOL_REG_EX.test(value);
						  };

						  DomProcessor._isHtmlImportLink = function _isHtmlImportLink(tagName, relAttr) {
						    return !!tagName && !!relAttr && tagName === 'link' && relAttr === 'import';
						  };

						  var _proto = DomProcessor.prototype;

						  _proto._getRelAttribute = function _getRelAttribute(el) {
						    return String(this.adapter.getAttr(el, 'rel')).toLowerCase();
						  };

						  _proto._getAsAttribute = function _getAsAttribute(el) {
						    return String(this.adapter.getAttr(el, 'as')).toLowerCase();
						  };

						  _proto._createProcessorPatterns = function _createProcessorPatterns(adapter) {
						    var _this = this;

						    var selectors = {
						      HAS_HREF_ATTR: function HAS_HREF_ATTR(el) {
						        return _this.isUrlAttr(el, 'href');
						      },
						      HAS_SRC_ATTR: function HAS_SRC_ATTR(el) {
						        return _this.isUrlAttr(el, 'src');
						      },
						      HAS_ACTION_ATTR: function HAS_ACTION_ATTR(el) {
						        return _this.isUrlAttr(el, 'action');
						      },
						      HAS_FORMACTION_ATTR: function HAS_FORMACTION_ATTR(el) {
						        return _this.isUrlAttr(el, 'formaction');
						      },
						      HAS_FORMTARGET_ATTR: function HAS_FORMTARGET_ATTR(el) {
						        return DomProcessor.isTagWithFormTargetAttr(adapter.getTagName(el)) && adapter.hasAttr(el, 'formtarget');
						      },
						      HAS_MANIFEST_ATTR: function HAS_MANIFEST_ATTR(el) {
						        return _this.isUrlAttr(el, 'manifest');
						      },
						      HAS_DATA_ATTR: function HAS_DATA_ATTR(el) {
						        return _this.isUrlAttr(el, 'data');
						      },
						      HAS_SRCDOC_ATTR: function HAS_SRCDOC_ATTR(el) {
						        var tagName = _this.adapter.getTagName(el);

						        return (tagName === 'iframe' || tagName === 'frame') && adapter.hasAttr(el, 'srcdoc');
						      },
						      HTTP_EQUIV_META: function HTTP_EQUIV_META(el) {
						        var tagName = adapter.getTagName(el);
						        return tagName === 'meta' && adapter.hasAttr(el, 'http-equiv');
						      },
						      ALL: function ALL() {
						        return true;
						      },
						      IS_SCRIPT: function IS_SCRIPT(el) {
						        return adapter.getTagName(el) === 'script';
						      },
						      IS_LINK: function IS_LINK(el) {
						        return adapter.getTagName(el) === 'link';
						      },
						      IS_INPUT: function IS_INPUT(el) {
						        return adapter.getTagName(el) === 'input';
						      },
						      IS_FILE_INPUT: function IS_FILE_INPUT(el) {
						        return adapter.getTagName(el) === 'input' && adapter.hasAttr(el, 'type') && adapter.getAttr(el, 'type').toLowerCase() === 'file';
						      },
						      IS_STYLE: function IS_STYLE(el) {
						        return adapter.getTagName(el) === 'style';
						      },
						      HAS_EVENT_HANDLER: function HAS_EVENT_HANDLER(el) {
						        return adapter.hasEventHandler(el);
						      },
						      IS_SANDBOXED_IFRAME: function IS_SANDBOXED_IFRAME(el) {
						        var tagName = adapter.getTagName(el);
						        return (tagName === 'iframe' || tagName === 'frame') && adapter.hasAttr(el, 'sandbox');
						      },
						      IS_SVG_ELEMENT_WITH_XLINK_HREF_ATTR: function IS_SVG_ELEMENT_WITH_XLINK_HREF_ATTR(el) {
						        return adapter.isSVGElement(el) && adapter.hasAttr(el, 'xlink:href') && SVG_XLINK_HREF_TAGS.indexOf(adapter.getTagName(el)) !== -1;
						      },
						      IS_SVG_ELEMENT_WITH_XML_BASE_ATTR: function IS_SVG_ELEMENT_WITH_XML_BASE_ATTR(el) {
						        return adapter.isSVGElement(el) && adapter.hasAttr(el, 'xml:base');
						      }
						    };
						    return [{
						      selector: selectors.HAS_FORMTARGET_ATTR,
						      targetAttr: 'formtarget',
						      elementProcessors: [this._processTargetBlank]
						    }, {
						      selector: selectors.HAS_HREF_ATTR,
						      urlAttr: 'href',
						      targetAttr: 'target',
						      elementProcessors: [this._processTargetBlank, this._processUrlAttrs, this._processUrlJsAttr]
						    }, {
						      selector: selectors.HAS_SRC_ATTR,
						      urlAttr: 'src',
						      targetAttr: 'target',
						      elementProcessors: [this._processTargetBlank, this._processUrlAttrs, this._processUrlJsAttr]
						    }, {
						      selector: selectors.HAS_ACTION_ATTR,
						      urlAttr: 'action',
						      targetAttr: 'target',
						      elementProcessors: [this._processTargetBlank, this._processUrlAttrs, this._processUrlJsAttr]
						    }, {
						      selector: selectors.HAS_FORMACTION_ATTR,
						      urlAttr: 'formaction',
						      targetAttr: 'formtarget',
						      elementProcessors: [this._processUrlAttrs, this._processUrlJsAttr]
						    }, {
						      selector: selectors.HAS_MANIFEST_ATTR,
						      urlAttr: 'manifest',
						      elementProcessors: [this._processUrlAttrs, this._processUrlJsAttr]
						    }, {
						      selector: selectors.HAS_DATA_ATTR,
						      urlAttr: 'data',
						      elementProcessors: [this._processUrlAttrs, this._processUrlJsAttr]
						    }, {
						      selector: selectors.HAS_SRCDOC_ATTR,
						      elementProcessors: [this._processSrcdocAttr]
						    }, {
						      selector: selectors.HTTP_EQUIV_META,
						      urlAttr: 'content',
						      elementProcessors: [this._processMetaElement]
						    }, {
						      selector: selectors.IS_SCRIPT,
						      elementProcessors: [this._processScriptElement, this._processIntegrityAttr]
						    }, {
						      selector: selectors.ALL,
						      elementProcessors: [this._processStyleAttr]
						    }, {
						      selector: selectors.IS_LINK,
						      relAttr: 'rel',
						      elementProcessors: [this._processIntegrityAttr, this._processRelPrefetch]
						    }, {
						      selector: selectors.IS_STYLE,
						      elementProcessors: [this._processStylesheetElement]
						    }, {
						      selector: selectors.IS_INPUT,
						      elementProcessors: [this._processAutoComplete]
						    }, {
						      selector: selectors.IS_FILE_INPUT,
						      elementProcessors: [this._processRequired]
						    }, {
						      selector: selectors.HAS_EVENT_HANDLER,
						      elementProcessors: [this._processEvtAttr]
						    }, {
						      selector: selectors.IS_SANDBOXED_IFRAME,
						      elementProcessors: [this._processSandboxedIframe]
						    }, {
						      selector: selectors.IS_SVG_ELEMENT_WITH_XLINK_HREF_ATTR,
						      urlAttr: 'xlink:href',
						      elementProcessors: [this._processSVGXLinkHrefAttr, this._processUrlAttrs]
						    }, {
						      selector: selectors.IS_SVG_ELEMENT_WITH_XML_BASE_ATTR,
						      urlAttr: 'xml:base',
						      elementProcessors: [this._processUrlAttrs]
						    }];
						  } // API
						  ;

						  _proto.processElement = function processElement(el, urlReplacer) {
						    // @ts-ignore
						    if (el[ELEMENT_PROCESSED]) return;

						    for (var _i2 = 0, _this$elementProcesso2 = this.elementProcessorPatterns; _i2 < _this$elementProcesso2.length; _i2++) {
						      var pattern = _this$elementProcesso2[_i2];

						      if (pattern.selector(el) && !this._isShadowElement(el)) {
						        for (var _i4 = 0, _pattern$elementProce2 = pattern.elementProcessors; _i4 < _pattern$elementProce2.length; _i4++) {
						          var processor = _pattern$elementProce2[_i4];
						          processor.call(this, el, urlReplacer, pattern);
						        } // @ts-ignore


						        el[ELEMENT_PROCESSED] = true;
						      }
						    }
						  } // Utils
						  ;

						  _proto.getElementResourceType = function getElementResourceType(el) {
						    var tagName = this.adapter.getTagName(el);
						    if (tagName === 'link' && (this._getAsAttribute(el) === PROCESSED_PRELOAD_LINK_CONTENT_TYPE || this._getRelAttribute(el) === MODULE_PRELOAD_LINK_REL)) return url_1.getResourceTypeString({
						      isScript: true
						    });
						    return url_1.getResourceTypeString({
						      isIframe: tagName === 'iframe' || tagName === 'frame' || this._isOpenLinkInIframe(el),
						      isForm: tagName === 'form' || tagName === 'input' || tagName === 'button',
						      isScript: tagName === 'script',
						      isHtmlImport: tagName === 'link' && this._getRelAttribute(el) === 'import'
						    });
						  };

						  _proto.isUrlAttr = function isUrlAttr(el, attr, ns) {
						    var tagName = this.adapter.getTagName(el);
						    attr = attr ? attr.toLowerCase() : attr; // @ts-ignore

						    if (attributes_1.URL_ATTR_TAGS[attr] && attributes_1.URL_ATTR_TAGS[attr].indexOf(tagName) !== -1) return true;
						    return this.adapter.isSVGElement(el) && (attr === 'xml:base' || attr === 'base' && ns === namespaces_1.XML_NAMESPACE);
						  };

						  _proto.getUrlAttr = function getUrlAttr(el) {
						    var tagName = this.adapter.getTagName(el);

						    for (var _i6 = 0, _attributes_1$URL_ATT2 = attributes_1.URL_ATTRS; _i6 < _attributes_1$URL_ATT2.length; _i6++) {
						      var urlAttr = _attributes_1$URL_ATT2[_i6];
						      // @ts-ignore
						      if (attributes_1.URL_ATTR_TAGS[urlAttr].indexOf(tagName) !== -1) return urlAttr;
						    }

						    return null;
						  };

						  _proto.getTargetAttr = function getTargetAttr(el) {
						    var tagName = this.adapter.getTagName(el);

						    for (var _i8 = 0, _attributes_1$TARGET_2 = attributes_1.TARGET_ATTRS; _i8 < _attributes_1$TARGET_2.length; _i8++) {
						      var targetAttr = _attributes_1$TARGET_2[_i8];
						      // @ts-ignore
						      if (attributes_1.TARGET_ATTR_TAGS[targetAttr].indexOf(tagName) > -1) return targetAttr;
						    }

						    return null;
						  };

						  _proto._isOpenLinkInIframe = function _isOpenLinkInIframe(el) {
						    var tagName = this.adapter.getTagName(el);
						    var targetAttr = this.getTargetAttr(el);
						    var target = this.adapter.getAttr(el, targetAttr);

						    var rel = this._getRelAttribute(el);

						    if (target !== '_top') {
						      var isImageInput = tagName === 'input' && this.adapter.getAttr(el, 'type') === 'image';

						      var mustProcessTag = !isImageInput && DomProcessor.isIframeFlagTag(tagName) || DomProcessor._isHtmlImportLink(tagName, rel);

						      var isNameTarget = target ? target[0] !== '_' : false;
						      if (target === '_parent') return mustProcessTag && !this.adapter.isTopParentIframe(el);
						      if (mustProcessTag && (this.adapter.hasIframeParent(el) || isNameTarget && this.adapter.isExistingTarget(target, el))) return true;
						    }

						    return false;
						  };

						  _proto._isShadowElement = function _isShadowElement(el) {
						    var className = this.adapter.getClassName(el);
						    return typeof className === 'string' && className.indexOf(class_name_1.default.postfix) > -1;
						  } // Element processors
						  ;

						  _proto._processAutoComplete = function _processAutoComplete(el) {
						    var storedUrlAttr = DomProcessor.getStoredAttrName('autocomplete');
						    var processed = this.adapter.hasAttr(el, storedUrlAttr);
						    var attrValue = this.adapter.getAttr(el, processed ? storedUrlAttr : 'autocomplete');

						    if (!processed) {
						      this.adapter.setAttr(el, storedUrlAttr, attrValue || attrValue === '' ? attrValue : AUTOCOMPLETE_ATTRIBUTE_ABSENCE_MARKER);
						    }

						    this.adapter.setAttr(el, 'autocomplete', 'off');
						  };

						  _proto._processRequired = function _processRequired(el) {
						    var storedRequired = DomProcessor.getStoredAttrName('required');
						    var hasRequiredAttr = this.adapter.hasAttr(el, 'required');
						    var processed = this.adapter.hasAttr(el, storedRequired) && !hasRequiredAttr;

						    if (!processed && hasRequiredAttr) {
						      var attrValue = this.adapter.getAttr(el, 'required');
						      this.adapter.setAttr(el, storedRequired, attrValue);
						      this.adapter.removeAttr(el, 'required');
						    }
						  } // NOTE: We simply remove the 'integrity' attribute because its value will not be relevant after the script
						  // content changes (http://www.w3.org/TR/SRI/). If this causes problems in the future, we will need to generate
						  // the correct SHA for the changed script.
						  // In addition, we create stored 'integrity' attribute with the current 'integrity' attribute value. (GH-235)
						  ;

						  _proto._processIntegrityAttr = function _processIntegrityAttr(el) {
						    var storedIntegrityAttr = DomProcessor.getStoredAttrName('integrity');
						    var processed = this.adapter.hasAttr(el, storedIntegrityAttr) && !this.adapter.hasAttr(el, 'integrity');
						    var attrValue = this.adapter.getAttr(el, processed ? storedIntegrityAttr : 'integrity');
						    if (attrValue) this.adapter.setAttr(el, storedIntegrityAttr, attrValue);
						    if (!processed) this.adapter.removeAttr(el, 'integrity');
						  } // NOTE: We simply remove the 'rel' attribute if rel='prefetch' and use stored 'rel' attribute, because the prefetch
						  // resource type is unknown. https://github.com/DevExpress/testcafe/issues/2528
						  ;

						  _proto._processRelPrefetch = function _processRelPrefetch(el, _urlReplacer, pattern) {
						    var storedRelAttr = DomProcessor.getStoredAttrName(pattern.relAttr);
						    var processed = this.adapter.hasAttr(el, storedRelAttr) && !this.adapter.hasAttr(el, pattern.relAttr);
						    var attrValue = this.adapter.getAttr(el, processed ? storedRelAttr : pattern.relAttr);

						    if (attrValue) {
						      var formatedValue = string_trim_1.default(attrValue.toLowerCase());

						      if (formatedValue === 'prefetch') {
						        this.adapter.setAttr(el, storedRelAttr, attrValue);
						        if (!processed) this.adapter.removeAttr(el, pattern.relAttr);
						      }
						    }
						  };

						  _proto._processJsAttr = function _processJsAttr(el, attrName, _ref2) {
						    var isJsProtocol = _ref2.isJsProtocol,
						        isEventAttr = _ref2.isEventAttr;
						    var storedUrlAttr = DomProcessor.getStoredAttrName(attrName);
						    var processed = this.adapter.hasAttr(el, storedUrlAttr);
						    var attrValue = this.adapter.getAttr(el, processed ? storedUrlAttr : attrName);
						    var processedValue = DomProcessor.processJsAttrValue(attrValue, {
						      isJsProtocol: isJsProtocol,
						      isEventAttr: isEventAttr
						    });

						    if (attrValue !== processedValue) {
						      this.adapter.setAttr(el, storedUrlAttr, attrValue);
						      this.adapter.setAttr(el, attrName, processedValue);
						    }
						  };

						  _proto._processEvtAttr = function _processEvtAttr(el) {
						    var events = this.adapter.EVENTS;

						    for (var i = 0; i < events.length; i++) {
						      var attrValue = this.adapter.getAttr(el, events[i]);

						      if (attrValue) {
						        this._processJsAttr(el, events[i], {
						          isJsProtocol: DomProcessor.isJsProtocol(attrValue),
						          isEventAttr: true
						        });
						      }
						    }
						  };

						  _proto._processMetaElement = function _processMetaElement(el, urlReplacer, pattern) {
						    var httpEquivAttrValue = this.adapter.getAttr(el, 'http-equiv').toLowerCase();

						    if (httpEquivAttrValue === builtin_header_names_1.default.refresh) {
						      var attr = this.adapter.getAttr(el, pattern.urlAttr);
						      attr = attr.replace(/(url=)(.*)$/i, function (_match, prefix, url) {
						        return prefix + urlReplacer(url);
						      });
						      this.adapter.setAttr(el, pattern.urlAttr, attr);
						    } // TODO: remove after https://github.com/DevExpress/testcafe-hammerhead/issues/244 implementation
						    else if (httpEquivAttrValue === builtin_header_names_1.default.contentSecurityPolicy) {
						        this.adapter.removeAttr(el, 'http-equiv');
						        this.adapter.removeAttr(el, 'content');
						      }
						  };

						  _proto._processSandboxedIframe = function _processSandboxedIframe(el) {
						    var attrValue = this.adapter.getAttr(el, 'sandbox');
						    var allowSameOrigin = attrValue.indexOf('allow-same-origin') !== -1;
						    var allowScripts = attrValue.indexOf('allow-scripts') !== -1;
						    var storedAttr = DomProcessor.getStoredAttrName('sandbox');
						    this.adapter.setAttr(el, storedAttr, attrValue);

						    if (!allowSameOrigin || !allowScripts) {
						      attrValue += !allowSameOrigin ? ' allow-same-origin' : '';
						      attrValue += !allowScripts ? ' allow-scripts' : '';
						    }

						    this.adapter.setAttr(el, 'sandbox', attrValue);
						  };

						  _proto._processScriptElement = function _processScriptElement(script, urlReplacer) {
						    var scriptContent = this.adapter.getScriptContent(script);
						    if (!scriptContent || !this.adapter.needToProcessContent(script)) return;
						    var scriptProcessedOnServer = script_1.isScriptProcessed(scriptContent);
						    if (scriptProcessedOnServer) return; // NOTE: We do not process scripts that are not executed during page load. We process scripts of types like
						    // text/javascript, application/javascript etc. (a complete list of MIME types is specified in the w3c.org
						    // html5 specification). If the type is not set, it is considered 'text/javascript' by default.

						    var scriptType = this.adapter.getAttr(script, 'type');
						    var isExecutableScript = !scriptType || EXECUTABLE_SCRIPT_TYPES_REG_EX.test(scriptType);

						    if (isExecutableScript) {
						      var result = scriptContent;
						      var commentPrefix = '';
						      var commentPrefixMatch = result.match(HTML_COMMENT_PREFIX_REG_EX);
						      var commentPostfix = '';
						      var commentPostfixMatch = null;
						      var hasCDATA = CDATA_REG_EX.test(result);

						      if (commentPrefixMatch) {
						        commentPrefix = commentPrefixMatch[0];
						        commentPostfixMatch = result.match(HTML_COMMENT_POSTFIX_REG_EX);
						        if (commentPostfixMatch) commentPostfix = commentPostfixMatch[0];else if (!HTML_COMMENT_SIMPLE_POSTFIX_REG_EX.test(commentPrefix)) commentPostfix = '//-->';
						        result = result.replace(commentPrefix, '').replace(commentPostfix, '');
						      }

						      if (hasCDATA) result = result.replace(CDATA_REG_EX, '$2');
						      result = commentPrefix + script_1.processScript(result, true, false, urlReplacer) + commentPostfix;
						      if (hasCDATA) result = '\n//<![CDATA[\n' + result + '//]]>';
						      this.adapter.setScriptContent(script, result);
						    }
						  };

						  _proto._processStyleAttr = function _processStyleAttr(el, urlReplacer) {
						    var style = this.adapter.getAttr(el, 'style');
						    if (style) this.adapter.setAttr(el, 'style', style_1.default.process(style, urlReplacer, false));
						  };

						  _proto._processStylesheetElement = function _processStylesheetElement(el, urlReplacer) {
						    var content = this.adapter.getStyleContent(el);

						    if (content && urlReplacer && this.adapter.needToProcessContent(el)) {
						      content = style_1.default.process(content, urlReplacer, true);
						      this.adapter.setStyleContent(el, content);
						    }
						  };

						  _proto._processTargetBlank = function _processTargetBlank(el, _urlReplacer, pattern) {
						    if (this.allowMultipleWindows) return;
						    var storedTargetAttr = DomProcessor.getStoredAttrName(pattern.targetAttr);
						    var processed = this.adapter.hasAttr(el, storedTargetAttr);
						    if (processed) return;
						    var attrValue = this.adapter.getAttr(el, pattern.targetAttr); // NOTE: Value may have whitespace.

						    attrValue = attrValue && attrValue.replace(/\s/g, '');

						    if (attrValue === '_blank') {
						      this.adapter.setAttr(el, pattern.targetAttr, '_top');
						      this.adapter.setAttr(el, storedTargetAttr, attrValue);
						    }
						  };

						  _proto._processUrlAttrs = function _processUrlAttrs(el, urlReplacer, pattern) {
						    var storedUrlAttr = DomProcessor.getStoredAttrName(pattern.urlAttr);
						    var resourceUrl = this.adapter.getAttr(el, pattern.urlAttr);
						    var isSpecialPageUrl = url_1.isSpecialPage(resourceUrl);
						    var processedOnServer = this.adapter.hasAttr(el, storedUrlAttr);
						    if (!resourceUrl && resourceUrl !== '' || processedOnServer || !url_1.isSupportedProtocol(resourceUrl) && !isSpecialPageUrl) return;
						    var elTagName = this.adapter.getTagName(el);
						    var isIframe = elTagName === 'iframe' || elTagName === 'frame';
						    var isScript = elTagName === 'script';
						    var isAnchor = elTagName === 'a';
						    var target = this.adapter.getAttr(el, pattern.targetAttr); // NOTE: Elements with target=_parent shouldn’t be processed on the server,because we don't
						    // know what is the parent of the processed page (an iframe or the top window).

						    if (!this.adapter.needToProcessUrl(elTagName, target)) return;
						    var resourceType = this.getElementResourceType(el);
						    var parsedResourceUrl = url_1.parseUrl(resourceUrl);
						    var isRelativePath = parsedResourceUrl.protocol !== 'file:' && !parsedResourceUrl.host;
						    var charsetAttrValue = isScript && this.adapter.getAttr(el, 'charset');
						    var isImgWithoutSrc = elTagName === 'img' && resourceUrl === '';
						    var isIframeWithEmptySrc = isIframe && resourceUrl === '';
						    var isCrossDomainSrc = false;
						    var proxyUrl = resourceUrl; // NOTE: Only a non-relative iframe src can be cross-domain.

						    if (isIframe && !isSpecialPageUrl && !isRelativePath) isCrossDomainSrc = !this.adapter.sameOriginCheck(url_1.parseProxyUrl(urlReplacer('/')).destUrl, resourceUrl);

						    if ((!isSpecialPageUrl || isAnchor) && !isImgWithoutSrc && !isIframeWithEmptySrc) {
						      proxyUrl = elTagName === 'img' && !this.forceProxySrcForImage ? url_1.resolveUrlAsDest(resourceUrl, urlReplacer) : urlReplacer(resourceUrl, resourceType, charsetAttrValue, isCrossDomainSrc);
						    }

						    this.adapter.setAttr(el, storedUrlAttr, resourceUrl);
						    this.adapter.setAttr(el, pattern.urlAttr, proxyUrl);
						  };

						  _proto._processSrcdocAttr = function _processSrcdocAttr(el) {
						    var storedAttr = DomProcessor.getStoredAttrName('srcdoc');
						    var html = this.adapter.getAttr(el, 'srcdoc');
						    var processedHtml = this.adapter.processSrcdocAttr(html);
						    this.adapter.setAttr(el, storedAttr, html);
						    this.adapter.setAttr(el, 'srcdoc', processedHtml);
						  };

						  _proto._processUrlJsAttr = function _processUrlJsAttr(el, _urlReplacer, pattern) {
						    if (DomProcessor.isJsProtocol(this.adapter.getAttr(el, pattern.urlAttr))) this._processJsAttr(el, pattern.urlAttr, {
						      isJsProtocol: true,
						      isEventAttr: false
						    });
						  };

						  _proto._processSVGXLinkHrefAttr = function _processSVGXLinkHrefAttr(el, _urlReplacer, pattern) {
						    var attrValue = this.adapter.getAttr(el, pattern.urlAttr);

						    if (url_1.HASH_RE.test(attrValue)) {
						      var storedUrlAttr = DomProcessor.getStoredAttrName(pattern.urlAttr);
						      this.adapter.setAttr(el, storedUrlAttr, attrValue);
						    }
						  };

						  return DomProcessor;
						}();

						exports.default = DomProcessor;
						module.exports = exports.default;
					},
					"internal-attributes.js": function (exports, module, require) {
						 // -------------------------------------------------------------
						// WARNING: this file is used by both the client and the server.
						// Do not use any browser or node-specific API!
						// -------------------------------------------------------------

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});
						exports.default = {
						  storedAttrPostfix: '-hammerhead-stored-value',
						  hoverPseudoClass: 'data-hammerhead-hovered',
						  focusPseudoClass: 'data-hammerhead-focused',
						  uploadInfoHiddenInputName: 'hammerhead|upload-info-hidden-input-name'
						};
						module.exports = exports.default;
					},
					"internal-properties.js": function (exports, module, require) {
						 // -------------------------------------------------------------
						// WARNING: this file is used by both the client and the server.
						// Do not use any browser or node-specific API!
						// -------------------------------------------------------------

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});
						exports.default = {
						  processDomMethodName: 'hammerhead|process-dom-method',
						  processedContext: 'hammerhead|processed-context',
						  documentWasCleaned: 'hammerhead|document-was-cleaned',
						  documentCharset: 'hammerhead|document-charset',
						  iframeNativeMethods: 'hammerhead|iframe-native-methods',
						  hammerhead: '%hammerhead%',
						  selection: 'hammerhead|selection',
						  shadowUIElement: 'hammerhead|shadow-ui-element',
						  forceProxySrcForImage: 'hammerhead|image|force-proxy-src-flag',
						  skipNextLoadEventForImage: 'hammerhead|image|skip-next-load-event-flag',
						  cachedImage: 'hammerhead|image|cached-image',
						  sandboxIsReattached: 'hammerhead|sandbox-is-reattached',
						  nativeStrRepresentation: 'hammerhead|native-string-representation'
						};
						module.exports = exports.default;
					},
					"namespaces.js": function (exports, module, require) {
						

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});
						exports.SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
						exports.XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace';
						exports.XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/';
						exports.XLINK_NAMESPACE = 'http://www.w3.org/1999/xlink';
						exports.NAMESPACE_PREFIX_MAP = {
						  xml: exports.XML_NAMESPACE,
						  xlink: exports.XLINK_NAMESPACE,
						  xmlns: exports.XMLNS_NAMESPACE
						};
					}
				},
				"script": {
					"destructuring.js": function (exports, module, require) {
						

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var esotope_hammerhead_1 = require("esotope-hammerhead");

						var node_builder_1 = require("./node-builder");

						var temp_variables_1 = __importDefault(require("./transformers/temp-variables"));

						var instruction_1 = __importDefault(require("./instruction"));

						function processObjectProperty(prop, temp, build, baseTempName) {
						  var pattern = prop.value;
						  var computed = prop.computed || prop.key.type === esotope_hammerhead_1.Syntax.Literal;
						  var value = node_builder_1.createMemberExpression(temp, prop.key, computed);
						  process(pattern, value, build, baseTempName);
						}

						function createObjectRest(tempIdentifier, keys) {
						  var restObjectIdentifier = node_builder_1.createIdentifier(instruction_1.default.restObject);
						  return node_builder_1.createSimpleCallExpression(restObjectIdentifier, [tempIdentifier, node_builder_1.createArrayExpression(keys)]);
						}

						function createRestArray(array, startIndex) {
						  var restArrayIdentifier = node_builder_1.createIdentifier(instruction_1.default.restArray);
						  return node_builder_1.createSimpleCallExpression(restArrayIdentifier, [array, node_builder_1.createSimpleLiteral(startIndex)]);
						}

						function createTempIdentifierOrUseExisting(value, build, baseTempName) {
						  if (value.type === esotope_hammerhead_1.Syntax.Identifier && temp_variables_1.default.isHHTempVariable(value.name)) return value;
						  var tempIdentifier = node_builder_1.createIdentifier(baseTempName || temp_variables_1.default.generateName(baseTempName));
						  build(tempIdentifier, value, true);
						  return tempIdentifier;
						}

						function processObjectPattern(pattern, value, build, baseTempName) {
						  var properties = pattern.properties; // @ts-ignore

						  var hasRest = properties.length && properties[properties.length - 1].type === esotope_hammerhead_1.Syntax.RestElement;
						  var tempIdentifier = createTempIdentifierOrUseExisting(value, build, baseTempName);
						  var propNames = [];
						  var baseTempNames = [];
						  if (!baseTempName) baseTempName = tempIdentifier.name;

						  if (hasRest) {
						    for (var i = 0; i < properties.length - 1; i++) {
						      var prop = properties[i];
						      var key = prop.key;
						      if (key.type === esotope_hammerhead_1.Syntax.Identifier) propNames.push(prop.computed ? key : node_builder_1.createSimpleLiteral(key.name));else if (key.type === esotope_hammerhead_1.Syntax.Literal) propNames.push(key);else {
						        var tempPropKey = node_builder_1.createIdentifier(temp_variables_1.default.generateName());
						        build(tempPropKey, key, true);
						        propNames.push(tempPropKey);
						        prop.key = tempPropKey;
						      }
						    }
						  }

						  for (var _i = 0; _i < properties.length; _i++) {
						    var _prop = properties[_i]; // @ts-ignore

						    if (_prop.type === esotope_hammerhead_1.Syntax.RestElement) {
						      // @ts-ignore
						      build(_prop.argument, createObjectRest(tempIdentifier, propNames));
						    } else {
						      var newBaseTempName = temp_variables_1.default.generateName(baseTempName, _prop.key, _i);
						      if (baseTempNames.indexOf(newBaseTempName) > -1) newBaseTempName = temp_variables_1.default.generateName(newBaseTempName, void 0, _i);
						      baseTempNames.push(newBaseTempName);
						      processObjectProperty(_prop, tempIdentifier, build, newBaseTempName);
						    }
						  }
						}

						function processArrayPattern(pattern, value, build, baseTempName) {
						  var tempIdentifier = createTempIdentifierOrUseExisting(value, build, baseTempName);
						  if (!baseTempName) baseTempName = tempIdentifier.name;

						  for (var i = 0; i < pattern.elements.length; i++) {
						    var elem = pattern.elements[i];
						    if (!elem) continue;

						    if (elem.type === esotope_hammerhead_1.Syntax.RestElement) {
						      value = createRestArray(tempIdentifier, i);
						      elem = elem.argument;
						    } else value = node_builder_1.createMemberExpression(tempIdentifier, node_builder_1.createSimpleLiteral(i), true);

						    process(elem, value, build, temp_variables_1.default.generateName(baseTempName, null, i));
						  }
						}

						function processAssignmentPattern(pattern, value, build, baseTempName) {
						  var left = pattern.left,
						      right = pattern.right;
						  var tempIdentifier = createTempIdentifierOrUseExisting(value, build, baseTempName);
						  var tempCondition = node_builder_1.createBinaryExpression(tempIdentifier, '===', node_builder_1.createUndefined());
						  var tempConditional = node_builder_1.createConditionalExpression(tempCondition, right, tempIdentifier);
						  if (!baseTempName) baseTempName = tempIdentifier.name;
						  baseTempName += '$assign';
						  process(left, tempConditional, build, baseTempName);
						}

						function process(pattern, value, build, baseTempName) {
						  if (pattern.type === esotope_hammerhead_1.Syntax.ObjectPattern) processObjectPattern(pattern, value, build, baseTempName);else if (pattern.type === esotope_hammerhead_1.Syntax.ArrayPattern) processArrayPattern(pattern, value, build, baseTempName);else if (pattern.type === esotope_hammerhead_1.Syntax.AssignmentPattern) processAssignmentPattern(pattern, value, build, baseTempName);else build(pattern, value);
						}

						exports.default = process;
						module.exports = exports.default;
					},
					"header.js": function (exports, module, require) {
						 // -------------------------------------------------------------
						// WARNING: this file is used by both the client and the server.
						// Do not use any browser or node-specific API!
						// -------------------------------------------------------------

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var regexp_escape_1 = __importDefault(require("../../utils/regexp-escape"));

						var internal_properties_1 = __importDefault(require("../../processing/dom/internal-properties"));

						var instruction_1 = __importDefault(require("./instruction"));

						var service_routes_1 = __importDefault(require("../../proxy/service-routes"));

						exports.SCRIPT_PROCESSING_START_COMMENT = '/*hammerhead|script|start*/';
						exports.SCRIPT_PROCESSING_END_COMMENT = '/*hammerhead|script|end*/';
						exports.SCRIPT_PROCESSING_END_HEADER_COMMENT = '/*hammerhead|script|processing-header-end*/';
						var STRICT_MODE_PLACEHOLDER = '{strict-placeholder}';
						var SW_SCOPE_HEADER_VALUE = '{sw-scope-header-value}';
						var HEADER = ("\n    " + exports.SCRIPT_PROCESSING_START_COMMENT + "\n    " + STRICT_MODE_PLACEHOLDER + "\n    " + SW_SCOPE_HEADER_VALUE + "\n\n    if (typeof window !== 'undefined' && window){\n        window['" + internal_properties_1.default.processDomMethodName + "'] && window['" + internal_properties_1.default.processDomMethodName + "']();\n\n        if (window." + instruction_1.default.getProperty + " && typeof " + instruction_1.default.getProperty + " === 'undefined')\n            var " + instruction_1.default.getLocation + " = window." + instruction_1.default.getLocation + ",\n                " + instruction_1.default.setLocation + " = window." + instruction_1.default.setLocation + ",\n                " + instruction_1.default.setProperty + " = window." + instruction_1.default.setProperty + ",\n                " + instruction_1.default.getProperty + " = window." + instruction_1.default.getProperty + ",\n                " + instruction_1.default.callMethod + " = window." + instruction_1.default.callMethod + ",\n                " + instruction_1.default.getEval + " = window." + instruction_1.default.getEval + ",\n                " + instruction_1.default.processScript + " = window." + instruction_1.default.processScript + ",\n                " + instruction_1.default.processHtml + " = window." + instruction_1.default.processHtml + ",\n                " + instruction_1.default.getPostMessage + " = window." + instruction_1.default.getPostMessage + ",\n                " + instruction_1.default.getProxyUrl + " = window." + instruction_1.default.getProxyUrl + ",\n                " + instruction_1.default.restArray + " = window." + instruction_1.default.restArray + ",\n                " + instruction_1.default.restObject + " = window." + instruction_1.default.restObject + ";\n    } else {\n        if (typeof " + instruction_1.default.getProperty + " === 'undefined')\n            var " + instruction_1.default.getLocation + " = function(l){return l},\n                " + instruction_1.default.setLocation + " = function(l,v){return l = v},\n                " + instruction_1.default.setProperty + " = function(o,p,v){return o[p] = v},\n                " + instruction_1.default.getProperty + " = function(o,p){return o[p]},\n                " + instruction_1.default.callMethod + " = function(o,p,a){return o[p].apply(o,a)},\n                " + instruction_1.default.getEval + " = function(e){return e},\n                " + instruction_1.default.processScript + " = function(s){return s},\n                " + instruction_1.default.processHtml + " = function(h){return h},\n                " + instruction_1.default.getPostMessage + " = function(w,p){return arguments.length===1?w.postMessage:p},\n                " + instruction_1.default.getProxyUrl + " = function(u,d){return u},\n                " + instruction_1.default.restArray + " = function(a,i){return Array.prototype.slice.call(a, i)},\n                " + instruction_1.default.restObject + " = function(o,p){var k=Object.keys(o),n={};for(var i=0;i<k.length;++i)if(p.indexOf(k[i])<0)n[k[i]]=o[k[i]];return n};\n        \n        if (typeof importScripts !== \"undefined\" && /\\[native code]/g.test(importScripts.toString()))\n            importScripts((location.origin || (location.protocol + \"//\" + location.host)) + \"" + service_routes_1.default.workerHammerhead + "\");\n    }\n    " + exports.SCRIPT_PROCESSING_END_HEADER_COMMENT + "\n").replace(/\n(?!$)\s*/g, ''); // NOTE: IE removes trailing newlines in script.textContent,
						// so a trailing newline in RegExp is optional

						var HEADER_RE = new RegExp(regexp_escape_1.default(exports.SCRIPT_PROCESSING_START_COMMENT) + "[\\S\\s]+?" + regexp_escape_1.default(exports.SCRIPT_PROCESSING_END_HEADER_COMMENT) + "\n?", 'gi');
						var PROCESSING_END_COMMENT_RE = new RegExp("\n?" + regexp_escape_1.default(exports.SCRIPT_PROCESSING_END_COMMENT) + "\\s*", 'gi');

						function remove(code) {
						  return code.replace(HEADER_RE, '').replace(PROCESSING_END_COMMENT_RE, '');
						}

						exports.remove = remove;

						function add(code, isStrictMode, swScopeHeaderValue) {
						  var header = HEADER.replace(STRICT_MODE_PLACEHOLDER, isStrictMode ? '"use strict";' : '').replace(SW_SCOPE_HEADER_VALUE, swScopeHeaderValue ? "var " + instruction_1.default.swScopeHeaderValue + " = " + JSON.stringify(swScopeHeaderValue) + ";" : '');
						  return header + code + '\n' + exports.SCRIPT_PROCESSING_END_COMMENT;
						}

						exports.add = add;
					},
					"index.js": function (exports, module, require) {
						

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var transform_1 = __importDefault(require("./transform"));

						var instruction_1 = __importDefault(require("./instruction"));

						var header_1 = require("./header");

						var acorn_hammerhead_1 = require("acorn-hammerhead");

						var esotope_hammerhead_1 = require("esotope-hammerhead");

						var regexp_escape_1 = __importDefault(require("../../utils/regexp-escape"));

						var get_bom_1 = __importDefault(require("../../utils/get-bom"));

						var HTML_COMMENT_RE = /(^|\n)\s*<!--[^\n]*(\n|$)/g;
						var OBJECT_RE = /^\s*\{.*\}\s*$/;
						var TRAILING_SEMICOLON_RE = /;\s*$/;
						var OBJECT_WRAPPER_RE = /^\s*\((.*)\);\s*$/;
						var SOURCEMAP_RE = /(?:\/\/[@#][ \t]+sourceMappingURL=([^\s'"]+?)[ \t]*$)/gm;
						var PROCESSED_SCRIPT_RE = new RegExp([regexp_escape_1.default(instruction_1.default.getLocation), regexp_escape_1.default(instruction_1.default.setLocation), regexp_escape_1.default(instruction_1.default.getProperty), regexp_escape_1.default(instruction_1.default.setProperty), regexp_escape_1.default(instruction_1.default.callMethod), regexp_escape_1.default(instruction_1.default.processScript), regexp_escape_1.default(instruction_1.default.processHtml), regexp_escape_1.default(instruction_1.default.getPostMessage), regexp_escape_1.default(instruction_1.default.getProxyUrl)].join('|'));
						var PARSING_OPTIONS = {
						  allowReturnOutsideFunction: true,
						  allowImportExportEverywhere: true,
						  ecmaVersion: 11
						}; // Code pre/post-processing

						function removeHtmlComments(code) {
						  // NOTE: The JS parser removes the line that follows'<!--'. (T226589)
						  do {
						    code = code.replace(HTML_COMMENT_RE, '\n');
						  } while (HTML_COMMENT_RE.test(code));

						  return code;
						}

						function preprocess(code) {
						  var bom = get_bom_1.default(code);
						  var preprocessed = bom ? code.substring(bom.length) : code;
						  preprocessed = header_1.remove(preprocessed);
						  preprocessed = removeSourceMap(preprocessed);
						  return {
						    bom: bom,
						    preprocessed: preprocessed
						  };
						}

						function removeSourceMap(code) {
						  return code.replace(SOURCEMAP_RE, '');
						}

						function postprocess(processed, withHeader, bom, strictMode, swScopeHeaderValue) {
						  // NOTE: If the 'use strict' directive is not in the beginning of the file, it is ignored.
						  // As we insert our header in the beginning of the script, we must put a new 'use strict'
						  // before the header, otherwise it will be ignored.
						  if (withHeader) processed = header_1.add(processed, strictMode, swScopeHeaderValue);
						  return bom ? bom + processed : processed;
						} // Parse/generate code


						function removeTrailingSemicolon(processed, src) {
						  return TRAILING_SEMICOLON_RE.test(src) ? processed : processed.replace(TRAILING_SEMICOLON_RE, '');
						}

						function getAst(src, isObject) {
						  // NOTE: In case of objects (e.g.eval('{ 1: 2}')) without wrapping
						  // object will be parsed as label. To avoid this we parenthesize src
						  src = isObject ? "(" + src + ")" : src;

						  try {
						    return acorn_hammerhead_1.parse(src, PARSING_OPTIONS);
						  } catch (err) {
						    return null;
						  }
						}

						function getCode(ast, src) {
						  var code = esotope_hammerhead_1.generate(ast, {
						    format: {
						      quotes: 'double',
						      escapeless: true,
						      compact: true
						    }
						  });
						  return src ? removeTrailingSemicolon(code, src) : code;
						} // Analyze code


						function analyze(code) {
						  var isObject = OBJECT_RE.test(code);
						  var ast = getAst(code, isObject); // NOTE: `{ const a = 'foo'; }` edge case

						  if (!ast && isObject) {
						    ast = getAst(code, false);
						    isObject = false;
						  }

						  return {
						    ast: ast,
						    isObject: isObject
						  };
						}

						function isArrayDataScript(ast) {
						  var firstChild = ast.body[0];
						  return ast.body.length === 1 && firstChild.type === esotope_hammerhead_1.Syntax.ExpressionStatement && firstChild.expression.type === esotope_hammerhead_1.Syntax.ArrayExpression;
						}

						function isStrictMode(ast) {
						  if (ast.body.length) {
						    var firstChild = ast.body[0];
						    if (firstChild.type === esotope_hammerhead_1.Syntax.ExpressionStatement && firstChild.expression.type === esotope_hammerhead_1.Syntax.Literal) return firstChild.expression.value === 'use strict';
						  }

						  return false;
						}

						function applyChanges(script, changes, isObject) {
						  var indexOffset = isObject ? -1 : 0;
						  var chunks = [];
						  var index = 0;
						  if (!changes.length) return script;
						  changes.sort(function (a, b) {
						    return a.start - b.start || a.end - b.end;
						  });

						  for (var _i2 = 0; _i2 < changes.length; _i2++) {
						    var change = changes[_i2];
						    var changeStart = change.start + indexOffset;
						    var changeEnd = change.end + indexOffset;
						    var parentheses = change.node.type === esotope_hammerhead_1.Syntax.SequenceExpression && change.parentType !== esotope_hammerhead_1.Syntax.ExpressionStatement && change.parentType !== esotope_hammerhead_1.Syntax.SequenceExpression;
						    chunks.push(script.substring(index, changeStart));
						    chunks.push(parentheses ? '(' : ' ');
						    chunks.push(getCode(change.node, script.substring(changeStart, changeEnd)));
						    chunks.push(parentheses ? ')' : ' ');
						    index += changeEnd - index;
						  }

						  chunks.push(script.substring(index));
						  return chunks.join('');
						}

						function isScriptProcessed(code) {
						  return PROCESSED_SCRIPT_RE.test(code);
						}

						exports.isScriptProcessed = isScriptProcessed;

						function processScript(src, withHeader, wrapLastExprWithProcessHtml, resolver, swScopeHeaderValue) {
						  if (withHeader === void 0) {
						    withHeader = false;
						  }

						  if (wrapLastExprWithProcessHtml === void 0) {
						    wrapLastExprWithProcessHtml = false;
						  }

						  var _preprocess = preprocess(src),
						      bom = _preprocess.bom,
						      preprocessed = _preprocess.preprocessed;

						  var withoutHtmlComments = removeHtmlComments(preprocessed);

						  var _analyze = analyze(withoutHtmlComments),
						      ast = _analyze.ast,
						      isObject = _analyze.isObject;

						  if (!ast) return src;
						  withHeader = withHeader && !isObject && !isArrayDataScript(ast);
						  var changes = transform_1.default(ast, wrapLastExprWithProcessHtml, resolver);
						  var processed = changes.length ? applyChanges(withoutHtmlComments, changes, isObject) : preprocessed;
						  processed = postprocess(processed, withHeader, bom, isStrictMode(ast), swScopeHeaderValue);
						  if (isObject) processed = processed.replace(OBJECT_WRAPPER_RE, '$1');
						  return processed;
						}

						exports.processScript = processScript;
					},
					"instruction.js": function (exports, module, require) {
						 // -------------------------------------------------------------
						// WARNING: this file is used by both the client and the server.
						// Do not use any browser or node-specific API!
						// -------------------------------------------------------------

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});
						exports.default = {
						  getLocation: '__get$Loc',
						  setLocation: '__set$Loc',
						  getProperty: '__get$',
						  setProperty: '__set$',
						  callMethod: '__call$',
						  processScript: '__proc$Script',
						  processHtml: '__proc$Html',
						  getEval: '__get$Eval',
						  getPostMessage: '__get$PostMessage',
						  getProxyUrl: '__get$ProxyUrl',
						  restArray: '__rest$Array',
						  restObject: '__rest$Object',
						  swScopeHeaderValue: '__swScopeHeaderValue'
						};
						module.exports = exports.default;
					},
					"instrumented.js": function (exports, module, require) {
						 // -------------------------------------------------------------
						// WARNING: this file is used by both the client and the server.
						// Do not use any browser or node-specific API!
						// -------------------------------------------------------------

						Object.defineProperty(exports, "__esModule", {
						  value: true
						}); // NOTE: constants are exported for the testing purposes

						exports.METHODS = ['postMessage', 'replace', 'assign'];
						exports.PROPERTIES = ['href', 'location'];
						var INSTRUMENTED_METHOD_RE = new RegExp("^(" + exports.METHODS.join('|') + ")$");
						var INSTRUMENTED_PROPERTY_RE = new RegExp("^(" + exports.PROPERTIES.join('|') + ")$"); // NOTE: Mootools framework contains code that removes the RegExp.prototype.test
						// method and restores it later.
						//    delete z[A]; // z = RegExp.prototype, A = "test"
						//    __set$(z, A, x.protect()); // x.protect - returns the removed method
						// The __set$ function calls the test method of the regular expression. (GH-331)

						var reTest = RegExp.prototype.test; // NOTE: The Function.prototype.call method can also be removed.
						// But only one of the methods can be removed at a time.

						var test = function test(regexp, str) {
						  return regexp.test ? regexp.test(str) : reTest.call(regexp, str);
						}; // NOTE: we can't use the map approach here, because
						// cases like `WRAPPABLE_METHOD['toString']` will fail.
						// We could use the hasOwnProperty test, but it is
						// significantly slower than the regular expression test


						function shouldInstrumentMethod(name) {
						  return test(INSTRUMENTED_METHOD_RE, String(name));
						}

						exports.shouldInstrumentMethod = shouldInstrumentMethod;

						function shouldInstrumentProperty(name) {
						  return test(INSTRUMENTED_PROPERTY_RE, String(name));
						}

						exports.shouldInstrumentProperty = shouldInstrumentProperty;
					},
					"node-builder.js": function (exports, module, require) {
						

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var esotope_hammerhead_1 = require("esotope-hammerhead");

						var instruction_1 = __importDefault(require("./instruction"));

						var url_1 = require("../../utils/url");

						var temp_variables_1 = __importDefault(require("./transformers/temp-variables"));

						function createIdentifier(name) {
						  return {
						    type: esotope_hammerhead_1.Syntax.Identifier,
						    name: name
						  };
						}

						exports.createIdentifier = createIdentifier;

						function createExpressionStatement(expression) {
						  return {
						    type: esotope_hammerhead_1.Syntax.ExpressionStatement,
						    expression: expression
						  };
						}

						exports.createExpressionStatement = createExpressionStatement;

						function createAssignmentExpression(left, operator, right) {
						  return {
						    type: esotope_hammerhead_1.Syntax.AssignmentExpression,
						    operator: operator,
						    left: left,
						    right: right
						  };
						}

						exports.createAssignmentExpression = createAssignmentExpression;

						function createSimpleCallExpression(callee, args) {
						  return {
						    type: esotope_hammerhead_1.Syntax.CallExpression,
						    callee: callee,
						    arguments: args
						  };
						}

						exports.createSimpleCallExpression = createSimpleCallExpression;

						function createArrayExpression(elements) {
						  return {
						    type: esotope_hammerhead_1.Syntax.ArrayExpression,
						    elements: elements
						  };
						}

						exports.createArrayExpression = createArrayExpression;

						function createMemberExpression(object, property, computed) {
						  return {
						    type: esotope_hammerhead_1.Syntax.MemberExpression,
						    object: object,
						    property: property,
						    computed: computed
						  };
						}

						exports.createMemberExpression = createMemberExpression;

						function createBinaryExpression(left, operator, right) {
						  return {
						    type: esotope_hammerhead_1.Syntax.BinaryExpression,
						    left: left,
						    right: right,
						    operator: operator
						  };
						}

						exports.createBinaryExpression = createBinaryExpression;

						function createSequenceExpression(expressions) {
						  return {
						    type: esotope_hammerhead_1.Syntax.SequenceExpression,
						    expressions: expressions
						  };
						}

						exports.createSequenceExpression = createSequenceExpression;

						function createThisExpression() {
						  return {
						    type: esotope_hammerhead_1.Syntax.ThisExpression
						  };
						}

						function createLogicalExpression(left, operator, right) {
						  return {
						    type: esotope_hammerhead_1.Syntax.LogicalExpression,
						    left: left,
						    right: right,
						    operator: operator
						  };
						}

						function createReturnStatement(argument) {
						  if (argument === void 0) {
						    argument = null;
						  }

						  return {
						    type: esotope_hammerhead_1.Syntax.ReturnStatement,
						    argument: argument
						  };
						}

						exports.createReturnStatement = createReturnStatement;

						function createFunctionExpression(id, params, body, async, generator) {
						  if (async === void 0) {
						    async = false;
						  }

						  if (generator === void 0) {
						    generator = false;
						  }

						  return {
						    type: esotope_hammerhead_1.Syntax.FunctionExpression,
						    id: id,
						    params: params,
						    body: body,
						    async: async,
						    generator: generator
						  };
						}

						function createUnaryExpression(operator, argument) {
						  return {
						    type: esotope_hammerhead_1.Syntax.UnaryExpression,
						    operator: operator,
						    prefix: true,
						    argument: argument
						  };
						}

						function createUndefined() {
						  return createUnaryExpression('void', createSimpleLiteral(0));
						}

						exports.createUndefined = createUndefined;

						function createConditionalExpression(test, consequent, alternate) {
						  return {
						    type: esotope_hammerhead_1.Syntax.ConditionalExpression,
						    test: test,
						    consequent: consequent,
						    alternate: alternate
						  };
						}

						exports.createConditionalExpression = createConditionalExpression;

						function createSimpleLiteral(value) {
						  return {
						    type: esotope_hammerhead_1.Syntax.Literal,
						    value: value
						  };
						}

						exports.createSimpleLiteral = createSimpleLiteral;

						function createAssignmentExprStmt(left, right) {
						  return createExpressionStatement(createAssignmentExpression(left, '=', right));
						}

						exports.createAssignmentExprStmt = createAssignmentExprStmt;

						function createBlockStatement(body) {
						  return {
						    type: esotope_hammerhead_1.Syntax.BlockStatement,
						    body: body
						  };
						}

						exports.createBlockStatement = createBlockStatement;

						function createVariableDeclarator(id, init) {
						  if (init === void 0) {
						    init = null;
						  }

						  return {
						    type: esotope_hammerhead_1.Syntax.VariableDeclarator,
						    id: id,
						    init: init
						  };
						}

						exports.createVariableDeclarator = createVariableDeclarator;

						function createVariableDeclaration(kind, declarations) {
						  return {
						    type: esotope_hammerhead_1.Syntax.VariableDeclaration,
						    declarations: declarations,
						    kind: kind
						  };
						}

						exports.createVariableDeclaration = createVariableDeclaration;

						function createProcessScriptMethodCall(arg, isApply) {
						  var args = [arg];
						  var processScriptIdentifier = createIdentifier(instruction_1.default.processScript);
						  if (isApply) args.push(createSimpleLiteral(true));
						  return createSimpleCallExpression(processScriptIdentifier, args);
						}

						exports.createProcessScriptMethodCall = createProcessScriptMethodCall;

						function createLocationGetWrapper(location) {
						  var getLocationIdentifier = createIdentifier(instruction_1.default.getLocation);
						  return createSimpleCallExpression(getLocationIdentifier, [location]);
						}

						exports.createLocationGetWrapper = createLocationGetWrapper;

						function createLocationSetWrapper(locationIdentifier, value, wrapWithSequence) {
						  var tempIdentifier = createIdentifier(temp_variables_1.default.generateName());
						  var setLocationIdentifier = createIdentifier(instruction_1.default.setLocation);
						  var setLocationCall = createSimpleCallExpression(setLocationIdentifier, [locationIdentifier, tempIdentifier]);
						  var locationAssignment = createAssignmentExpression(locationIdentifier, '=', tempIdentifier);
						  var callIdentifier = createIdentifier('call');
						  var functionWrapper = createFunctionExpression(null, [], createBlockStatement([createVariableDeclaration('var', [createVariableDeclarator(tempIdentifier, value)]), createReturnStatement(createLogicalExpression(setLocationCall, '||', locationAssignment))]));
						  var functionWrapperCallMember = createMemberExpression(functionWrapper, callIdentifier, false);
						  var functionWrapperCall = createSimpleCallExpression(functionWrapperCallMember, [createThisExpression()]);
						  if (wrapWithSequence) return createSequenceExpression([createSimpleLiteral(0), functionWrapperCall]);
						  return functionWrapperCall;
						}

						exports.createLocationSetWrapper = createLocationSetWrapper;

						function createPropertySetWrapper(propertyName, obj, value) {
						  var setPropertyIdentifier = createIdentifier(instruction_1.default.setProperty);
						  return createSimpleCallExpression(setPropertyIdentifier, [obj, createSimpleLiteral(propertyName), value]);
						}

						exports.createPropertySetWrapper = createPropertySetWrapper;

						function createMethodCallWrapper(owner, method, args) {
						  var callMethodIdentifier = createIdentifier(instruction_1.default.callMethod);
						  var methodArgsArray = createArrayExpression(args);
						  return createSimpleCallExpression(callMethodIdentifier, [owner, method, methodArgsArray]);
						}

						exports.createMethodCallWrapper = createMethodCallWrapper;

						function createPropertyGetWrapper(propertyName, owner) {
						  var getPropertyIdentifier = createIdentifier(instruction_1.default.getProperty);
						  return createSimpleCallExpression(getPropertyIdentifier, [owner, createSimpleLiteral(propertyName)]);
						}

						exports.createPropertyGetWrapper = createPropertyGetWrapper;

						function createComputedPropertyGetWrapper(property, owner) {
						  var getPropertyIdentifier = createIdentifier(instruction_1.default.getProperty);
						  return createSimpleCallExpression(getPropertyIdentifier, [owner, property]);
						}

						exports.createComputedPropertyGetWrapper = createComputedPropertyGetWrapper;

						function createComputedPropertySetWrapper(property, owner, value) {
						  var setPropertyIdentifier = createIdentifier(instruction_1.default.setProperty);
						  return createSimpleCallExpression(setPropertyIdentifier, [owner, property, value]);
						}

						exports.createComputedPropertySetWrapper = createComputedPropertySetWrapper;

						function createGetEvalMethodCall(node) {
						  var getEvalIdentifier = createIdentifier(instruction_1.default.getEval);
						  return createSimpleCallExpression(getEvalIdentifier, [node]);
						}

						exports.createGetEvalMethodCall = createGetEvalMethodCall;

						function getProxyUrlLiteral(source, resolver) {
						  var proxyUrl = resolver(String(source.value), url_1.getResourceTypeString({
						    isScript: true
						  }));
						  return createSimpleLiteral(proxyUrl);
						}

						exports.getProxyUrlLiteral = getProxyUrlLiteral;

						function createGetProxyUrlMethodCall(arg, baseUrl) {
						  var getProxyUrlIdentifier = createIdentifier(instruction_1.default.getProxyUrl);
						  var args = [arg];
						  if (baseUrl) args.push(createSimpleLiteral(baseUrl));
						  return createSimpleCallExpression(getProxyUrlIdentifier, args);
						}

						exports.createGetProxyUrlMethodCall = createGetProxyUrlMethodCall;

						function createGetPostMessageMethodCall(node) {
						  var getPostMessageIdentifier = createIdentifier(instruction_1.default.getPostMessage);
						  var args = node.type === esotope_hammerhead_1.Syntax.MemberExpression ? [node.object] : [createSimpleLiteral(null), node];
						  return createSimpleCallExpression(getPostMessageIdentifier, args);
						}

						exports.createGetPostMessageMethodCall = createGetPostMessageMethodCall;

						function createExpandedConcatOperation(left, right) {
						  return createAssignmentExpression(left, '=', createBinaryExpression(left, '+', right));
						}

						exports.createExpandedConcatOperation = createExpandedConcatOperation;

						function createHtmlProcessorWrapper(node) {
						  var processHtmlIdentifier = createIdentifier(instruction_1.default.processHtml);
						  var parentIdentifier = createIdentifier('parent');
						  var windowIdentifier = createIdentifier('window');
						  var processHtmlThroughParent = createMemberExpression(parentIdentifier, processHtmlIdentifier, false);
						  var processHtmlCall = createSimpleCallExpression(processHtmlThroughParent, [windowIdentifier, node.expression]);
						  return createExpressionStatement(processHtmlCall);
						}

						exports.createHtmlProcessorWrapper = createHtmlProcessorWrapper;

						function createTempVarsDeclaration(tempVars) {
						  var declarations = [];

						  for (var _i2 = 0; _i2 < tempVars.length; _i2++) {
						    var variable = tempVars[_i2];
						    declarations.push(createVariableDeclarator(createIdentifier(variable)));
						  }

						  return createVariableDeclaration('var', declarations);
						}

						exports.createTempVarsDeclaration = createTempVarsDeclaration;
					},
					"transform.js": function (exports, module, require) {
						

						var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
						  return mod && mod.__esModule ? mod : {
						    "default": mod
						  };
						};

						Object.defineProperty(exports, "__esModule", {
						  value: true
						});

						var transformers_1 = __importDefault(require("./transformers"));

						var js_protocol_last_expression_1 = __importDefault(require("./transformers/js-protocol-last-expression"));

						var static_import_1 = __importDefault(require("./transformers/static-import"));

						var dynamic_import_1 = __importDefault(require("./transformers/dynamic-import"));

						var replace_node_1 = __importDefault(require("./transformers/replace-node"));

						var esotope_hammerhead_1 = require("esotope-hammerhead");

						var url_1 = require("../../utils/url");

						var stack_processing_1 = require("../../utils/stack-processing");

						var node_builder_1 = require("./node-builder");

						var temp_variables_1 = __importDefault(require("./transformers/temp-variables"));

						var State = /*#__PURE__*/function () {
						  function State() {
						    this.hasTransformedAncestor = false;
						  } // NOTE: There is an issue with processing `new` expressions. `new a.src.b()` will be transformed
						  // to `new __get$(a, 'src').b()`, which is wrong. The correct result is `new (__get$(a, 'src')).b()`.
						  // To solve this problem, we add a 'state' entity. This entity stores the "new" expression, so that
						  // we can add it to the changes when the transformation is found.


						  State.create = function create(currState, node, parent, key, hasTransformedAncestor) {
						    if (hasTransformedAncestor === void 0) {
						      hasTransformedAncestor = false;
						    }

						    var isNewExpression = node.type === esotope_hammerhead_1.Syntax.NewExpression;
						    var isNewExpressionAncestor = isNewExpression && !currState.newExpressionAncestor;
						    var newState = new State();
						    newState.hasTransformedAncestor = currState.hasTransformedAncestor || hasTransformedAncestor;
						    newState.newExpressionAncestor = isNewExpressionAncestor ? node : currState.newExpressionAncestor;
						    newState.newExpressionAncestorParent = isNewExpressionAncestor ? parent : currState.newExpressionAncestorParent; // @ts-ignore

						    newState.newExpressionAncestorKey = isNewExpressionAncestor ? key : currState.newExpressionAncestorKey;
						    return newState;
						  };

						  return State;
						}(); // NOTE: We should avoid using native object prototype methods,
						// since they can be overriden by the client code. (GH-245)


						var objectToString = Object.prototype.toString;
						var objectKeys = Object.keys;

						function getChange(node, parentType) {
						  /*eslint-disable @typescript-eslint/no-non-null-assertion*/
						  var start = node.originStart;
						  var end = node.originEnd;
						  /*eslint-disable @typescript-eslint/no-non-null-assertion*/

						  return {
						    start: start,
						    end: end,
						    node: node,
						    parentType: parentType
						  };
						}

						function transformChildNodes(node, changes, state, tempVars) {
						  // @ts-ignore
						  var nodeKeys = objectKeys(node);

						  for (var _i2 = 0; _i2 < nodeKeys.length; _i2++) {
						    var key = nodeKeys[_i2];
						    var childNode = node[key];
						    var stringifiedNode = objectToString.call(childNode);

						    if (stringifiedNode === '[object Array]') {
						      // @ts-ignore
						      var childNodes = childNode;

						      for (var _i4 = 0; _i4 < childNodes.length; _i4++) {
						        var nthNode = childNodes[_i4];
						        // NOTE: Some items of ArrayExpression can be null
						        if (nthNode) transform(nthNode, changes, state, node, key, tempVars);
						      }
						    } else if (stringifiedNode === '[object Object]') {
						      // @ts-ignore
						      transform(childNode, changes, state, node, key, tempVars);
						    }
						  }
						}

						function isNodeTransformed(node) {
						  return node.originStart !== void 0 && node.originEnd !== void 0;
						}

						function addChangeForTransformedNode(state, changes, replacement, parentType) {
						  var hasTransformedAncestor = state.hasTransformedAncestor || state.newExpressionAncestor && isNodeTransformed(state.newExpressionAncestor);
						  if (hasTransformedAncestor) return;

						  if (state.newExpressionAncestor) {
						    replace_node_1.default(state.newExpressionAncestor, state.newExpressionAncestor, state.newExpressionAncestorParent, state.newExpressionAncestorKey);
						    changes.push(getChange(state.newExpressionAncestor, state.newExpressionAncestorParent.type));
						  } else changes.push(getChange(replacement, parentType));
						}

						function addTempVarsDeclaration(node, changes, state, tempVars) {
						  var names = tempVars.get();
						  if (!names.length) return;
						  var declaration = node_builder_1.createTempVarsDeclaration(names);
						  replace_node_1.default(null, declaration, node, 'body');
						  addChangeForTransformedNode(state, changes, declaration, node.type);
						}

						function beforeTransform(wrapLastExprWithProcessHtml, resolver) {
						  if (wrapLastExprWithProcessHtml === void 0) {
						    wrapLastExprWithProcessHtml = false;
						  }

						  js_protocol_last_expression_1.default.wrapLastExpr = wrapLastExprWithProcessHtml;
						  static_import_1.default.resolver = resolver;
						  var isServerSide = typeof window === 'undefined';
						  if (isServerSide) dynamic_import_1.default.baseUrl = resolver ? url_1.parseProxyUrl(resolver('./')).destUrl : '';else {
						    var currentStack = new Error().stack; // NOTE: IE11 doesn't give the error stack without the 'throw' statement and doesn't support the 'import' statement

						    dynamic_import_1.default.baseUrl = currentStack && stack_processing_1.getFirstDestUrl(currentStack) || '';
						  }
						}

						function afterTransform() {
						  js_protocol_last_expression_1.default.wrapLastExpr = false;
						  static_import_1.default.resolver = void 0;
						  dynamic_import_1.default.baseUrl = void 0;
						}

						function findTransformer(node, parent) {
						  var nodeTransformers = transformers_1.default.get(node.type);

						  if (nodeTransformers) {
						    for (var _i6 = 0; _i6 < nodeTransformers.length; _i6++) {
						      var transformer = nodeTransformers[_i6];
						      if (transformer.condition(node, parent)) return transformer;
						    }
						  }

						  return null;
						}

						function transform(node, changes, state, parent, key, tempVars) {
						  var allowTempVarAdd = node.type === esotope_hammerhead_1.Syntax.BlockStatement;
						  var nodeTransformed = false;
						  if (allowTempVarAdd) tempVars = new temp_variables_1.default();

						  if (!node.reTransform && isNodeTransformed(node)) {
						    addChangeForTransformedNode(state, changes, node, parent.type);
						    nodeTransformed = true;
						  } else {
						    var storedNode = node;
						    var transformer = findTransformer(node, parent);
						    var replacement = null;

						    while (transformer) {
						      replacement = transformer.run(replacement || node, parent, key, tempVars);
						      if (!replacement) break;
						      nodeTransformed = true;
						      if (!transformer.nodeReplacementRequireTransform) break;
						      transformer = findTransformer(replacement, parent);
						      node = replacement;
						    }

						    if (nodeTransformed) {
						      replace_node_1.default(storedNode, replacement, parent, key);
						      addChangeForTransformedNode(state, changes, replacement, parent.type);
						    }
						  }

						  state = State.create(state, node, parent, key, nodeTransformed);
						  transformChildNodes(node, changes, state, tempVars);
						  if (allowTempVarAdd) addTempVarsDeclaration(node, changes, state, tempVars);
						}

						function transformProgram(node, wrapLastExprWithProcessHtml, resolver) {
						  if (wrapLastExprWithProcessHtml === void 0) {
						    wrapLastExprWithProcessHtml = false;
						  }

						  var changes = [];
						  var state = new State();
						  var tempVars = new temp_variables_1.default();
						  temp_variables_1.default.resetCounter();
						  beforeTransform(wrapLastExprWithProcessHtml, resolver);
						  transformChildNodes(node, changes, state, tempVars);
						  addTempVarsDeclaration(node, changes, state, tempVars);
						  afterTransform();
						  return changes;
						}

						exports.default = transformProgram;
						module.exports = exports.default;
					},
					"transformers": {
						"assignment-destructuring.js": function (exports, module, require) {
							 // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var node_builder_1 = require("../node-builder");

							var esotope_hammerhead_1 = require("esotope-hammerhead");

							var destructuring_1 = __importDefault(require("../destructuring")); // Transform:
							// ({ location: loc } = window);
							// [{ location }, item] = [window, 6]
							// -->
							// var _hh$temp0, _hh$temp1, _hh$temp1$0;
							//
							// _hh$temp0 = window, loc = _hh$temp0.location;
							// _hh$temp1 = [window, 6], _hh$temp1$0 = _hh$temp1[0], location = _hh$temp1$0.location, item = _hh$temp1[1];


							var transformer = {
							  nodeReplacementRequireTransform: true,
							  nodeTypes: esotope_hammerhead_1.Syntax.AssignmentExpression,
							  condition: function condition(node) {
							    return node.operator === '=' && (node.left.type === esotope_hammerhead_1.Syntax.ObjectPattern || node.left.type === esotope_hammerhead_1.Syntax.ArrayPattern);
							  },
							  run: function run(node, _parent, _key, tempVars) {
							    var assignments = [];
							    destructuring_1.default(node.left, node.right, function (pattern, value, isTemp) {
							      assignments.push(node_builder_1.createAssignmentExpression(pattern, '=', value));
							      if (isTemp) tempVars.append(pattern.name);
							    });
							    return node_builder_1.createSequenceExpression(assignments);
							  }
							};
							exports.default = transformer;
							module.exports = exports.default;
						},
						"computed-property-get.js": function (exports, module, require) {
							 // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var node_builder_1 = require("../node-builder");

							var esotope_hammerhead_1 = require("esotope-hammerhead");

							var instrumented_1 = require("../instrumented"); // Transform:
							// obj[prop] -->
							// __get$(obj, prop)


							var transformer = {
							  nodeReplacementRequireTransform: true,
							  nodeTypes: esotope_hammerhead_1.Syntax.MemberExpression,
							  condition: function condition(node, parent) {
							    if (!node.computed || !parent) return false;
							    if (node.property.type === esotope_hammerhead_1.Syntax.Literal && !instrumented_1.shouldInstrumentProperty(node.property.value)) return false; // super[prop]

							    if (node.object.type === esotope_hammerhead_1.Syntax.Super) return false; // object[prop] = value

							    if (parent.type === esotope_hammerhead_1.Syntax.AssignmentExpression && parent.left === node) return false; // delete object[prop]

							    if (parent.type === esotope_hammerhead_1.Syntax.UnaryExpression && parent.operator === 'delete') return false; // object[prop]++ || object[prop]-- || ++object[prop] || --object[prop]

							    if (parent.type === esotope_hammerhead_1.Syntax.UpdateExpression && (parent.operator === '++' || parent.operator === '--')) return false; // object[prop]()

							    if (parent.type === esotope_hammerhead_1.Syntax.CallExpression && parent.callee === node) return false; // new (object[prop])() || new (object[prop])

							    if (parent.type === esotope_hammerhead_1.Syntax.NewExpression && parent.callee === node) return false; // for(object[prop] in source)

							    if (parent.type === esotope_hammerhead_1.Syntax.ForInStatement && parent.left === node) return false;
							    return true;
							  },
							  run: function run(node) {
							    return node_builder_1.createComputedPropertyGetWrapper(node.property, node.object);
							  }
							};
							exports.default = transformer;
							module.exports = exports.default;
						},
						"computed-property-set.js": function (exports, module, require) {
							 // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var node_builder_1 = require("../node-builder");

							var esotope_hammerhead_1 = require("esotope-hammerhead");

							var instrumented_1 = require("../instrumented"); // Transform:
							// obj[prop] = value -->
							// __set$(object, prop, value)


							var transformer = {
							  nodeReplacementRequireTransform: true,
							  nodeTypes: esotope_hammerhead_1.Syntax.AssignmentExpression,
							  condition: function condition(node) {
							    var left = node.left; // super[prop] = value

							    if (left.type === esotope_hammerhead_1.Syntax.MemberExpression && left.object.type === esotope_hammerhead_1.Syntax.Super) return false;
							    if (node.operator === '=' && left.type === esotope_hammerhead_1.Syntax.MemberExpression && left.computed) return left.property.type === esotope_hammerhead_1.Syntax.Literal ? instrumented_1.shouldInstrumentProperty(left.property.value) : true;
							    return false;
							  },
							  run: function run(node) {
							    var memberExpression = node.left;
							    return node_builder_1.createComputedPropertySetWrapper(memberExpression.property, memberExpression.object, node.right);
							  }
							};
							exports.default = transformer;
							module.exports = exports.default;
						},
						"concat-operator.js": function (exports, module, require) {
							 // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var node_builder_1 = require("../node-builder");

							var esotope_hammerhead_1 = require("esotope-hammerhead");

							var instrumented_1 = require("../instrumented"); // Transform:
							// val1 += val2
							// --> val1 = val1 + val2


							var transformer = {
							  nodeReplacementRequireTransform: true,
							  nodeTypes: esotope_hammerhead_1.Syntax.AssignmentExpression,
							  condition: function condition(node) {
							    if (node.operator !== '+=') return false;
							    var left = node.left; // location

							    if (left.type === esotope_hammerhead_1.Syntax.Identifier) return instrumented_1.shouldInstrumentProperty(left.name);

							    if (left.type === esotope_hammerhead_1.Syntax.MemberExpression) {
							      // something['location'] or something[propname]
							      if (left.computed) return left.property.type === esotope_hammerhead_1.Syntax.Literal ? instrumented_1.shouldInstrumentProperty(left.property.value) : left.property.type !== esotope_hammerhead_1.Syntax.UpdateExpression; // something.location
							      else if (left.property.type === esotope_hammerhead_1.Syntax.Identifier) return instrumented_1.shouldInstrumentProperty(left.property.name);
							    }

							    return false;
							  },
							  run: function run(node) {
							    return node_builder_1.createExpandedConcatOperation(node.left, node.right);
							  }
							};
							exports.default = transformer;
							module.exports = exports.default;
						},
						"declaration-destructuring.js": function (exports, module, require) {
							 // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var node_builder_1 = require("../node-builder");

							var esotope_hammerhead_1 = require("esotope-hammerhead");

							var destructuring_1 = __importDefault(require("../destructuring")); // Transform:
							// var { location: loc } = window,
							//     [{ location }, item] = [window, 6]
							// -->
							// var _hh$temp0 = window,
							//     loc = _hh$temp0.location,
							//     _hh$temp1 = [window, 6],
							//     _hh$temp1$0 = _hh$temp1[0],
							//     location = _hh$temp1$0.location,
							//     item = _hh$temp1[1];


							var transformer = {
							  nodeReplacementRequireTransform: true,
							  nodeTypes: esotope_hammerhead_1.Syntax.VariableDeclaration,
							  // @ts-ignore
							  condition: function condition(node, parent) {
							    // Skip: for (let { x } in some);
							    if (parent.type === esotope_hammerhead_1.Syntax.ForInStatement) return false;

							    for (var _i2 = 0, _node$declarations2 = node.declarations; _i2 < _node$declarations2.length; _i2++) {
							      var declarator = _node$declarations2[_i2];
							      if (declarator.id.type === esotope_hammerhead_1.Syntax.ObjectPattern || declarator.id.type === esotope_hammerhead_1.Syntax.ArrayPattern) return true;
							    }

							    return false;
							  },
							  run: function run(node) {
							    var declarations = [];

							    for (var _i4 = 0, _node$declarations4 = node.declarations; _i4 < _node$declarations4.length; _i4++) {
							      var declarator = _node$declarations4[_i4];
							      destructuring_1.default(declarator.id, declarator.init, function (pattern, value) {
							        return declarations.push(node_builder_1.createVariableDeclarator(pattern, value));
							      });
							    }

							    return node_builder_1.createVariableDeclaration(node.kind, declarations);
							  }
							};
							exports.default = transformer;
							module.exports = exports.default;
						},
						"dynamic-import.js": function (exports, module, require) {
							 // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var node_builder_1 = require("../node-builder");

							var esotope_hammerhead_1 = require("esotope-hammerhead");

							var replace_node_1 = __importDefault(require("./replace-node")); // Transform:
							// import(something).then()
							// -->
							// import(__get$ProxyUrl(something)).then()


							var transformer = {
							  nodeReplacementRequireTransform: true,
							  nodeTypes: esotope_hammerhead_1.Syntax.CallExpression,
							  // @ts-ignore
							  condition: function condition(node) {
							    return node.callee.type === esotope_hammerhead_1.Syntax.Import;
							  },
							  run: function run(node) {
							    var newArgs = node_builder_1.createGetProxyUrlMethodCall(node.arguments[0], transformer.baseUrl);
							    replace_node_1.default(node.arguments[0], newArgs, node, 'arguments');
							    return null;
							  }
							};
							exports.default = transformer;
							module.exports = exports.default;
						},
						"eval-bind.js": function (exports, module, require) {
							 // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var node_builder_1 = require("../node-builder");

							var esotope_hammerhead_1 = require("esotope-hammerhead");

							var replace_node_1 = __importDefault(require("./replace-node")); // Transform:
							// foo = eval.bind(...); -->
							// foo = __get$Eval(eval).bind(...);


							var transformer = {
							  nodeReplacementRequireTransform: false,
							  nodeTypes: esotope_hammerhead_1.Syntax.CallExpression,
							  condition: function condition(node) {
							    if (node.callee.type === esotope_hammerhead_1.Syntax.MemberExpression && node.callee.property.type === esotope_hammerhead_1.Syntax.Identifier && node.callee.property.name === 'bind') {
							      var obj = node.callee.object; // obj.eval.bind(), obj[eval].bind()

							      if (obj.type === esotope_hammerhead_1.Syntax.MemberExpression && (obj.property.type === esotope_hammerhead_1.Syntax.Identifier && obj.property.name || obj.property.type === esotope_hammerhead_1.Syntax.Literal && obj.property.value) === 'eval') return true; // eval.bind()

							      if (obj.type === esotope_hammerhead_1.Syntax.Identifier && obj.name === 'eval') return true;
							    }

							    return false;
							  },
							  run: function run(node) {
							    var callee = node.callee;
							    var getEvalNode = node_builder_1.createGetEvalMethodCall(callee.object);
							    replace_node_1.default(callee.object, getEvalNode, callee, 'object');
							    return null;
							  }
							};
							exports.default = transformer;
							module.exports = exports.default;
						},
						"eval-call-apply.js": function (exports, module, require) {
							 // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var node_builder_1 = require("../node-builder");

							var esotope_hammerhead_1 = require("esotope-hammerhead");

							var replace_node_1 = __importDefault(require("./replace-node"));

							var INVOCATION_FUNC_NAME_RE = /^(call|apply)$/; // Transform:
							// eval.call(ctx, script);
							// eval.apply(ctx, script); -->
							// eval.call(ctx, __proc$Script(script));
							// eval.apply(ctx, __proc$Script(script, true));

							var transformer = {
							  nodeReplacementRequireTransform: false,
							  nodeTypes: esotope_hammerhead_1.Syntax.CallExpression,
							  condition: function condition(node) {
							    // eval.<meth>(ctx, script, ...)
							    if (node.arguments.length < 2) return false;

							    if (node.callee.type === esotope_hammerhead_1.Syntax.MemberExpression && node.callee.property.type === esotope_hammerhead_1.Syntax.Identifier && INVOCATION_FUNC_NAME_RE.test(node.callee.property.name)) {
							      var obj = node.callee.object; // eval.<meth>()

							      if (obj.type === esotope_hammerhead_1.Syntax.Identifier && obj.name === 'eval') return true; // obj.eval.<meth>(), obj[eval].<meth>()

							      if (obj.type === esotope_hammerhead_1.Syntax.MemberExpression && (obj.property.type === esotope_hammerhead_1.Syntax.Identifier && obj.property.name || obj.property.type === esotope_hammerhead_1.Syntax.Literal && obj.property.value) === 'eval') return true;
							    }

							    return false;
							  },
							  run: function run(node) {
							    var callee = node.callee;
							    var property = callee.property;
							    var newArg = node_builder_1.createProcessScriptMethodCall(node.arguments[1], property.name === 'apply');
							    replace_node_1.default(node.arguments[1], newArg, node, 'arguments');
							    return null;
							  }
							};
							exports.default = transformer;
							module.exports = exports.default;
						},
						"eval-get.js": function (exports, module, require) {
							 // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var instruction_1 = __importDefault(require("../instruction"));

							var node_builder_1 = require("../node-builder");

							var esotope_hammerhead_1 = require("esotope-hammerhead"); // Transform:
							// const foo = eval; foo = eval; { _eval: eval }; return eval;
							// -->
							// const foo = _get$Eval(eval); foo = _get$Eval(eval); { _eval: _get$Eval(eval) }; return _get$Eval(eval);


							var transformer = {
							  nodeReplacementRequireTransform: false,
							  nodeTypes: esotope_hammerhead_1.Syntax.Identifier,
							  condition: function condition(node, parent) {
							    if (node.name === 'eval' && parent) {
							      // Skip: eval()
							      if (parent.type === esotope_hammerhead_1.Syntax.CallExpression && parent.callee === node) return false; // Skip: class X { eval () {} }

							      if (parent.type === esotope_hammerhead_1.Syntax.MethodDefinition) return false; // Skip: class eval { x () {} }

							      if (parent.type === esotope_hammerhead_1.Syntax.ClassDeclaration) return false; // Skip: window.eval, eval.call

							      if (parent.type === esotope_hammerhead_1.Syntax.MemberExpression) return false; // Skip: function eval () { ... }

							      if ((parent.type === esotope_hammerhead_1.Syntax.FunctionExpression || parent.type === esotope_hammerhead_1.Syntax.FunctionDeclaration) && parent.id === node) return false; // Skip: function (eval) { ... } || function func(eval) { ... } || eval => { ... }

							      if ((parent.type === esotope_hammerhead_1.Syntax.FunctionExpression || parent.type === esotope_hammerhead_1.Syntax.FunctionDeclaration || parent.type === esotope_hammerhead_1.Syntax.ArrowFunctionExpression) && parent.params.indexOf(node) !== -1) return false; // Skip: { eval: value }

							      if (parent.type === esotope_hammerhead_1.Syntax.Property && parent.key === node) return false; // Skip: eval = value || function x (eval = value) { ... }

							      if ((parent.type === esotope_hammerhead_1.Syntax.AssignmentExpression || parent.type === esotope_hammerhead_1.Syntax.AssignmentPattern) && parent.left === node) return false; // Skip: const eval = value;

							      if (parent.type === esotope_hammerhead_1.Syntax.VariableDeclarator && parent.id === node) return false; // Skip: eval++ || eval-- || ++eval || --eval

							      if (parent.type === esotope_hammerhead_1.Syntax.UpdateExpression && (parent.operator === '++' || parent.operator === '--')) return false; // Skip already transformed: __get$Eval(eval)

							      if (parent.type === esotope_hammerhead_1.Syntax.CallExpression && parent.callee.type === esotope_hammerhead_1.Syntax.Identifier && parent.callee.name === instruction_1.default.getEval) return false; // Skip: function x (...eval) {}

							      if (parent.type === esotope_hammerhead_1.Syntax.RestElement) return false; // Skip: export { eval } from "module";

							      if (parent.type === esotope_hammerhead_1.Syntax.ExportSpecifier) return false; // Skip: import { eval } from "module";

							      if (parent.type === esotope_hammerhead_1.Syntax.ImportSpecifier) return false;
							      return true;
							    }

							    return false;
							  },
							  run: node_builder_1.createGetEvalMethodCall
							};
							exports.default = transformer;
							module.exports = exports.default;
						},
						"eval.js": function (exports, module, require) {
							 // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var node_builder_1 = require("../node-builder");

							var replace_node_1 = __importDefault(require("./replace-node"));

							var esotope_hammerhead_1 = require("esotope-hammerhead"); // Transform:
							// eval(script); --> eval(__proc$Script(script));


							var transformer = {
							  nodeReplacementRequireTransform: false,
							  nodeTypes: esotope_hammerhead_1.Syntax.CallExpression,
							  condition: function condition(node) {
							    if (!node.arguments.length) return false;
							    var callee = node.callee; // eval()

							    if (callee.type === esotope_hammerhead_1.Syntax.Identifier && callee.name === 'eval') return true; // obj.eval(), obj['eval'](),

							    return callee.type === esotope_hammerhead_1.Syntax.MemberExpression && (callee.property.type === esotope_hammerhead_1.Syntax.Identifier && callee.property.name || callee.property.type === esotope_hammerhead_1.Syntax.Literal && callee.property.value) === 'eval';
							  },
							  run: function run(node) {
							    var newArgs = node_builder_1.createProcessScriptMethodCall(node.arguments[0]);
							    replace_node_1.default(node.arguments[0], newArgs, node, 'arguments');
							    return null;
							  }
							};
							exports.default = transformer;
							module.exports = exports.default;
						},
						"for-in.js": function (exports, module, require) {
							 // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var esotope_hammerhead_1 = require("esotope-hammerhead");

							var node_builder_1 = require("../node-builder");

							var replace_node_1 = __importDefault(require("./replace-node"));

							var temp_variables_1 = __importDefault(require("./temp-variables")); // Transform:
							// for(obj[prop] in src), for(obj.prop in src) -->
							// for(const _hh$temp0 in src) { obj[prop] = _hh$temp0; }


							var transformer = {
							  nodeReplacementRequireTransform: false,
							  nodeTypes: esotope_hammerhead_1.Syntax.ForInStatement,
							  condition: function condition(node) {
							    return node.left.type === esotope_hammerhead_1.Syntax.MemberExpression;
							  },
							  run: function run(node) {
							    var tempVarAst = node_builder_1.createIdentifier(temp_variables_1.default.generateName());
							    var varDeclaration = node_builder_1.createVariableDeclaration('var', [node_builder_1.createVariableDeclarator(tempVarAst)]);
							    var assignmentExprStmt = node_builder_1.createAssignmentExprStmt(node.left, tempVarAst);
							    if (node.body.type !== esotope_hammerhead_1.Syntax.BlockStatement) replace_node_1.default(node.body, node_builder_1.createBlockStatement([assignmentExprStmt, node.body]), node, 'body');else replace_node_1.default(null, assignmentExprStmt, node.body, 'body');
							    replace_node_1.default(node.left, varDeclaration, node, 'left');
							    return null;
							  }
							};
							exports.default = transformer;
							module.exports = exports.default;
						},
						"for-of.js": function (exports, module, require) {
							

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var esotope_hammerhead_1 = require("esotope-hammerhead");

							var node_builder_1 = require("../node-builder");

							var replace_node_1 = __importDefault(require("./replace-node"));

							var temp_variables_1 = __importDefault(require("./temp-variables")); // Transform:
							// for (let {href, postMessage} of wins) {} -->
							// for (let _hh$temp0 of wins) { let {href, postMessage} = _hh$temp0; }


							var transformer = {
							  nodeReplacementRequireTransform: false,
							  nodeTypes: esotope_hammerhead_1.Syntax.ForOfStatement,
							  condition: function condition(node) {
							    var left = node.left;
							    if (left.type === esotope_hammerhead_1.Syntax.VariableDeclaration) left = left.declarations[0].id;
							    return left.type === esotope_hammerhead_1.Syntax.ObjectPattern || left.type === esotope_hammerhead_1.Syntax.ArrayPattern;
							  },
							  run: function run(node) {
							    var tempIdentifier = node_builder_1.createIdentifier(temp_variables_1.default.generateName());
							    var forOfLeft = node.left;
							    var statementWithTempAssignment;

							    if (forOfLeft.type === esotope_hammerhead_1.Syntax.VariableDeclaration) {
							      statementWithTempAssignment = node_builder_1.createVariableDeclaration(forOfLeft.kind, [node_builder_1.createVariableDeclarator(forOfLeft.declarations[0].id, tempIdentifier)]);
							      statementWithTempAssignment.reTransform = true;
							      replace_node_1.default(forOfLeft.declarations[0].id, tempIdentifier, forOfLeft.declarations[0], 'id');
							    } else {
							      var varDeclaration = node_builder_1.createVariableDeclaration('var', [node_builder_1.createVariableDeclarator(tempIdentifier)]);
							      statementWithTempAssignment = node_builder_1.createAssignmentExprStmt(forOfLeft, tempIdentifier);
							      replace_node_1.default(forOfLeft, varDeclaration, node, 'left');
							    }

							    if (node.body.type === esotope_hammerhead_1.Syntax.BlockStatement) replace_node_1.default(null, statementWithTempAssignment, node.body, 'body');else replace_node_1.default(node.body, node_builder_1.createBlockStatement([statementWithTempAssignment, node.body]), node, 'body');
							    return null;
							  }
							};
							exports.default = transformer;
							module.exports = exports.default;
						},
						"func-args-destructing.js": function (exports, module, require) {
							 // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var node_builder_1 = require("../node-builder");

							var esotope_hammerhead_1 = require("esotope-hammerhead");

							var replace_node_1 = __importDefault(require("./replace-node"));

							var temp_variables_1 = __importDefault(require("./temp-variables")); // Transform:
							// function x ({a, b}, [c, d]) {}
							// -->
							// function x (_hh$temp0, _hh$temp1) {
							//     var {a, b} = _hh$temp0,
							//         [c, d] = _hh$temp1;
							// }


							function create(type) {
							  return {
							    nodeReplacementRequireTransform: false,
							    nodeTypes: type,
							    condition: function condition(node) {
							      for (var _i2 = 0, _node$params2 = node.params; _i2 < _node$params2.length; _i2++) {
							        var param = _node$params2[_i2];
							        if (param.type === esotope_hammerhead_1.Syntax.AssignmentPattern) param = param.left;
							        if (param.type === esotope_hammerhead_1.Syntax.ObjectPattern || param.type === esotope_hammerhead_1.Syntax.ArrayPattern) return true;
							      }

							      return false;
							    },
							    run: function run(node) {
							      var declarations = [];

							      for (var _i4 = 0, _node$params4 = node.params; _i4 < _node$params4.length; _i4++) {
							        var param = _node$params4[_i4];
							        var tempVarParent = node;
							        var tempVarKey = 'params';

							        if (param.type === esotope_hammerhead_1.Syntax.AssignmentPattern) {
							          // @ts-ignore
							          tempVarParent = param;
							          param = param.left;
							          tempVarKey = 'left';
							        }

							        if (param.type === esotope_hammerhead_1.Syntax.ObjectPattern && param.properties.length || param.type === esotope_hammerhead_1.Syntax.ArrayPattern && param.elements.length) {
							          var tempVar = node_builder_1.createIdentifier(temp_variables_1.default.generateName()); // @ts-ignore

							          replace_node_1.default(param, tempVar, tempVarParent, tempVarKey);
							          declarations.push(node_builder_1.createVariableDeclarator(param, tempVar));
							        }
							      }

							      if (!declarations.length) return null;
							      var declaration = node_builder_1.createVariableDeclaration('var', declarations);

							      if (node.body.type !== esotope_hammerhead_1.Syntax.BlockStatement) {
							        // @ts-ignore
							        var returnStmt = node_builder_1.createReturnStatement(node.body);
							        replace_node_1.default(node.body, node_builder_1.createBlockStatement([declaration, returnStmt]), node, 'body'); // @ts-ignore

							        node.expression = false;
							        return node;
							      } else replace_node_1.default(null, declaration, node.body, 'body');

							      declaration.reTransform = true;
							      return null;
							    }
							  };
							}

							exports.default = create;
							module.exports = exports.default;
						},
						"index.js": function (exports, module, require) {
							 // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var computed_property_get_1 = __importDefault(require("./computed-property-get"));

							var computed_property_set_1 = __importDefault(require("./computed-property-set"));

							var concat_operator_1 = __importDefault(require("./concat-operator"));

							var eval_1 = __importDefault(require("./eval"));

							var eval_bind_1 = __importDefault(require("./eval-bind"));

							var eval_call_apply_1 = __importDefault(require("./eval-call-apply"));

							var eval_get_1 = __importDefault(require("./eval-get"));

							var window_eval_get_1 = __importDefault(require("./window-eval-get"));

							var post_message_get_1 = __importDefault(require("./post-message-get"));

							var window_post_message_get_1 = __importDefault(require("./window-post-message-get"));

							var post_message_call_apply_bind_1 = __importDefault(require("./post-message-call-apply-bind"));

							var for_in_1 = __importDefault(require("./for-in"));

							var for_of_1 = __importDefault(require("./for-of"));

							var location_get_1 = __importDefault(require("./location-get"));

							var location_set_1 = __importDefault(require("./location-set"));

							var property_get_1 = __importDefault(require("./property-get"));

							var property_set_1 = __importDefault(require("./property-set"));

							var method_call_1 = __importDefault(require("./method-call"));

							var js_protocol_last_expression_1 = __importDefault(require("./js-protocol-last-expression"));

							var static_import_1 = __importDefault(require("./static-import"));

							var dynamic_import_1 = __importDefault(require("./dynamic-import"));

							var declaration_destructuring_1 = __importDefault(require("./declaration-destructuring"));

							var assignment_destructuring_1 = __importDefault(require("./assignment-destructuring"));

							var func_args_destructing_1 = __importDefault(require("./func-args-destructing"));

							var esotope_hammerhead_1 = require("esotope-hammerhead");

							var TRANSFORMERS = [func_args_destructing_1.default(esotope_hammerhead_1.Syntax.FunctionDeclaration), func_args_destructing_1.default(esotope_hammerhead_1.Syntax.FunctionExpression), func_args_destructing_1.default(esotope_hammerhead_1.Syntax.ArrowFunctionExpression), assignment_destructuring_1.default, computed_property_get_1.default, computed_property_set_1.default, concat_operator_1.default, eval_1.default, eval_bind_1.default, eval_call_apply_1.default, eval_get_1.default, window_eval_get_1.default, post_message_get_1.default, window_post_message_get_1.default, post_message_call_apply_bind_1.default, for_in_1.default, for_of_1.default, location_get_1.default, location_set_1.default, property_get_1.default, property_set_1.default, method_call_1.default, js_protocol_last_expression_1.default, static_import_1.default, dynamic_import_1.default, declaration_destructuring_1.default];

							function createTransformerMap() {
							  var transformerMap = new Map();

							  for (var _i2 = 0; _i2 < TRANSFORMERS.length; _i2++) {
							    var transformer = TRANSFORMERS[_i2];
							    var nodeType = transformer.nodeTypes;
							    var transformers = transformerMap.get(nodeType);

							    if (!transformers) {
							      transformers = [];
							      transformerMap.set(nodeType, transformers);
							    }

							    transformers.push(transformer);
							  }

							  return transformerMap;
							}

							exports.default = createTransformerMap();
							module.exports = exports.default;
						},
						"js-protocol-last-expression.js": function (exports, module, require) {
							 // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var node_builder_1 = require("../node-builder");

							var esotope_hammerhead_1 = require("esotope-hammerhead"); // Transform:
							// x = 5; "hello" --> x = 5; parent.__proc$Html(window, "hello")
							// someAction(); generateHtmlPage() --> someAction(); parent.__proc$Html(window, generateHtmlPage())


							var transformer = {
							  nodeReplacementRequireTransform: true,
							  nodeTypes: esotope_hammerhead_1.Syntax.ExpressionStatement,
							  condition: function condition(node, parent) {
							    return !!transformer.wrapLastExpr && !!parent && parent.type === esotope_hammerhead_1.Syntax.Program && parent.body[parent.body.length - 1] === node;
							  },
							  run: function run(node) {
							    transformer.wrapLastExpr = false;
							    return node_builder_1.createHtmlProcessorWrapper(node);
							  }
							};
							exports.default = transformer;
							module.exports = exports.default;
						},
						"location-get.js": function (exports, module, require) {
							 // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var node_builder_1 = require("../node-builder");

							var instruction_1 = __importDefault(require("../instruction"));

							var esotope_hammerhead_1 = require("esotope-hammerhead"); // Transform:
							// location -->
							// __get$Loc(location)


							var transformer = {
							  nodeReplacementRequireTransform: false,
							  nodeTypes: esotope_hammerhead_1.Syntax.Identifier,
							  condition: function condition(node, parent) {
							    if (node.name !== 'location' || !parent) return false; // Skip: const location = value;

							    if (parent.type === esotope_hammerhead_1.Syntax.VariableDeclarator && parent.id === node) return false; // Skip: location = value || function x (location = value) { ... }

							    if ((parent.type === esotope_hammerhead_1.Syntax.AssignmentExpression || parent.type === esotope_hammerhead_1.Syntax.AssignmentPattern) && parent.left === node) return false; // Skip: function location() {}

							    if ((parent.type === esotope_hammerhead_1.Syntax.FunctionExpression || parent.type === esotope_hammerhead_1.Syntax.FunctionDeclaration) && parent.id === node) return false; // Skip: object.location || location.field

							    if (parent.type === esotope_hammerhead_1.Syntax.MemberExpression && parent.property === node) return false; // Skip: { location: value }

							    if (parent.type === esotope_hammerhead_1.Syntax.Property && parent.key === node) return false; // Skip: location++ || location-- || ++location || --location

							    if (parent.type === esotope_hammerhead_1.Syntax.UpdateExpression && (parent.operator === '++' || parent.operator === '--')) return false; // Skip: function (location) { ... } || function func(location) { ... } || location => { ... }

							    if ((parent.type === esotope_hammerhead_1.Syntax.FunctionExpression || parent.type === esotope_hammerhead_1.Syntax.FunctionDeclaration || parent.type === esotope_hammerhead_1.Syntax.ArrowFunctionExpression) && parent.params.indexOf(node) !== -1) return false; // Skip already transformed: __get$Loc(location)

							    if (parent.type === esotope_hammerhead_1.Syntax.CallExpression && parent.callee.type === esotope_hammerhead_1.Syntax.Identifier && parent.callee.name === instruction_1.default.getLocation) return false; // Skip: class X { location () {} }

							    if (parent.type === esotope_hammerhead_1.Syntax.MethodDefinition) return false; // Skip: class location { x () {} }

							    if (parent.type === esotope_hammerhead_1.Syntax.ClassDeclaration) return false; // Skip: function x (...location) {}

							    if (parent.type === esotope_hammerhead_1.Syntax.RestElement) return false; // Skip: export { location } from "module";

							    if (parent.type === esotope_hammerhead_1.Syntax.ExportSpecifier) return false; // Skip: import { location } from "module";

							    if (parent.type === esotope_hammerhead_1.Syntax.ImportSpecifier) return false;
							    return true;
							  },
							  run: node_builder_1.createLocationGetWrapper
							};
							exports.default = transformer;
							module.exports = exports.default;
						},
						"location-set.js": function (exports, module, require) {
							 // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var node_builder_1 = require("../node-builder");

							var esotope_hammerhead_1 = require("esotope-hammerhead"); // Transform:
							// location = value -->
							// (function(){ return __set$Loc(location, value) || location = value;}.apply(this))


							var transformer = {
							  nodeReplacementRequireTransform: false,
							  nodeTypes: esotope_hammerhead_1.Syntax.AssignmentExpression,
							  condition: function condition(node) {
							    return node.operator === '=' && node.left.type === esotope_hammerhead_1.Syntax.Identifier && node.left.name === 'location';
							  },
							  run: function run(node, parent, key) {
							    if (!parent) return null;
							    var wrapWithSequence = key !== 'arguments' && key !== 'consequent' && key !== 'alternate' && ( // @ts-ignore
							    parent.type !== esotope_hammerhead_1.Syntax.SequenceExpression || parent.expressions[0] === node);
							    return node_builder_1.createLocationSetWrapper(node.left, node.right, wrapWithSequence);
							  }
							};
							exports.default = transformer;
							module.exports = exports.default;
						},
						"method-call.js": function (exports, module, require) {
							 // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var node_builder_1 = require("../node-builder");

							var esotope_hammerhead_1 = require("esotope-hammerhead");

							var instrumented_1 = require("../instrumented"); // Transform:
							// obj.method(args...); obj[method](args...); -->
							// _call$(obj, 'method', args...); _call$(obj, method, args...);


							var transformer = {
							  nodeReplacementRequireTransform: true,
							  nodeTypes: esotope_hammerhead_1.Syntax.CallExpression,
							  condition: function condition(node) {
							    var callee = node.callee;

							    if (callee.type === esotope_hammerhead_1.Syntax.MemberExpression) {
							      // Skip: super.meth()
							      if (callee.object.type === esotope_hammerhead_1.Syntax.Super) return false;
							      if (callee.computed) return callee.property.type === esotope_hammerhead_1.Syntax.Literal ? instrumented_1.shouldInstrumentMethod(callee.property.value) : true;
							      return callee.property.type === esotope_hammerhead_1.Syntax.Identifier && instrumented_1.shouldInstrumentMethod(callee.property.name);
							    }

							    return false;
							  },
							  run: function run(node) {
							    var callee = node.callee;
							    var method = callee.computed ? callee.property : node_builder_1.createSimpleLiteral(callee.property.name); // eslint-disable-line no-extra-parens

							    return node_builder_1.createMethodCallWrapper(callee.object, method, node.arguments);
							  }
							};
							exports.default = transformer;
							module.exports = exports.default;
						},
						"post-message-call-apply-bind.js": function (exports, module, require) {
							 // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var node_builder_1 = require("../node-builder");

							var esotope_hammerhead_1 = require("esotope-hammerhead");

							var replace_node_1 = __importDefault(require("./replace-node"));

							var INVOCATION_FUNC_NAME_RE = /^(call|apply|bind)$/; // Transform:
							// postMessage.call(ctx, script);
							// postMessage.apply(ctx, script);
							// postMessage.bind(...); -->
							// __get$PostMessage(postMessage).call(ctx, script);
							// __get$PostMessage(postMessage).apply(ctx, script);
							// __get$PostMessage(postMessage).bind(...);

							var transformer = {
							  nodeReplacementRequireTransform: false,
							  nodeTypes: esotope_hammerhead_1.Syntax.CallExpression,
							  condition: function condition(node) {
							    if (node.callee.type === esotope_hammerhead_1.Syntax.MemberExpression && node.callee.property.type === esotope_hammerhead_1.Syntax.Identifier && INVOCATION_FUNC_NAME_RE.test(node.callee.property.name)) {
							      // postMessage.<call|apply>(ctx, script, ...)
							      if (node.arguments.length < 2 && node.callee.property.name !== 'bind') return false;
							      var obj = node.callee.object; // obj.postMessage.<meth>(), obj[postMessage].<meth>(),

							      if (obj.type === esotope_hammerhead_1.Syntax.MemberExpression && (obj.property.type === esotope_hammerhead_1.Syntax.Identifier && obj.property.name || obj.property.type === esotope_hammerhead_1.Syntax.Literal && obj.property.value) === 'postMessage') return true; // postMessage.<meth>()

							      if (obj.type === esotope_hammerhead_1.Syntax.Identifier && obj.name === 'postMessage') return true;
							    }

							    return false;
							  },
							  run: function run(node) {
							    var callee = node.callee;
							    var getPostMessageNode = node_builder_1.createGetPostMessageMethodCall(callee.object);
							    replace_node_1.default(callee.object, getPostMessageNode, callee, 'object');
							    return null;
							  }
							};
							exports.default = transformer;
							module.exports = exports.default;
						},
						"post-message-get.js": function (exports, module, require) {
							 // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var instruction_1 = __importDefault(require("../instruction"));

							var node_builder_1 = require("../node-builder");

							var esotope_hammerhead_1 = require("esotope-hammerhead"); // Transform:
							// const foo = postMessage; foo = postMessage; { _postMessage: postMessage }; return postMessage;
							// -->
							// const foo = _get$PostMessage(postMessage); foo = _get$PostMessage(postMessage); { _postMessage: _get$PostMessage(postMessage) }; return _get$PostMessage(postMessage);


							var transformer = {
							  nodeReplacementRequireTransform: false,
							  nodeTypes: esotope_hammerhead_1.Syntax.Identifier,
							  condition: function condition(node, parent) {
							    if (node.name !== 'postMessage' || !parent) return false; // Skip: window.postMessage, postMessage.call

							    if (parent.type === esotope_hammerhead_1.Syntax.MemberExpression) return false; // Skip: class X { postMessage () {} }

							    if (parent.type === esotope_hammerhead_1.Syntax.MethodDefinition) return false; // Skip: class postMessage { x () {} }

							    if (parent.type === esotope_hammerhead_1.Syntax.ClassDeclaration) return false; // Skip: function postMessage () { ... }

							    if ((parent.type === esotope_hammerhead_1.Syntax.FunctionExpression || parent.type === esotope_hammerhead_1.Syntax.FunctionDeclaration) && parent.id === node) return false; // Skip: function (postMessage) { ... } || function func(postMessage) { ... } || postMessage => { ... }

							    if ((parent.type === esotope_hammerhead_1.Syntax.FunctionExpression || parent.type === esotope_hammerhead_1.Syntax.FunctionDeclaration || parent.type === esotope_hammerhead_1.Syntax.ArrowFunctionExpression) && parent.params.indexOf(node) !== -1) return false; // Skip: { postMessage: value }

							    if (parent.type === esotope_hammerhead_1.Syntax.Property && parent.key === node) return false; // Skip: postMessage = value || function x (postMessage = value) { ... }

							    if ((parent.type === esotope_hammerhead_1.Syntax.AssignmentExpression || parent.type === esotope_hammerhead_1.Syntax.AssignmentPattern) && parent.left === node) return false; // Skip: const postMessage = value;

							    if (parent.type === esotope_hammerhead_1.Syntax.VariableDeclarator && parent.id === node) return false; // Skip: postMessage++ || postMessage-- || ++postMessage || --postMessage

							    if (parent.type === esotope_hammerhead_1.Syntax.UpdateExpression && (parent.operator === '++' || parent.operator === '--')) return false; // Skip already transformed: __get$PostMessage(postMessage) || __call$(obj, postMessage, args...);

							    if (parent.type === esotope_hammerhead_1.Syntax.CallExpression && parent.callee.type === esotope_hammerhead_1.Syntax.Identifier && (parent.callee.name === instruction_1.default.getPostMessage || parent.callee.name === instruction_1.default.callMethod && parent.arguments[1] === node)) return false; // Skip: function x (...postMessage) {}

							    if (parent.type === esotope_hammerhead_1.Syntax.RestElement) return false; // Skip: export { postMessage } from "module";

							    if (parent.type === esotope_hammerhead_1.Syntax.ExportSpecifier) return false; // Skip: import { postMessage } from "module";

							    if (parent.type === esotope_hammerhead_1.Syntax.ImportSpecifier) return false;
							    return true;
							  },
							  run: node_builder_1.createGetPostMessageMethodCall
							};
							exports.default = transformer;
							module.exports = exports.default;
						},
						"property-get.js": function (exports, module, require) {
							 // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var node_builder_1 = require("../node-builder");

							var esotope_hammerhead_1 = require("esotope-hammerhead");

							var instrumented_1 = require("../instrumented"); // Transform:
							// obj.<wrappable-property> -->
							// __get$(obj, '<wrappable-property>')


							var transformer = {
							  nodeReplacementRequireTransform: true,
							  nodeTypes: esotope_hammerhead_1.Syntax.MemberExpression,
							  condition: function condition(node, parent) {
							    if (node.computed || !parent) return false;
							    if (node.property.type === esotope_hammerhead_1.Syntax.Identifier && !instrumented_1.shouldInstrumentProperty(node.property.name)) return false; // Skip: super.prop

							    if (node.object.type === esotope_hammerhead_1.Syntax.Super) return false; // Skip: object.prop = value

							    if (parent.type === esotope_hammerhead_1.Syntax.AssignmentExpression && parent.left === node) return false; // Skip: delete object.prop

							    if (parent.type === esotope_hammerhead_1.Syntax.UnaryExpression && parent.operator === 'delete') return false; // Skip: object.prop()

							    if (parent.type === esotope_hammerhead_1.Syntax.CallExpression && parent.callee === node) return false; // Skip: object.prop++ || object.prop-- || ++object.prop || --object.prop

							    if (parent.type === esotope_hammerhead_1.Syntax.UpdateExpression && (parent.operator === '++' || parent.operator === '--')) return false; // Skip: new (object.prop)() || new (object.prop)

							    if (parent.type === esotope_hammerhead_1.Syntax.NewExpression && parent.callee === node) return false; // Skip: for(object.prop in source)

							    if (parent.type === esotope_hammerhead_1.Syntax.ForInStatement && parent.left === node) return false;
							    return true;
							  },
							  // eslint-disable-next-line
							  run: function run(node) {
							    return node_builder_1.createPropertyGetWrapper(node.property.name, node.object);
							  }
							};
							exports.default = transformer;
							module.exports = exports.default;
						},
						"property-set.js": function (exports, module, require) {
							 // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var node_builder_1 = require("../node-builder");

							var esotope_hammerhead_1 = require("esotope-hammerhead");

							var instrumented_1 = require("../instrumented"); // Transform:
							// obj.<wrappable-property> = value -->
							// __set$(obj, '<wrappable-property>', value)


							var transformer = {
							  nodeReplacementRequireTransform: true,
							  nodeTypes: esotope_hammerhead_1.Syntax.AssignmentExpression,
							  condition: function condition(node) {
							    // super.prop = value
							    if (node.left.type === esotope_hammerhead_1.Syntax.MemberExpression && node.left.object.type === esotope_hammerhead_1.Syntax.Super) return false;
							    return node.operator === '=' && node.left.type === esotope_hammerhead_1.Syntax.MemberExpression && !node.left.computed && node.left.property.type === esotope_hammerhead_1.Syntax.Identifier && instrumented_1.shouldInstrumentProperty(node.left.property.name);
							  },
							  run: function run(node) {
							    var memberExpression = node.left;
							    var identifier = memberExpression.property;
							    return node_builder_1.createPropertySetWrapper(identifier.name, memberExpression.object, node.right);
							  }
							};
							exports.default = transformer;
							module.exports = exports.default;
						},
						"replace-node.js": function (exports, module, require) {
							

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							function replaceNode(node, newNode, parent, key) {
							  var oldNode = parent[key];

							  if (oldNode instanceof Array) {
							    if (node) oldNode[oldNode.indexOf(node)] = newNode;else oldNode.unshift(newNode);
							  } else {
							    // @ts-ignore
							    parent[key] = newNode;
							  }

							  if (node) {
							    newNode.originStart = newNode.start = node.start;
							    newNode.originEnd = newNode.end = node.end;
							  } else {
							    /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */
							    newNode.start = newNode.end = newNode.originStart = newNode.originEnd = oldNode[1] ? oldNode[1].start : parent.start + 1;
							  }
							}

							exports.default = replaceNode;
							module.exports = exports.default;
						},
						"static-import.js": function (exports, module, require) {
							 // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var node_builder_1 = require("../node-builder");

							var esotope_hammerhead_1 = require("esotope-hammerhead"); // Transform:
							// import something from 'url';   -->   import something from 'processed-url';
							// export * from 'url';   -->   export * from 'processed-url';
							// export { x as y } from 'url';   -->   export { x as y } from 'processed-url';


							var transformer = {
							  nodeReplacementRequireTransform: false,
							  nodeTypes: esotope_hammerhead_1.Syntax.Literal,
							  condition: function condition(node, parent) {
							    return !!parent && (parent.type === esotope_hammerhead_1.Syntax.ImportDeclaration || parent.type === esotope_hammerhead_1.Syntax.ExportAllDeclaration || parent.type === esotope_hammerhead_1.Syntax.ExportNamedDeclaration) && parent.source === node;
							  },
							  run: function run(node) {
							    return transformer.resolver ? node_builder_1.getProxyUrlLiteral(node, transformer.resolver) : null;
							  }
							};
							exports.default = transformer;
							module.exports = exports.default;
						},
						"temp-variables.js": function (exports, module, require) {
							

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var esotope_hammerhead_1 = require("esotope-hammerhead");

							var TEMP_VARIABLE_PREFIX = '_hh$temp';

							var TempVariables = /*#__PURE__*/function () {
							  function TempVariables() {
							    this._list = [];
							  }

							  TempVariables.resetCounter = function resetCounter() {
							    TempVariables._counter = 0;
							  };

							  TempVariables.generateName = function generateName(baseName, key, index) {
							    if (!baseName) return TEMP_VARIABLE_PREFIX + TempVariables._counter++;

							    if (key) {
							      if (key.type === esotope_hammerhead_1.Syntax.Identifier) return baseName + '$' + key.name;
							      if (key.type === esotope_hammerhead_1.Syntax.Literal) return baseName + '$' + key.value.toString().replace(/[^a-zA-Z0-9]/g, '');
							    }

							    return baseName + '$i' + index;
							  };

							  TempVariables.isHHTempVariable = function isHHTempVariable(name) {
							    return name.indexOf(TEMP_VARIABLE_PREFIX) === 0;
							  };

							  var _proto = TempVariables.prototype;

							  _proto.append = function append(name) {
							    this._list.push(name);
							  };

							  _proto.get = function get() {
							    return this._list;
							  };

							  return TempVariables;
							}();

							exports.default = TempVariables;
							TempVariables._counter = 0;
							module.exports = exports.default;
						},
						"window-eval-get.js": function (exports, module, require) {
							 // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var instruction_1 = __importDefault(require("../instruction"));

							var node_builder_1 = require("../node-builder");

							var esotope_hammerhead_1 = require("esotope-hammerhead"); // Transform:
							// const foo = window.eval; foo = window.eval; { _eval: window.eval }; return window.eval;
							// -->
							// const foo = _get$Eval(window.eval); foo = _get$Eval(window.eval); { _eval: _get$Eval(window.eval) }; return _get$Eval(window.eval);


							var transformer = {
							  nodeReplacementRequireTransform: false,
							  nodeTypes: esotope_hammerhead_1.Syntax.MemberExpression,
							  condition: function condition(node, parent) {
							    if (!parent) return false; // Skip: window.eval.field

							    if (parent.type === esotope_hammerhead_1.Syntax.MemberExpression && (parent.property === node || parent.object === node)) return false; // Skip: window.eval()

							    if (parent.type === esotope_hammerhead_1.Syntax.CallExpression && parent.callee === node) return false; // Skip: window.eval = 1, window["eval"] = 1

							    if (parent.type === esotope_hammerhead_1.Syntax.AssignmentExpression && parent.left === node) return false; // Skip already transformed: __get$Eval(window.eval), __get$Eval(window["eval"])

							    if (parent.type === esotope_hammerhead_1.Syntax.CallExpression && parent.callee.type === esotope_hammerhead_1.Syntax.Identifier && parent.callee.name === instruction_1.default.getEval) return false; // window.eval

							    if (node.property.type === esotope_hammerhead_1.Syntax.Identifier && node.property.name === 'eval') return true; // window['eval']

							    if (node.property.type === esotope_hammerhead_1.Syntax.Literal && node.property.value === 'eval') return true;
							    return false;
							  },
							  run: node_builder_1.createGetEvalMethodCall
							};
							exports.default = transformer;
							module.exports = exports.default;
						},
						"window-post-message-get.js": function (exports, module, require) {
							 // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
							  return mod && mod.__esModule ? mod : {
							    "default": mod
							  };
							};

							Object.defineProperty(exports, "__esModule", {
							  value: true
							});

							var instruction_1 = __importDefault(require("../instruction"));

							var node_builder_1 = require("../node-builder");

							var esotope_hammerhead_1 = require("esotope-hammerhead"); // Transform:
							// const foo = window.postMessage; foo = window.postMessage; { _postMessage: window.postMessage }; return window.postMessage;
							// -->
							// const foo = _get$PostMessage(window.postMessage); foo = _get$PostMessage(window.postMessage); { _postMessage: _get$PostMessage(window.postMessage) }; return _get$PostMessage(window.postMessage);


							var transformer = {
							  nodeReplacementRequireTransform: false,
							  nodeTypes: esotope_hammerhead_1.Syntax.MemberExpression,
							  condition: function condition(node, parent) {
							    if (!parent) return false; // Skip: window.postMessage.field

							    if (parent.type === esotope_hammerhead_1.Syntax.MemberExpression && (parent.property === node || parent.object === node)) return false; // Skip: window.postMessage()

							    if (parent.type === esotope_hammerhead_1.Syntax.CallExpression && parent.callee === node) return false; // Skip: window.postMessage = 1, window["postMessage"] = 1

							    if (parent.type === esotope_hammerhead_1.Syntax.AssignmentExpression && parent.left === node) return false; // Skip already transformed: __get$PostMessage(window.postMessage), __get$PostMessage(window["postMessage"])

							    if (parent.type === esotope_hammerhead_1.Syntax.CallExpression && parent.callee.type === esotope_hammerhead_1.Syntax.Identifier && parent.callee.name === instruction_1.default.getPostMessage) return false; // window.postMessage

							    if (node.property.type === esotope_hammerhead_1.Syntax.Identifier && node.property.name === 'postMessage') return true; // window['postMessage']

							    if (node.property.type === esotope_hammerhead_1.Syntax.Literal && node.property.value === 'postMessage') return true;
							    return false;
							  },
							  run: node_builder_1.createGetPostMessageMethodCall
							};
							exports.default = transformer;
							module.exports = exports.default;
						}
					}
				},
				"style.js": function (exports, module, require) {
					 // -------------------------------------------------------------
					// WARNING: this file is used by both the client and the server.
					// Do not use any browser or node-specific API!
					// -------------------------------------------------------------

					/* eslint hammerhead/proto-methods: 2 */

					var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
					  return mod && mod.__esModule ? mod : {
					    "default": mod
					  };
					};

					Object.defineProperty(exports, "__esModule", {
					  value: true
					});

					var regexp_escape_1 = __importDefault(require("../utils/regexp-escape"));

					var internal_attributes_1 = __importDefault(require("../processing/dom/internal-attributes"));

					var url_1 = require("../utils/url");

					var SOURCE_MAP_RE = /(?:\/\*\s*(?:#|@)\s*sourceMappingURL\s*=[\s\S]*?\*\/)|(?:\/\/[\t ]*(?:#|@)[\t ]*sourceMappingURL[\t ]*=.*)/ig;
					var CSS_URL_PROPERTY_VALUE_PATTERN = /(url\s*\(\s*)(?:(')([^\s']*)(')|(")([^\s"]*)(")|([^\s)]*))(\s*\))|(@import\s+)(?:(')([^\s']*)(')|(")([^\s"]*)("))/g;
					var STYLESHEET_PROCESSING_START_COMMENT = '/*hammerhead|stylesheet|start*/';
					var STYLESHEET_PROCESSING_END_COMMENT = '/*hammerhead|stylesheet|end*/';
					var HOVER_PSEUDO_CLASS_RE = /:\s*hover(\W)/gi;
					var PSEUDO_CLASS_RE = new RegExp("\\[" + internal_attributes_1.default.hoverPseudoClass + "\\](\\W)", 'ig');
					var IS_STYLE_SHEET_PROCESSED_RE = new RegExp("\\s*" + regexp_escape_1.default(STYLESHEET_PROCESSING_START_COMMENT), 'gi');
					var STYLESHEET_PROCESSING_COMMENTS_RE = new RegExp("\\s*" + regexp_escape_1.default(STYLESHEET_PROCESSING_START_COMMENT) + "\n?|" + ("\n?" + regexp_escape_1.default(STYLESHEET_PROCESSING_END_COMMENT) + "\\s*"), 'gi');

					var StyleProcessor = /*#__PURE__*/function () {
					  function StyleProcessor() {
					    this.STYLESHEET_PROCESSING_START_COMMENT = STYLESHEET_PROCESSING_START_COMMENT;
					    this.STYLESHEET_PROCESSING_END_COMMENT = STYLESHEET_PROCESSING_END_COMMENT;
					  }

					  var _proto = StyleProcessor.prototype;

					  _proto.process = function process(css, urlReplacer, shouldIncludeProcessingComments) {
					    if (!css || typeof css !== 'string' || shouldIncludeProcessingComments && IS_STYLE_SHEET_PROCESSED_RE.test(css)) return css; // NOTE: Replace the :hover pseudo-class.

					    css = css.replace(HOVER_PSEUDO_CLASS_RE, '[' + internal_attributes_1.default.hoverPseudoClass + ']$1'); // NOTE: Remove all 'source map' directives.

					    css = css.replace(SOURCE_MAP_RE, ''); // NOTE: Replace URLs in CSS rules with proxy URLs.

					    css = this._replaceStylsheetUrls(css, urlReplacer);
					    if (shouldIncludeProcessingComments) css = STYLESHEET_PROCESSING_START_COMMENT + "\n" + css + "\n" + STYLESHEET_PROCESSING_END_COMMENT;
					    return css;
					  };

					  _proto.cleanUp = function cleanUp(css, parseProxyUrl) {
					    if (typeof css !== 'string') return css;
					    css = css.replace(PSEUDO_CLASS_RE, ':hover$1').replace(STYLESHEET_PROCESSING_COMMENTS_RE, '');
					    return this._replaceStylsheetUrls(css, function (url) {
					      var parsedProxyUrl = parseProxyUrl(url);
					      return parsedProxyUrl ? parsedProxyUrl.destUrl : url;
					    });
					  };

					  _proto._replaceStylsheetUrls = function _replaceStylsheetUrls(css, processor) {
					    return css.replace(CSS_URL_PROPERTY_VALUE_PATTERN, function (match, prefix1, openQuote1, url1, closeQuote1, openQuote2, url2, closeQuote2, url3, postfix, prefix2, openQuote3, url4, closeQuote3, openQuote4, url5, closeQuote4) {
					      var prefix = prefix1 || prefix2;
					      var openQuote = openQuote1 || openQuote2 || openQuote3 || openQuote4 || '';
					      var url = url1 || url2 || url3 || url4 || url5;
					      var closeQuote = closeQuote1 || closeQuote2 || closeQuote3 || closeQuote4 || '';
					      postfix = postfix || '';
					      var processedUrl = url_1.isSpecialPage(url) ? url : processor(url);
					      return url ? prefix + openQuote + processedUrl + closeQuote + postfix : match;
					    });
					  };

					  return StyleProcessor;
					}();

					exports.default = new StyleProcessor();
					module.exports = exports.default;
				}
			},
			"proxy": {
				"service-routes.js": function (exports, module, require) {
					

					Object.defineProperty(exports, "__esModule", {
					  value: true
					});
					exports.default = {
					  hammerhead: '/hammerhead.js',
					  task: '/task.js',
					  iframeTask: '/iframe-task.js',
					  messaging: '/messaging',
					  transportWorker: '/transport-worker.js',
					  workerHammerhead: '/worker-hammerhead.js'
					};
					module.exports = exports.default;
				}
			},
			"request-pipeline": {
				"builtin-header-names.js": function (exports, module, require) {
					 // -------------------------------------------------------------
					// WARNING: this file is used by both the client and the server.
					// Do not use any browser or node-specific API!
					// -------------------------------------------------------------

					/* eslint hammerhead/proto-methods: 2 */

					Object.defineProperty(exports, "__esModule", {
					  value: true
					});
					exports.default = {
					  authorization: 'authorization',
					  wwwAuthenticate: 'www-authenticate',
					  proxyAuthorization: 'proxy-authorization',
					  proxyAuthenticate: 'proxy-authenticate',
					  host: 'host',
					  referer: 'referer',
					  origin: 'origin',
					  contentLength: 'content-length',
					  cookie: 'cookie',
					  setCookie: 'set-cookie',
					  ifModifiedSince: 'if-modified-since',
					  ifNoneMatch: 'if-none-match',
					  contentType: 'content-type',
					  location: 'location',
					  xFrameOptions: 'x-frame-options',
					  sourceMap: 'sourcemap',
					  referrerPolicy: 'referrer-policy',
					  refresh: 'refresh',
					  link: 'link',
					  cacheControl: 'cache-control',
					  pragma: 'pragma',
					  eTag: 'etag',
					  contentDisposition: 'content-disposition',
					  accept: 'accept',
					  contentEncoding: 'content-encoding',
					  expires: 'expires',
					  serviceWorkerAllowed: 'service-worker-allowed',
					  accessControlAllowOrigin: 'access-control-allow-origin',
					  accessControlAllowCredentials: 'access-control-allow-credentials',
					  contentSecurityPolicy: 'content-security-policy',
					  contentSecurityPolicyReportOnly: 'content-security-policy-report-only',
					  xContentSecurityPolicy: 'x-content-security-policy',
					  xContentSecurityPolicyReportOnly: 'x-content-security-policy-report-only',
					  xWebkitCsp: 'x-webkit-csp'
					};
					module.exports = exports.default;
				}
			},
			"session": {
				"command.js": function (exports, module, require) {
					 // -------------------------------------------------------------
					// WARNING: this file is used by both the client and the server.
					// Do not use any browser or node-specific API!
					// -------------------------------------------------------------

					/* eslint hammerhead/proto-methods: 2 */

					Object.defineProperty(exports, "__esModule", {
					  value: true
					});
					var ServiceCommands = {
					  getUploadedFiles: 'hammerhead|command|get-uploaded-files',
					  setCookie: 'hammerhead|command|set-cookie',
					  uploadFiles: 'hammerhead|command|upload-files'
					};
					exports.default = ServiceCommands;
					module.exports = exports.default;
				},
				"cookie-limit.js": function (exports, module, require) {
					 // -------------------------------------------------------------
					// WARNING: this file is used by both the client and the server.
					// Do not use any browser or node-specific API!
					// -------------------------------------------------------------

					/* eslint hammerhead/proto-methods: 2 */

					Object.defineProperty(exports, "__esModule", {
					  value: true
					}); // NOTE: At least 4096 bytes per cookie (as measured by the sum of the length of the cookie's name,
					// value, and attributes). Specification https://tools.ietf.org/html/rfc6265#page-27 (GH-767)

					var BYTES_PER_COOKIE_LIMIT = 4096;
					exports.default = BYTES_PER_COOKIE_LIMIT;
					module.exports = exports.default;
				}
			},
			"shadow-ui": {
				"class-name.js": function (exports, module, require) {
					 // -------------------------------------------------------------
					// WARNING: this file is used by both the client and the server.
					// Do not use any browser or node-specific API!
					// -------------------------------------------------------------

					/* eslint hammerhead/proto-methods: 2 */

					Object.defineProperty(exports, "__esModule", {
					  value: true
					});
					var POSTFIX = '-hammerhead-shadow-ui';
					exports.default = {
					  postfix: POSTFIX,
					  charset: 'charset' + POSTFIX,
					  script: 'script' + POSTFIX,
					  selfRemovingScript: 'self-removing-script' + POSTFIX,
					  uiStylesheet: 'ui-stylesheet' + POSTFIX
					};
					module.exports = exports.default;
				}
			},
			"utils": {
				"cookie.js": function (exports, module, require) {
					 // -------------------------------------------------------------
					// WARNING: this file is used by both the client and the server.
					// Do not use any browser or node-specific API!
					// -------------------------------------------------------------

					var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
					  return mod && mod.__esModule ? mod : {
					    "default": mod
					  };
					};

					Object.defineProperty(exports, "__esModule", {
					  value: true
					});

					var string_trim_1 = __importDefault(require("./string-trim"));

					var TIME_RADIX = 36;
					var CLEAR_COOKIE_VALUE_STR = '=;path=/;expires=Thu, 01 Jan 1970 00:00:01 GMT';
					var CLIENT_COOKIE_SYNC_KEY_FRAGMENT_COUNT = 7;
					var KEY_VALUE_REGEX = /(?:^([^=]+)=([\s\S]*))?/;
					exports.SYNCHRONIZATION_TYPE = {
					  server: 's',
					  client: 'c',
					  window: 'w'
					};
					var SYNCHRONIZATION_TYPE_RE = new RegExp("^[" + exports.SYNCHRONIZATION_TYPE.server + exports.SYNCHRONIZATION_TYPE.client + exports.SYNCHRONIZATION_TYPE.window + "]+");

					function isSameCookies(cookie1, cookie2) {
					  return cookie1.sid === cookie2.sid && cookie1.key === cookie2.key && cookie1.domain === cookie2.domain && cookie1.path === cookie2.path;
					}

					function sortByOutdatedAndActual(parsedCookies) {
					  var outdated = [];
					  var actual = [];

					  for (var current = 0; current < parsedCookies.length; current++) {
					    var other = current + 1;

					    for (; other < parsedCookies.length; other++) {
					      if (isSameCookies(parsedCookies[current], parsedCookies[other])) {
					        if (parsedCookies[current].lastAccessed > parsedCookies[other].lastAccessed) {
					          var temp = parsedCookies[current];
					          parsedCookies[current] = parsedCookies[other];
					          parsedCookies[other] = temp;
					        }

					        outdated.push(parsedCookies[current]);
					        break;
					      }
					    }

					    if (other === parsedCookies.length) actual.push(parsedCookies[current]);
					  }

					  return {
					    outdated: outdated,
					    actual: actual
					  };
					}

					function stringifySyncType(cookie) {
					  return (cookie.isServerSync ? exports.SYNCHRONIZATION_TYPE.server : '') + (cookie.isClientSync ? exports.SYNCHRONIZATION_TYPE.client : '') + (cookie.isWindowSync ? exports.SYNCHRONIZATION_TYPE.window : '');
					}

					function formatSyncCookieKey(cookie) {
					  var syncType = stringifySyncType(cookie);
					  var key = encodeURIComponent(cookie.key);
					  var domain = encodeURIComponent(cookie.domain);
					  var path = encodeURIComponent(cookie.path);
					  var expires = cookie.expires !== 'Infinity' ? cookie.expires.getTime().toString(TIME_RADIX) : '';
					  var lastAccessed = cookie.lastAccessed.getTime().toString(TIME_RADIX);
					  return syncType + "|" + cookie.sid + "|" + key + "|" + domain + "|" + path + "|" + expires + "|" + lastAccessed;
					}

					function parseClientSyncCookieStr(cookieStr) {
					  var cookies = cookieStr ? cookieStr.split(';') : '';
					  var parsedCookies = [];

					  for (var _i2 = 0; _i2 < cookies.length; _i2++) {
					    var cookie = cookies[_i2];
					    var parsedCookie = parseSyncCookie(string_trim_1.default(cookie));
					    if (parsedCookie) parsedCookies.push(parsedCookie);
					  }

					  return sortByOutdatedAndActual(parsedCookies);
					}

					exports.parseClientSyncCookieStr = parseClientSyncCookieStr;

					function prepareSyncCookieProperties(cookie) {
					  cookie.syncKey = cookie.syncKey || formatSyncCookieKey(cookie);
					  cookie.cookieStr = cookie.cookieStr || cookie.syncKey + "=" + cookie.value;
					}

					exports.prepareSyncCookieProperties = prepareSyncCookieProperties;

					function formatSyncCookie(cookie) {
					  if (cookie.cookieStr) return cookie.cookieStr + ";path=/";
					  return formatSyncCookieKey(cookie) + "=" + cookie.value + ";path=/";
					}

					exports.formatSyncCookie = formatSyncCookie;

					function parseSyncCookie(cookieStr) {
					  var _KEY_VALUE_REGEX$exec = KEY_VALUE_REGEX.exec(cookieStr),
					      key = _KEY_VALUE_REGEX$exec[1],
					      value = _KEY_VALUE_REGEX$exec[2];

					  var parsedKey = key !== void 0 && value !== void 0 && key.split('|');
					  if (parsedKey && parsedKey.length !== CLIENT_COOKIE_SYNC_KEY_FRAGMENT_COUNT) return null;
					  return {
					    isServerSync: parsedKey[0].indexOf(exports.SYNCHRONIZATION_TYPE.server) > -1,
					    isClientSync: parsedKey[0].indexOf(exports.SYNCHRONIZATION_TYPE.client) > -1,
					    isWindowSync: parsedKey[0].indexOf(exports.SYNCHRONIZATION_TYPE.window) > -1,
					    sid: parsedKey[1],
					    key: decodeURIComponent(parsedKey[2]),
					    domain: decodeURIComponent(parsedKey[3]),
					    path: decodeURIComponent(parsedKey[4]),
					    expires: parsedKey[5] ? new Date(parseInt(parsedKey[5], TIME_RADIX)) : 'Infinity',
					    lastAccessed: new Date(parseInt(parsedKey[6], TIME_RADIX)),
					    syncKey: key,
					    value: value,
					    cookieStr: cookieStr
					  };
					}

					exports.parseSyncCookie = parseSyncCookie;

					function changeSyncType(parsedCookie, flags) {
					  if ('server' in flags) parsedCookie.isServerSync = flags.server;
					  if ('client' in flags) parsedCookie.isClientSync = flags.client;
					  if ('window' in flags) parsedCookie.isWindowSync = flags.window;
					  var newSyncTypeStr = stringifySyncType(parsedCookie);
					  parsedCookie.syncKey = parsedCookie.syncKey.replace(SYNCHRONIZATION_TYPE_RE, newSyncTypeStr);
					  parsedCookie.cookieStr = parsedCookie.cookieStr.replace(SYNCHRONIZATION_TYPE_RE, newSyncTypeStr);
					}

					exports.changeSyncType = changeSyncType;

					function isOutdatedSyncCookie(currentCookie, newCookie) {
					  return newCookie.isServerSync === currentCookie.isServerSync && newCookie.sid === currentCookie.sid && newCookie.key === currentCookie.key && newCookie.domain === currentCookie.domain && newCookie.path === currentCookie.path && newCookie.lastAccessed > currentCookie.lastAccessed;
					}

					exports.isOutdatedSyncCookie = isOutdatedSyncCookie;

					function generateDeleteSyncCookieStr(cookie) {
					  return cookie.syncKey + CLEAR_COOKIE_VALUE_STR;
					}

					exports.generateDeleteSyncCookieStr = generateDeleteSyncCookieStr;
				},
				"get-bom.js": function (exports, module, require) {
					 // -------------------------------------------------------------
					// WARNING: this file is used by both the client and the server.
					// Do not use any browser or node-specific API!
					// -------------------------------------------------------------

					/* eslint hammerhead/proto-methods: 2 */

					Object.defineProperty(exports, "__esModule", {
					  value: true
					});
					var BOM_RE = /^(\xEF\xBB\xBF|\xFE\xFF|\xFF\xFE|\x00\x00\xFE\xFF|\xFF\xFE\x00\x00|\x2B\x2F\x76\x38|\x2B\x2F\x76\x39|\x2B\x2F\x76\x2B|\x2B\x2F\x76\x2F|\xF7\x64\x4C|\xDD\x73\x66\x73|\x0E\xFE\xFF|\xFB\xEE\x28|\x84\x31\x95\x33)/;

					function default_1(str) {
					  var match = str.match(BOM_RE);
					  return match ? match[0] : null;
					}

					exports.default = default_1;
					module.exports = exports.default;
				},
				"get-storage-key.js": function (exports, module, require) {
					

					Object.defineProperty(exports, "__esModule", {
					  value: true
					}); // -------------------------------------------------------------
					// WARNING: this file is used by both the client and the server.
					// Do not use any browser or node-specific API!
					// -------------------------------------------------------------

					/* eslint hammerhead/proto-methods: 2 */

					var STORAGE_WRAPPER_PREFIX = 'hammerhead|storage-wrapper|';

					function getStorageKey(sessionId, host) {
					  return STORAGE_WRAPPER_PREFIX + sessionId + '|' + host;
					}

					exports.default = getStorageKey;
					module.exports = exports.default;
				},
				"headers.js": function (exports, module, require) {
					 // -------------------------------------------------------------
					// WARNING: this file is used by both the client and the server.
					// Do not use any browser or node-specific API!
					// -------------------------------------------------------------

					var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
					  return mod && mod.__esModule ? mod : {
					    "default": mod
					  };
					};

					Object.defineProperty(exports, "__esModule", {
					  value: true
					});

					var builtin_header_names_1 = __importDefault(require("../request-pipeline/builtin-header-names"));

					var AUTHENTICATE_PREFIX = '~~~TestCafe added this prefix to hide the authentication dialog box~~~';
					var AUTHORIZATION_PREFIX = '~~~TestCafe added this prefix to control the authorization flow~~~';

					function addAuthenticatePrefix(value) {
					  return AUTHENTICATE_PREFIX + value;
					}

					exports.addAuthenticatePrefix = addAuthenticatePrefix;

					function hasAuthenticatePrefix(value) {
					  return value.indexOf(AUTHENTICATE_PREFIX) > -1;
					}

					exports.hasAuthenticatePrefix = hasAuthenticatePrefix;

					function removeAuthenticatePrefix(value) {
					  return value.replace(AUTHENTICATE_PREFIX, '');
					}

					exports.removeAuthenticatePrefix = removeAuthenticatePrefix;

					function isAuthenticateHeader(headerName) {
					  var headerNameStr = String(headerName).toLowerCase();
					  return headerNameStr === builtin_header_names_1.default.wwwAuthenticate || headerNameStr === builtin_header_names_1.default.proxyAuthenticate;
					}

					exports.isAuthenticateHeader = isAuthenticateHeader;

					function addAuthorizationPrefix(value) {
					  return AUTHORIZATION_PREFIX + value;
					}

					exports.addAuthorizationPrefix = addAuthorizationPrefix;

					function hasAuthorizationPrefix(value) {
					  return value.indexOf(AUTHORIZATION_PREFIX) > -1;
					}

					exports.hasAuthorizationPrefix = hasAuthorizationPrefix;

					function removeAuthorizationPrefix(value) {
					  return value.replace(AUTHORIZATION_PREFIX, '');
					}

					exports.removeAuthorizationPrefix = removeAuthorizationPrefix;

					function isAuthorizationHeader(headerName) {
					  var headerNameStr = String(headerName).toLowerCase();
					  return headerNameStr === builtin_header_names_1.default.authorization || headerNameStr === builtin_header_names_1.default.proxyAuthorization;
					}

					exports.isAuthorizationHeader = isAuthorizationHeader;
				},
				"is-keyword-target.js": function (exports, module, require) {
					

					Object.defineProperty(exports, "__esModule", {
					  value: true
					});
					var KEYWORD_TARGETS = ['_blank', '_self', '_parent', '_top'];

					function default_1(value) {
					  if (value === void 0) {
					    value = '';
					  }

					  value = value.toLowerCase();
					  return KEYWORD_TARGETS.indexOf(value) !== -1;
					}

					exports.default = default_1;
					module.exports = exports.default;
				},
				"regexp-escape.js": function (exports, module, require) {
					 // -------------------------------------------------------------
					// WARNING: this file is used by both the client and the server.
					// Do not use any browser or node-specific API!
					// -------------------------------------------------------------

					/* eslint hammerhead/proto-methods: 2 */

					Object.defineProperty(exports, "__esModule", {
					  value: true
					}); // NOTE: taken from https://github.com/benjamingr/RegExp.escape

					function default_1(str) {
					  return str.replace(/[\\^$*+?.()|[\]{}]/g, '\\$&');
					}

					exports.default = default_1;
					module.exports = exports.default;
				},
				"self-removing-scripts.js": function (exports, module, require) {
					 // -------------------------------------------------------------
					// WARNING: this file is used by both the client and the server.
					// Do not use any browser or node-specific API!
					// -------------------------------------------------------------

					var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
					  return mod && mod.__esModule ? mod : {
					    "default": mod
					  };
					};

					Object.defineProperty(exports, "__esModule", {
					  value: true
					});

					var class_name_1 = __importDefault(require("../shadow-ui/class-name"));

					var internal_properties_1 = __importDefault(require("../processing/dom/internal-properties"));

					function create(script) {
					  return ("\n        <script class=\"" + class_name_1.default.selfRemovingScript + "\">\n            (function () {\n                " + script + "\n\n                var currentScript = document.currentScript;\n                var scriptsLength;\n                var scripts;\n\n                /* NOTE: IE11 doesn't support the 'currentScript' property */\n                if (!currentScript) {\n                    var hammerhead;\n\n                    try {\n                        hammerhead = parent[\"" + internal_properties_1.default.hammerhead + "\"] || window[\"" + internal_properties_1.default.hammerhead + "\"];\n                    }\n                    catch (e) {\n                        hammerhead = window[\"" + internal_properties_1.default.hammerhead + "\"];\n                    }\n\n                    if (hammerhead) {\n                        try {\n                            scripts       = hammerhead.nativeMethods.documentScriptsGetter.call(document);\n                            scriptsLength = hammerhead.nativeMethods.htmlCollectionLengthGetter.call(scripts);\n                        }\n                        catch (e) {}\n                    }\n\n                    scripts       = scripts || document.scripts;\n                    scriptsLength = scriptsLength !== void 0 ? scriptsLength : scripts.length;\n                    currentScript = scripts[scriptsLength - 1];\n                }\n\n                currentScript.parentNode.removeChild(currentScript);\n            })();\n        </script>\n    ").replace(/\n\s*|\/\*[\S\s]*?\*\//g, '');
					}

					exports.default = {
					  iframeInit: create("\n        var parentHammerhead = null;\n    \n        if (!window[\"" + internal_properties_1.default.hammerhead + "\"])\n            Object.defineProperty(window, \"" + internal_properties_1.default.documentWasCleaned + "\", { value: true, configurable: true });\n    \n        try {\n            parentHammerhead = window.parent[\"" + internal_properties_1.default.hammerhead + "\"];\n        } catch(e) {}\n    \n        if (parentHammerhead)\n            parentHammerhead.sandbox.onIframeDocumentRecreated(window.frameElement);\n    "),
					  onWindowRecreation: create("\n        var hammerhead = window[\"" + internal_properties_1.default.hammerhead + "\"];\n        var sandbox    = hammerhead && hammerhead.sandbox;\n    \n        if (!sandbox) {\n            try {\n                sandbox = window.parent[\"" + internal_properties_1.default.hammerhead + "\"].get('./sandbox/backup').get(window);\n            } catch(e) {}\n        }\n    \n        if (sandbox) {\n            Object.defineProperty(window, \"" + internal_properties_1.default.documentWasCleaned + "\", { value: true, configurable: true });\n            \n            sandbox.node.mutation.onDocumentCleaned(window, document);\n    \n            /* NOTE: B234357 */\n            sandbox.node.processNodes(null, document);\n        }\n    "),
					  onBodyCreated: create("\n        if (window[\"" + internal_properties_1.default.hammerhead + "\"])\n            window[\"" + internal_properties_1.default.hammerhead + "\"].sandbox.node.raiseBodyCreatedEvent();\n    "),
					  onOriginFirstTitleLoaded: create("\n        window[\"" + internal_properties_1.default.hammerhead + "\"].sandbox.node.onOriginFirstTitleElementInHeadLoaded();\n    "),
					  restoreStorages: create("\n        window.localStorage.setItem(\"%s\", %s);\n        window.sessionStorage.setItem(\"%s\", %s);\n    ")
					};
					module.exports = exports.default;
				},
				"stack-processing.js": function (exports, module, require) {
					

					Object.defineProperty(exports, "__esModule", {
					  value: true
					});

					var url_1 = require("./url");

					var STACK_FRAME_REG_EXPS = [/^\s*at .*\((\S+)\)/, /^\s*at (\S+)/, /^.*@(\S+)/, /(.+)/ // Any string
					];
					var ROW_COLUMN_NUMBER_REG_EX = /:\d+:\d+$/;

					function getDestSource(source) {
					  var parsedProxiedUrl = url_1.parseProxyUrl(source);
					  return parsedProxiedUrl && parsedProxiedUrl.destUrl;
					}

					function replaceUrlWithProxied(str, source) {
					  source = source.replace(ROW_COLUMN_NUMBER_REG_EX, '');
					  var destUrl = getDestSource(source);
					  return destUrl ? str.replace(source, destUrl) : str;
					}

					function replaceProxiedUrlsInStack(stack) {
					  if (!stack) return stack;
					  var stackFrames = stack.split('\n');

					  for (var i = 0; i < stackFrames.length; i++) {
					    var stackFrame = stackFrames[i];

					    for (var _i2 = 0; _i2 < STACK_FRAME_REG_EXPS.length; _i2++) {
					      var stackFrameRegExp = STACK_FRAME_REG_EXPS[_i2];

					      if (stackFrameRegExp.test(stackFrame)) {
					        stackFrames[i] = stackFrame.replace(stackFrameRegExp, replaceUrlWithProxied);
					        break;
					      }
					    }
					  }

					  return stackFrames.join('\n');
					}

					exports.replaceProxiedUrlsInStack = replaceProxiedUrlsInStack;

					function getFirstDestUrl(stack) {
					  if (!stack) return null;
					  var stackFrames = stack.split('\n');

					  for (var _i4 = 0; _i4 < stackFrames.length; _i4++) {
					    var stackFrame = stackFrames[_i4];

					    for (var _i6 = 0; _i6 < STACK_FRAME_REG_EXPS.length; _i6++) {
					      var stackFrameRegExp = STACK_FRAME_REG_EXPS[_i6];
					      if (!stackFrameRegExp.test(stackFrame)) continue;
					      var destSource = null;
					      stackFrame.replace(stackFrameRegExp, function (str, source) {
					        source = source.replace(ROW_COLUMN_NUMBER_REG_EX, '');
					        destSource = getDestSource(source);
					        return str;
					      });
					      if (destSource) return destSource;
					    }
					  }

					  return null;
					}

					exports.getFirstDestUrl = getFirstDestUrl;
				},
				"string-trim.js": function (exports, module, require) {
					 // -------------------------------------------------------------
					// WARNING: this file is used by both the client and the server.
					// Do not use any browser or node-specific API!
					// -------------------------------------------------------------

					Object.defineProperty(exports, "__esModule", {
					  value: true
					}); // NOTE: Some websites override the String.prototype.trim method. When we use this function
					// in our scripts, we expect it to have the default behavior. Therefore, in order to protect
					// ourselves from spoofing, we must use our own implementation. Also, we cannot use the
					// String.prototype.trim method because on the client-side it is the same in the top window and
					// an iframe window. The client code may override this method in the top window before the
					// iframe is initialized, so that the iframe will lose access to the native method.

					function default_1(str) {
					  return typeof str === 'string' ? str.replace(/(^\s+)|(\s+$)/g, '') : str;
					}

					exports.default = default_1;
					module.exports = exports.default;
				},
				"url.js": function (exports, module, require) {
					 // -------------------------------------------------------------
					// WARNING: this file is used by both the client and the server.
					// Do not use any browser or node-specific API!
					// -------------------------------------------------------------

					var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
					  return mod && mod.__esModule ? mod : {
					    "default": mod
					  };
					};

					Object.defineProperty(exports, "__esModule", {
					  value: true
					});

					var string_trim_1 = __importDefault(require("./string-trim"));

					var PROTOCOL_RE = /^([\w-]+?:)(\/\/|[^\\/]|$)/;
					var LEADING_SLASHES_RE = /^(\/\/)/;
					var HOST_RE = /^(.*?)(\/|%|\?|;|#|$)/;
					var PORT_RE = /:([0-9]*)$/;
					var QUERY_AND_HASH_RE = /(\?.+|#[^#]*)$/;
					var PATH_AFTER_HOST_RE = /^\/([^/]+?)\/([\S\s]+)$/;
					var HTTP_RE = /^https?:/;
					var FILE_RE = /^file:/i;
					var SHORT_ORIGIN_RE = /^http(s)?:\/\//;
					var IS_SECURE_ORIGIN_RE = /^s\*/;
					exports.SUPPORTED_PROTOCOL_RE = /^(?:https?|file):/i;
					exports.HASH_RE = /^#/;
					exports.REQUEST_DESCRIPTOR_VALUES_SEPARATOR = '!';
					exports.REQUEST_DESCRIPTOR_SESSION_INFO_VALUES_SEPARATOR = '*';
					exports.TRAILING_SLASH_RE = /\/$/;
					exports.SPECIAL_BLANK_PAGE = 'about:blank';
					exports.SPECIAL_ERROR_PAGE = 'about:error';
					exports.SPECIAL_PAGES = [exports.SPECIAL_BLANK_PAGE, exports.SPECIAL_ERROR_PAGE];
					exports.HTTP_DEFAULT_PORT = '80';
					exports.HTTPS_DEFAULT_PORT = '443';
					var Credentials;

					(function (Credentials) {
					  Credentials[Credentials["include"] = 0] = "include";
					  Credentials[Credentials["sameOrigin"] = 1] = "sameOrigin";
					  Credentials[Credentials["omit"] = 2] = "omit";
					  Credentials[Credentials["unknown"] = 3] = "unknown";
					})(Credentials = exports.Credentials || (exports.Credentials = {}));

					var SPECIAL_PAGE_DEST_RESOURCE_INFO = {
					  protocol: 'about:',
					  host: '',
					  hostname: '',
					  port: '',
					  partAfterHost: ''
					};
					var RESOURCE_TYPES = [{
					  name: 'isIframe',
					  flag: 'i'
					}, {
					  name: 'isForm',
					  flag: 'f'
					}, {
					  name: 'isScript',
					  flag: 's'
					}, {
					  name: 'isEventSource',
					  flag: 'e'
					}, {
					  name: 'isHtmlImport',
					  flag: 'h'
					}, {
					  name: 'isWebSocket',
					  flag: 'w'
					}, {
					  name: 'isServiceWorker',
					  flag: 'c'
					}, {
					  name: 'isAjax',
					  flag: 'a'
					}];

					function parseResourceType(resourceType) {
					  var parsedResourceType = {};
					  if (!resourceType) return parsedResourceType;

					  for (var _i2 = 0; _i2 < RESOURCE_TYPES.length; _i2++) {
					    var _RESOURCE_TYPES$_i = RESOURCE_TYPES[_i2],
					        name = _RESOURCE_TYPES$_i.name,
					        flag = _RESOURCE_TYPES$_i.flag;
					    if (resourceType.indexOf(flag) > -1) parsedResourceType[name] = true;
					  }

					  return parsedResourceType;
					}

					exports.parseResourceType = parseResourceType;

					function getResourceTypeString(parsedResourceType) {
					  if (!parsedResourceType) return null;
					  var resourceType = '';

					  for (var _i4 = 0; _i4 < RESOURCE_TYPES.length; _i4++) {
					    var _RESOURCE_TYPES$_i2 = RESOURCE_TYPES[_i4],
					        name = _RESOURCE_TYPES$_i2.name,
					        flag = _RESOURCE_TYPES$_i2.flag;
					    if (parsedResourceType[name]) resourceType += flag;
					  }

					  return resourceType || null;
					}

					exports.getResourceTypeString = getResourceTypeString;

					function makeShortOrigin(origin) {
					  return origin === 'null' ? '' : origin.replace(SHORT_ORIGIN_RE, function (_, secure) {
					    return secure ? 's*' : '';
					  });
					}

					function restoreShortOrigin(origin) {
					  if (!origin) return 'null';
					  return IS_SECURE_ORIGIN_RE.test(origin) ? origin.replace(IS_SECURE_ORIGIN_RE, 'https://') : 'http://' + origin;
					}

					exports.restoreShortOrigin = restoreShortOrigin;

					function isSubDomain(domain, subDomain) {
					  domain = domain.replace(/^www./i, '');
					  subDomain = subDomain.replace(/^www./i, '');
					  if (domain === subDomain) return true;
					  var index = subDomain.lastIndexOf(domain);
					  return subDomain[index - 1] === '.' && subDomain.length === index + domain.length;
					}

					exports.isSubDomain = isSubDomain;

					function sameOriginCheck(location, checkedUrl) {
					  if (!checkedUrl) return true;
					  var parsedCheckedUrl = parseUrl(checkedUrl);
					  var isRelative = !parsedCheckedUrl.host;
					  if (isRelative) return true;
					  var parsedLocation = parseUrl(location);
					  var parsedProxyLocation = parseProxyUrl(location);
					  if (parsedCheckedUrl.host === parsedLocation.host && parsedCheckedUrl.protocol === parsedLocation.protocol) return true;
					  var parsedDestUrl = parsedProxyLocation ? parsedProxyLocation.destResourceInfo : parsedLocation;
					  if (!parsedDestUrl) return false;
					  var isSameProtocol = !parsedCheckedUrl.protocol || parsedCheckedUrl.protocol === parsedDestUrl.protocol;
					  var portsEq = !parsedDestUrl.port && !parsedCheckedUrl.port || parsedDestUrl.port && parsedDestUrl.port.toString() === parsedCheckedUrl.port;
					  return isSameProtocol && !!portsEq && parsedDestUrl.hostname === parsedCheckedUrl.hostname;
					}

					exports.sameOriginCheck = sameOriginCheck; // NOTE: Convert the destination protocol and hostname to the lower case. (GH-1)

					function convertHostToLowerCase(url) {
					  var parsedUrl = parseUrl(url);
					  parsedUrl.protocol = parsedUrl.protocol && parsedUrl.protocol.toLowerCase();
					  parsedUrl.host = parsedUrl.host && parsedUrl.host.toLowerCase();
					  return formatUrl(parsedUrl);
					}

					function getURLString(url) {
					  // TODO: fix it
					  // eslint-disable-next-line no-undef
					  if (url === null && /iPad|iPhone/i.test(window.navigator.userAgent)) return '';
					  return String(url).replace(/\n|\t/g, '');
					}

					exports.getURLString = getURLString;

					function getProxyUrl(url, opts) {
					  var sessionInfo = [opts.sessionId];
					  if (opts.windowId) sessionInfo.push(opts.windowId);
					  var params = [sessionInfo.join(exports.REQUEST_DESCRIPTOR_SESSION_INFO_VALUES_SEPARATOR)];
					  if (opts.resourceType) params.push(opts.resourceType);
					  if (opts.charset) params.push(opts.charset.toLowerCase());
					  if (typeof opts.credentials === 'number') params.push(opts.credentials.toString());
					  if (opts.reqOrigin) params.push(encodeURIComponent(makeShortOrigin(opts.reqOrigin)));
					  var descriptor = params.join(exports.REQUEST_DESCRIPTOR_VALUES_SEPARATOR);
					  var proxyProtocol = opts.proxyProtocol || 'http:';
					  return proxyProtocol + "//" + opts.proxyHostname + ":" + opts.proxyPort + "/" + descriptor + "/" + convertHostToLowerCase(url);
					}

					exports.getProxyUrl = getProxyUrl;

					function getDomain(parsed) {
					  if (parsed.protocol === 'file:') return 'null';
					  return formatUrl({
					    protocol: parsed.protocol,
					    host: parsed.host,
					    hostname: parsed.hostname,
					    port: String(parsed.port || '')
					  });
					}

					exports.getDomain = getDomain;

					function parseRequestDescriptor(desc) {
					  var _desc$split = desc.split(exports.REQUEST_DESCRIPTOR_VALUES_SEPARATOR),
					      sessionInfo = _desc$split[0],
					      resourceType = _desc$split[1],
					      resourceData = _desc$split.slice(2);

					  if (!sessionInfo) return null;

					  var _sessionInfo$split = sessionInfo.split(exports.REQUEST_DESCRIPTOR_SESSION_INFO_VALUES_SEPARATOR),
					      sessionId = _sessionInfo$split[0],
					      windowId = _sessionInfo$split[1];

					  var parsedDesc = {
					    sessionId: sessionId,
					    resourceType: resourceType || null
					  };
					  if (windowId) parsedDesc.windowId = windowId;

					  if (resourceType && resourceData.length) {
					    var parsedResourceType = parseResourceType(resourceType);
					    if (parsedResourceType.isScript || parsedResourceType.isServiceWorker) parsedDesc.charset = resourceData[0];else if (parsedResourceType.isWebSocket) parsedDesc.reqOrigin = decodeURIComponent(restoreShortOrigin(resourceData[0]));else if (parsedResourceType.isAjax) {
					      parsedDesc.credentials = parseInt(resourceData[0]);
					      if (resourceData.length === 2) parsedDesc.reqOrigin = decodeURIComponent(restoreShortOrigin(resourceData[1]));
					    }
					  }

					  return parsedDesc;
					}

					function parseProxyUrl(proxyUrl) {
					  // TODO: Remove it.
					  var parsedUrl = parseUrl(proxyUrl);
					  if (!parsedUrl.partAfterHost) return null;
					  var match = parsedUrl.partAfterHost.match(PATH_AFTER_HOST_RE);
					  if (!match) return null;
					  var parsedDesc = parseRequestDescriptor(match[1]); // NOTE: We should have, at least, the job uid and the owner token.

					  if (!parsedDesc) return null;
					  var destUrl = match[2]; // Browser can redirect to a special page with hash (GH-1671)

					  var destUrlWithoutHash = destUrl.replace(/#[\S\s]*$/, '');
					  if (!isSpecialPage(destUrlWithoutHash) && !exports.SUPPORTED_PROTOCOL_RE.test(destUrl)) return null;
					  var destResourceInfo = null;
					  if (isSpecialPage(destUrlWithoutHash)) destResourceInfo = SPECIAL_PAGE_DEST_RESOURCE_INFO;else {
					    destUrl = omitDefaultPort(destUrl);
					    destResourceInfo = parseUrl(destUrl);
					  }
					  return {
					    destUrl: destUrl,
					    destResourceInfo: destResourceInfo,
					    partAfterHost: parsedUrl.partAfterHost,
					    proxy: {
					      hostname: parsedUrl.hostname,
					      port: parsedUrl.port
					    },
					    sessionId: parsedDesc.sessionId,
					    resourceType: parsedDesc.resourceType,
					    charset: parsedDesc.charset,
					    reqOrigin: parsedDesc.reqOrigin,
					    windowId: parsedDesc.windowId,
					    credentials: parsedDesc.credentials
					  };
					}

					exports.parseProxyUrl = parseProxyUrl;

					function getPathname(path) {
					  return path.replace(QUERY_AND_HASH_RE, '');
					}

					exports.getPathname = getPathname;

					function parseUrl(url) {
					  var parsed = {};
					  url = processSpecialChars(url);
					  if (!url) return parsed;
					  url = string_trim_1.default(url); // Protocol

					  var hasImplicitProtocol = false;
					  var remainder = url.replace(PROTOCOL_RE, function (_str, protocol, strAfterProtocol) {
					    parsed.protocol = protocol;
					    return strAfterProtocol;
					  }).replace(LEADING_SLASHES_RE, function () {
					    hasImplicitProtocol = true;
					    return '';
					  }); // NOTE: the URL is relative.

					  if (!parsed.protocol && !hasImplicitProtocol) {
					    parsed.partAfterHost = url;
					    return parsed;
					  } // Host


					  parsed.partAfterHost = remainder.replace(HOST_RE, function (_str, host, restPartSeparator) {
					    parsed.host = host;
					    parsed.port = '';
					    return restPartSeparator;
					  });

					  if (typeof parsed.host === 'string') {
					    var authHostArr = parsed.host.split('@');

					    if (authHostArr.length === 2) {
					      parsed.auth = authHostArr[0];
					      parsed.host = authHostArr[1];
					    }
					  }

					  parsed.hostname = parsed.host ? parsed.host.replace(PORT_RE, function (_str, port) {
					    parsed.port = port;
					    return '';
					  }) : '';
					  return parsed;
					}

					exports.parseUrl = parseUrl;

					function isSupportedProtocol(url) {
					  url = string_trim_1.default(url || '');
					  var isHash = exports.HASH_RE.test(url);
					  if (isHash) return false;
					  var protocol = url.match(PROTOCOL_RE);
					  if (!protocol) return true;
					  return exports.SUPPORTED_PROTOCOL_RE.test(protocol[0]);
					}

					exports.isSupportedProtocol = isSupportedProtocol;

					function resolveUrlAsDest(url, getProxyUrlMeth) {
					  getProxyUrlMeth = getProxyUrlMeth || getProxyUrl;

					  if (isSupportedProtocol(url)) {
					    var proxyUrl = getProxyUrlMeth(url);
					    var parsedProxyUrl = parseProxyUrl(proxyUrl);
					    return parsedProxyUrl ? formatUrl(parsedProxyUrl.destResourceInfo) : url;
					  }

					  return url;
					}

					exports.resolveUrlAsDest = resolveUrlAsDest;

					function formatUrl(parsedUrl) {
					  // NOTE: the URL is relative.
					  if (parsedUrl.protocol !== 'file:' && !parsedUrl.host && (!parsedUrl.hostname || !parsedUrl.port)) return parsedUrl.partAfterHost;
					  var url = parsedUrl.protocol || '';
					  if (parsedUrl.protocol !== 'about:') url += '//';
					  if (parsedUrl.auth) url += parsedUrl.auth + '@';
					  if (parsedUrl.host) url += parsedUrl.host;else {
					    url += parsedUrl.hostname;
					    if (parsedUrl.port) url += ':' + parsedUrl.port;
					  }
					  if (parsedUrl.partAfterHost) url += parsedUrl.partAfterHost;
					  return url;
					}

					exports.formatUrl = formatUrl;

					function correctMultipleSlashes(url, pageProtocol) {
					  if (pageProtocol === void 0) {
					    pageProtocol = '';
					  }

					  // NOTE: Remove unnecessary slashes from the beginning of the url and after scheme.
					  // For example:
					  // "//////example.com" -> "//example.com" (scheme-less HTTP(S) URL)
					  // "////home/testcafe/documents" -> "///home/testcafe/documents" (scheme-less unix file URL)
					  // "http:///example.com" -> "http://example.com"
					  //
					  // And add missing slashes after the file scheme.
					  // "file://C:/document.txt" -> "file:///C:/document.txt"
					  if (url.match(FILE_RE) || pageProtocol.match(FILE_RE)) {
					    return url.replace(/^(file:)?\/+(\/\/\/.*$)/i, '$1$2').replace(/^(file:)?\/*([A-Za-z]):/i, '$1///$2:');
					  }

					  return url.replace(/^(https?:)?\/+(\/\/.*$)/i, '$1$2');
					}

					exports.correctMultipleSlashes = correctMultipleSlashes;

					function processSpecialChars(url) {
					  return correctMultipleSlashes(getURLString(url));
					}

					exports.processSpecialChars = processSpecialChars;

					function ensureTrailingSlash(srcUrl, processedUrl) {
					  if (!isValidUrl(processedUrl)) return processedUrl;
					  var srcUrlEndsWithTrailingSlash = exports.TRAILING_SLASH_RE.test(srcUrl);
					  var processedUrlEndsWithTrailingSlash = exports.TRAILING_SLASH_RE.test(processedUrl);
					  if (srcUrlEndsWithTrailingSlash && !processedUrlEndsWithTrailingSlash) processedUrl += '/';else if (srcUrl && !srcUrlEndsWithTrailingSlash && processedUrlEndsWithTrailingSlash) processedUrl = processedUrl.replace(exports.TRAILING_SLASH_RE, '');
					  return processedUrl;
					}

					exports.ensureTrailingSlash = ensureTrailingSlash;

					function isSpecialPage(url) {
					  return exports.SPECIAL_PAGES.indexOf(url) !== -1;
					}

					exports.isSpecialPage = isSpecialPage;

					function isRelativeUrl(url) {
					  var parsedUrl = parseUrl(url);
					  return parsedUrl.protocol !== 'file:' && !parsedUrl.host;
					}

					exports.isRelativeUrl = isRelativeUrl;

					function isValidPort(port) {
					  var parsedPort = parseInt(port, 10);
					  return parsedPort > 0 && parsedPort <= 65535;
					}

					function isValidUrl(url) {
					  var parsedUrl = parseUrl(url);
					  return parsedUrl.protocol === 'file:' || !!parsedUrl.hostname && (!parsedUrl.port || isValidPort(parsedUrl.port));
					}

					exports.isValidUrl = isValidUrl;

					function ensureOriginTrailingSlash(url) {
					  // NOTE: If you request an url containing only port, host and protocol
					  // then browser adds the trailing slash itself.
					  var parsedUrl = parseUrl(url);
					  if (!parsedUrl.partAfterHost && HTTP_RE.test(parsedUrl.protocol)) return url + '/';
					  return url;
					}

					exports.ensureOriginTrailingSlash = ensureOriginTrailingSlash;

					function omitDefaultPort(url) {
					  // NOTE: If you request an url containing default port
					  // then browser remove this one itself.
					  var parsedUrl = parseUrl(url);
					  var hasDefaultPort = parsedUrl.protocol === 'https:' && parsedUrl.port === exports.HTTPS_DEFAULT_PORT || parsedUrl.protocol === 'http:' && parsedUrl.port === exports.HTTP_DEFAULT_PORT;

					  if (hasDefaultPort) {
					    parsedUrl.host = parsedUrl.hostname;
					    parsedUrl.port = '';
					    return formatUrl(parsedUrl);
					  }

					  return url;
					}

					exports.omitDefaultPort = omitDefaultPort;

					function prepareUrl(url) {
					  url = omitDefaultPort(url);
					  url = ensureOriginTrailingSlash(url);
					  return url;
					}

					exports.prepareUrl = prepareUrl;

					function updateScriptImportUrls(cachedScript, serverInfo, sessionId, windowId) {
					  var regExp = new RegExp('(' + serverInfo.protocol + '//' + serverInfo.hostname + ':(?:' + serverInfo.port + '|' + serverInfo.crossDomainPort + ')/)[^/' + exports.REQUEST_DESCRIPTOR_VALUES_SEPARATOR + ']+', 'g');
					  var pattern = '$1' + sessionId + (windowId ? exports.REQUEST_DESCRIPTOR_SESSION_INFO_VALUES_SEPARATOR + windowId : '');
					  return cachedScript.replace(regExp, pattern);
					}

					exports.updateScriptImportUrls = updateScriptImportUrls;
				}
			}
		}
	}
})("testcafe-hammerhead/src/client/index");

})();
